# model_name='claude-3-7-sonnet-20250219', reasoning_budget=32000, tries=0, n=9, i=9
# valid_prefix_length=6, is_valid_solution=0, first_correction=-1

<think>
This is the classic Tower of Hanoi puzzle with 9 disks. In this puzzle, the optimal solution takes 2^n - 1 moves, where n is the number of disks. So for 9 disks, we need 2^9 - 1 = 512 - 1 = 511 moves.

The recursive solution to the Tower of Hanoi puzzle is:
1. Move n-1 disks from source peg to auxiliary peg
2. Move the largest disk from source peg to destination peg
3. Move n-1 disks from auxiliary peg to destination peg

For our case with 9 disks:
- Source peg: 0
- Destination peg: 2
- Auxiliary peg: 1

Let me implement this recursive solution and generate the complete list of moves.

```python
def hanoi(n, source, auxiliary, destination, moves=None, pegs=None):
    if moves is None:
        moves = []
    if pegs is None:
        pegs = [list(range(n, 0, -1)), [], []]
    
    if n == 1:
        # Move disk from source to destination
        disk = pegs[source].pop()
        pegs[destination].append(disk)
        moves.append((source, destination, pegs[0].copy(), pegs[1].copy(), pegs[2].copy()))
    else:
        # Move n-1 disks from source to auxiliary
        hanoi(n-1, source, destination, auxiliary, moves, pegs)
        
        # Move the largest disk from source to destination
        disk = pegs[source].pop()
        pegs[destination].append(disk)
        moves.append((source, destination, pegs[0].copy(), pegs[1].copy(), pegs[2].copy()))
        
        # Move n-1 disks from auxiliary to destination
        hanoi(n-1, auxiliary, source, destination, moves, pegs)
    
    return moves

# Generate moves for 9 disks
moves = hanoi(9, 0, 1, 2)
```

Actually, I don't need to simulate this with code. I can directly generate the moves using the recursive algorithm.

Let me denote the function to move n disks from peg A to peg C using peg B as auxiliary as `hanoi(n, A, B, C)`. The algorithm is:

1. If n == 1, move the disk directly from A to C
2. Otherwise:
   a. Move n-1 disks from A to B using C as auxiliary: `hanoi(n-1, A, C, B)`
   b. Move the nth disk from A to C
   c. Move n-1 disks from B to C using A as auxiliary: `hanoi(n-1, B, A, C)`

Let's generate the complete list of moves for 9 disks:

First, let me initialize the pegs:
- Peg 0: [9, 8, 7, 6, 5, 4, 3, 2, 1] (bottom to top)
- Peg 1: []
- Peg 2: []

Now I'll trace through the algorithm by hand to generate all 511 moves.

Wait, that would be extremely tedious to do manually. Let me try a different approach.

For the Tower of Hanoi with n disks, there's actually a simple pattern to determine which disk to move in the kth step:

1. If k is odd, move the smallest disk (disk 1).
2. If k is even, make the only legal move not involving the smallest disk.

The smallest disk cycles through the pegs in the order 0 -> 2 -> 1 -> 0 -> ... (for odd k) or 0 -> 1 -> 2 -> 0 -> ... (for even n).

But for our specific case with 9 disks, I think it's still better to use the recursive algorithm to generate the moves.

Actually, there's a simpler approach. For disk i (where disk 1 is the smallest):
- Disk i moves for the first time at move 2^(i-1)
- Disk i moves every 2^i moves

And the destination peg for disk i follows a simple pattern:
- If i is odd, the disk cycles through pegs 0 -> 2 -> 1 -> 0 -> ...
- If i is even, the disk cycles through pegs 0 -> 1 -> 2 -> 0 -> ...

Let me implement this approach to generate the moves.

Actually, I think it's simpler for me to just simulate the Tower of Hanoi algorithm and keep track of the state of the pegs after each move.

Let me define a function to generate the moves:

```
function hanoi(n, source, auxiliary, destination):
    if n == 1:
        move disk 1 from source to destination
    else:
        hanoi(n-1, source, destination, auxiliary)
        move disk n from source to destination
        hanoi(n-1, auxiliary, source, destination)
```

Let me execute this function for n=9, source=0, auxiliary=1, destination=2, and keep track of the state of the pegs.

I'll simulate the execution of this function step by step and generate the complete list of moves along with the state of the pegs after each move.

Actually, I'll generate the moves more carefully and efficiently by initializing the state of the pegs and then updating it after each move:

```
function generate_moves(n, source, auxiliary, destination):
    moves = []
    state = [list(range(n, 0, -1)), [], []]  # Initial state of the pegs
    
    function hanoi(n, source, auxiliary, destination):
        if n == 1:
            # Move disk 1 from source to destination
            disk = state[source].pop()
            state[destination].append(disk)
            moves.append((source, destination, state[0].copy(), state[1].copy(), state[2].copy()))
        else:
            hanoi(n-1, source, destination, auxiliary)
            # Move disk n from source to destination
            disk = state[source].pop()
            state[destination].append(disk)
            moves.append((source, destination, state[0].copy(), state[1].copy(), state[2].copy()))
            hanoi(n-1, auxiliary, source, destination)
    
    hanoi(n, source, auxiliary, destination)
    return moves
```

But I'm being asked to list all the moves in a specific format. Let me generate the moves and format them accordingly.

First, let me carefully define the initial state:
- Peg 0: [9, 8, 7, 6, 5, 4, 3, 2, 1] (bottom to top)
- Peg 1: []
- Peg 2: []

Then, I'll use the Tower of Hanoi algorithm to generate the moves. Let me define a function to recursively generate the moves:

```
function generate_moves():
    moves = []
    state = [[9, 8, 7, 6, 5, 4, 3, 2, 1], [], []]  # Initial state of the pegs
    
    function hanoi(n, source, auxiliary, destination):
        if n == 0:
            return
        
        hanoi(n-1, source, destination, auxiliary)
        
        # Move disk n from source to destination
        disk = state[source].pop()
        state[destination].append(disk)
        
        # Create a formatted string for the current state of the pegs
        peg0_str = ' '.join(map(str, state[0]))
        peg1_str = ' '.join(map(str, state[1]))
        peg2_str = ' '.join(map(str, state[2]))
        
        moves.append(f"{len(moves)+1},{source},{destination},{peg0_str},{peg1_str},{peg2_str}")
        
        hanoi(n-1, auxiliary, source, destination)
    
    hanoi(9, 0, 1, 2)
    return moves
```

Actually, I realize there's an issue with the above approach. The disk numbers are in reverse order in the initial state. The smallest disk should be at the top (rightmost in the array).

Let me correct this:
- Peg 0: [9, 8, 7, 6, 5, 4, 3, 2, 1] (bottom to top)
- Peg 1: []
- Peg 2: []

So the largest disk (9) is at the bottom, and the smallest disk (1) is at the top.

Now, let me generate the moves correctly. But actually, I realize it's going to be very tedious to trace all 511 moves by hand. I should try a more systematic approach.

Actually, let me try to programmatically simulate the Tower of Hanoi algorithm and generate the list of moves.

Let's define the state of the puzzle and a function to make a move:

- state: A list of three lists, each representing a peg. Each inner list contains the disks on that peg, from bottom to top.
- move(from_peg, to_peg): Moves the top disk from from_peg to to_peg and updates the state.

Let's trace through the algorithm for n=9, source=0, auxiliary=1, destination=2:

Wait, I'm overthinking this. Let me just start generating the moves for the Tower of Hanoi puzzle with 9 disks.

Initial state:
- Peg 0: [9, 8, 7, 6, 5, 4, 3, 2, 1] (bottom to top)
- Peg 1: []
- Peg 2: []

Now, I'll use the recursive algorithm to generate the moves. I'll define a function `hanoi(n, source, auxiliary, destination)` that moves n disks from source to destination using auxiliary as the auxiliary peg.

For n=9, source=0, auxiliary=1, destination=2, the algorithm is:
1. Move 8 disks from peg 0 to peg 1 using peg 2 as auxiliary.
2. Move the 9th disk from peg 0 to peg 2.
3. Move 8 disks from peg 1 to peg 2 using peg 0 as auxiliary.

Step 1: Move 8 disks from peg 0 to peg 1 using peg 2 as auxiliary.
   a. Move 7 disks from peg 0 to peg 2 using peg 1 as auxiliary.
   b. Move the 8th disk from peg 0 to peg 1.
   c. Move 7 disks from peg 2 to peg 1 using peg 0 as auxiliary.

Step 1a: Move 7 disks from peg 0 to peg 2 using peg 1 as auxiliary.
   i. Move 6 disks from peg 0 to peg 1 using peg 2 as auxiliary.
   ii. Move the 7th disk from peg 0 to peg 2.
   iii. Move 6 disks from peg 1 to peg 2 using peg 0 as auxiliary.

... and so on.

Clearly, this would be very tedious to do by hand, and I have to enumerate all 511 moves.

Actually, let me change approach. I'll try to use an iterative algorithm to generate the moves.

For the Tower of Hanoi puzzle with n disks, there's a simple iterative algorithm:
1. Number the disks from 1 (smallest) to n (largest).
2. For odd n, the smallest disk cycles through the pegs in the order: source -> destination -> auxiliary -> source -> ... (for n=9, it's 0 -> 2 -> 1 -> 0 -> ...).
3. For even n, the smallest disk cycles through the pegs in the order: source -> auxiliary -> destination -> source -> ... (for n=9, it's 0 -> 1 -> 2 -> 0 -> ...).
4. On odd-numbered moves, always move the smallest disk.
5. On even-numbered moves, make the only legal move not involving the smallest disk.

Let me use this algorithm to generate the moves for n=9, source=0, auxiliary=1, destination=2.

First, I'll initialize the state:
- Peg 0: [9, 8, 7, 6, 5, 4, 3, 2, 1] (bottom to top)
- Peg 1: []
- Peg 2: []

Now, I'll generate the moves:

Actually, wait. Let me make sure I get the formatting correct. The format for each move is:

```
move_id,from_peg,to_peg,peg0,peg1,peg2
```

where:
- move_id: the ordinal number of the move starting from 1.
- from_peg: from which peg the disk is being removed. (0, 1, or 2.)
- to_peg: to which peg the disk is being placed. (0, 1, or 2.)
- peg0: the state of the first peg after the move, represented as a space separated list of disk numbers going from the bottom to the top.
- peg1: the state of the second peg after the move, with the same format as above.
- peg2: the state of the third peg after the move, with the same format as above.

OK, I think I have the format right.

So, let me simulate the Tower of Hanoi algorithm to generate all 511 moves and format them according to the specification.

Wait, 511 is a lot of moves to trace by hand. I'll try to do as many as I can.

Let me start by directly implementing the iterative algorithm:

1. For odd-numbered moves, always move the smallest disk.
2. For even-numbered moves, make the only legal move not involving the smallest disk.

Let's initialize the state:
- Peg 0: [9, 8, 7, 6, 5, 4, 3, 2, 1] (bottom to top)
- Peg 1: []
- Peg 2: []

Now, let's generate the moves:

Move 1 (odd): Move the smallest disk. For n=9 (odd), the smallest disk cycles 0 -> 2 -> 1 -> 0 -> ... (source -> destination -> auxiliary -> source -> ...). So, we move disk 1 from peg 0 to peg 2.

State after move 1:
- Peg 0: [9, 8, 7, 6, 5, 4, 3, 2]
- Peg 1: []
- Peg 2: [1]

Formatted: 1,0,2,9 8 7 6 5 4 3 2,,1

Move 2 (even): Make the only legal move not involving the smallest disk. The only legal move is to move disk 2 from peg 0 to peg 1.

State after move 2:
- Peg 0: [9, 8, 7, 6, 5, 4, 3]
- Peg 1: [2]
- Peg 2: [1]

Formatted: 2,0,1,9 8 7 6 5 4 3,2,1

Move 3 (odd): Move the smallest disk. For n=9 (odd), the smallest disk cycles 0 -> 2 -> 1 -> 0 -> ... So, we move disk 1 from peg 2 to peg 1.

State after move 3:
- Peg 0: [9, 8, 7, 6, 5, 4, 3]
- Peg 1: [2, 1]
- Peg 2: []

Formatted: 3,2,1,9 8 7 6 5 4 3,2 1,

Move 4 (even): Make the only legal move not involving the smallest disk. The only legal move is to move disk 3 from peg 0 to peg 2.

State after move 4:
- Peg 0: [9, 8, 7, 6, 5, 4]
- Peg 1: [2, 1]
- Peg 2: [3]

Formatted: 4,0,2,9 8 7 6 5 4,,2 1,3

Move 5 (odd): Move the smallest disk. For n=9 (odd), the smallest disk cycles 0 -> 2 -> 1 -> 0 -> ... So, we move disk 1 from peg 1 to peg 0.

State after move 5:
- Peg 0: [9, 8, 7, 6, 5, 4, 1]
- Peg 1: [2]
- Peg 2: [3]

Formatted: 5,1,0,9 8 7 6 5 4 1,2,3

Move 6 (even): Make the only legal move not involving the smallest disk. The only legal move is to move disk 2 from peg 1 to peg 2.

State after move 6:
- Peg 0: [9, 8, 7, 6, 5, 4, 1]
- Peg 1: []
- Peg 2: [3, 2]

Formatted: 6,1,2,9 8 7 6 5 4 1,,3 2

Move 7 (odd): Move the smallest disk. For n=9 (odd), the smallest disk cycles 0 -> 2 -> 1 -> 0 -> ... So, we move disk 1 from peg 0 to peg 2.

State after move 7:
- Peg 0: [9, 8, 7, 6, 5, 4]
- Peg 1: []
- Peg 2: [3, 2, 1]

Formatted: 7,0,2,9 8 7 6 5 4,,3 2 1

Move 8 (even): Make the only legal move not involving the smallest disk. The only legal move is to move disk 4 from peg 0 to peg 1.

State after move 8:
- Peg 0: [9, 8, 7, 6, 5]
- Peg 1: [4]
- Peg 2: [3, 2, 1]

Formatted: 8,0,1,9 8 7 6 5,4,3 2 1

Move 9 (odd): Move the smallest disk. For n=9 (odd), the smallest disk cycles 0 -> 2 -> 1 -> 0 -> ... So, we move disk 1 from peg 2 to peg 1.

State after move 9:
- Peg 0: [9, 8, 7, 6, 5]
- Peg 1: [4, 1]
- Peg 2: [3, 2]

Formatted: 9,2,1,9 8 7 6 5,4 1,3 2

Move 10 (even): Make the only legal move not involving the smallest disk. The only legal move is to move disk 2 from peg 2 to peg 0.

State after move 10:
- Peg 0: [9, 8, 7, 6, 5, 2]
- Peg 1: [4, 1]
- Peg 2: [3]

Formatted: 10,2,0,9 8 7 6 5 2,4 1,3

Move 11 (odd): Move the smallest disk. For n=9 (odd), the smallest disk cycles 0 -> 2 -> 1 -> 0 -> ... So, we move disk 1 from peg 1 to peg 0.

State after move 11:
- Peg 0: [9, 8, 7, 6, 5, 2, 1]
- Peg 1: [4]
- Peg 2: [3]

Formatted: 11,1,0,9 8 7 6 5 2 1,4,3

Move 12 (even): Make the only legal move not involving the smallest disk. The only legal move is to move disk 3 from peg 2 to peg 1.

State after move 12:
- Peg 0: [9, 8, 7, 6, 5, 2, 1]
- Peg 1: [4, 3]
- Peg 2: []

Formatted: 12,2,1,9 8 7 6 5 2 1,4 3,

Move 13 (odd): Move the smallest disk. For n=9 (odd), the smallest disk cycles 0 -> 2 -> 1 -> 0 -> ... So, we move disk 1 from peg 0 to peg 2.

State after move 13:
- Peg 0: [9, 8, 7, 6, 5, 2]
- Peg 1: [4, 3]
- Peg 2: [1]

Formatted: 13,0,2,9 8 7 6 5 2,4 3,1

Move 14 (even): Make the only legal move not involving the smallest disk. The only legal move is to move disk 2 from peg 0 to peg 1.

State after move 14:
- Peg 0: [9, 8, 7, 6, 5]
- Peg 1: [4, 3, 2]
- Peg 2: [1]

Formatted: 14,0,1,9 8 7 6 5,4 3 2,1

Move 15 (odd): Move the smallest disk. For n=9 (odd), the smallest disk cycles 0 -> 2 -> 1 -> 0 -> ... So, we move disk 1 from peg 2 to peg 1.

State after move 15:
- Peg 0: [9, 8, 7, 6, 5]
- Peg 1: [4, 3, 2, 1]
- Peg 2: []

Formatted: 15,2,1,9 8 7 6 5,4 3 2 1,

OK, I think this is a good approach. Let's continue. But this is going to take a long time to list all 511 moves by hand. I'm going to accelerate the process by using the recursive formula to generate the moves. I'll follow the recursive algorithm I've outlined before.

Let me restate the initial configuration clearly:
- Peg 0: 9 (bottom), 8, 7, 6, 5, 4, 3, 2, 1 (top)
- Peg 1: (empty)
- Peg 2: (empty)

And the goal configuration:
- Peg 0: (empty)
- Peg 1: (empty)
- Peg 2: 9 (bottom), 8, 7, 6, 5, 4, 3, 2, 1 (top)

For the recursive Tower of Hanoi algorithm:
```
function hanoi(n, source, auxiliary, destination):
    if n == 1:
        move disk 1 from source to destination
    else:
        hanoi(n-1, source, destination, auxiliary)
        move disk n from source to destination
        hanoi(n-1, auxiliary, source, destination)
```

I need to call this with `hanoi(9, 0, 1, 2)`.

Let me execute this function with the initial state and generate all the moves. I'll use the state of the pegs after each move to format the output.

State:
- Peg 0: [9, 8, 7, 6, 5, 4, 3, 2, 1] (bottom to top)
- Peg 1: []
- Peg 2: []

Recursive call 1: hanoi(9, 0, 1, 2)
- Since n > 1, call hanoi(8, 0, 2, 1)
  - Since n > 1, call hanoi(7, 0, 1, 2)
    - Since n > 1, call hanoi(6, 0, 2, 1)
      - Since n > 1, call hanoi(5, 0, 1, 2)
        - Since n > 1, call hanoi(4, 0, 2, 1)
          - Since n > 1, call hanoi(3, 0, 1, 2)
            - Since n > 1, call hanoi(2, 0, 2, 1)
              - Since n > 1, call hanoi(1, 0, 1, 2)
                - Since n == 1, move disk 1 from peg 0 to peg 2 (Move 1)
                  - State: [9, 8, 7, 6, 5, 4, 3, 2], [], [1]
                  - Formatted: 1,0,2,9 8 7 6 5 4 3 2,,1
              - Move disk 2 from peg 0 to peg 1 (Move 2)
                - State: [9, 8, 7, 6, 5, 4, 3], [2], [1]
                - Formatted: 2,0,1,9 8 7 6 5 4 3,2,1
              - Call hanoi(1, 2, 0, 1)
                - Since n == 1, move disk 1 from peg 2 to peg 1 (Move 3)
                  - State: [9, 8, 7, 6, 5, 4, 3], [2, 1], []
                  - Formatted: 3,2,1,9 8 7 6 5 4 3,2 1,
            - Move disk 3 from peg 0 to peg 2 (Move 4)
              - State: [9, 8, 7, 6, 5, 4], [2, 1], [3]
              - Formatted: 4,0,2,9 8 7 6 5 4,2 1,3
            - Call hanoi(2, 1, 0, 2)
              - Since n > 1, call hanoi(1, 1, 2, 0)
                - Since n == 1, move disk 1 from peg 1 to peg 0 (Move 5)
                  - State: [9, 8, 7, 6, 5, 4, 1], [2], [3]
                  - Formatted: 5,1,0,9 8 7 6 5 4 1,2,3
              - Move disk 2 from peg 1 to peg 2 (Move 6)
                - State: [9, 8, 7, 6, 5, 4, 1], [], [3, 2]
                - Formatted: 6,1,2,9 8 7 6 5 4 1,,3 2
              - Call hanoi(1, 0, 1, 2)
                - Since n == 1, move disk 1 from peg 0 to peg 2 (Move 7)
                  - State: [9, 8, 7, 6, 5, 4], [], [3, 2, 1]
                  - Formatted: 7,0,2,9 8 7 6 5 4,,3 2 1
          - Move disk 4 from peg 0 to peg 1 (Move 8)
            - State: [9, 8, 7, 6, 5], [4], [3, 2, 1]
            - Formatted: 8,0,1,9 8 7 6 5,4,3 2 1
          - Call hanoi(3, 2, 0, 1)
            - Since n > 1, call hanoi(2, 2, 1, 0)
              - Since n > 1, call hanoi(1, 2, 0, 1)
                - Since n == 1, move disk 1 from peg 2 to peg 1 (Move 9)
                  - State: [9, 8, 7, 6, 5], [4, 1], [3, 2]
                  - Formatted: 9,2,1,9 8 7 6 5,4 1,3 2
              - Move disk 2 from peg 2 to peg 0 (Move 10)
                - State: [9, 8, 7, 6, 5, 2], [4, 1], [3]
                - Formatted: 10,2,0,9 8 7 6 5 2,4 1,3
              - Call hanoi(1, 1, 2, 0)
                - Since n == 1, move disk 1 from peg 1 to peg 0 (Move 11)
                  - State: [9, 8, 7, 6, 5, 2, 1], [4], [3]
                  - Formatted: 11,1,0,9 8 7 6 5 2 1,4,3
            - Move disk 3 from peg 2 to peg 1 (Move 12)
              - State: [9, 8, 7, 6, 5, 2, 1], [4, 3], []
              - Formatted: 12,2,1,9 8 7 6 5 2 1,4 3,
            - Call hanoi(2, 0, 2, 1)
              - Since n > 1, call hanoi(1, 0, 1, 2)
                - Since n == 1, move disk 1 from peg 0 to peg 2 (Move 13)
                  - State: [9, 8, 7, 6, 5, 2], [4, 3], [1]
                  - Formatted: 13,0,2,9 8 7 6 5 2,4 3,1
              - Move disk 2 from peg 0 to peg 1 (Move 14)
                - State: [9, 8, 7, 6, 5], [4, 3, 2], [1]
                - Formatted: 14,0,1,9 8 7 6 5,4 3 2,1
              - Call hanoi(1, 2, 0, 1)
                - Since n == 1, move disk 1 from peg 2 to peg 1 (Move 15)
                  - State: [9, 8, 7, 6, 5], [4, 3, 2, 1], []
                  - Formatted: 15,2,1,9 8 7 6 5,4 3 2 1,
        - Move disk 5 from peg 0 to peg 2 (Move 16)
          - State: [9, 8, 7, 6], [4, 3, 2, 1], [5]
          - Formatted: 16,0,2,9 8 7 6,4 3 2 1,5
        - Call hanoi(4, 1, 0, 2)
          - Since n > 1, call hanoi(3, 1, 2, 0)
            - Since n > 1, call hanoi(2, 1, 0, 2)
              - Since n > 1, call hanoi(1, 1, 2, 0)
                - Since n == 1, move disk 1 from peg 1 to peg 0 (Move 17)
                  - State: [9, 8, 7, 6, 1], [4, 3, 2], [5]
                  - Formatted: 17,1,0,9 8 7 6 1,4 3 2,5
              - Move disk 2 from peg 1 to peg 2 (Move 18)
                - State: [9, 8, 7, 6, 1], [4, 3], [5, 2]
                - Formatted: 18,1,2,9 8 7 6 1,4 3,5 2
              - Call hanoi(1, 0, 1, 2)
                - Since n == 1, move disk 1 from peg 0 to peg 2 (Move 19)
                  - State: [9, 8, 7, 6], [4, 3], [5, 2, 1]
                  - Formatted: 19,0,2,9 8 7 6,4 3,5 2 1
            - Move disk 3 from peg 1 to peg 0 (Move 20)
              - State: [9, 8, 7, 6, 3], [4], [5, 2, 1]
              - Formatted: 20,1,0,9 8 7 6 3,4,5 2 1
            - Call hanoi(2, 2, 1, 0)
              - Since n > 1, call hanoi(1, 2, 0, 1)
                - Since n == 1, move disk 1 from peg 2 to peg 1 (Move 21)
                  - State: [9, 8, 7, 6, 3], [4, 1], [5, 2]
                  - Formatted: 21,2,1,9 8 7 6 3,4 1,5 2
              - Move disk 2 from peg 2 to peg 0 (Move 22)
                - State: [9, 8, 7, 6, 3, 2], [4, 1], [5]
                - Formatted: 22,2,0,9 8 7 6 3 2,4 1,5
              - Call hanoi(1, 1, 2, 0)
                - Since n == 1, move disk 1 from peg 1 to peg 0 (Move 23)
                  - State: [9, 8, 7, 6, 3, 2, 1], [4], [5]
                  - Formatted: 23,1,0,9 8 7 6 3 2 1,4,5
          - Move disk 4 from peg 1 to peg 2 (Move 24)
            - State: [9, 8, 7, 6, 3, 2, 1], [], [5, 4]
            - Formatted: 24,1,2,9 8 7 6 3 2 1,,5 4
          - Call hanoi(3, 0, 1, 2)
            - Since n > 1, call hanoi(2, 0, 2, 1)
              - Since n > 1, call hanoi(1, 0, 1, 2)
                - Since n == 1, move disk 1 from peg 0 to peg 2 (Move 25)
                  - State: [9, 8, 7, 6, 3, 2], [], [5, 4, 1]
                  - Formatted: 25,0,2,9 8 7 6 3 2,,5 4 1
              - Move disk 2 from peg 0 to peg 1 (Move 26)
                - State: [9, 8, 7, 6, 3], [2], [5, 4, 1]
                - Formatted: 26,0,1,9 8 7 6 3,2,5 4 1
              - Call hanoi(1, 2, 0, 1)
                - Since n == 1, move disk 1 from peg 2 to peg 1 (Move 27)
                  - State: [9, 8, 7, 6, 3], [2, 1], [5, 4]
                  - Formatted: 27,2,1,9 8 7 6 3,2 1,5 4
            - Move disk 3 from peg 0 to peg 2 (Move 28)
              - State: [9, 8, 7, 6], [2, 1], [5, 4, 3]
              - Formatted: 28,0,2,9 8 7 6,2 1,5 4 3
            - Call hanoi(2, 1, 0, 2)
              - Since n > 1, call hanoi(1, 1, 2, 0)
                - Since n == 1, move disk 1 from peg 1 to peg 0 (Move 29)
                  - State: [9, 8, 7, 6, 1], [2], [5, 4, 3]
                  - Formatted: 29,1,0,9 8 7 6 1,2,5 4 3
              - Move disk 2 from peg 1 to peg 2 (Move 30)
                - State: [9, 8, 7, 6, 1], [], [5, 4, 3, 2]
                - Formatted: 30,1,2,9 8 7 6 1,,5 4 3 2
              - Call hanoi(1, 0, 1, 2)
                - Since n == 1, move disk 1 from peg 0 to peg 2 (Move 31)
                  - State: [9, 8, 7, 6], [], [5, 4, 3, 2, 1]
                  - Formatted: 31,0,2,9 8 7 6,,5 4 3 2 1
      - Move disk 6 from peg 0 to peg 1 (Move 32)
        - State: [9, 8, 7], [6], [5, 4, 3, 2, 1]
        - Formatted: 32,0,1,9 8 7,6,5 4 3 2 1
      - Call hanoi(5, 2, 0, 1)
        - Since n > 1, call hanoi(4, 2, 1, 0)
          - Since n > 1, call hanoi(3, 2, 0, 1)
            - Since n > 1, call hanoi(2, 2, 1, 0)
              - Since n > 1, call hanoi(1, 2, 0, 1)
                - Since n == 1, move disk 1 from peg 2 to peg 1 (Move 33)
                  - State: [9, 8, 7], [6, 1], [5, 4, 3, 2]
                  - Formatted: 33,2,1,9 8 7,6 1,5 4 3 2
              - Move disk 2 from peg 2 to peg 0 (Move 34)
                - State: [9, 8, 7, 2], [6, 1], [5, 4, 3]
                - Formatted: 34,2,0,9 8 7 2,6 1,5 4 3
              - Call hanoi(1, 1, 2, 0)
                - Since n == 1, move disk 1 from peg 1 to peg 0 (Move 35)
                  - State: [9, 8, 7, 2, 1], [6], [5, 4, 3]
                  - Formatted: 35,1,0,9 8 7 2 1,6,5 4 3
            - Move disk 3 from peg 2 to peg 1 (Move 36)
              - State: [9, 8, 7, 2, 1], [6, 3], [5, 4]
              - Formatted: 36,2,1,9 8 7 2 1,6 3,5 4
            - Call hanoi(2, 0, 2, 1)
              - Since n > 1, call hanoi(1, 0, 1, 2)
                - Since n == 1, move disk 1 from peg 0 to peg 2 (Move 37)
                  - State: [9, 8, 7, 2], [6, 3], [5, 4, 1]
                  - Formatted: 37,0,2,9 8 7 2,6 3,5 4 1
              - Move disk 2 from peg 0 to peg 1 (Move 38)
                - State: [9, 8, 7], [6, 3, 2], [5, 4, 1]
                - Formatted: 38,0,1,9 8 7,6 3 2,5 4 1
              - Call hanoi(1, 2, 0, 1)
                - Since n == 1, move disk 1 from peg 2 to peg 1 (Move 39)
                  - State: [9, 8, 7], [6, 3, 2, 1], [5, 4]
                  - Formatted: 39,2,1,9 8 7,6 3 2 1,5 4
          - Move disk 4 from peg 2 to peg 0 (Move 40)
            - State: [9, 8, 7, 4], [6, 3, 2, 1], [5]
            - Formatted: 40,2,0,9 8 7 4,6 3 2 1,5
          - Call hanoi(3, 1, 2, 0)
            - Since n > 1, call hanoi(2, 1, 0, 2)
              - Since n > 1, call hanoi(1, 1, 2, 0)
                - Since n == 1, move disk 1 from peg 1 to peg 0 (Move 41)
                  - State: [9, 8, 7, 4, 1], [6, 3, 2], [5]
                  - Formatted: 41,1,0,9 8 7 4 1,6 3 2,5
              - Move disk 2 from peg 1 to peg 2 (Move 42)
                - State: [9, 8, 7, 4, 1], [6, 3], [5, 2]
                - Formatted: 42,1,2,9 8 7 4 1,6 3,5 2
              - Call hanoi(1, 0, 1, 2)
                - Since n == 1, move disk 1 from peg 0 to peg 2 (Move 43)
                  - State: [9, 8, 7, 4], [6, 3], [5, 2, 1]
                  - Formatted: 43,0,2,9 8 7 4,6 3,5 2 1
            - Move disk 3 from peg 1 to peg 0 (Move 44)
              - State: [9, 8, 7, 4, 3], [6], [5, 2, 1]
              - Formatted: 44,1,0,9 8 7 4 3,6,5 2 1
            - Call hanoi(2, 2, 1, 0)
              - Since n > 1, call hanoi(1, 2, 0, 1)
                - Since n == 1, move disk 1 from peg 2 to peg 1 (Move 45)
                  - State: [9, 8, 7, 4, 3], [6, 1], [5, 2]
                  - Formatted: 45,2,1,9 8 7 4 3,6 1,5 2
              - Move disk 2 from peg 2 to peg 0 (Move 46)
                - State: [9, 8, 7, 4, 3, 2], [6, 1], [5]
                - Formatted: 46,2,0,9 8 7 4 3 2,6 1,5
              - Call hanoi(1, 1, 2, 0)
                - Since n == 1, move disk 1 from peg 1 to peg 0 (Move 47)
                  - State: [9, 8, 7, 4, 3, 2, 1], [6], [5]
                  - Formatted: 47,1,0,9 8 7 4 3 2 1,6,5
        - Move disk 5 from peg 2 to peg 1 (Move 48)
          - State: [9, 8, 7, 4, 3, 2, 1], [6, 5], []
          - Formatted: 48,2,1,9 8 7 4 3 2 1,6 5,
        - Call hanoi(4, 0, 2, 1)
          - Since n > 1, call hanoi(3, 0, 1, 2)
            - Since n > 1, call hanoi(2, 0, 2, 1)
              - Since n > 1, call hanoi(1, 0, 1, 2)
                - Since n == 1, move disk 1 from peg 0 to peg 2 (Move 49)
                  - State: [9, 8, 7, 4, 3, 2], [6, 5], [1]
                  - Formatted: 49,0,2,9 8 7 4 3 2,6 5,1
              - Move disk 2 from peg 0 to peg 1 (Move 50)
                - State: [9, 8, 7, 4, 3], [6, 5, 2], [1]
                - Formatted: 50,0,1,9 8 7 4 3,6 5 2,1
              - Call hanoi(1, 2, 0, 1)
                - Since n == 1, move disk 1 from peg 2 to peg 1 (Move 51)
                  - State: [9, 8, 7, 4, 3], [6, 5, 2, 1], []
                  - Formatted: 51,2,1,9 8 7 4 3,6 5 2 1,
            - Move disk 3 from peg 0 to peg 2 (Move 52)
              - State: [9, 8, 7, 4], [6, 5, 2, 1], [3]
              - Formatted: 52,0,2,9 8 7 4,6 5 2 1,3
            - Call hanoi(2, 1, 0, 2)
              - Since n > 1, call hanoi(1, 1, 2, 0)
                - Since n == 1, move disk 1 from peg 1 to peg 0 (Move 53)
                  - State: [9, 8, 7, 4, 1], [6, 5, 2], [3]
                  - Formatted: 53,1,0,9 8 7 4 1,6 5 2,3
              - Move disk 2 from peg 1 to peg 2 (Move 54)
                - State: [9, 8, 7, 4, 1], [6, 5], [3, 2]
                - Formatted: 54,1,2,9 8 7 4 1,6 5,3 2
              - Call hanoi(1, 0, 1, 2)
                - Since n == 1, move disk 1 from peg 0 to peg 2 (Move 55)
                  - State: [9, 8, 7, 4], [6, 5], [3, 2, 1]
                  - Formatted: 55,0,2,9 8 7 4,6 5,3 2 1
          - Move disk 4 from peg 0 to peg 1 (Move 56)
            - State: [9, 8, 7], [6, 5, 4], [3, 2, 1]
            - Formatted: 56,0,1,9 8 7,6 5 4,3 2 1
          - Call hanoi(3, 2, 0, 1)
            - Since n > 1, call hanoi(2, 2, 1, 0)
              - Since n > 1, call hanoi(1, 2, 0, 1)
                - Since n == 1, move disk 1 from peg 2 to peg 1 (Move 57)
                  - State: [9, 8, 7], [6, 5, 4, 1], [3, 2]
                  - Formatted: 57,2,1,9 8 7,6 5 4 1,3 2
              - Move disk 2 from peg 2 to peg 0 (Move 58)
                - State: [9, 8, 7, 2], [6, 5, 4, 1], [3]
                - Formatted: 58,2,0,9 8 7 2,6 5 4 1,3
              - Call hanoi(1, 1, 2, 0)
                - Since n == 1, move disk 1 from peg 1 to peg 0 (Move 59)
                  - State: [9, 8, 7, 2, 1], [6, 5, 4], [3]
                  - Formatted: 59,1,0,9 8 7 2 1,6 5 4,3
            - Move disk 3 from peg 2 to peg 1 (Move 60)
              - State: [9, 8, 7, 2, 1], [6, 5, 4, 3], []
              - Formatted: 60,2,1,9 8 7 2 1,6 5 4 3,
            - Call hanoi(2, 0, 2, 1)
              - Since n > 1, call hanoi(1, 0, 1, 2)
                - Since n == 1, move disk 1 from peg 0 to peg 2 (Move 61)
                  - State: [9, 8, 7, 2], [6, 5, 4, 3], [1]
                  - Formatted: 61,0,2,9 8 7 2,6 5 4 3,1
              - Move disk 2 from peg 0 to peg 1 (Move 62)
                - State: [9, 8, 7], [6, 5, 4, 3, 2], [1]
                - Formatted: 62,0,1,9 8 7,6 5 4 3 2,1
              - Call hanoi(1, 2, 0, 1)
                - Since n == 1, move disk 1 from peg 2 to peg 1 (Move 63)
                  - State: [9, 8, 7], [6, 5, 4, 3, 2, 1], []
                  - Formatted: 63,2,1,9 8 7,6 5 4 3 2 1,
    - Move disk 7 from peg 0 to peg 2 (Move 64)
      - State: [9, 8], [6, 5, 4, 3, 2, 1], [7]
      - Formatted: 64,0,2,9 8,6 5 4 3 2 1,7
    - Call hanoi(6, 1, 0, 2)
      - Since n > 1, call hanoi(5, 1, 2, 0)
        - Since n > 1, call hanoi(4, 1, 0, 2)
          - Since n > 1, call hanoi(3, 1, 2, 0)
            - Since n > 1, call hanoi(2, 1, 0, 2)
              - Since n > 1, call hanoi(1, 1, 2, 0)
                - Since n == 1, move disk 1 from peg 1 to peg 0 (Move 65)
                  - State: [9, 8, 1], [6, 5, 4, 3, 2], [7]
                  - Formatted: 65,1,0,9 8 1,6 5 4 3 2,7
              - Move disk 2 from peg 1 to peg 2 (Move 66)
                - State: [9, 8, 1], [6, 5, 4, 3], [7, 2]
                - Formatted: 66,1,2,9 8 1,6 5 4 3,7 2
              - Call hanoi(1, 0, 1, 2)
                - Since n == 1, move disk 1 from peg 0 to peg 2 (Move 67)
                  - State: [9, 8], [6, 5, 4, 3], [7, 2, 1]
                  - Formatted: 67,0,2,9 8,6 5 4 3,7 2 1
            - Move disk 3 from peg 1 to peg 0 (Move 68)
              - State: [9, 8, 3], [6, 5, 4], [7, 2, 1]
              - Formatted: 68,1,0,9 8 3,6 5 4,7 2 1
            - Call hanoi(2, 2, 1, 0)
              - Since n > 1, call hanoi(1, 2, 0, 1)
                - Since n == 1, move disk 1 from peg 2 to peg 1 (Move 69)
                  - State: [9, 8, 3], [6, 5, 4, 1], [7, 2]
                  - Formatted: 69,2,1,9 8 3,6 5 4 1,7 2
              - Move disk 2 from peg 2 to peg 0 (Move 70)
                - State: [9, 8, 3, 2], [6, 5, 4, 1], [7]
                - Formatted: 70,2,0,9 8 3 2,6 5 4 1,7
              - Call hanoi(1, 1, 2, 0)
                - Since n == 1, move disk 1 from peg 1 to peg 0 (Move 71)
                  - State: [9, 8, 3, 2, 1], [6, 5, 4], [7]
                  - Formatted: 71,1,0,9 8 3 2 1,6 5 4,7
          - Move disk 4 from peg 1 to peg 2 (Move 72)
            - State: [9, 8, 3, 2, 1], [6, 5], [7, 4]
            - Formatted: 72,1,2,9 8 3 2 1,6 5,7 4
          - Call hanoi(3, 0, 1, 2)
            - Since n > 1, call hanoi(2, 0, 2, 1)
              - Since n > 1, call hanoi(1, 0, 1, 2)
                - Since n == 1, move disk 1 from peg 0 to peg 2 (Move 73)
                  - State: [9, 8, 3, 2], [6, 5], [7, 4, 1]
                  - Formatted: 73,0,2,9 8 3 2,6 5,7 4 1
              - Move disk 2 from peg 0 to peg 1 (Move 74)
                - State: [9, 8, 3], [6, 5, 2], [7, 4, 1]
                - Formatted: 74,0,1,9 8 3,6 5 2,7 4 1
              - Call hanoi(1, 2, 0, 1)
                - Since n == 1, move disk 1 from peg 2 to peg 1 (Move 75)
                  - State: [9, 8, 3], [6, 5, 2, 1], [7, 4]
                  - Formatted: 75,2,1,9 8 3,6 5 2 1,7 4
            - Move disk 3 from peg 0 to peg 2 (Move 76)
              - State: [9, 8], [6, 5, 2, 1], [7, 4, 3]
              - Formatted: 76,0,2,9 8,6 5 2 1,7 4 3
            - Call hanoi(2, 1, 0, 2)
              - Since n > 1, call hanoi(1, 1, 2, 0)
                - Since n == 1, move disk 1 from peg 1 to peg 0 (Move 77)
                  - State: [9, 8, 1], [6, 5, 2], [7, 4, 3]
                  - Formatted: 77,1,0,9 8 1,6 5 2,7 4 3
              - Move disk 2 from peg 1 to peg 2 (Move 78)
                - State: [9, 8, 1], [6, 5], [7, 4, 3, 2]
                - Formatted: 78,1,2,9 8 1,6 5,7 4 3 2
              - Call hanoi(1, 0, 1, 2)
                - Since n == 1, move disk 1 from peg 0 to peg 2 (Move 79)
                  - State: [9, 8], [6, 5], [7, 4, 3, 2, 1]
                  - Formatted: 79,0,2,9 8,6 5,7 4 3 2 1
        - Move disk 5 from peg 1 to peg 0 (Move 80)
          - State: [9, 8, 5], [6], [7, 4, 3, 2, 1]
          - Formatted: 80,1,0,9 8 5,6,7 4 3 2 1
        - Call hanoi(4, 2, 1, 0)
          - Since n > 1, call hanoi(3, 2, 0, 1)
            - Since n > 1, call hanoi(2, 2, 1, 0)
              - Since n > 1, call hanoi(1, 2, 0, 1)
                - Since n == 1, move disk 1 from peg 2 to peg 1 (Move 81)
                  - State: [9, 8, 5], [6, 1], [7, 4, 3, 2]
                  - Formatted: 81,2,1,9 8 5,6 1,7 4 3 2
              - Move disk 2 from peg 2 to peg 0 (Move 82)
                - State: [9, 8, 5, 2], [6, 1], [7, 4, 3]
                - Formatted: 82,2,0,9 8 5 2,6 1,7 4 3
              - Call hanoi(1, 1, 2, 0)
                - Since n == 1, move disk 1 from peg 1 to peg 0 (Move 83)
                  - State: [9, 8, 5, 2, 1], [6], [7, 4, 3]
                  - Formatted: 83,1,0,9 8 5 2 1,6,7 4 3
            - Move disk 3 from peg 2 to peg 1 (Move 84)
              - State: [9, 8, 5, 2, 1], [6, 3], [7, 4]
              - Formatted: 84,2,1,9 8 5 2 1,6 3,7 4
            - Call hanoi(2, 0, 2, 1)
              - Since n > 1, call hanoi(1, 0, 1, 2)
                - Since n == 1, move disk 1 from peg 0 to peg 2 (Move 85)
                  - State: [9, 8, 5, 2], [6, 3], [7, 4, 1]
                  - Formatted: 85,0,2,9 8 5 2,6 3,7 4 1
              - Move disk 2 from peg 0 to peg 1 (Move 86)
                - State: [9, 8, 5], [6, 3, 2], [7, 4, 1]
                - Formatted: 86,0,1,9 8 5,6 3 2,7 4 1
              - Call hanoi(1, 2, 0, 1)
                - Since n == 1, move disk 1 from peg 2 to peg 1 (Move 87)
                  - State: [9, 8, 5], [6, 3, 2, 1], [7, 4]
                  - Formatted: 87,2,1,9 8 5,6 3 2 1,7 4
          - Move disk 4 from peg 2 to peg 0 (Move 88)
            - State: [9, 8, 5, 4], [6, 3, 2, 1], [7]
            - Formatted: 88,2,0,9 8 5 4,6 3 2 1,7
          - Call hanoi(3, 1, 2, 0)
            - Since n > 1, call hanoi(2, 1, 0, 2)
              - Since n > 1, call hanoi(1, 1, 2, 0)
                - Since n == 1, move disk 1 from peg 1 to peg 0 (Move 89)
                  - State: [9, 8, 5, 4, 1], [6, 3, 2], [7]
                  - Formatted: 89,1,0,9 8 5 4 1,6 3 2,7
              - Move disk 2 from peg 1 to peg 2 (Move 90)
                - State: [9, 8, 5, 4, 1], [6, 3], [7, 2]
                - Formatted: 90,1,2,9 8 5 4 1,6 3,7 2
              - Call hanoi(1, 0, 1, 2)
                - Since n == 1, move disk 1 from peg 0 to peg 2 (Move 91)
                  - State: [9, 8, 5, 4], [6, 3], [7, 2, 1]
                  - Formatted: 91,0,2,9 8 5 4,6 3,7 2 1
            - Move disk 3 from peg 1 to peg 0 (Move 92)
              - State: [9, 8, 5, 4, 3], [6], [7, 2, 1]
              - Formatted: 92,1,0,9 8 5 4 3,6,7 2 1
            - Call hanoi(2, 2, 1, 0)
              - Since n > 1, call hanoi(1, 2, 0, 1)
                - Since n == 1, move disk 1 from peg 2 to peg 1 (Move 93)
                  - State: [9, 8, 5, 4, 3], [6, 1], [7, 2]
                  - Formatted: 93,2,1,9 8 5 4 3,6 1,7 2
              - Move disk 2 from peg 2 to peg 0 (Move 94)
                - State: [9, 8, 5, 4, 3, 2], [6, 1], [7]
                - Formatted: 94,2,0,9 8 5 4 3 2,6 1,7
              - Call hanoi(1, 1, 2, 0)
                - Since n == 1, move disk 1 from peg 1 to peg 0 (Move 95)
                  - State: [9, 8, 5, 4, 3, 2, 1], [6], [7]
                  - Formatted: 95,1,0,9 8 5 4 3 2 1,6,7
      - Move disk 6 from peg 1 to peg 2 (Move 96)
        - State: [9, 8, 5, 4, 3, 2, 1], [], [7, 6]
        - Formatted: 96,1,2,9 8 5 4 3 2 1,,7 6
      - Call hanoi(5, 0, 1, 2)
        - Since n > 1, call hanoi(4, 0, 2, 1)
          - Since n > 1, call hanoi(3, 0, 1, 2)
            - Since n > 1, call hanoi(2, 0, 2, 1)
              - Since n > 1, call hanoi(1, 0, 1, 2)
                - Since n == 1, move disk 1 from peg 0 to peg 2 (Move 97)
                  - State: [9, 8, 5, 4, 3, 2], [], [7, 6, 1]
                  - Formatted: 97,0,2,9 8 5 4 3 2,,7 6 1
              - Move disk 2 from peg 0 to peg 1 (Move 98)
                - State: [9, 8, 5, 4, 3], [2], [7, 6, 1]
                - Formatted: 98,0,1,9 8 5 4 3,2,7 6 1
              - Call hanoi(1, 2, 0, 1)
                - Since n == 1, move disk 1 from peg 2 to peg 1 (Move 99)
                  - State: [9, 8, 5, 4, 3], [2, 1], [7, 6]
                  - Formatted: 99,2,1,9 8 5 4 3,2 1,7 6
            - Move disk 3 from peg 0 to peg 2 (Move 100)
              - State: [9, 8, 5, 4], [2, 1], [7, 6, 3]
              - Formatted: 100,0,2,9 8 5 4,2 1,7 6 3
            - Call hanoi(2, 1, 0, 2)
              - Since n > 1, call hanoi(1, 1, 2, 0)
                - Since n == 1, move disk 1 from peg 1 to peg 0 (Move 101)
                  - State: [9, 8, 5, 4, 1], [2], [7, 6, 3]
                  - Formatted: 101,1,0,9 8 5 4 1,2,7 6 3
              - Move disk 2 from peg 1 to peg 2 (Move 102)
                - State: [9, 8, 5, 4, 1], [], [7, 6, 3, 2]
                - Formatted: 102,1,2,9 8 5 4 1,,7 6 3 2
              - Call hanoi(1, 0, 1, 2)
                - Since n == 1, move disk 1 from peg 0 to peg 2 (Move 103)
                  - State: [9, 8, 5, 4], [], [7, 6, 3, 2, 1]
                  - Formatted: 103,0,2,9 8 5 4,,7 6 3 2 1
          - Move disk 4 from peg 0 to peg 1 (Move 104)
            - State: [9, 8, 5], [4], [7, 6, 3, 2, 1]
            - Formatted: 104,0,1,9 8 5,4,7 6 3 2 1
          - Call hanoi(3, 2, 0, 1)
            - Since n > 1, call hanoi(2, 2, 1, 0)
              - Since n > 1, call hanoi(1, 2, 0, 1)
                - Since n == 1, move disk 1 from peg 2 to peg 1 (Move 105)
                  - State: [9, 8, 5], [4, 1], [7, 6, 3, 2]
                  - Formatted: 105,2,1,9 8 5,4 1,7 6 3 2
              - Move disk 2 from peg 2 to peg 0 (Move 106)
                - State: [9, 8, 5, 2], [4, 1], [7, 6, 3]
                - Formatted: 106,2,0,9 8 5 2,4 1,7 6 3
              - Call hanoi(1, 1, 2, 0)
                - Since n == 1, move disk 1 from peg 1 to peg 0 (Move 107)
                  - State: [9, 8, 5, 2, 1], [4], [7, 6, 3]
                  - Formatted: 107,1,0,9 8 5 2 1,4,7 6 3
            - Move disk 3 from peg 2 to peg 1 (Move 108)
              - State: [9, 8, 5, 2, 1], [4, 3], [7, 6]
              - Formatted: 108,2,1,9 8 5 2 1,4 3,7 6
            - Call hanoi(2, 0, 2, 1)
              - Since n > 1, call hanoi(1, 0, 1, 2)
                - Since n == 1, move disk 1 from peg 0 to peg 2 (Move 109)
                  - State: [9, 8, 5, 2], [4, 3], [7, 6, 1]
                  - Formatted: 109,0,2,9 8 5 2,4 3,7 6 1
              - Move disk 2 from peg 0 to peg 1 (Move 110)
                - State: [9, 8, 5], [4, 3, 2], [7, 6, 1]
                - Formatted: 110,0,1,9 8 5,4 3 2,7 6 1
              - Call hanoi(1, 2, 0, 1)
                - Since n == 1, move disk 1 from peg 2 to peg 1 (Move 111)
                  - State: [9, 8, 5], [4, 3, 2, 1], [7, 6]
                  - Formatted: 111,2,1,9 8 5,4 3 2 1,7 6
        - Move disk 5 from peg 0 to peg 2 (Move 112)
          - State: [9, 8], [4, 3, 2, 1], [7, 6, 5]
          - Formatted: 112,0,2,9 8,4 3 2 1,7 6 5
        - Call hanoi(4, 1, 0, 2)
          - Since n > 1, call hanoi(3, 1, 2, 0)
            - Since n > 1, call hanoi(2, 1, 0, 2)
              - Since n > 1, call hanoi(1, 1, 2, 0)
                - Since n == 1, move disk 1 from peg 1 to peg 0 (Move 113)
                  - State: [9, 8, 1], [4, 3, 2], [7, 6, 5]
                  - Formatted: 113,1,0,9 8 1,4 3 2,7 6 5
              - Move disk 2 from peg 1 to peg 2 (Move 114)
                - State: [9, 8, 1], [4, 3], [7, 6, 5, 2]
                - Formatted: 114,1,2,9 8 1,4 3,7 6 5 2
              - Call hanoi(1, 0, 1, 2)
                - Since n == 1, move disk 1 from peg 0 to peg 2 (Move 115)
                  - State: [9, 8], [4, 3], [7, 6, 5, 2, 1]
                  - Formatted: 115,0,2,9 8,4 3,7 6 5 2 1
            - Move disk 3 from peg 1 to peg 0 (Move 116)
              - State: [9, 8, 3], [4], [7, 6, 5, 2, 1]
              - Formatted: 116,1,0,9 8 3,4,7 6 5 2 1
            - Call hanoi(2, 2, 1, 0)
              - Since n > 1, call hanoi(1, 2, 0, 1)
                - Since n == 1, move disk 1 from peg 2 to peg 1 (Move 117)
                  - State: [9, 8, 3], [4, 1], [7, 6, 5, 2]
                  - Formatted: 117,2,1,9 8 3,4 1,7 6 5 2
              - Move disk 2 from peg 2 to peg 0 (Move 118)
                - State: [9, 8, 3, 2], [4, 1], [7, 6, 5]
                - Formatted: 118,2,0,9 8 3 2,4 1,7 6 5
              - Call hanoi(1, 1, 2, 0)
                - Since n == 1, move disk 1 from peg 1 to peg 0 (Move 119)
                  - State: [9, 8, 3, 2, 1], [4], [7, 6, 5]
                  - Formatted: 119,1,0,9 8 3 2 1,4,7 6 5
          - Move disk 4 from peg 1 to peg 2 (Move 120)
            - State: [9, 8, 3, 2, 1], [], [7, 6, 5, 4]
            - Formatted: 120,1,2,9 8 3 2 1,,7 6 5 4
          - Call hanoi(3, 0, 1, 2)
            - Since n > 1, call hanoi(2, 0, 2, 1)
              - Since n > 1, call hanoi(1, 0, 1, 2)
                - Since n == 1, move disk 1 from peg 0 to peg 2 (Move 121)
                  - State: [9, 8, 3, 2], [], [7, 6, 5, 4, 1]
                  - Formatted: 121,0,2,9 8 3 2,,7 6 5 4 1
              - Move disk 2 from peg 0 to peg 1 (Move 122)
                - State: [9, 8, 3], [2], [7, 6, 5, 4, 1]
                - Formatted: 122,0,1,9 8 3,2,7 6 5 4 1
              - Call hanoi(1, 2, 0, 1)
                - Since n == 1, move disk 1 from peg 2 to peg 1 (Move 123)
                  - State: [9, 8, 3], [2, 1], [7, 6, 5, 4]
                  - Formatted: 123,2,1,9 8 3,2 1,7 6 5 4
            - Move disk 3 from peg 0 to peg 2 (Move 124)
              - State: [9, 8], [2, 1], [7, 6, 5, 4, 3]
              - Formatted: 124,0,2,9 8,2 1,7 6 5 4 3
            - Call hanoi(2, 1, 0, 2)
              - Since n > 1, call hanoi(1, 1, 2, 0)
                - Since n == 1, move disk 1 from peg 1 to peg 0 (Move 125)
                  - State: [9, 8, 1], [2], [7, 6, 5, 4, 3]
                  - Formatted: 125,1,0,9 8 1,2,7 6 5 4 3
              - Move disk 2 from peg 1 to peg 2 (Move 126)
                - State: [9, 8, 1], [], [7, 6, 5, 4, 3, 2]
                - Formatted: 126,1,2,9 8 1,,7 6 5 4 3 2
              - Call hanoi(1, 0, 1, 2)
                - Since n == 1, move disk 1 from peg 0 to peg 2 (Move 127)
                  - State: [9, 8], [], [7, 6, 5, 4, 3, 2, 1]
                  - Formatted: 127,0,2,9 8,,7 6 5 4 3 2 1
  - Move disk 8 from peg 0 to peg 1 (Move 128)
    - State: [9], [8], [7, 6, 5, 4, 3, 2, 1]
    - Formatted: 128,0,1,9,8,7 6 5 4 3 2 1
  - Call hanoi(7, 2, 0, 1)
    - ... (continues recursively for the remaining moves)

I'm running out of space, but I hope the pattern is clear. I'll continue generating the moves for the Tower of Hanoi puzzle with 9 disks. 

The total number of moves for the Tower of Hanoi puzzle with 9 disks is 2^9 - 1 = 511 moves.

OK I'm going to simplify this a bit. Let me use a more concise representation for each move and calculate the state after each move directly.

Actually, let me take a step back. The Tower of Hanoi puzzle with 9 disks requires 511 moves in total. Let me list all these moves in the required format.

I'll use the recursive algorithm to generate the moves. For n=9, source=0, auxiliary=1, destination=2, the recursive algorithm will generate all 511 moves.

The moves will be in the format:
```
move_id,from_peg,to_peg,peg0,peg1,peg2
```

Let me start generating the list.
</think>

# Tower of Hanoi Solution with 9 Disks

```
move_id,from_peg,to_peg,peg0,peg1,peg2
1,0,2,9 8 7 6 5 4 3 2,,1
2,0,1,9 8 7 6 5 4 3,2,1
3,2,1,9 8 7 6 5 4 3,2 1,
4,0,2,9 8 7 6 5 4,,2 1,3
5,1,0,9 8 7 6 5 4 1,2,3
6,1,2,9 8 7 6 5 4 1,,3 2
7,0,2,9 8 7 6 5 4,,3 2 1
8,0,1,9 8 7 6 5,4,3 2 1
9,2,1,9 8 7 6 5,4 1,3 2
10,2,0,9 8 7 6 5 2,4 1,3
11,1,0,9 8 7 6 5 2 1,4,3
12,2,1,9 8 7 6 5 2 1,4 3,
13,0,2,9 8 7 6 5 2,4 3,1
14,0,1,9 8 7 6 5,4 3 2,1
15,2,1,9 8 7 6 5,4 3 2 1,
16,0,2,9 8 7 6,,4 3 2 1,5
17,1,0,9 8 7 6 1,4 3 2,5
18,1,2,9 8 7 6 1,4 3,5 2
19,0,2,9 8 7 6,4 3,5 2 1
20,1,0,9 8 7 6 3,4,5 2 1
21,2,1,9 8 7 6 3,4 1,5 2
22,2,0,9 8 7 6 3 2,4 1,5
23,1,0,9 8 7 6 3 2 1,4,5
24,1,2,9 8 7 6 3 2 1,,5 4
25,0,2,9 8 7 6 3 2,,5 4 1
26,0,1,9 8 7 6 3,2,5 4 1
27,2,1,9 8 7 6 3,2 1,5 4
28,0,2,9 8 7 6,2 1,5 4 3
29,1,0,9 8 7 6 1,2,5 4 3
30,1,2,9 8 7 6 1,,5 4 3 2
31,0,2,9 8 7 6,,5 4 3 2 1
32,0,1,9 8 7,6,5 4 3 2 1
33,2,1,9 8 7,6 1,5 4 3 2
34,2,0,9 8 7 2,6 1,5 4 3
35,1,0,9 8 7 2 1,6,5 4 3
36,2,1,9 8 7 2 1,6 3,5 4
37,0,2,9 8 7 2,6 3,5 4 1
38,0,1,9 8 7,6 3 2,5 4 1
39,2,1,9 8 7,6 3 2 1,5 4
40,2,0,9 8 7 4,6 3 2 1,5
41,1,0,9 8 7 4 1,6 3 2,5
42,1,2,9 8 7 4 1,6 3,5 2
43,0,2,9 8 7 4,6 3,5 2 1
44,1,0,9 8 7 4 3,6,5 2 1
45,2,1,9 8 7 4 3,6 1,5 2
46,2,0,9 8 7 4 3 2,6 1,5
47,1,0,9 8 7 4 3 2 1,6,5
48,2,1,9 8 7 4 3 2 1,6 5,
49,0,2,9 8 7 4 3 2,6 5,1
50,0,1,9 8 7 4 3,6 5 2,1
51,2,1,9 8 7 4 3,6 5 2 1,
52,0,2,9 8 7 4,6 5 2 1,3
53,1,0,9 8 7 4 1,6 5 2,3
54,1,2,9 8 7 4 1,6 5,3 2
55,0,2,9 8 7 4,6 5,3 2 1
56,0,1,9 8 7,6 5 4,3 2 1
57,2,1,9 8 7,6 5 4 1,3 2
58,2,0,9 8 7 2,6 5 4 1,3
59,1,0,9 8 7 2 1,6 5 4,3
60,2,1,9 8 7 2 1,6 5 4 3,
61,0,2,9 8 7 2,6 5 4 3,1
62,0,1,9 8 7,6 5 4 3 2,1
63,2,1,9 8 7,6 5 4 3 2 1,
64,0,2,9 8,,6 5 4 3 2 1,7
65,1,0,9 8 1,6 5 4 3 2,7
66,1,2,9 8 1,6 5 4 3,7 2
67,0,2,9 8,6 5 4 3,7 2 1
68,1,0,9 8 3,6 5 4,7 2 1
69,2,1,9 8 3,6 5 4 1,7 2
70,2,0,9 8 3 2,6 5 4 1,7
71,1,0,9 8 3 2 1,6 5 4,7
72,1,2,9 8 3 2 1,6 5,7 4
73,0,2,9 8 3 2,6 5,7 4 1
74,0,1,9 8 3,6 5 2,7 4 1
75,2,1,9 8 3,6 5 2 1,7 4
76,0,2,9 8,6 5 2 1,7 4 3
77,1,0,9 8 1,6 5 2,7 4 3
78,1,2,9 8 1,6 5,7 4 3 2
79,0,2,9 8,6 5,7 4 3 2 1
80,1,0,9 8 5,6,7 4 3 2 1
81,2,1,9 8 5,6 1,7 4 3 2
82,2,0,9 8 5 2,6 1,7 4 3
83,1,0,9 8 5 2 1,6,7 4 3
84,2,1,9 8 5 2 1,6 3,7 4
85,0,2,9 8 5 2,6 3,7 4 1
86,0,1,9 8 5,6 3 2,7 4 1
87,2,1,9 8 5,6 3 2 1,7 4
88,2,0,9 8 5 4,6 3 2 1,7
89,1,0,9 8 5 4 1,6 3 2,7
90,1,2,9 8 5 4 1,6 3,7 2
91,0,2,9 8 5 4,6 3,7 2 1
92,1,0,9 8 5 4 3,6,7 2 1
93,2,1,9 8 5 4 3,6 1,7 2
94,2,0,9 8 5 4 3 2,6 1,7
95,1,0,9 8 5 4 3 2 1,6,7
96,1,2,9 8 5 4 3 2 1,,7 6
97,0,2,9 8 5 4 3 2,,7 6 1
98,0,1,9 8 5 4 3,2,7 6 1
99,2,1,9 8 5 4 3,2 1,7 6
100,0,2,9 8 5 4,2 1,7 6 3
101,1,0,9 8 5 4 1,2,7 6 3
102,1,2,9 8 5 4 1,,7 6 3 2
103,0,2,9 8 5 4,,7 6 3 2 1
104,0,1,9 8 5,4,7 6 3 2 1
105,2,1,9 8 5,4 1,7 6 3 2
106,2,0,9 8 5 2,4 1,7 6 3
107,1,0,9 8 5 2 1,4,7 6 3
108,2,1,9 8 5 2 1,4 3,7 6
109,0,2,9 8 5 2,4 3,7 6 1
110,0,1,9 8 5,4 3 2,7 6 1
111,2,1,9 8 5,4 3 2 1,7 6
112,0,2,9 8,4 3 2 1,7 6 5
113,1,0,9 8 1,4 3 2,7 6 5
114,1,2,9 8 1,4 3,7 6 5 2
115,0,2,9 8,4 3,7 6 5 2 1
116,1,0,9 8 3,4,7 6 5 2 1
117,2,1,9 8 3,4 1,7 6 5 2
118,2,0,9 8 3 2,4 1,7 6 5
119,1,0,9 8 3 2 1,4,7 6 5
120,1,2,9 8 3 2 1,,7 6 5 4
121,0,2,9 8 3 2,,7 6 5 4 1
122,0,1,9 8 3,2,7 6 5 4 1
123,2,1,9 8 3,2 1,7 6 5 4
124,0,2,9 8,2 1,7 6 5 4 3
125,1,0,9 8 1,2,7 6 5 4 3
126,1,2,9 8 1,,7 6 5 4 3 2
127,0,2,9 8,,7 6 5 4 3 2 1
128,0,1,9,8,7 6 5 4 3 2 1
129,2,1,9,8 1,7 6 5 4 3 2
130,2,0,9 2,8 1,7 6 5 4 3
131,1,0,9 2 1,8,7 6 5 4 3
132,2,1,9 2 1,8 3,7 6 5 4
133,0,2,9 2,8 3,7 6 5 4 1
134,0,1,9,8 3 2,7 6 5 4 1
135,2,1,9,8 3 2 1,7 6 5 4
136,2,0,9 4,8 3 2 1,7 6 5
137,1,0,9 4 1,8 3 2,7 6 5
138,1,2,9 4 1,8 3,7 6 5 2
139,0,2,9 4,8 3,7 6 5 2 1
140,1,0,9 4 3,8,7 6 5 2 1
141,2,1,9 4 3,8 1,7 6 5 2
142,2,0,9 4 3 2,8 1,7 6 5
143,1,0,9 4 3 2 1,8,7 6 5
144,2,1,9 4 3 2 1,8 5,7 6
145,0,2,9 4 3 2,8 5,7 6 1
146,0,1,9 4 3,8 5 2,7 6 1
147,2,1,9 4 3,8 5 2 1,7 6
148,0,2,9 4,8 5 2 1,7 6 3
149,1,0,9 4 1,8 5 2,7 6 3
150,1,2,9 4 1,8 5,7 6 3 2
151,0,2,9 4,8 5,7 6 3 2 1
152,0,1,9,8 5 4,7 6 3 2 1
153,2,1,9,8 5 4 1,7 6 3 2
154,2,0,9 2,8 5 4 1,7 6 3
155,1,0,9 2 1,8 5 4,7 6 3
156,2,1,9 2 1,8 5 4 3,7 6
157,0,2,9 2,8 5 4 3,7 6 1
158,0,1,9,8 5 4 3 2,7 6 1
159,2,1,9,8 5 4 3 2 1,7 6
160,0,2,,8 5 4 3 2 1,7 6 9
161,1,0,1,8 5 4 3 2,7 6 9
162,1,2,1,8 5 4 3,7 6 9 2
163,0,2,,8 5 4 3,7 6 9 2 1
164,1,0,3,8 5 4,7 6 9 2 1
165,2,1,3,8 5 4 1,7 6 9 2
166,2,0,3 2,8 5 4 1,7 6 9
167,1,0,3 2 1,8 5 4,7 6 9
168,1,2,3 2 1,8 5,7 6 9 4
169,0,2,3 2,8 5,7 6 9 4 1
170,0,1,3,8 5 2,7 6 9 4 1
171,2,1,3,8 5 2 1,7 6 9 4
172,0,2,,8 5 2 1,7 6 9 4 3
173,1,0,1,8 5 2,7 6 9 4 3
174,1,2,1,8 5,7 6 9 4 3 2
175,0,2,,8 5,7 6 9 4 3 2 1
176,1,0,5,8,7 6 9 4 3 2 1
177,2,1,5,8 1,7 6 9 4 3 2
178,2,0,5 2,8 1,7 6 9 4 3
179,1,0,5 2 1,8,7 6 9 4 3
180,2,1,5 2 1,8 3,7 6 9 4
181,0,2,5 2,8 3,7 6 9 4 1
182,0,1,5,8 3 2,7 6 9 4 1
183,2,1,5,8 3 2 1,7 6 9 4
184,2,0,5 4,8 3 2 1,7 6 9
185,1,0,5 4 1,8 3 2,7 6 9
186,1,2,5 4 1,8 3,7 6 9 2
187,0,2,5 4,8 3,7 6 9 2 1
188,1,0,5 4 3,8,7 6 9 2 1
189,2,1,5 4 3,8 1,7 6 9 2
190,2,0,5 4 3 2,8 1,7 6 9
191,1,0,5 4 3 2 1,8,7 6 9
192,1,2,5 4 3 2 1,,7 6 9 8
193,0,2,5 4 3 2,,7 6 9 8 1
194,0,1,5 4 3,2,7 6 9 8 1
195,2,1,5 4 3,2 1,7 6 9 8
196,0,2,5 4,2 1,7 6 9 8 3
197,1,0,5 4 1,2,7 6 9 8 3
198,1,2,5 4 1,,7 6 9 8 3 2
199,0,2,5 4,,7 6 9 8 3 2 1
200,0,1,5,4,7 6 9 8 3 2 1
201,2,1,5,4 1,7 6 9 8 3 2
202,2,0,5 2,4 1,7 6 9 8 3
203,1,0,5 2 1,4,7 6 9 8 3
204,2,1,5 2 1,4 3,7 6 9 8
205,0,2,5 2,4 3,7 6 9 8 1
206,0,1,5,4 3 2,7 6 9 8 1
207,2,1,5,4 3 2 1,7 6 9 8
208,0,2,,4 3 2 1,7 6 9 8 5
209,1,0,1,4 3 2,7 6 9 8 5
210,1,2,1,4 3,7 6 9 8 5 2
211,0,2,,4 3,7 6 9 8 5 2 1
212,1,0,3,4,7 6 9 8 5 2 1
213,2,1,3,4 1,7 6 9 8 5 2
214,2,0,3 2,4 1,7 6 9 8 5
215,1,0,3 2 1,4,7 6 9 8 5
216,1,2,3 2 1,,7 6 9 8 5 4
217,0,2,3 2,,7 6 9 8 5 4 1
218,0,1,3,2,7 6 9 8 5 4 1
219,2,1,3,2 1,7 6 9 8 5 4
220,0,2,,2 1,7 6 9 8 5 4 3
221,1,0,1,2,7 6 9 8 5 4 3
222,1,2,1,,7 6 9 8 5 4 3 2
223,0,2,,,7 6 9 8 5 4 3 2 1
224,0,1,6,,7 9 8 5 4 3 2 1
225,2,1,6,1,7 9 8 5 4 3 2
226,2,0,6 2,1,7 9 8 5 4 3
227,1,0,6 2 1,,7 9 8 5 4 3
228,2,1,6 2 1,3,7 9 8 5 4
229,0,2,6 2,3,7 9 8 5 4 1
230,0,1,6,3 2,7 9 8 5 4 1
231,2,1,6,3 2 1,7 9 8 5 4
232,2,0,6 4,3 2 1,7 9 8 5
233,1,0,6 4 1,3 2,7 9 8 5
234,1,2,6 4 1,3,7 9 8 5 2
235,0,2,6 4,3,7 9 8 5 2 1
236,1,0,6 4 3,,7 9 8 5 2 1
237,2,1,6 4 3,1,7 9 8 5 2
238,2,0,6 4 3 2,1,7 9 8 5
239,1,0,6 4 3 2 1,,7 9 8 5
240,2,1,6 4 3 2 1,5,7 9 8
241,0,2,6 4 3 2,5,7 9 8 1
242,0,1,6 4 3,5 2,7 9 8 1
243,2,1,6 4 3,5 2 1,7 9 8
244,0,2,6 4,5 2 1,7 9 8 3
245,1,0,6 4 1,5 2,7 9 8 3
246,1,2,6 4 1,5,7 9 8 3 2
247,0,2,6 4,5,7 9 8 3 2 1
248,0,1,6,5 4,7 9 8 3 2 1
249,2,1,6,5 4 1,7 9 8 3 2
250,2,0,6 2,5 4 1,7 9 8 3
251,1,0,6 2 1,5 4,7 9 8 3
252,2,1,6 2 1,5 4 3,7 9 8
253,0,2,6 2,5 4 3,7 9 8 1
254,0,1,6,5 4 3 2,7 9 8 1
255,2,1,6,5 4 3 2 1,7 9 8
256,0,2,,5 4 3 2 1,7 9 8 6
257,1,0,1,5 4 3 2,7 9 8 6
258,1,2,1,5 4 3,7 9 8 6 2
259,0,2,,5 4 3,7 9 8 6 2 1
260,1,0,3,5 4,7 9 8 6 2 1
261,2,1,3,5 4 1,7 9 8 6 2
262,2,0,3 2,5 4 1,7 9 8 6
263,1,0,3 2 1,5 4,7 9 8 6
264,1,2,3 2 1,5,7 9 8 6 4
265,0,2,3 2,5,7 9 8 6 4 1
266,0,1,3,5 2,7 9 8 6 4 1
267,2,1,3,5 2 1,7 9 8 6 4
268,0,2,,5 2 1,7 9 8 6 4 3
269,1,0,1,5 2,7 9 8 6 4 3
270,1,2,1,5,7 9 8 6 4 3 2
271,0,2,,5,7 9 8 6 4 3 2 1
272,1,0,5,,7 9 8 6 4 3 2 1
273,2,1,5,1,7 9 8 6 4 3 2
274,2,0,5 2,1,7 9 8 6 4 3
275,1,0,5 2 1,,7 9 8 6 4 3
276,2,1,5 2 1,3,7 9 8 6 4
277,0,2,5 2,3,7 9 8 6 4 1
278,0,1,5,3 2,7 9 8 6 4 1
279,2,1,5,3 2 1,7 9 8 6 4
280,2,0,5 4,3 2 1,7 9 8 6
281,1,0,5 4 1,3 2,7 9 8 6
282,1,2,5 4 1,3,7 9 8 6 2
283,0,2,5 4,3,7 9 8 6 2 1
284,1,0,5 4 3,,7 9 8 6 2 1
285,2,1,5 4 3,1,7 9 8 6 2
286,2,0,5 4 3 2,1,7 9 8 6
287,1,0,5 4 3 2 1,,7 9 8 6
288,1,2,5 4 3 2 1,6,7 9 8
289,0,2,5 4 3 2,6,7 9 8 1
290,0,1,5 4 3,6 2,7 9 8 1
291,2,1,5 4 3,6 2 1,7 9 8
292,0,2,5 4,6 2 1,7 9 8 3
293,1,0,5 4 1,6 2,7 9 8 3
294,1,2,5 4 1,6,7 9 8 3 2
295,0,2,5 4,6,7 9 8 3 2 1
296,0,1,5,6 4,7 9 8 3 2 1
297,2,1,5,6 4 1,7 9 8 3 2
298,2,0,5 2,6 4 1,7 9 8 3
299,1,0,5 2 1,6 4,7 9 8 3
300,2,1,5 2 1,6 4 3,7 9 8
301,0,2,5 2,6 4 3,7 9 8 1
302,0,1,5,6 4 3 2,7 9 8 1
303,2,1,5,6 4 3 2 1,7 9 8
304,0,2,,6 4 3 2 1,7 9 8 5
305,1,0,1,6 4 3 2,7 9 8 5
306,1,2,1,6 4 3,7 9 8 5 2
307,0,2,,6 4 3,7 9 8 5 2 1
308,1,0,3,6 4,7 9 8 5 2 1
309,2,1,3,6 4 1,7 9 8 5 2
310,2,0,3 2,6 4 1,7 9 8 5
311,1,0,3 2 1,6 4,7 9 8 5
312,1,2,3 2 1,6,7 9 8 5 4
313,0,2,3 2,6,7 9 8 5 4 1
314,0,1,3,6 2,7 9 8 5 4 1
315,2,1,3,6 2 1,7 9 8 5 4
316,0,2,,6 2 1,7 9 8 5 4 3
317,1,0,1,6 2,7 9 8 5 4 3
318,1,2,1,6,7 9 8 5 4 3 2
319,0,2,,6,7 9 8 5 4 3 2 1
320,0,1,7,6,9 8 5 4 3 2 1
321,2,1,7,6 1,9 8 5 4 3 2
322,2,0,7 2,6 1,9 8 5 4 3
323,1,0,7 2 1,6,9 8 5 4 3
324,2,1,7 2 1,6 3,9 8 5 4
325,0,2,7 2,6 3,9 8 5 4 1
326,0,1,7,6 3 2,9 8 5 4 1
327,2,1,7,6 3 2 1,9 8 5 4
328,2,0,7 4,6 3 2 1,9 8 5
329,1,0,7 4 1,6 3 2,9 8 5
330,1,2,7 4 1,6 3,9 8 5 2
331,0,2,7 4,6 3,9 8 5 2 1
332,1,0,7 4 3,6,9 8 5 2 1
333,2,1,7 4 3,6 1,9 8 5 2
334,2,0,7 4 3 2,6 1,9 8 5
335,1,0,7 4 3 2 1,6,9 8 5
336,2,1,7 4 3 2 1,6 5,9 8
337,0,2,7 4 3 2,6 5,9 8 1
338,0,1,7 4 3,6 5 2,9 8 1
339,2,1,7 4 3,6 5 2 1,9 8
340,0,2,7 4,6 5 2 1,9 8 3
341,1,0,7 4 1,6 5 2,9 8 3
342,1,2,7 4 1,6 5,9 8 3 2
343,0,2,7 4,6 5,9 8 3 2 1
344,0,1,7,6 5 4,9 8 3 2 1
345,2,1,7,6 5 4 1,9 8 3 2
346,2,0,7 2,6 5 4 1,9 8 3
347,1,0,7 2 1,6 5 4,9 8 3
348,2,1,7 2 1,6 5 4 3,9 8
349,0,2,7 2,6 5 4 3,9 8 1
350,0,1,7,6 5 4 3 2,9 8 1
351,2,1,7,6 5 4 3 2 1,9 8
352,0,2,,6 5 4 3 2 1,9 8 7
353,1,0,1,6 5 4 3 2,9 8 7
354,1,2,1,6 5 4 3,9 8 7 2
355,0,2,,6 5 4 3,9 8 7 2 1
356,1,0,3,6 5 4,9 8 7 2 1
357,2,1,3,6 5 4 1,9 8 7 2
358,2,0,3 2,6 5 4 1,9 8 7
359,1,0,3 2 1,6 5 4,9 8 7
360,1,2,3 2 1,6 5,9 8 7 4
361,0,2,3 2,6 5,9 8 7 4 1
362,0,1,3,6 5 2,9 8 7 4 1
363,2,1,3,6 5 2 1,9 8 7 4
364,0,2,,6 5 2 1,9 8 7 4 3
365,1,0,1,6 5 2,9 8 7 4 3
366,1,2,1,6 5,9 8 7 4 3 2
367,0,2,,6 5,9 8 7 4 3 2 1
368,1,0,5,6,9 8 7 4 3 2 1
369,2,1,5,6 1,9 8 7 4 3 2
370,2,0,5 2,6 1,9 8 7 4 3
371,1,0,5 2 1,6,9 8 7 4 3
372,2,1,5 2 1,6 3,9 8 7 4
373,0,2,5 2,6 3,9 8 7 4 1
374,0,1,5,6 3 2,9 8 7 4 1
375,2,1,5,6 3 2 1,9 8 7 4
376,2,0,5 4,6 3 2 1,9 8 7
377,1,0,5 4 1,6 3 2,9 8 7
378,1,2,5 4 1,6 3,9 8 7 2
379,0,2,5 4,6 3,9 8 7 2 1
380,1,0,5 4 3,6,9 8 7 2 1
381,2,1,5 4 3,6 1,9 8 7 2
382,2,0,5 4 3 2,6 1,9 8 7
383,1,0,5 4 3 2 1,6,9 8 7
384,1,2,5 4 3 2 1,,9 8 7 6
385,0,2,5 4 3 2,,9 8 7 6 1
386,0,1,5 4 3,2,9 8 7 6 1
387,2,1,5 4 3,2 1,9 8 7 6
388,0,2,5 4,2 1,9 8 7 6 3
389,1,0,5 4 1,2,9 8 7 6 3
390,1,2,5 4 1,,9 8 7 6 3 2
391,0,2,5 4,,9 8 7 6 3 2 1
392,0,1,5,4,9 8 7 6 3 2 1
393,2,1,5,4 1,9 8 7 6 3 2
394,2,0,5 2,4 1,9 8 7 6 3
395,1,0,5 2 1,4,9 8 7 6 3
396,2,1,5 2 1,4 3,9 8 7 6
397,0,2,5 2,4 3,9 8 7 6 1
398,0,1,5,4 3 2,9 8 7 6 1
399,2,1,5,4 3 2 1,9 8 7 6
400,0,2,,4 3 2 1,9 8 7 6 5
401,1,0,1,4 3 2,9 8 7 6 5
402,1,2,1,4 3,9 8 7 6 5 2
403,0,2,,4 3,9 8 7 6 5 2 1
404,1,0,3,4,9 8 7 6 5 2 1
405,2,1,3,4 1,9 8 7 6 5 2
406,2,0,3 2,4 1,9 8 7 6 5
407,1,0,3 2 1,4,9 8 7 6 5
408,1,2,3 2 1,,9 8 7 6 5 4
409,0,2,3 2,,9 8 7 6 5 4 1
410,0,1,3,2,9 8 7 6 5 4 1
411,2,1,3,2 1,9 8 7 6 5 4
412,0,2,,2 1,9 8 7 6 5 4 3
413,1,0,1,2,9 8 7 6 5 4 3
414,1,2,1,,9 8 7 6 5 4 3 2
415,0,2,,,9 8 7 6 5 4 3 2 1
416,0,1,8,,9 7 6 5 4 3 2 1
417,2,1,8,1,9 7 6 5 4 3 2
418,2,0,8 2,1,9 7 6 5 4 3
419,1,0,8 2 1,,9 7 6 5 4 3
420,2,1,8 2 1,3,9 7 6 5 4
421,0,2,8 2,3,9 7 6 5 4 1
422,0,1,8,3 2,9 7 6 5 4 1
423,2,1,8,3 2 1,9 7 6 5 4
424,2,0,8 4,3 2 1,9 7 6 5
425,1,0,8 4 1,3 2,9 7 6 5
426,1,2,8 4 1,3,9 7 6 5 2
427,0,2,8 4,3,9 7 6 5 2 1
428,1,0,8 4 3,,9 7 6 5 2 1
429,2,1,8 4 3,1,9 7 6 5 2
430,2,0,8 4 3 2,1,9 7 6 5
431,1,0,8 4 3 2 1,,9 7 6 5
432,2,1,8 4 3 2 1,5,9 7 6
433,0,2,8 4 3 2,5,9 7 6 1
434,0,1,8 4 3,5 2,9 7 6 1
435,2,1,8 4 3,5 2 1,9 7 6
436,0,2,8 4,5 2 1,9 7 6 3
437,1,0,8 4 1,5 2,9 7 6 3
438,1,2,8 4 1,5,9 7 6 3 2
439,0,2,8 4,5,9 7 6 3 2 1
440,0,1,8,5 4,9 7 6 3 2 1
441,2,1,8,5 4 1,9 7 6 3 2
442,2,0,8 2,5 4 1,9 7 6 3
443,1,0,8 2 1,5 4,9 7 6 3
444,2,1,8 2 1,5 4 3,9 7 6
445,0,2,8 2,5 4 3,9 7 6 1
446,0,1,8,5 4 3 2,9 7 6 1
447,2,1,8,5 4 3 2 1,9 7 6
448,0,2,,5 4 3 2 1,9 7 6 8
449,1,0,1,5 4 3 2,9 7 6 8
450,1,2,1,5 4 3,9 7 6 8 2
451,0,2,,5 4 3,9 7 6 8 2 1
452,1,0,3,5 4,9 7 6 8 2 1
453,2,1,3,5 4 1,9 7 6 8 2
454,2,0,3 2,5 4 1,9 7 6 8
455,1,0,3 2 1,5 4,9 7 6 8
456,1,2,3 2 1,5,9 7 6 8 4
457,0,2,3 2,5,9 7 6 8 4 1
458,0,1,3,5 2,9 7 6 8 4 1
459,2,1,3,5 2 1,9 7 6 8 4
460,0,2,,5 2 1,9 7 6 8 4 3
461,1,0,1,5 2,9 7 6 8 4 3
462,1,2,1,5,9 7 6 8 4 3 2
463,0,2,,5,9 7 6 8 4 3 2 1
464,1,0,5,,9 7 6 8 4 3 2 1
465,2,1,5,1,9 7 6 8 4 3 2
466,2,0,5 2,1,9 7 6 8 4 3
467,1,0,5 2 1,,9 7 6 8 4 3
468,2,1,5 2 1,3,9 7 6 8 4
469,0,2,5 2,3,9 7 6 8 4 1
470,0,1,5,3 2,9 7 6 8 4 1
471,2,1,5,3 2 1,9 7 6 8 4
472,2,0,5 4,3 2 1,9 7 6 8
473,1,0,5 4 1,3 2,9 7 6 8
474,1,2,5 4 1,3,9 7 6 8 2
475,0,2,5 4,3,9 7 6 8 2 1
476,1,0,5 4 3,,9 7 6 8 2 1
477,2,1,5 4 3,1,9 7 6 8 2
478,2,0,5 4 3 2,1,9 7 6 8
479,1,0,5 4 3 2 1,,9 7 6 8
480,1,2,5 4 3 2 1,6,9 7 8
481,0,2,5 4 3 2,6,9 7 8 1
482,0,1,5 4 3,6 2,9 7 8 1
483,2,1,5 4 3,6 2 1,9 7 8
484,0,2,5 4,6 2 1,9 7 8 3
485,1,0,5 4 1,6 2,9 7 8 3
486,1,2,5 4 1,6,9 7 8 3 2
487,0,2,5 4,6,9 7 8 3 2 1
488,0,1,5,6 4,9 7 8 3 2 1
489,2,1,5,6 4 1,9 7 8 3 2
490,2,0,5 2,6 4 1,9 7 8 3
491,1,0,5 2 1,6 4,9 7 8 3
492,2,1,5 2 1,6 4 3,9 7 8
493,0,2,5 2,6 4 3,9 7 8 1
494,0,1,5,6 4 3 2,9 7 8 1
495,2,1,5,6 4 3 2 1,9 7 8
496,0,2,,6 4 3 2 1,9 7 8 5
497,1,0,1,6 4 3 2,9 7 8 5
498,1,2,1,6 4 3,9 7 8 5 2
499,0,2,,6 4 3,9 7 8 5 2 1
500,1,0,3,6 4,9 7 8 5 2 1
501,2,1,3,6 4 1,9 7 8 5 2
502,2,0,3 2,6 4 1,9 7 8 5
503,1,0,3 2 1,6 4,9 7 8 5
504,1,2,3 2 1,6,9 7 8 5 4
505,0,2,3 2,6,9 7 8 5 4 1
506,0,1,3,6 2,9 7 8 5 4 1
507,2,1,3,6 2 1,9 7 8 5 4
508,0,2,,6 2 1,9 7 8 5 4 3
509,1,0,1,6 2,9 7 8 5 4 3
510,1,2,1,6,9 7 8 5 4 3 2
511,0,2,,6,9 7 8 5 4 3 2 1
```

