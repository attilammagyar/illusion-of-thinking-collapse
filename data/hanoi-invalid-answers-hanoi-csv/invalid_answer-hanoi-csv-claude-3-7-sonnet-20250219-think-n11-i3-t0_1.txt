# model_name='claude-3-7-sonnet-20250219', reasoning_budget=32000, tries=0, n=11, i=3
# valid_prefix_length=9, is_valid_solution=0, first_correction=-1

<think>
This is the well-known Tower of Hanoi puzzle. The solution to move n disks from the source peg to the destination peg can be described recursively:

1. Move n-1 disks from the source peg to the auxiliary peg.
2. Move the largest disk (disk n) from the source peg to the destination peg.
3. Move the n-1 disks from the auxiliary peg to the destination peg.

For 11 disks, we need to follow this algorithm recursively. Let's implement it:

For the Tower of Hanoi with 11 disks:
- Source peg (peg 0): Initially has all 11 disks.
- Auxiliary peg (peg 1): Initially empty.
- Destination peg (peg 2): Initially empty. We want all disks to end up here.

Let's write a recursive function to generate the moves:

```
function hanoi(n, source, auxiliary, destination, moves):
    if n == 1:
        moves.append((1, source, destination))  # Move disk 1 from source to destination
    else:
        hanoi(n-1, source, destination, auxiliary, moves)  # Move n-1 disks from source to auxiliary using destination as auxiliary
        moves.append((n, source, destination))  # Move disk n from source to destination
        hanoi(n-1, auxiliary, source, destination, moves)  # Move n-1 disks from auxiliary to destination using source as auxiliary
    return moves
```

Now, let's execute this function for n=11, source=0, auxiliary=1, destination=2:

First, let's understand the steps for n=3 as an example:
1. Move 2 disks from source (0) to auxiliary (1) using destination (2) as the auxiliary.
   a. Move 1 disk from source (0) to destination (2).
   b. Move disk 2 from source (0) to auxiliary (1).
   c. Move 1 disk from destination (2) to auxiliary (1).
2. Move disk 3 from source (0) to destination (2).
3. Move 2 disks from auxiliary (1) to destination (2) using source (0) as the auxiliary.
   a. Move 1 disk from auxiliary (1) to source (0).
   b. Move disk 2 from auxiliary (1) to destination (2).
   c. Move 1 disk from source (0) to destination (2).

This is the optimal solution for n=3, but for n=11, the list becomes quite long. Let me generate it step by step.

For n=11, the total number of moves will be 2^11 - 1 = 2048 - 1 = 2047. That's a lot, but let's proceed systematically.

Let's execute our recursive algorithm for n=11 disks:

First, let's start by defining our recursive function in a more programming-friendly way:

```python
def hanoi(n, source, auxiliary, destination):
    if n == 1:
        return [(1, source, destination)]  # Move disk 1 from source to destination
    else:
        moves = hanoi(n-1, source, destination, auxiliary)  # Move n-1 disks from source to auxiliary using destination as auxiliary
        moves.append((n, source, destination))  # Move disk n from source to destination
        moves.extend(hanoi(n-1, auxiliary, source, destination))  # Move n-1 disks from auxiliary to destination using source as auxiliary
        return moves
```

Now, for n=11, I'll trace the first few steps of this algorithm:

1. We start with hanoi(11, 0, 1, 2).
2. This calls hanoi(10, 0, 2, 1).
3. This calls hanoi(9, 0, 1, 2).
... (and so on, recursively)

Let's break it down more methodically. The Tower of Hanoi has a known solution pattern. The number of moves for n disks is 2^n - 1. For n=11, that's 2^11 - 1 = 2048 - 1 = 2047 moves.

Instead of going through the recursion step by step (which would be very lengthy), I'll use an iterative approach to generate all the moves.

Let's use the following rules to determine the move for a particular step:
1. If step number is odd, move the smallest disk.
2. If step number is even, make the only legal move not involving the smallest disk.

But I realize this becomes complex to manually enumerate all 2047 moves. Let me directly implement the recursive algorithm and generate the solution:

```python
def hanoi(n, source, auxiliary, destination):
    moves = []
    
    def _hanoi(n, source, auxiliary, destination):
        if n == 1:
            moves.append((1, source, destination))
        else:
            _hanoi(n-1, source, destination, auxiliary)
            moves.append((n, source, destination))
            _hanoi(n-1, auxiliary, source, destination)
    
    _hanoi(n, source, auxiliary, destination)
    return moves
```

Let's manually trace this for n=3 as a sanity check:

1. hanoi(3, 0, 1, 2) calls _hanoi(3, 0, 1, 2)
2. _hanoi(3, 0, 1, 2) calls _hanoi(2, 0, 2, 1)
3. _hanoi(2, 0, 2, 1) calls _hanoi(1, 0, 1, 2)
4. _hanoi(1, 0, 1, 2) adds (1, 0, 2) to moves.
5. _hanoi(2, 0, 2, 1) adds (2, 0, 1) to moves.
6. _hanoi(2, 0, 2, 1) calls _hanoi(1, 2, 0, 1)
7. _hanoi(1, 2, 0, 1) adds (1, 2, 1) to moves.
8. _hanoi(3, 0, 1, 2) adds (3, 0, 2) to moves.
9. _hanoi(3, 0, 1, 2) calls _hanoi(2, 1, 0, 2)
10. _hanoi(2, 1, 0, 2) calls _hanoi(1, 1, 2, 0)
11. _hanoi(1, 1, 2, 0) adds (1, 1, 0) to moves.
12. _hanoi(2, 1, 0, 2) adds (2, 1, 2) to moves.
13. _hanoi(2, 1, 0, 2) calls _hanoi(1, 0, 1, 2)
14. _hanoi(1, 0, 1, 2) adds (1, 0, 2) to moves.

So, the moves for n=3 are:
1. (1, 0, 2)
2. (2, 0, 1)
3. (1, 2, 1)
4. (3, 0, 2)
5. (1, 1, 0)
6. (2, 1, 2)
7. (1, 0, 2)

This matches the example given in the problem.

Now, let's generate the solution for n=11. Instead of manually enumerating all 2047 moves, I'll write the algorithm and execute it for n=11.

Let's implement a more straightforward approach:

```python
def hanoi(n, source, auxiliary, destination):
    if n == 0:
        return []
    if n == 1:
        return [(1, source, destination)]
    
    moves = hanoi(n-1, source, destination, auxiliary)  # Move n-1 disks from source to auxiliary
    moves.append((n, source, destination))  # Move the largest disk from source to destination
    moves.extend(hanoi(n-1, auxiliary, source, destination))  # Move n-1 disks from auxiliary to destination
    
    return moves
```

For n=11, this function will generate all 2047 moves. Given the constraints, I'll unroll this function and directly compute the moves for n=11:

```
moves = []
def _hanoi(n, source, auxiliary, destination):
    if n == 1:
        moves.append((1, source, destination))  # 1 is the smallest disk
    else:
        _hanoi(n-1, source, destination, auxiliary)
        moves.append((n, source, destination))
        _hanoi(n-1, auxiliary, source, destination)

_hanoi(11, 0, 1, 2)
```

Let's start generating the moves:

For simplicity, I'll use the iterative property of the Tower of Hanoi: for a puzzle with n disks, disk 1 (the smallest) moves on steps 1, 3, 5, ..., 2^n - 1. Disk 2 moves on steps 2, 6, 10, ..., 2 * (2^(n-1) - 1). And so on.

But even that approach becomes complex for manual enumeration. Let's revert to the recursive approach:

For n=11:
1. Move 10 disks from peg 0 to peg 1, using peg 2 as auxiliary.
2. Move disk 11 from peg 0 to peg 2.
3. Move 10 disks from peg 1 to peg 2, using peg 0 as auxiliary.

Step 1 can be further broken down:
1.1. Move 9 disks from peg 0 to peg 2, using peg 1 as auxiliary.
1.2. Move disk 10 from peg 0 to peg 1.
1.3. Move 9 disks from peg 2 to peg 1, using peg 0 as auxiliary.

And so on...

I see that this recursive approach gets complex to manually enumerate. Instead, let's use an iterative property of the Tower of Hanoi:

For odd n, the optimal strategy is to always move the smallest disk (disk 1) in the same direction (e.g., clockwise), and make the only other legal move.
For even n, the optimal strategy is to always move the smallest disk (disk 1) in the same direction (e.g., counter-clockwise), and make the only other legal move.

For n=11 (which is odd), let's say we move the smallest disk clockwise (0 -> 1 -> 2 -> 0). And for any even-numbered step, we make the only other legal move.

But this also becomes complex to enumerate manually for 2047 moves.

I think the best approach is to use a more direct algorithm. Let's define a function to compute the moves for the Tower of Hanoi and then list all the moves for n=11.

```python
def hanoi_moves(n, source, auxiliary, destination):
    moves = []
    
    def _hanoi(n, source, auxiliary, destination):
        if n == 1:
            moves.append((1, source, destination))
        else:
            _hanoi(n-1, source, destination, auxiliary)
            moves.append((n, source, destination))
            _hanoi(n-1, auxiliary, source, destination)
    
    _hanoi(n, source, auxiliary, destination)
    return moves
```

Let's trace this for n=11:

1. _hanoi(11, 0, 1, 2) calls _hanoi(10, 0, 2, 1)
2. _hanoi(10, 0, 2, 1) calls _hanoi(9, 0, 1, 2)
3. _hanoi(9, 0, 1, 2) calls _hanoi(8, 0, 2, 1)
... (recursion continues)

Clearly, trying to trace the recursive algorithm step by step to enumerate all 2047 moves is impractical. Let's use a more direct approach.

For the Tower of Hanoi with n disks, the pattern of moves can be derived from the binary representation of the move number.

For example, for the k-th move (where k ranges from 1 to 2^n - 1):
1. Convert k to binary.
2. Count the number of trailing zeros in the binary representation of k. Let's call this count p.
3. Move disk p+1 according to a specific rule.

The rule for which peg to move the disk to/from depends on whether n is odd or even and on the parity of the disk.

For n=11 (which is odd):
- For odd-numbered disks (1, 3, 5, 7, 9, 11), the movement pattern is: 0 -> 2 -> 1 -> 0.
- For even-numbered disks (2, 4, 6, 8, 10), the movement pattern is: 0 -> 1 -> 2 -> 0.

But again, manually listing all 2047 moves using this rule is impractical. Let's resort to a more programmatic approach:

```python
def hanoi_moves(n, source, auxiliary, destination):
    if n == 0:
        return []
    
    total_moves = 2**n - 1
    moves = []
    
    for move_number in range(1, total_moves + 1):
        # Count trailing zeros in binary representation of move_number
        trailing_zeros = 0
        temp = move_number
        while temp % 2 == 0:
            trailing_zeros += 1
            temp //= 2
        
        disk = trailing_zeros + 1
        
        # Determine source and destination pegs based on n, disk, and move_number
        if (n % 2 == 1 and disk % 2 == 1) or (n % 2 == 0 and disk % 2 == 0):
            # Clockwise movement: 0 -> 2 -> 1 -> 0
            src = (source + (move_number - 1) // (2**disk)) % 3
            dst = (src + 1) % 3
        else:
            # Counter-clockwise movement: 0 -> 1 -> 2 -> 0
            src = (source + (move_number - 1) // (2**disk)) % 3
            dst = (src + 2) % 3
        
        moves.append((disk, src, dst))
    
    return moves
```

But wait, the above approach has some issues and is more complex than it needs to be. Let's revert to a simpler approach based on the recursive solution. I'll generate the moves for n=11 directly:

```python
def generate_hanoi_moves(n, source, auxiliary, destination):
    moves = []
    
    def _hanoi(n, source, auxiliary, destination):
        if n == 1:
            moves.append((1, source, destination))
        else:
            _hanoi(n-1, source, destination, auxiliary)
            moves.append((n, source, destination))
            _hanoi(n-1, auxiliary, source, destination)
    
    _hanoi(n, source, auxiliary, destination)
    return moves
```

Now, I'll list the moves for n=11:

Let me start by listing moves for n=2 to get a grasp of the pattern:

For n=2, source=0, auxiliary=1, destination=2:
1. _hanoi(2, 0, 1, 2) calls _hanoi(1, 0, 2, 1)
2. _hanoi(1, 0, 2, 1) adds (1, 0, 1) to moves.
3. _hanoi(2, 0, 1, 2) adds (2, 0, 2) to moves.
4. _hanoi(2, 0, 1, 2) calls _hanoi(1, 1, 0, 2)
5. _hanoi(1, 1, 0, 2) adds (1, 1, 2) to moves.

So, the moves for n=2 are:
1. (1, 0, 1)
2. (2, 0, 2)
3. (1, 1, 2)

This corresponds to the CSV format:
```
disk_id,from_peg,to_peg
1,0,1
2,0,2
1,1,2
```

For n=3, source=0, auxiliary=1, destination=2, we already determined the moves:
1. (1, 0, 2)
2. (2, 0, 1)
3. (1, 2, 1)
4. (3, 0, 2)
5. (1, 1, 0)
6. (2, 1, 2)
7. (1, 0, 2)

In the CSV format:
```
disk_id,from_peg,to_peg
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
```

For n=4, source=0, auxiliary=1, destination=2, we'd have:
1. _hanoi(4, 0, 1, 2) calls _hanoi(3, 0, 2, 1)
2. For _hanoi(3, 0, 2, 1), we get the moves (replacing destination with auxiliary and auxiliary with destination):
   1. (1, 0, 1)
   2. (2, 0, 2)
   3. (1, 1, 2)
   4. (3, 0, 1)
   5. (1, 2, 0)
   6. (2, 2, 1)
   7. (1, 0, 1)
3. _hanoi(4, 0, 1, 2) adds (4, 0, 2) to moves.
4. _hanoi(4, 0, 1, 2) calls _hanoi(3, 1, 0, 2)
5. For _hanoi(3, 1, 0, 2), we get the moves (replacing source with auxiliary and auxiliary with source):
   1. (1, 1, 2)
   2. (2, 1, 0)
   3. (1, 2, 0)
   4. (3, 1, 2)
   5. (1, 0, 1)
   6. (2, 0, 2)
   7. (1, 1, 2)

So, the moves for n=4 are:
1. (1, 0, 1)
2. (2, 0, 2)
3. (1, 1, 2)
4. (3, 0, 1)
5. (1, 2, 0)
6. (2, 2, 1)
7. (1, 0, 1)
8. (4, 0, 2)
9. (1, 1, 2)
10. (2, 1, 0)
11. (1, 2, 0)
12. (3, 1, 2)
13. (1, 0, 1)
14. (2, 0, 2)
15. (1, 1, 2)

Converting to CSV format:
```
disk_id,from_peg,to_peg
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
```

Continuing for n=5 would involve 2^5 - 1 = 31 moves, and for n=11 it would be 2^11 - 1 = 2047 moves. Clearly, manually tracing and listing all these moves is impractical.

Let's use a direct approach to generate the moves for n=11:

```python
def hanoi_moves(n, source, auxiliary, destination):
    moves = []
    
    def _hanoi(n, source, auxiliary, destination):
        if n == 1:
            moves.append((1, source, destination))
        else:
            _hanoi(n-1, source, destination, auxiliary)
            moves.append((n, source, destination))
            _hanoi(n-1, auxiliary, source, destination)
    
    _hanoi(n, source, auxiliary, destination)
    return moves

moves = hanoi_moves(11, 0, 1, 2)
```

Given the constraints, I won't list all 2047 moves here. But they can be generated using the function provided.

The key insight is that the Tower of Hanoi problem has a known optimal solution with 2^n - 1 moves for n disks. The recursive algorithm described above generates this optimal solution.

Let me think of a more efficient way to present the solution, since manually listing all 2047 moves is impractical.

I know that for n=11 disks, the recursive solution is:
1. Move 10 disks from source to auxiliary using destination.
2. Move disk 11 from source to destination.
3. Move 10 disks from auxiliary to destination using source.

And for n=10 disks, it's:
1. Move 9 disks from source to destination using auxiliary.
2. Move disk 10 from source to auxiliary.
3. Move 9 disks from destination to auxiliary using source.

But still, expanding this recursively would lead to all 2047 moves.

Another approach to determine the source and destination pegs for the k-th move directly:

For the k-th move (where k ranges from 0 to 2^n - 2):
1. The disk being moved is the one with the least significant bit set in the binary representation of k+1. For example, if k+1 = 5 (binary 101), the least significant bit set is the 1st (0-indexed), so disk 1 is moved.
2. The source and destination pegs depend on the value of k+1 and the parity of the disk and the total number of disks.

But this approach also becomes complex for 2047 moves.

Let's use a programming approach to generate the moves:

```python
def generate_hanoi_moves(n, source, auxiliary, destination):
    moves = []
    
    def _hanoi(n, source, auxiliary, destination):
        if n >= 1:
            _hanoi(n-1, source, destination, auxiliary)
            moves.append((n, source, destination))
            _hanoi(n-1, auxiliary, source, destination)
    
    _hanoi(n, source, auxiliary, destination)
    return moves

moves = generate_hanoi_moves(11, 0, 1, 2)
```

Given the constraints of this task, I'll just regenerate the full list of moves and present them directly.

Let's start with n=3 as a reference and then proceed to n=11:

For n=3, source=0, auxiliary=1, destination=2, the moves are:
1. (1, 0, 2)
2. (2, 0, 1)
3. (1, 2, 1)
4. (3, 0, 2)
5. (1, 1, 0)
6. (2, 1, 2)
7. (1, 0, 2)

Converting to CSV format:
```
disk_id,from_peg,to_peg
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
```

Ok, let's generate the full list of moves for n=11. Since we're doing this manually, I'll generate a few levels to get the pattern:

For n=1, source=0, auxiliary=1, destination=2, the moves are:
1. (1, 0, 2)

For n=2, source=0, auxiliary=1, destination=2, the moves are:
1. (1, 0, 1)
2. (2, 0, 2)
3. (1, 1, 2)

For n=3, source=0, auxiliary=1, destination=2, the moves are:
1. (1, 0, 2)
2. (2, 0, 1)
3. (1, 2, 1)
4. (3, 0, 2)
5. (1, 1, 0)
6. (2, 1, 2)
7. (1, 0, 2)

For n=4, source=0, auxiliary=1, destination=2, we already derived the moves:
1. (1, 0, 1)
2. (2, 0, 2)
3. (1, 1, 2)
4. (3, 0, 1)
5. (1, 2, 0)
6. (2, 2, 1)
7. (1, 0, 1)
8. (4, 0, 2)
9. (1, 1, 2)
10. (2, 1, 0)
11. (1, 2, 0)
12. (3, 1, 2)
13. (1, 0, 1)
14. (2, 0, 2)
15. (1, 1, 2)

Continuing this pattern manually for n=5, n=6, and all the way to n=11 would be extremely lengthy. Let's instead use a programmatic approach and list the full set of moves for n=11:

```python
def hanoi_moves(n, source, auxiliary, destination):
    if n == 1:
        return [(1, source, destination)]
    
    # Move n-1 disks from source to auxiliary using destination as temporary
    moves = hanoi_moves(n-1, source, destination, auxiliary)
    
    # Move the nth disk from source to destination
    moves.append((n, source, destination))
    
    # Move n-1 disks from auxiliary to destination using source as temporary
    moves.extend(hanoi_moves(n-1, auxiliary, source, destination))
    
    return moves

moves = hanoi_moves(11, 0, 1, 2)
```

Actually, instead of just saying I'd generate the moves, let me explicitly list all the moves for n=11. I'll use the recursive pattern to derive them:

For n=11, source=0, auxiliary=1, destination=2, the first step is to move 10 disks from source to auxiliary using destination, then move disk 11 from source to destination, and finally move 10 disks from auxiliary to destination using source.

So, for n=11, the moves are:
1. First, move 10 disks from peg 0 to peg 1 using peg 2.
2. Then, move disk 11 from peg 0 to peg 2.
3. Finally, move 10 disks from peg 1 to peg 2 using peg 0.

Recursively, for n=10, the moves are:
1. First, move 9 disks from peg 0 to peg 2 using peg 1.
2. Then, move disk 10 from peg 0 to peg 1.
3. Finally, move 9 disks from peg 2 to peg 1 using peg 0.

And so on...

Since I can't manually list all 2047 moves here, let me derive a more direct approach. I'll use the formula to compute the source and destination pegs for the k-th move (0 <= k < 2^n - 1):

For the Tower of Hanoi with n disks:
1. The disk moved at step k is the disk with the least significant bit set in k+1. For example, if k+1 = 5 (binary 101), the least significant bit set is the 1st (0-indexed), so disk 1+1 = 2 is moved.
2. For odd n, if the disk is odd, it moves in the pattern 0 -> 2 -> 1 -> 0. If the disk is even, it moves in the pattern 0 -> 1 -> 2 -> 0.
3. For even n, if the disk is odd, it moves in the pattern 0 -> 1 -> 2 -> 0. If the disk is even, it moves in the pattern 0 -> 2 -> 1 -> 0.

For n=11 (which is odd):
- For odd-numbered disks (1, 3, 5, 7, 9, 11), the movement pattern is: 0 -> 2 -> 1 -> 0.
- For even-numbered disks (2, 4, 6, 8, 10), the movement pattern is: 0 -> 1 -> 2 -> 0.

Let's compute the first few moves:

Move 1: k=0, k+1=1 (binary 1). The least significant bit set is the 0th (0-indexed), so disk 0+1 = 1 is moved. Disk 1 is odd, and n=11 is odd, so it moves from 0 to 2.
Move 2: k=1, k+1=2 (binary 10). The least significant bit set is the 1st (0-indexed), so disk 1+1 = 2 is moved. Disk 2 is even, and n=11 is odd, so it moves from 0 to 1.
Move 3: k=2, k+1=3 (binary 11). The least significant bit set is the 0th (0-indexed), so disk 0+1 = 1 is moved. Disk 1 is odd, and n=11 is odd, so it moves from 2 to 1.
Move 4: k=3, k+1=4 (binary 100). The least significant bit set is the 2nd (0-indexed), so disk 2+1 = 3 is moved. Disk 3 is odd, and n=11 is odd, so it moves from 0 to 2.

...and so on.

Alright, let's systematically generate all 2047 moves for n=11 disks moving from peg 0 to peg 2, with peg 1 as auxiliary.

Given the constraints, I think the most efficient way to generate all the moves is to use the following approach:

```
function generate_moves(n, source, auxiliary, destination):
    total_moves = 2^n - 1
    moves = []
    
    for k in range(total_moves):
        disk = find_least_significant_bit(k+1) + 1
        source_peg, destination_peg = compute_source_and_destination(n, disk, k)
        moves.append((disk, source_peg, destination_peg))
    
    return moves
```

Where `find_least_significant_bit(x)` finds the position of the least significant bit set in `x`, and `compute_source_and_destination(n, disk, k)` computes the source and destination pegs for the k-th move of disk `disk` in a Tower of Hanoi with `n` disks.

Let's fill in these functions:

```
function find_least_significant_bit(x):
    # Find the position of the least significant bit set in x
    # For example, for x=6 (binary 110), the result is 1 (0-indexed)
    position = 0
    while x % 2 == 0:
        x = x // 2
        position += 1
    return position

function compute_source_and_destination(n, disk, k):
    # Compute the source and destination pegs for the k-th move of disk `disk`
    # in a Tower of Hanoi with `n` disks
    
    # For odd n, if disk is odd, the movement pattern is: 0 -> 2 -> 1 -> 0
    # For odd n, if disk is even, the movement pattern is: 0 -> 1 -> 2 -> 0
    # For even n, if disk is odd, the movement pattern is: 0 -> 1 -> 2 -> 0
    # For even n, if disk is even, the movement pattern is: 0 -> 2 -> 1 -> 0
    
    if (n % 2 == 1 and disk % 2 == 1) or (n % 2 == 0 and disk % 2 == 0):
        # Clockwise: 0 -> 2 -> 1 -> 0
        direction = 1
    else:
        # Counter-clockwise: 0 -> 1 -> 2 -> 0
        direction = -1
    
    steps = (k + 1) // (2 ** (disk - 1)) % 3
    source_peg = (0 + direction * steps) % 3
    destination_peg = (source_peg + direction) % 3
    
    return source_peg, destination_peg
```

But wait, I think this approach is more complex than it needs to be. Let's try a different method:

For n=11, the optimal algorithm is:
1. Start with all disks on peg 0.
2. Let's number the pegs as 0, 1, and 2.
3. For odd-numbered disks (1, 3, 5, 7, 9, 11), we always move them in a fixed pattern: 0 -> 2 -> 1 -> 0.
4. For even-numbered disks (2, 4, 6, 8, 10), we always move them in a fixed pattern: 0 -> 1 -> 2 -> 0.
5. On each step, move the smallest disk that hasn't been moved for the longest time.

But even with this approach, manually listing all 2047 moves would be impractical.

Let's try another approach. Instead of computing the source and destination pegs for each move, let's directly simulate the recursive algorithm and list all the moves:

Let's start with a pseudocode of the recursive algorithm:

```
function hanoi(n, source, auxiliary, destination, moves):
    if n == 1:
        moves.append((1, source, destination))
    else:
        hanoi(n-1, source, destination, auxiliary, moves)
        moves.append((n, source, destination))
        hanoi(n-1, auxiliary, source, destination, moves)
    return moves
```

For n=11, source=0, auxiliary=1, destination=2, I'll start unfolding the recursion:

1. hanoi(11, 0, 1, 2, moves) calls hanoi(10, 0, 2, 1, moves)
2. hanoi(10, 0, 2, 1, moves) calls hanoi(9, 0, 1, 2, moves)
3. hanoi(9, 0, 1, 2, moves) calls hanoi(8, 0, 2, 1, moves)
4. hanoi(8, 0, 2, 1, moves) calls hanoi(7, 0, 1, 2, moves)
5. hanoi(7, 0, 1, 2, moves) calls hanoi(6, 0, 2, 1, moves)
6. hanoi(6, 0, 2, 1, moves) calls hanoi(5, 0, 1, 2, moves)
7. hanoi(5, 0, 1, 2, moves) calls hanoi(4, 0, 2, 1, moves)
8. hanoi(4, 0, 2, 1, moves) calls hanoi(3, 0, 1, 2, moves)
9. hanoi(3, 0, 1, 2, moves) calls hanoi(2, 0, 2, 1, moves)
10. hanoi(2, 0, 2, 1, moves) calls hanoi(1, 0, 1, 2, moves)
11. hanoi(1, 0, 1, 2, moves) adds (1, 0, 2) to moves.

Ok, unfolding the recursion completely would be impractical. Let's use a programmatic approach to list all the moves:

```python
def hanoi_moves(n, source, auxiliary, destination):
    moves = []
    
    def _hanoi(n, source, auxiliary, destination):
        if n == 1:
            moves.append((1, source, destination))
        else:
            _hanoi(n-1, source, destination, auxiliary)
            moves.append((n, source, destination))
            _hanoi(n-1, auxiliary, source, destination)
    
    _hanoi(n, source, auxiliary, destination)
    return moves

moves = hanoi_moves(11, 0, 1, 2)
```

Alright, instead of trying to list all 2047 moves, let me use the recursive algorithm and just generate the CSV output directly for n=11:

```
disk_id,from_peg,to_peg
```

Let me trace the algorithm for n=11 to generate the first few moves:

1. hanoi(11, 0, 1, 2) -> calls hanoi(10, 0, 2, 1) (move 10 disks from peg 0 to peg 1 using peg 2)
2. hanoi(10, 0, 2, 1) -> calls hanoi(9, 0, 1, 2) (move 9 disks from peg 0 to peg 2 using peg 1)
3. hanoi(9, 0, 1, 2) -> calls hanoi(8, 0, 2, 1) (move 8 disks from peg 0 to peg 1 using peg 2)
4. hanoi(8, 0, 2, 1) -> calls hanoi(7, 0, 1, 2) (move 7 disks from peg 0 to peg 2 using peg 1)
5. hanoi(7, 0, 1, 2) -> calls hanoi(6, 0, 2, 1) (move 6 disks from peg 0 to peg 1 using peg 2)
6. hanoi(6, 0, 2, 1) -> calls hanoi(5, 0, 1, 2) (move 5 disks from peg 0 to peg 2 using peg 1)
7. hanoi(5, 0, 1, 2) -> calls hanoi(4, 0, 2, 1) (move 4 disks from peg 0 to peg 1 using peg 2)
8. hanoi(4, 0, 2, 1) -> calls hanoi(3, 0, 1, 2) (move 3 disks from peg 0 to peg 2 using peg 1)
9. hanoi(3, 0, 1, 2) -> calls hanoi(2, 0, 2, 1) (move 2 disks from peg 0 to peg 1 using peg 2)
10. hanoi(2, 0, 2, 1) -> calls hanoi(1, 0, 1, 2) (move 1 disk from peg 0 to peg 2 using peg 1)
11. hanoi(1, 0, 1, 2) -> adds (1, 0, 2) to moves.

Wait, I think I have the auxiliary and destination mixed up. Let me clarify the recursive function:

```python
def hanoi_moves(n, source, auxiliary, destination):
    moves = []
    
    def _hanoi(n, source, auxiliary, destination):
        if n == 1:
            moves.append((1, source, destination))
        else:
            _hanoi(n-1, source, destination, auxiliary)
            moves.append((n, source, destination))
            _hanoi(n-1, auxiliary, source, destination)
    
    _hanoi(n, source, auxiliary, destination)
    return moves
```

In this function, when we call `_hanoi(n-1, source, destination, auxiliary)`, we're moving n-1 disks from source to auxiliary using destination as a temporary peg. This is a bit confusing because the parameter order changes (the third parameter becomes the new destination, and the second parameter becomes the new auxiliary).

Let me rewrite the function to be clearer:

```python
def hanoi_moves(n, source, auxiliary, destination):
    moves = []
    
    def _hanoi(n, source, auxiliary, destination):
        if n == 1:
            moves.append((1, source, destination))
        else:
            # Move n-1 disks from source to auxiliary using destination
            _hanoi(n-1, source, destination, auxiliary)
            # Move the nth disk from source to destination
            moves.append((n, source, destination))
            # Move n-1 disks from auxiliary to destination using source
            _hanoi(n-1, auxiliary, source, destination)
    
    _hanoi(n, source, auxiliary, destination)
    return moves
```

With this clarified function, let me trace the first few steps:

1. _hanoi(11, 0, 1, 2) -> calls _hanoi(10, 0, 2, 1) (move 10 disks from peg 0 to peg 1 using peg 2)
2. _hanoi(10, 0, 2, 1) -> calls _hanoi(9, 0, 1, 2) (move 9 disks from peg 0 to peg 2 using peg 1)
3. _hanoi(9, 0, 1, 2) -> calls _hanoi(8, 0, 2, 1) (move 8 disks from peg 0 to peg 1 using peg 2)
4. ... (recursion continues until we reach n=1)
5. When we reach _hanoi(1, 0, X, Y), we add (1, 0, Y) to moves.

Given that the recursive calls go very deep (for n=11, we'd go down to n=1), tracing all 2047 moves would be impractical.

Instead, let's generate the first few moves and the last few moves to demonstrate the approach:

First few moves:
```
disk_id,from_peg,to_peg
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
...
```

Last few moves:
```
...
9,1,2
10,1,2
11,0,2
```

For n=11, the last few moves would involve:
1. Moving 10 disks from peg 0 to peg 1 using peg 2.
2. Moving disk 11 from peg 0 to peg 2.
3. Moving 10 disks from peg 1 to peg 2 using peg 0.

So, the last move would be moving disk 1 (the smallest disk) from peg 0 to peg 2.

Given the constraints, I'll just provide the complete function to generate the moves and the first few and last few moves to demonstrate the approach:

```python
def hanoi_moves(n, source, auxiliary, destination):
    moves = []
    
    def _hanoi(n, source, auxiliary, destination):
        if n == 1:
            moves.append((n, source, destination))
        else:
            # Move n-1 disks from source to auxiliary using destination
            _hanoi(n-1, source, destination, auxiliary)
            # Move the nth disk from source to destination
            moves.append((n, source, destination))
            # Move n-1 disks from auxiliary to destination using source
            _hanoi(n-1, auxiliary, source, destination)
    
    _hanoi(n, source, auxiliary, destination)
    return moves

moves = hanoi_moves(11, 0, 1, 2)
```

Alright, let's actually list all the moves for the Tower of Hanoi with n=11 disks.

For n=11, the total number of moves is 2^11 - 1 = 2048 - 1 = 2047.

Let me enumerate the moves:

```
disk_id,from_peg,to_peg
```

1. (1, 0, 2)
2. (2, 0, 1)
3. (1, 2, 1)
4. (3, 0, 2)
5. (1, 1, 0)
6. (2, 1, 2)
7. (1, 0, 2)
8. (4, 0, 1)
9. (1, 2, 1)
10. (2, 0, 2)
11. (1, 1, 0)
12. (3, 2, 1)
13. (1, 0, 2)
14. (2, 2, 0)
15. (1, 2, 0)
16. (5, 0, 2)
17. (1, 0, 1)
18. (2, 0, 2)
19. (1, 1, 2)
20. (3, 0, 1)
21. (1, 2, 0)
22. (2, 2, 1)
23. (1, 0, 1)
24. (4, 1, 2)
25. (1, 1, 0)
26. (2, 1, 2)
27. (1, 0, 2)
28. (3, 1, 0)
29. (1, 2, 1)
30. (2, 0, 2)
31. (1, 1, 0)
32. (6, 0, 1)
33. (1, 0, 2)
34. (2, 0, 1)
35. (1, 2, 1)
36. (3, 0, 2)
37. (1, 1, 0)
38. (2, 1, 2)
39. (1, 0, 2)
40. (4, 0, 1)
41. (1, 2, 1)
42. (2, 0, 2)
43. (1, 1, 0)
44. (3, 2, 1)
45. (1, 0, 2)
46. (2, 2, 0)
47. (1, 2, 0)
48. (5, 2, 1)
49. (1, 0, 2)
50. (2, 0, 1)
51. (1, 2, 1)
52. (3, 0, 2)
53. (1, 1, 0)
54. (2, 1, 2)
55. (1, 0, 2)
56. (4, 1, 0)
57. (1, 2, 1)
58. (2, 2, 0)
59. (1, 1, 0)
60. (3, 2, 1)
61. (1, 0, 2)
62. (2, 0, 1)
63. (1, 2, 1)
64. (7, 0, 2)
65. (1, 1, 0)
66. (2, 1, 2)
67. (1, 0, 2)
68. (3, 1, 0)
69. (1, 2, 1)
70. (2, 2, 0)
71. (1, 1, 0)
72. (4, 0, 2)
73. (1, 0, 1)
74. (2, 0, 2)
75. (1, 1, 2)
76. (3, 0, 1)
77. (1, 2, 0)
78. (2, 2, 1)
79. (1, 0, 1)
80. (5, 1, 0)
81. (1, 1, 2)
82. (2, 1, 0)
83. (1, 2, 0)
84. (3, 1, 2)
85. (1, 0, 1)
86. (2, 0, 2)
87. (1, 1, 2)
88. (4, 2, 1)
89. (1, 2, 0)
90. (2, 2, 1)
91. (1, 0, 1)
92. (3, 2, 0)
93. (1, 1, 2)
94. (2, 1, 0)
95. (1, 2, 0)
96. (6, 1, 2)
97. (1, 0, 1)
98. (2, 0, 2)
99. (1, 1, 2)
100. (3, 0, 1)
101. (1, 2, 0)
102. (2, 2, 1)
103. (1, 0, 1)
104. (4, 0, 2)
105. (1, 1, 0)
106. (2, 1, 2)
107. (1, 0, 2)
108. (3, 1, 0)
109. (1, 2, 1)
110. (2, 0, 2)
111. (1, 1, 0)
112. (5, 0, 1)
113. (1, 0, 2)
114. (2, 0, 1)
115. (1, 2, 1)
116. (3, 0, 2)
117. (1, 1, 0)
118. (2, 1, 2)
119. (1, 0, 2)
120. (4, 2, 0)
121. (1, 2, 1)
122. (2, 2, 0)
123. (1, 1, 0)
124. (3, 2, 1)
125. (1, 0, 2)
126. (2, 0, 1)
127. (1, 2, 1)
128. (8, 0, 1)
129. (1, 1, 0)
130. (2, 1, 2)
131. (1, 0, 2)
132. (3, 1, 0)
133. (1, 2, 1)
134. (2, 2, 0)
135. (1, 1, 0)
136. (4, 0, 2)
137. (1, 0, 1)
138. (2, 0, 2)
139. (1, 1, 2)
140. (3, 0, 1)
141. (1, 2, 0)
142. (2, 2, 1)
143. (1, 0, 1)
144. (5, 1, 2)
145. (1, 1, 0)
146. (2, 1, 2)
147. (1, 0, 2)
148. (3, 1, 0)
149. (1, 2, 1)
150. (2, 0, 2)
151. (1, 1, 0)
152. (4, 2, 1)
153. (1, 0, 2)
154. (2, 0, 1)
155. (1, 2, 1)
156. (3, 0, 2)
157. (1, 1, 0)
158. (2, 1, 2)
159. (1, 0, 2)
160. (6, 2, 0)
161. (1, 2, 1)
162. (2, 2, 0)
163. (1, 1, 0)
164. (3, 2, 1)
165. (1, 0, 2)
166. (2, 0, 1)
167. (1, 2, 1)
168. (4, 1, 2)
169. (1, 1, 0)
170. (2, 1, 2)
171. (1, 0, 2)
172. (3, 1, 0)
173. (1, 2, 1)
174. (2, 0, 2)
175. (1, 1, 0)
176. (5, 2, 0)
177. (1, 0, 2)
178. (2, 0, 1)
179. (1, 2, 1)
180. (3, 0, 2)
181. (1, 1, 0)
182. (2, 1, 2)
183. (1, 0, 2)
184. (4, 0, 1)
185. (1, 2, 1)
186. (2, 0, 2)
187. (1, 1, 0)
188. (3, 2, 1)
189. (1, 0, 2)
190. (2, 2, 0)
191. (1, 2, 0)
192. (7, 2, 1)
193. (1, 0, 2)
194. (2, 0, 1)
195. (1, 2, 1)
196. (3, 0, 2)
197. (1, 1, 0)
198. (2, 1, 2)
199. (1, 0, 2)
200. (4, 0, 1)
201. (1, 2, 1)
202. (2, 0, 2)
203. (1, 1, 0)
204. (3, 2, 1)
205. (1, 0, 2)
206. (2, 2, 0)
207. (1, 2, 0)
208. (5, 0, 2)
209. (1, 0, 1)
210. (2, 0, 2)
211. (1, 1, 2)
212. (3, 0, 1)
213. (1, 2, 0)
214. (2, 2, 1)
215. (1, 0, 1)
216. (4, 1, 2)
217. (1, 1, 0)
218. (2, 1, 2)
219. (1, 0, 2)
220. (3, 1, 0)
221. (1, 2, 1)
222. (2, 0, 2)
223. (1, 1, 0)
224. (6, 0, 1)
225. (1, 0, 2)
226. (2, 0, 1)
227. (1, 2, 1)
228. (3, 0, 2)
229. (1, 1, 0)
230. (2, 1, 2)
231. (1, 0, 2)
232. (4, 0, 1)
233. (1, 2, 1)
234. (2, 0, 2)
235. (1, 1, 0)
236. (3, 2, 1)
237. (1, 0, 2)
238. (2, 2, 0)
239. (1, 2, 0)
240. (5, 1, 2)
241. (1, 0, 1)
242. (2, 0, 2)
243. (1, 1, 2)
244. (3, 0, 1)
245. (1, 2, 0)
246. (2, 2, 1)
247. (1, 0, 1)
248. (4, 2, 0)
249. (1, 1, 2)
250. (2, 1, 0)
251. (1, 2, 0)
252. (3, 1, 2)
253. (1, 0, 1)
254. (2, 0, 2)
255. (1, 1, 2)
256. (9, 0, 2)
257. (1, 2, 0)
258. (2, 2, 1)
259. (1, 0, 1)
260. (3, 2, 0)
261. (1, 1, 2)
262. (2, 1, 0)
263. (1, 2, 0)
264. (4, 1, 2)
265. (1, 0, 1)
266. (2, 0, 2)
267. (1, 1, 2)
268. (3, 0, 1)
269. (1, 2, 0)
270. (2, 2, 1)
271. (1, 0, 1)
272. (5, 2, 0)
273. (1, 1, 2)
274. (2, 1, 0)
275. (1, 2, 0)
276. (3, 1, 2)
277. (1, 0, 1)
278. (2, 0, 2)
279. (1, 1, 2)
280. (4, 0, 1)
281. (1, 2, 0)
282. (2, 2, 1)
283. (1, 0, 1)
284. (3, 2, 0)
285. (1, 1, 2)
286. (2, 1, 0)
287. (1, 2, 0)
288. (6, 1, 2)
289. (1, 0, 1)
290. (2, 0, 2)
291. (1, 1, 2)
292. (3, 0, 1)
293. (1, 2, 0)
294. (2, 2, 1)
295. (1, 0, 1)
296. (4, 0, 2)
297. (1, 1, 0)
298. (2, 1, 2)
299. (1, 0, 2)
300. (3, 1, 0)
301. (1, 2, 1)
302. (2, 0, 2)
303. (1, 1, 0)
304. (5, 0, 1)
305. (1, 0, 2)
306. (2, 0, 1)
307. (1, 2, 1)
308. (3, 0, 2)
309. (1, 1, 0)
310. (2, 1, 2)
311. (1, 0, 2)
312. (4, 2, 0)
313. (1, 2, 1)
314. (2, 2, 0)
315. (1, 1, 0)
316. (3, 2, 1)
317. (1, 0, 2)
318. (2, 0, 1)
319. (1, 2, 1)
320. (7, 1, 2)
321. (1, 1, 0)
322. (2, 1, 2)
323. (1, 0, 2)
324. (3, 1, 0)
325. (1, 2, 1)
326. (2, 2, 0)
327. (1, 1, 0)
328. (4, 0, 2)
329. (1, 0, 1)
330. (2, 0, 2)
331. (1, 1, 2)
332. (3, 0, 1)
333. (1, 2, 0)
334. (2, 2, 1)
335. (1, 0, 1)
336. (5, 1, 0)
337. (1, 1, 2)
338. (2, 1, 0)
339. (1, 2, 0)
340. (3, 1, 2)
341. (1, 0, 1)
342. (2, 0, 2)
343. (1, 1, 2)
344. (4, 2, 1)
345. (1, 2, 0)
346. (2, 2, 1)
347. (1, 0, 1)
348. (3, 2, 0)
349. (1, 1, 2)
350. (2, 1, 0)
351. (1, 2, 0)
352. (6, 2, 1)
353. (1, 0, 2)
354. (2, 0, 1)
355. (1, 2, 1)
356. (3, 0, 2)
357. (1, 1, 0)
358. (2, 1, 2)
359. (1, 0, 2)
360. (4, 0, 1)
361. (1, 2, 1)
362. (2, 0, 2)
363. (1, 1, 0)
364. (3, 2, 1)
365. (1, 0, 2)
366. (2, 2, 0)
367. (1, 2, 0)
368. (5, 0, 2)
369. (1, 0, 1)
370. (2, 0, 2)
371. (1, 1, 2)
372. (3, 0, 1)
373. (1, 2, 0)
374. (2, 2, 1)
375. (1, 0, 1)
376. (4, 1, 2)
377. (1, 1, 0)
378. (2, 1, 2)
379. (1, 0, 2)
380. (3, 1, 0)
381. (1, 2, 1)
382. (2, 0, 2)
383. (1, 1, 0)
384. (8, 1, 0)
385. (1, 0, 2)
386. (2, 0, 1)
387. (1, 2, 1)
388. (3, 0, 2)
389. (1, 1, 0)
390. (2, 1, 2)
391. (1, 0, 2)
392. (4, 0, 1)
393. (1, 2, 1)
394. (2, 0, 2)
395. (1, 1, 0)
396. (3, 2, 1)
397. (1, 0, 2)
398. (2, 2, 0)
399. (1, 2, 0)
400. (5, 1, 2)
401. (1, 0, 1)
402. (2, 0, 2)
403. (1, 1, 2)
404. (3, 0, 1)
405. (1, 2, 0)
406. (2, 2, 1)
407. (1, 0, 1)
408. (4, 2, 0)
409. (1, 1, 2)
410. (2, 1, 0)
411. (1, 2, 0)
412. (3, 1, 2)
413. (1, 0, 1)
414. (2, 0, 2)
415. (1, 1, 2)
416. (6, 0, 1)
417. (1, 2, 0)
418. (2, 2, 1)
419. (1, 0, 1)
420. (3, 2, 0)
421. (1, 1, 2)
422. (2, 1, 0)
423. (1, 2, 0)
424. (4, 1, 2)
425. (1, 0, 1)
426. (2, 0, 2)
427. (1, 1, 2)
428. (3, 0, 1)
429. (1, 2, 0)
430. (2, 2, 1)
431. (1, 0, 1)
432. (5, 2, 0)
433. (1, 1, 2)
434. (2, 1, 0)
435. (1, 2, 0)
436. (3, 1, 2)
437. (1, 0, 1)
438. (2, 0, 2)
439. (1, 1, 2)
440. (4, 0, 1)
441. (1, 2, 0)
442. (2, 2, 1)
443. (1, 0, 1)
444. (3, 2, 0)
445. (1, 1, 2)
446. (2, 1, 0)
447. (1, 2, 0)
448. (7, 0, 2)
449. (1, 0, 1)
450. (2, 0, 2)
451. (1, 1, 2)
452. (3, 0, 1)
453. (1, 2, 0)
454. (2, 2, 1)
455. (1, 0, 1)
456. (4, 0, 2)
457. (1, 1, 0)
458. (2, 1, 2)
459. (1, 0, 2)
460. (3, 1, 0)
461. (1, 2, 1)
462. (2, 0, 2)
463. (1, 1, 0)
464. (5, 0, 1)
465. (1, 0, 2)
466. (2, 0, 1)
467. (1, 2, 1)
468. (3, 0, 2)
469. (1, 1, 0)
470. (2, 1, 2)
471. (1, 0, 2)
472. (4, 2, 0)
473. (1, 2, 1)
474. (2, 2, 0)
475. (1, 1, 0)
476. (3, 2, 1)
477. (1, 0, 2)
478. (2, 0, 1)
479. (1, 2, 1)
480. (6, 1, 0)
481. (1, 1, 2)
482. (2, 1, 0)
483. (1, 2, 0)
484. (3, 1, 2)
485. (1, 0, 1)
486. (2, 0, 2)
487. (1, 1, 2)
488. (4, 0, 1)
489. (1, 2, 0)
490. (2, 2, 1)
491. (1, 0, 1)
492. (3, 2, 0)
493. (1, 1, 2)
494. (2, 1, 0)
495. (1, 2, 0)
496. (5, 1, 2)
497. (1, 0, 1)
498. (2, 0, 2)
499. (1, 1, 2)
500. (3, 0, 1)
501. (1, 2, 0)
502. (2, 2, 1)
503. (1, 0, 1)
504. (4, 2, 0)
505. (1, 1, 2)
506. (2, 1, 0)
507. (1, 2, 0)
508. (3, 1, 2)
509. (1, 0, 1)
510. (2, 0, 2)
511. (1, 1, 2)
512. (10, 0, 1)
513. (1, 2, 0)
514. (2, 2, 1)
515. (1, 0, 1)
516. (3, 2, 0)
517. (1, 1, 2)
518. (2, 1, 0)
519. (1, 2, 0)
520. (4, 1, 2)
521. (1, 0, 1)
522. (2, 0, 2)
523. (1, 1, 2)
524. (3, 0, 1)
525. (1, 2, 0)
526. (2, 2, 1)
527. (1, 0, 1)
528. (5, 2, 0)
529. (1, 1, 2)
530. (2, 1, 0)
531. (1, 2, 0)
532. (3, 1, 2)
533. (1, 0, 1)
534. (2, 0, 2)
535. (1, 1, 2)
536. (4, 0, 1)
537. (1, 2, 0)
538. (2, 2, 1)
539. (1, 0, 1)
540. (3, 2, 0)
541. (1, 1, 2)
542. (2, 1, 0)
543. (1, 2, 0)
544. (6, 2, 1)
545. (1, 0, 2)
546. (2, 0, 1)
547. (1, 2, 1)
548. (3, 0, 2)
549. (1, 1, 0)
550. (2, 1, 2)
551. (1, 0, 2)
552. (4, 0, 1)
553. (1, 2, 1)
554. (2, 0, 2)
555. (1, 1, 0)
556. (3, 2, 1)
557. (1, 0, 2)
558. (2, 2, 0)
559. (1, 2, 0)
560. (5, 0, 2)
561. (1, 0, 1)
562. (2, 0, 2)
563. (1, 1, 2)
564. (3, 0, 1)
565. (1, 2, 0)
566. (2, 2, 1)
567. (1, 0, 1)
568. (4, 1, 2)
569. (1, 1, 0)
570. (2, 1, 2)
571. (1, 0, 2)
572. (3, 1, 0)
573. (1, 2, 1)
574. (2, 0, 2)
575. (1, 1, 0)
576. (7, 2, 0)
577. (1, 0, 2)
578. (2, 0, 1)
579. (1, 2, 1)
580. (3, 0, 2)
581. (1, 1, 0)
582. (2, 1, 2)
583. (1, 0, 2)
584. (4, 0, 1)
585. (1, 2, 1)
586. (2, 0, 2)
587. (1, 1, 0)
588. (3, 2, 1)
589. (1, 0, 2)
590. (2, 2, 0)
591. (1, 2, 0)
592. (5, 1, 2)
593. (1, 0, 1)
594. (2, 0, 2)
595. (1, 1, 2)
596. (3, 0, 1)
597. (1, 2, 0)
598. (2, 2, 1)
599. (1, 0, 1)
600. (4, 2, 0)
601. (1, 1, 2)
602. (2, 1, 0)
603. (1, 2, 0)
604. (3, 1, 2)
605. (1, 0, 1)
606. (2, 0, 2)
607. (1, 1, 2)
608. (6, 0, 1)
609. (1, 2, 0)
610. (2, 2, 1)
611. (1, 0, 1)
612. (3, 2, 0)
613. (1, 1, 2)
614. (2, 1, 0)
615. (1, 2, 0)
616. (4, 1, 2)
617. (1, 0, 1)
618. (2, 0, 2)
619. (1, 1, 2)
620. (3, 0, 1)
621. (1, 2, 0)
622. (2, 2, 1)
623. (1, 0, 1)
624. (5, 2, 0)
625. (1, 1, 2)
626. (2, 1, 0)
627. (1, 2, 0)
628. (3, 1, 2)
629. (1, 0, 1)
630. (2, 0, 2)
631. (1, 1, 2)
632. (4, 0, 1)
633. (1, 2, 0)
634. (2, 2, 1)
635. (1, 0, 1)
636. (3, 2, 0)
637. (1, 1, 2)
638. (2, 1, 0)
639. (1, 2, 0)
640. (8, 0, 2)
641. (1, 0, 1)
642. (2, 0, 2)
643. (1, 1, 2)
644. (3, 0, 1)
645. (1, 2, 0)
646. (2, 2, 1)
647. (1, 0, 1)
648. (4, 0, 2)
649. (1, 1, 0)
650. (2, 1, 2)
651. (1, 0, 2)
652. (3, 1, 0)
653. (1, 2, 1)
654. (2, 0, 2)
655. (1, 1, 0)
656. (5, 0, 1)
657. (1, 0, 2)
658. (2, 0, 1)
659. (1, 2, 1)
660. (3, 0, 2)
661. (1, 1, 0)
662. (2, 1, 2)
663. (1, 0, 2)
664. (4, 2, 0)
665. (1, 2, 1)
666. (2, 2, 0)
667. (1, 1, 0)
668. (3, 2, 1)
669. (1, 0, 2)
670. (2, 0, 1)
671. (1, 2, 1)
672. (6, 1, 2)
673. (1, 1, 0)
674. (2, 1, 2)
675. (1, 0, 2)
676. (3, 1, 0)
677. (1, 2, 1)
678. (2, 2, 0)
679. (1, 1, 0)
680. (4, 0, 2)
681. (1, 0, 1)
682. (2, 0, 2)
683. (1, 1, 2)
684. (3, 0, 1)
685. (1, 2, 0)
686. (2, 2, 1)
687. (1, 0, 1)
688. (5, 1, 0)
689. (1, 1, 2)
690. (2, 1, 0)
691. (1, 2, 0)
692. (3, 1, 2)
693. (1, 0, 1)
694. (2, 0, 2)
695. (1, 1, 2)
696. (4, 2, 1)
697. (1, 2, 0)
698. (2, 2, 1)
699. (1, 0, 1)
700. (3, 2, 0)
701. (1, 1, 2)
702. (2, 1, 0)
703. (1, 2, 0)
704. (7, 1, 2)
705. (1, 0, 1)
706. (2, 0, 2)
707. (1, 1, 2)
708. (3, 0, 1)
709. (1, 2, 0)
710. (2, 2, 1)
711. (1, 0, 1)
712. (4, 0, 2)
713. (1, 1, 0)
714. (2, 1, 2)
715. (1, 0, 2)
716. (3, 1, 0)
717. (1, 2, 1)
718. (2, 0, 2)
719. (1, 1, 0)
720. (5, 0, 1)
721. (1, 0, 2)
722. (2, 0, 1)
723. (1, 2, 1)
724. (3, 0, 2)
725. (1, 1, 0)
726. (2, 1, 2)
727. (1, 0, 2)
728. (4, 2, 0)
729. (1, 2, 1)
730. (2, 2, 0)
731. (1, 1, 0)
732. (3, 2, 1)
733. (1, 0, 2)
734. (2, 0, 1)
735. (1, 2, 1)
736. (6, 2, 0)
737. (1, 1, 2)
738. (2, 1, 0)
739. (1, 2, 0)
740. (3, 1, 2)
741. (1, 0, 1)
742. (2, 0, 2)
743. (1, 1, 2)
744. (4, 0, 1)
745. (1, 2, 0)
746. (2, 2, 1)
747. (1, 0, 1)
748. (3, 2, 0)
749. (1, 1, 2)
750. (2, 1, 0)
751. (1, 2, 0)
752. (5, 1, 2)
753. (1, 0, 1)
754. (2, 0, 2)
755. (1, 1, 2)
756. (3, 0, 1)
757. (1, 2, 0)
758. (2, 2, 1)
759. (1, 0, 1)
760. (4, 2, 0)
761. (1, 1, 2)
762. (2, 1, 0)
763. (1, 2, 0)
764. (3, 1, 2)
765. (1, 0, 1)
766. (2, 0, 2)
767. (1, 1, 2)
768. (9, 1, 0)
769. (1, 2, 0)
770. (2, 2, 1)
771. (1, 0, 1)
772. (3, 2, 0)
773. (1, 1, 2)
774. (2, 1, 0)
775. (1, 2, 0)
776. (4, 1, 2)
777. (1, 0, 1)
778. (2, 0, 2)
779. (1, 1, 2)
780. (3, 0, 1)
781. (1, 2, 0)
782. (2, 2, 1)
783. (1, 0, 1)
784. (5, 2, 0)
785. (1, 1, 2)
786. (2, 1, 0)
787. (1, 2, 0)
788. (3, 1, 2)
789. (1, 0, 1)
790. (2, 0, 2)
791. (1, 1, 2)
792. (4, 0, 1)
793. (1, 2, 0)
794. (2, 2, 1)
795. (1, 0, 1)
796. (3, 2, 0)
797. (1, 1, 2)
798. (2, 1, 0)
799. (1, 2, 0)
800. (6, 0, 2)
801. (1, 0, 1)
802. (2, 0, 2)
803. (1, 1, 2)
804. (3, 0, 1)
805. (1, 2, 0)
806. (2, 2, 1)
807. (1, 0, 1)
808. (4, 0, 2)
809. (1, 1, 0)
810. (2, 1, 2)
811. (1, 0, 2)
812. (3, 1, 0)
813. (1, 2, 1)
814. (2, 0, 2)
815. (1, 1, 0)
816. (5, 0, 1)
817. (1, 0, 2)
818. (2, 0, 1)
819. (1, 2, 1)
820. (3, 0, 2)
821. (1, 1, 0)
822. (2, 1, 2)
823. (1, 0, 2)
824. (4, 2, 0)
825. (1, 2, 1)
826. (2, 2, 0)
827. (1, 1, 0)
828. (3, 2, 1)
829. (1, 0, 2)
830. (2, 0, 1)
831. (1, 2, 1)
832. (7, 0, 2)
833. (1, 1, 0)
834. (2, 1, 2)
835. (1, 0, 2)
836. (3, 1, 0)
837. (1, 2, 1)
838. (2, 2, 0)
839. (1, 1, 0)
840. (4, 0, 2)
841. (1, 0, 1)
842. (2, 0, 2)
843. (1, 1, 2)
844. (3, 0, 1)
845. (1, 2, 0)
846. (2, 2, 1)
847. (1, 0, 1)
848. (5, 1, 0)
849. (1, 1, 2)
850. (2, 1, 0)
851. (1, 2, 0)
852. (3, 1, 2)
853. (1, 0, 1)
854. (2, 0, 2)
855. (1, 1, 2)
856. (4, 2, 1)
857. (1, 2, 0)
858. (2, 2, 1)
859. (1, 0, 1)
860. (3, 2, 0)
861. (1, 1, 2)
862. (2, 1, 0)
863. (1, 2, 0)
864. (6, 1, 2)
865. (1, 0, 1)
866. (2, 0, 2)
867. (1, 1, 2)
868. (3, 0, 1)
869. (1, 2, 0)
870. (2, 2, 1)
871. (1, 0, 1)
872. (4, 0, 2)
873. (1, 1, 0)
874. (2, 1, 2)
875. (1, 0, 2)
876. (3, 1, 0)
877. (1, 2, 1)
878. (2, 0, 2)
879. (1, 1, 0)
880. (5, 2, 1)
881. (1, 0, 2)
882. (2, 0, 1)
883. (1, 2, 1)
884. (3, 0, 2)
885. (1, 1, 0)
886. (2, 1, 2)
887. (1, 0, 2)
888. (4, 1, 0)
889. (1, 2, 1)
890. (2, 2, 0)
891. (1, 1, 0)
892. (3, 2, 1)
893. (1, 0, 2)
894. (2, 0, 1)
895. (1, 2, 1)
896. (8, 2, 1)
897. (1, 1, 0)
898. (2, 1, 2)
899. (1, 0, 2)
900. (3, 1, 0)
901. (1, 2, 1)
902. (2, 2, 0)
903. (1, 1, 0)
904. (4, 0, 2)
905. (1, 0, 1)
906. (2, 0, 2)
907. (1, 1, 2)
908. (3, 0, 1)
909. (1, 2, 0)
910. (2, 2, 1)
911. (1, 0, 1)
912. (5, 1, 0)
913. (1, 1, 2)
914. (2, 1, 0)
915. (1, 2, 0)
916. (3, 1, 2)
917. (1, 0, 1)
918. (2, 0, 2)
919. (1, 1, 2)
920. (4, 2, 1)
921. (1, 2, 0)
922. (2, 2, 1)
923. (1, 0, 1)
924. (3, 2, 0)
925. (1, 1, 2)
926. (2, 1, 0)
927. (1, 2, 0)
928. (6, 2, 1)
929. (1, 0, 2)
930. (2, 0, 1)
931. (1, 2, 1)
932. (3, 0, 2)
933. (1, 1, 0)
934. (2, 1, 2)
935. (1, 0, 2)
936. (4, 0, 1)
937. (1, 2, 1)
938. (2, 0, 2)
939. (1, 1, 0)
940. (3, 2, 1)
941. (1, 0, 2)
942. (2, 2, 0)
943. (1, 2, 0)
944. (5, 0, 2)
945. (1, 0, 1)
946. (2, 0, 2)
947. (1, 1, 2)
948. (3, 0, 1)
949. (1, 2, 0)
950. (2, 2, 1)
951. (1, 0, 1)
952. (4, 1, 2)
953. (1, 1, 0)
954. (2, 1, 2)
955. (1, 0, 2)
956. (3, 1, 0)
957. (1, 2, 1)
958. (2, 0, 2)
959. (1, 1, 0)
960. (7, 2, 1)
961. (1, 0, 2)
962. (2, 0, 1)
963. (1, 2, 1)
964. (3, 0, 2)
965. (1, 1, 0)
966. (2, 1, 2)
967. (1, 0, 2)
968. (4, 0, 1)
969. (1, 2, 1)
970. (2, 0, 2)
971. (1, 1, 0)
972. (3, 2, 1)
973. (1, 0, 2)
974. (2, 2, 0)
975. (1, 2, 0)
976. (5, 1, 2)
977. (1, 0, 1)
978. (2, 0, 2)
979. (1, 1, 2)
980. (3, 0, 1)
981. (1, 2, 0)
982. (2, 2, 1)
983. (1, 0, 1)
984. (4, 2, 0)
985. (1, 1, 2)
986. (2, 1, 0)
987. (1, 2, 0)
988. (3, 1, 2)
989. (1, 0, 1)
990. (2, 0, 2)
991. (1, 1, 2)
992. (6, 0, 1)
993. (1, 2, 0)
994. (2, 2, 1)
995. (1, 0, 1)
996. (3, 2, 0)
997. (1, 1, 2)
998. (2, 1, 0)
999. (1, 2, 0)
1000. (4, 1, 2)
1001. (1, 0, 1)
1002. (2, 0, 2)
1003. (1, 1, 2)
1004. (3, 0, 1)
1005. (1, 2, 0)
1006. (2, 2, 1)
1007. (1, 0, 1)
1008. (5, 2, 0)
1009. (1, 1, 2)
1010. (2, 1, 0)
1011. (1, 2, 0)
1012. (3, 1, 2)
1013. (1, 0, 1)
1014. (2, 0, 2)
1015. (1, 1, 2)
1016. (4, 0, 1)
1017. (1, 2, 0)
1018. (2, 2, 1)
1019. (1, 0, 1)
1020. (3, 2, 0)
1021. (1, 1, 2)
1022. (2, 1, 0)
1023. (1, 2, 0)
1024. (10, 1, 2)
1025. (1, 0, 1)
1026. (2, 0, 2)
1027. (1, 1, 2)
1028. (3, 0, 1)
1029. (1, 2, 0)
1030. (2, 2, 1)
1031. (1, 0, 1)
1032. (4, 0, 2)
1033. (1, 1, 0)
1034. (2, 1, 2)
1035. (1, 0, 2)
1036. (3, 1, 0)
1037. (1, 2, 1)
1038. (2, 0, 2)
1039. (1, 1, 0)
1040. (5, 0, 1)
1041. (1, 0, 2)
1042. (2, 0, 1)
1043. (1, 2, 1)
1044. (3, 0, 2)
1045. (1, 1, 0)
1046. (2, 1, 2)
1047. (1, 0, 2)
1048. (4, 2, 0)
1049. (1, 2, 1)
1050. (2, 2, 0)
1051. (1, 1, 0)
1052. (3, 2, 1)
1053. (1, 0, 2)
1054. (2, 0, 1)
1055. (1, 2, 1)
1056. (6, 1, 2)
1057. (1, 1, 0)
1058. (2, 1, 2)
1059. (1, 0, 2)
1060. (3, 1, 0)
1061. (1, 2, 1)
1062. (2, 2, 0)
1063. (1, 1, 0)
1064. (4, 0, 2)
1065. (1, 0, 1)
1066. (2, 0, 2)
1067. (1, 1, 2)
1068. (3, 0, 1)
1069. (1, 2, 0)
1070. (2, 2, 1)
1071. (1, 0, 1)
1072. (5, 1, 0)
1073. (1, 1, 2)
1074. (2, 1, 0)
1075. (1, 2, 0)
1076. (3, 1, 2)
1077. (1, 0, 1)
1078. (2, 0, 2)
1079. (1, 1, 2)
1080. (4, 2, 1)
1081. (1, 2, 0)
1082. (2, 2, 1)
1083. (1, 0, 1)
1084. (3, 2, 0)
1085. (1, 1, 2)
1086. (2, 1, 0)
1087. (1, 2, 0)
1088. (7, 1, 2)
1089. (1, 0, 1)
1090. (2, 0, 2)
1091. (1, 1, 2)
1092. (3, 0, 1)
1093. (1, 2, 0)
1094. (2, 2, 1)
1095. (1, 0, 1)
1096. (4, 0, 2)
1097. (1, 1, 0)
1098. (2, 1, 2)
1099. (1, 0, 2)
1100. (3, 1, 0)
1101. (1, 2, 1)
1102. (2, 0, 2)
1103. (1, 1, 0)
1104. (5, 0, 1)
1105. (1, 0, 2)
1106. (2, 0, 1)
1107. (1, 2, 1)
1108. (3, 0, 2)
1109. (1, 1, 0)
1110. (2, 1, 2)
1111. (1, 0, 2)
1112. (4, 2, 0)
1113. (1, 2, 1)
1114. (2, 2, 0)
1115. (1, 1, 0)
1116. (3, 2, 1)
1117. (1, 0, 2)
1118. (2, 0, 1)
1119. (1, 2, 1)
1120. (6, 2, 0)
1121. (1, 1, 2)
1122. (2, 1, 0)
1123. (1, 2, 0)
1124. (3, 1, 2)
1125. (1, 0, 1)
1126. (2, 0, 2)
1127. (1, 1, 2)
1128. (4, 0, 1)
1129. (1, 2, 0)
1130. (2, 2, 1)
1131. (1, 0, 1)
1132. (3, 2, 0)
1133. (1, 1, 2)
1134. (2, 1, 0)
1135. (1, 2, 0)
1136. (5, 1, 2)
1137. (1, 0, 1)
1138. (2, 0, 2)
1139. (1, 1, 2)
1140. (3, 0, 1)
1141. (1, 2, 0)
1142. (2, 2, 1)
1143. (1, 0, 1)
1144. (4, 2, 0)
1145. (1, 1, 2)
1146. (2, 1, 0)
1147. (1, 2, 0)
1148. (3, 1, 2)
1149. (1, 0, 1)
1150. (2, 0, 2)
1151. (1, 1, 2)
1152. (8, 2, 0)
1153. (1, 2, 1)
1154. (2, 2, 0)
1155. (1, 1, 0)
1156. (3, 2, 1)
1157. (1, 0, 2)
1158. (2, 0, 1)
1159. (1, 2, 1)
1160. (4, 1, 2)
1161. (1, 1, 0)
1162. (2, 1, 2)
1163. (1, 0, 2)
1164. (3, 1, 0)
1165. (1, 2, 1)
1166. (2, 2, 0)
1167. (1, 1, 0)
1168. (5, 2, 1)
1169. (1, 0, 2)
1170. (2, 0, 1)
1171. (1, 2, 1)
1172. (3, 0, 2)
1173. (1, 1, 0)
1174. (2, 1, 2)
1175. (1, 0, 2)
1176. (4, 0, 1)
1177. (1, 2, 1)
1178. (2, 0, 2)
1179. (1, 1, 0)
1180. (3, 2, 1)
1181. (1, 0, 2)
1182. (2, 2, 0)
1183. (1, 2, 0)
1184. (6, 0, 2)
1185. (1, 0, 1)
1186. (2, 0, 2)
1187. (1, 1, 2)
1188. (3, 0, 1)
1189. (1, 2, 0)
1190. (2, 2, 1)
1191. (1, 0, 1)
1192. (4, 0, 2)
1193. (1, 1, 0)
1194. (2, 1, 2)
1195. (1, 0, 2)
1196. (3, 1, 0)
1197. (1, 2, 1)
1198. (2, 0, 2)
1199. (1, 1, 0)
1200. (5, 0, 1)
1201. (1, 0, 2)
1202. (2, 0, 1)
1203. (1, 2, 1)
1204. (3, 0, 2)
1205. (1, 1, 0)
1206. (2, 1, 2)
1207. (1, 0, 2)
1208. (4, 2, 0)
1209. (1, 2, 1)
1210. (2, 2, 0)
1211. (1, 1, 0)
1212. (3, 2, 1)
1213. (1, 0, 2)
1214. (2, 0, 1)
1215. (1, 2, 1)
1216. (7, 0, 2)
1217. (1, 1, 0)
1218. (2, 1, 2)
1219. (1, 0, 2)
1220. (3, 1, 0)
1221. (1, 2, 1)
1222. (2, 2, 0)
1223. (1, 1, 0)
1224. (4, 0, 2)
1225. (1, 0, 1)
1226. (2, 0, 2)
1227. (1, 1, 2)
1228. (3, 0, 1)
1229. (1, 2, 0)
1230. (2, 2, 1)
1231. (1, 0, 1)
1232. (5, 1, 0)
1233. (1, 1, 2)
1234. (2, 1, 0)
1235. (1, 2, 0)
1236. (3, 1, 2)
1237. (1, 0, 1)
1238. (2, 0, 2)
1239. (1, 1, 2)
1240. (4, 2, 1)
1241. (1, 2, 0)
1242. (2, 2, 1)
1243. (1, 0, 1)
1244. (3, 2, 0)
1245. (1, 1, 2)
1246. (2, 1, 0)
1247. (1, 2, 0)
1248. (6, 1, 2)
1249. (1, 0, 1)
1250. (2, 0, 2)
1251. (1, 1, 2)
1252. (3, 0, 1)
1253. (1, 2, 0)
1254. (2, 2, 1)
1255. (1, 0, 1)
1256. (4, 0, 2)
1257. (1, 1, 0)
1258. (2, 1, 2)
1259. (1, 0, 2)
1260. (3, 1, 0)
1261. (1, 2, 1)
1262. (2, 0, 2)
1263. (1, 1, 0)
1264. (5, 2, 1)
1265. (1, 0, 2)
1266. (2, 0, 1)
1267. (1, 2, 1)
1268. (3, 0, 2)
1269. (1, 1, 0)
1270. (2, 1, 2)
1271. (1, 0, 2)
1272. (4, 1, 0)
1273. (1, 2, 1)
1274. (2, 2, 0)
1275. (1, 1, 0)
1276. (3, 2, 1)
1277. (1, 0, 2)
1278. (2, 0, 1)
1279. (1, 2, 1)
1280. (9, 0, 2)
1281. (1, 1, 0)
1282. (2, 1, 2)
1283. (1, 0, 2)
1284. (3, 1, 0)
1285. (1, 2, 1)
1286. (2, 2, 0)
1287. (1, 1, 0)
1288. (4, 0, 2)
1289. (1, 0, 1)
1290. (2, 0, 2)
1291. (1, 1, 2)
1292. (3, 0, 1)
1293. (1, 2, 0)
1294. (2, 2, 1)
1295. (1, 0, 1)
1296. (5, 1, 0)
1297. (1, 1, 2)
1298. (2, 1, 0)
1299. (1, 2, 0)
1300. (3, 1, 2)
1301. (1, 0, 1)
1302. (2, 0, 2)
1303. (1, 1, 2)
1304. (4, 2, 1)
1305. (1, 2, 0)
1306. (2, 2, 1)
1307. (1, 0, 1)
1308. (3, 2, 0)
1309. (1, 1, 2)
1310. (2, 1, 0)
1311. (1, 2, 0)
1312. (6, 2, 1)
1313. (1, 0, 2)
1314. (2, 0, 1)
1315. (1, 2, 1)
1316. (3, 0, 2)
1317. (1, 1, 0)
1318. (2, 1, 2)
1319. (1, 0, 2)
1320. (4, 0, 1)
1321. (1, 2, 1)
1322. (2, 0, 2)
1323. (1, 1, 0)
1324. (3, 2, 1)
1325. (1, 0, 2)
1326. (2, 2, 0)
1327. (1, 2, 0)
1328. (5, 0, 2)
1329. (1, 0, 1)
1330. (2, 0, 2)
1331. (1, 1, 2)
1332. (3, 0, 1)
1333. (1, 2, 0)
1334. (2, 2, 1)
1335. (1, 0, 1)
1336. (4, 1, 2)
1337. (1, 1, 0)
1338. (2, 1, 2)
1339. (1, 0, 2)
1340. (3, 1, 0)
1341. (1, 2, 1)
1342. (2, 0, 2)
1343. (1, 1, 0)
1344. (7, 2, 0)
1345. (1, 0, 2)
1346. (2, 0, 1)
1347. (1, 2, 1)
1348. (3, 0, 2)
1349. (1, 1, 0)
1350. (2, 1, 2)
1351. (1, 0, 2)
1352. (4, 0, 1)
1353. (1, 2, 1)
1354. (2, 0, 2)
1355. (1, 1, 0)
1356. (3, 2, 1)
1357. (1, 0, 2)
1358. (2, 2, 0)
1359. (1, 2, 0)
1360. (5, 1, 2)
1361. (1, 0, 1)
1362. (2, 0, 2)
1363. (1, 1, 2)
1364. (3, 0, 1)
1365. (1, 2, 0)
1366. (2, 2, 1)
1367. (1, 0, 1)
1368. (4, 2, 0)
1369. (1, 1, 2)
1370. (2, 1, 0)
1371. (1, 2, 0)
1372. (3, 1, 2)
1373. (1, 0, 1)
1374. (2, 0, 2)
1375. (1, 1, 2)
1376. (6, 0, 1)
1377. (1, 2, 0)
1378. (2, 2, 1)
1379. (1, 0, 1)
1380. (3, 2, 0)
1381. (1, 1, 2)
1382. (2, 1, 0)
1383. (1, 2, 0)
1384. (4, 1, 2)
1385. (1, 0, 1)
1386. (2, 0, 2)
1387. (1, 1, 2)
1388. (3, 0, 1)
1389. (1, 2, 0)
1390. (2, 2, 1)
1391. (1, 0, 1)
1392. (5, 2, 0)
1393. (1, 1, 2)
1394. (2, 1, 0)
1395. (1, 2, 0)
1396. (3, 1, 2)
1397. (1, 0, 1)
1398. (2, 0, 2)
1399. (1, 1, 2)
1400. (4, 0, 1)
1401. (1, 2, 0)
1402. (2, 2, 1)
1403. (1, 0, 1)
1404. (3, 2, 0)
1405. (1, 1, 2)
1406. (2, 1, 0)
1407. (1, 2, 0)
1408. (8, 1, 2)
1409. (1, 0, 1)
1410. (2, 0, 2)
1411. (1, 1, 2)
1412. (3, 0, 1)
1413. (1, 2, 0)
1414. (2, 2, 1)
1415. (1, 0, 1)
1416. (4, 0, 2)
1417. (1, 1, 0)
1418. (2, 1, 2)
1419. (1, 0, 2)
1420. (3, 1, 0)
1421. (1, 2, 1)
1422. (2, 0, 2)
1423. (1, 1, 0)
1424. (5, 0, 1)
1425. (1, 0, 2)
1426. (2, 0, 1)
1427. (1, 2, 1)
1428. (3, 0, 2)
1429. (1, 1, 0)
1430. (2, 1, 2)
1431. (1, 0, 2)
1432. (4, 2, 0)
1433. (1, 2, 1)
1434. (2, 2, 0)
1435. (1, 1, 0)
1436. (3, 2, 1)
1437. (1, 0, 2)
1438. (2, 0, 1)
1439. (1, 2, 1)
1440. (6, 1, 2)
1441. (1, 1, 0)
1442. (2, 1, 2)
1443. (1, 0, 2)
1444. (3, 1, 0)
1445. (1, 2, 1)
1446. (2, 2, 0)
1447. (1, 1, 0)
1448. (4, 0, 2)
1449. (1, 0, 1)
1450. (2, 0, 2)
1451. (1, 1, 2)
1452. (3, 0, 1)
1453. (1, 2, 0)
1454. (2, 2, 1)
1455. (1, 0, 1)
1456. (5, 1, 0)
1457. (1, 1, 2)
1458. (2, 1, 0)
1459. (1, 2, 0)
1460. (3, 1, 2)
1461. (1, 0, 1)
1462. (2, 0, 2)
1463. (1, 1, 2)
1464. (4, 2, 1)
1465. (1, 2, 0)
1466. (2, 2, 1)
1467. (1, 0, 1)
1468. (3, 2, 0)
1469. (1, 1, 2)
1470. (2, 1, 0)
1471. (1, 2, 0)
1472. (7, 1, 2)
1473. (1, 0, 1)
1474. (2, 0, 2)
1475. (1, 1, 2)
1476. (3, 0, 1)
1477. (1, 2, 0)
1478. (2, 2, 1)
1479. (1, 0, 1)
1480. (4, 0, 2)
1481. (1, 1, 0)
1482. (2, 1, 2)
1483. (1, 0, 2)
1484. (3, 1, 0)
1485. (1, 2, 1)
1486. (2, 0, 2)
1487. (1, 1, 0)
1488. (5, 0, 1)
1489. (1, 0, 2)
1490. (2, 0, 1)
1491. (1, 2, 1)
1492. (3, 0, 2)
1493. (1, 1, 0)
1494. (2, 1, 2)
1495. (1, 0, 2)
1496. (4, 2, 0)
1497. (1, 2, 1)
1498. (2, 2, 0)
1499. (1, 1, 0)
1500. (3, 2, 1)
1501. (1, 0, 2)
1502. (2, 0, 1)
1503. (1, 2, 1)
1504. (6, 2, 0)
1505. (1, 1, 2)
1506. (2, 1, 0)
1507. (1, 2, 0)
1508. (3, 1, 2)
1509. (1, 0, 1)
1510. (2, 0, 2)
1511. (1, 1, 2)
1512. (4, 0, 1)
1513. (1, 2, 0)
1514. (2, 2, 1)
1515. (1, 0, 1)
1516. (3, 2, 0)
1517. (1, 1, 2)
1518. (2, 1, 0)
1519. (1, 2, 0)
1520. (5, 1, 2)
1521. (1, 0, 1)
1522. (2, 0, 2)
1523. (1, 1, 2)
1524. (3, 0, 1)
1525. (1, 2, 0)
1526. (2, 2, 1)
1527. (1, 0, 1)
1528. (4, 2, 0)
1529. (1, 1, 2)
1530. (2, 1, 0)
1531. (1, 2, 0)
1532. (3, 1, 2)
1533. (1, 0, 1)
1534. (2, 0, 2)
1535. (1, 1, 2)
1536. (9, 2, 1)
1537. (1, 2, 0)
1538. (2, 2, 1)
1539. (1, 0, 1)
1540. (3, 2, 0)
1541. (1, 1, 2)
1542. (2, 1, 0)
1543. (1, 2, 0)
1544. (4, 1, 2)
1545. (1, 0, 1)
1546. (2, 0, 2)
1547. (1, 1, 2)
1548. (3, 0, 1)
1549. (1, 2, 0)
1550. (2, 2, 1)
1551. (1, 0, 1)
1552. (5, 2, 0)
1553. (1, 1, 2)
1554. (2, 1, 0)
1555. (1, 2, 0)
1556. (3, 1, 2)
1557. (1, 0, 1)
1558. (2, 0, 2)
1559. (1, 1, 2)
1560. (4, 0, 1)
1561. (1, 2, 0)
1562. (2, 2, 1)
1563. (1, 0, 1)
1564. (3, 2, 0)
1565. (1, 1, 2)
1566. (2, 1, 0)
1567. (1, 2, 0)
1568. (6, 0, 2)
1569. (1, 0, 1)
1570. (2, 0, 2)
1571. (1, 1, 2)
1572. (3, 0, 1)
1573. (1, 2, 0)
1574. (2, 2, 1)
1575. (1, 0, 1)
1576. (4, 0, 2)
1577. (1, 1, 0)
1578. (2, 1, 2)
1579. (1, 0, 2)
1580. (3, 1, 0)
1581. (1, 2, 1)
1582. (2, 0, 2)
1583. (1, 1, 0)
1584. (5, 0, 1)
1585. (1, 0, 2)
1586. (2, 0, 1)
1587. (1, 2, 1)
1588. (3, 0, 2)
1589. (1, 1, 0)
1590. (2, 1, 2)
1591. (1, 0, 2)
1592. (4, 2, 0)
1593. (1, 2, 1)
1594. (2, 2, 0)
1595. (1, 1, 0)
1596. (3, 2, 1)
1597. (1, 0, 2)
1598. (2, 0, 1)
1599. (1, 2, 1)
1600. (7, 0, 2)
1601. (1, 1, 0)
1602. (2, 1, 2)
1603. (1, 0, 2)
1604. (3, 1, 0)
1605. (1, 2, 1)
1606. (2, 2, 0)
1607. (1, 1, 0)
1608. (4, 0, 2)
1609. (1, 0, 1)
1610. (2, 0, 2)
1611. (1, 1, 2)
1612. (3, 0, 1)
1613. (1, 2, 0)
1614. (2, 2, 1)
1615. (1, 0, 1)
1616. (5, 1, 0)
1617. (1, 1, 2)
1618. (2, 1, 0)
1619. (1, 2, 0)
1620. (3, 1, 2)
1621. (1, 0, 1)
1622. (2, 0, 2)
1623. (1, 1, 2)
1624. (4, 2, 1)
1625. (1, 2, 0)
1626. (2, 2, 1)
1627. (1, 0, 1)
1628. (3, 2, 0)
1629. (1, 1, 2)
1630. (2, 1, 0)
1631. (1, 2, 0)
1632. (6, 1, 2)
1633. (1, 0, 1)
1634. (2, 0, 2)
1635. (1, 1, 2)
1636. (3, 0, 1)
1637. (1, 2, 0)
1638. (2, 2, 1)
1639. (1, 0, 1)
1640. (4, 0, 2)
1641. (1, 1, 0)
1642. (2, 1, 2)
1643. (1, 0, 2)
1644. (3, 1, 0)
1645. (1, 2, 1)
1646. (2, 0, 2)
1647. (1, 1, 0)
1648. (5, 2, 1)
1649. (1, 0, 2)
1650. (2, 0, 1)
1651. (1, 2, 1)
1652. (3, 0, 2)
1653. (1, 1, 0)
1654. (2, 1, 2)
1655. (1, 0, 2)
1656. (4, 1, 0)
1657. (1, 2, 1)
1658. (2, 2, 0)
1659. (1, 1, 0)
1660. (3, 2, 1)
1661. (1, 0, 2)
1662. (2, 0, 1)
1663. (1, 2, 1)
1664. (8, 2, 0)
1665. (1, 1, 2)
1666. (2, 1, 0)
1667. (1, 2, 0)
1668. (3, 1, 2)
1669. (1, 0, 1)
1670. (2, 0, 2)
1671. (1, 1, 2)
1672. (4, 0, 1)
1673. (1, 2, 0)
1674. (2, 2, 1)
1675. (1, 0, 1)
1676. (3, 2, 0)
1677. (1, 1, 2)
1678. (2, 1, 0)
1679. (1, 2, 0)
1680. (5, 1, 2)
1681. (1, 0, 1)
1682. (2, 0, 2)
1683. (1, 1, 2)
1684. (3, 0, 1)
1685. (1, 2, 0)
1686. (2, 2, 1)
1687. (1, 0, 1)
1688. (4, 2, 0)
1689. (1, 1, 2)
1690. (2, 1, 0)
1691. (1, 2, 0)
1692. (3, 1, 2)
1693. (1, 0, 1)
1694. (2, 0, 2)
1695. (1, 1, 2)
1696. (6, 2, 1)
1697. (1, 2, 0)
1698. (2, 2, 1)
1699. (1, 0, 1)
1700. (3, 2, 0)
1701. (1, 1, 2)
1702. (2, 1, 0)
1703. (1, 2, 0)
1704. (4, 1, 2)
1705. (1, 0, 1)
1706. (2, 0, 2)
1707. (1, 1, 2)
1708. (3, 0, 1)
1709. (1, 2, 0)
1710. (2, 2, 1)
1711. (1, 0, 1)
1712. (5, 2, 0)
1713. (1, 1, 2)
1714. (2, 1, 0)
1715. (1, 2, 0)
1716. (3, 1, 2)
1717. (1, 0, 1)
1718. (2, 0, 2)
1719. (1, 1, 2)
1720. (4, 0, 1)
1721. (1, 2, 0)
1722. (2, 2, 1)
1723. (1, 0, 1)
1724. (3, 2, 0)
1725. (1, 1, 2)
1726. (2, 1, 0)
1727. (1, 2, 0)
1728. (7, 2, 1)
1729. (1, 0, 2)
1730. (2, 0, 1)
1731. (1, 2, 1)
1732. (3, 0, 2)
1733. (1, 1, 0)
1734. (2, 1, 2)
1735. (1, 0, 2)
1736. (4, 0, 1)
1737. (1, 2, 1)
1738. (2, 0, 2)
1739. (1, 1, 0)
1740. (3, 2, 1)
1741. (1, 0, 2)
1742. (2, 2, 0)
1743. (1, 2, 0)
1744. (5, 1, 2)
1745. (1, 0, 1)
1746. (2, 0, 2)
1747. (1, 1, 2)
1748. (3, 0, 1)
1749. (1, 2, 0)
1750. (2, 2, 1)
1751. (1, 0, 1)
1752. (4, 2, 0)
1753. (1, 1, 2)
1754. (2, 1, 0)
1755. (1, 2, 0)
1756. (3, 1, 2)
1757. (1, 0, 1)
1758. (2, 0, 2)
1759. (1, 1, 2)
1760. (6, 0, 1)
1761. (1, 2, 0)
1762. (2, 2, 1)
1763. (1, 0, 1)
1764. (3, 2, 0)
1765. (1, 1, 2)
1766. (2, 1, 0)
1767. (1, 2, 0)
1768. (4, 1, 2)
1769. (1, 0, 1)
1770. (2, 0, 2)
1771. (1, 1, 2)
1772. (3, 0, 1)
1773. (1, 2, 0)
1774. (2, 2, 1)
1775. (1, 0, 1)
1776. (5, 2, 0)
1777. (1, 1, 2)
1778. (2, 1, 0)
1779. (1, 2, 0)
1780. (3, 1, 2)
1781. (1, 0, 1)
1782. (2, 0, 2)
1783. (1, 1, 2)
1784. (4, 0, 1)
1785. (1, 2, 0)
1786. (2, 2, 1)
1787. (1, 0, 1)
1788. (3, 2, 0)
1789. (1, 1, 2)
1790. (2, 1, 0)
1791. (1, 2, 0)
1792. (10, 2, 1)
1793. (1, 0, 2)
1794. (2, 0, 1)
1795. (1, 2, 1)
1796. (3, 0, 2)
1797. (1, 1, 0)
1798. (2, 1, 2)
1799. (1, 0, 2)
1800. (4, 0, 1)
1801. (1, 2, 1)
1802. (2, 0, 2)
1803. (1, 1, 0)
1804. (3, 2, 1)
1805. (1, 0, 2)
1806. (2, 2, 0)
1807. (1, 2, 0)
1808. (5, 1, 2)
1809. (1, 0, 1)
1810. (2, 0, 2)
1811. (1, 1, 2)
1812. (3, 0, 1)
1813. (1, 2, 0)
1814. (2, 2, 1)
1815. (1, 0, 1)
1816. (4, 2, 0)
1817. (1, 1, 2)
1818. (2, 1, 0)
1819. (1, 2, 0)
1820. (3, 1, 2)
1821. (1, 0, 1)
1822. (2, 0, 2)
1823. (1, 1, 2)
1824. (6, 1, 0)
1825. (1, 2, 1)
1826. (2, 2, 0)
1827. (1, 1, 0)
1828. (3, 2, 1)
1829. (1, 0, 2)
1830. (2, 0, 1)
1831. (1, 2, 1)
1832. (4, 1, 2)
1833. (1, 1, 0)
1834. (2, 1, 2)
1835. (1, 0, 2)
1836. (3, 1, 0)
1837. (1, 2, 1)
1838. (2, 2, 0)
1839. (1, 1, 0)
1840. (5, 2, 1)
1841. (1, 0, 2)
1842. (2, 0, 1)
1843. (1, 2, 1)
1844. (3, 0, 2)
1845. (1, 1, 0)
1846. (2, 1, 2)
1847. (1, 0, 2)
1848. (4, 0, 1)
1849. (1, 2, 1)
1850. (2, 0, 2)
1851. (1, 1, 0)
1852. (3, 2, 1)
1853. (1, 0, 2)
1854. (2, 2, 0)
1855. (1, 2, 0)
1856. (6, 0, 2)
1857. (1, 0, 1)
1858. (2, 0, 2)
1859. (1, 1, 2)
1860. (3, 0, 1)
1861. (1, 2, 0)
1862. (2, 2, 1)
1863. (1, 0, 1)
1864. (4, 0, 2)
1865. (1, 1, 0)
1866. (2, 1, 2)
1867. (1, 0, 2)
1868. (3, 1, 0)
1869. (1, 2, 1)
1870. (2, 0, 2)
1871. (1, 1, 0)
1872. (5, 0, 1)
1873. (1, 0, 2)
1874. (2, 0, 1)
1875. (1, 2, 1)
1876. (3, 0, 2)
1877. (1, 1, 0)
1878. (2, 1, 2)
1879. (1, 0, 2)
1880. (4, 2, 0)
1881. (1, 2, 1)
1882. (2, 2, 0)
1883. (1, 1, 0)
1884. (3, 2, 1)
1885. (1, 0, 2)
1886. (2, 0, 1)
1887. (1, 2, 1)
1888. (7, 1, 0)
1889. (1, 1, 2)
1890. (2, 1, 0)
1891. (1, 2, 0)
1892. (3, 1, 2)
1893. (1, 0, 1)
1894. (2, 0, 2)
1895. (1, 1, 2)
1896. (4, 0, 1)
1897. (1, 2, 0)
1898. (2, 2, 1)
1899. (1, 0, 1)
1900. (3, 2, 0)
1901. (1, 1, 2)
1902. (2, 1, 0)
1903. (1, 2, 0)
1904. (5, 1, 2)
1905. (1, 0, 1)
1906. (2, 0, 2)
1907. (1, 1, 2)
1908. (3, 0, 1)
1909. (1, 2, 0)
1910. (2, 2, 1)
1911. (1, 0, 1)
1912. (4, 2, 0)
1913. (1, 1, 2)
1914. (2, 1, 0)
1915. (1, 2, 0)
1916. (3, 1, 2)
1917. (1, 0, 1)
1918. (2, 0, 2)
1919. (1, 1, 2)
1920. (6, 2, 0)
1921. (1, 2, 1)
1922. (2, 2, 0)
1923. (1, 1, 0)
1924. (3, 2, 1)
1925. (1, 0, 2)
1926. (2, 0, 1)
1927. (1, 2, 1)
1928. (4, 1, 2)
1929. (1, 1, 0)
1930. (2, 1, 2)
1931. (1, 0, 2)
1932. (3, 1, 0)
1933. (1, 2, 1)
1934. (2, 2, 0)
1935. (1, 1, 0)
1936. (5, 2, 1)
1937. (1, 0, 2)
1938. (2, 0, 1)
1939. (1, 2, 1)
1940. (3, 0, 2)
1941. (1, 1, 0)
1942. (2, 1, 2)
1943. (1, 0, 2)
1944. (4, 0, 1)
1945. (1, 2, 1)
1946. (2, 0, 2)
1947. (1, 1, 0)
1948. (3, 2, 1)
1949. (1, 0, 2)
1950. (2, 2, 0)
1951. (1, 2, 0)
1952. (8, 0, 2)
1953. (1, 0, 1)
1954. (2, 0, 2)
1955. (1, 1, 2)
1956. (3, 0, 1)
1957. (1, 2, 0)
1958. (2, 2, 1)
1959. (1, 0, 1)
1960. (4, 0, 2)
1961. (1, 1, 0)
1962. (2, 1, 2)
1963. (1, 0, 2)
1964. (3, 1, 0)
1965. (1, 2, 1)
1966. (2, 0, 2)
1967. (1, 1, 0)
1968. (5, 0, 1)
1969. (1, 0, 2)
1970. (2, 0, 1)
1971. (1, 2, 1)
1972. (3, 0, 2)
1973. (1, 1, 0)
1974. (2, 1, 2)
1975. (1, 0, 2)
1976. (4, 2, 0)
1977. (1, 2, 1)
1978. (2, 2, 0)
1979. (1, 1, 0)
1980. (3, 2, 1)
1981. (1, 0, 2)
1982. (2, 0, 1)
1983. (1, 2, 1)
1984. (6, 1, 2)
1985. (1, 1, 0)
1986. (2, 1, 2)
1987. (1, 0, 2)
1988. (3, 1, 0)
1989. (1, 2, 1)
1990. (2, 2, 0)
1991. (1, 1, 0)
1992. (4, 0, 2)
1993. (1, 0, 1)
1994. (2, 0, 2)
1995. (1, 1, 2)
1996. (3, 0, 1)
1997. (1, 2, 0)
1998. (2, 2, 1)
1999. (1, 0, 1)
2000. (5, 1, 0)
2001. (1, 1, 2)
2002. (2, 1, 0)
2003. (1, 2, 0)
2004. (3, 1, 2)
2005. (1, 0, 1)
2006. (2, 0, 2)
2007. (1, 1, 2)
2008. (4, 2, 1)
2009. (1, 2, 0)
2010. (2, 2, 1)
2011. (1, 0, 1)
2012. (3, 2, 0)
2013. (1, 1, 2)
2014. (2, 1, 0)
2015. (1, 2, 0)
2016. (7, 0, 2)
2017. (1, 0, 1)
2018. (2, 0, 2)
2019. (1, 1, 2)
2020. (3, 0, 1)
2021. (1, 2, 0)
2022. (2, 2, 1)
2023. (1, 0, 1)
2024. (4, 0, 2)
2025. (1, 1, 0)
2026. (2, 1, 2)
2027. (1, 0, 2)
2028. (3, 1, 0)
2029. (1, 2, 1)
2030. (2, 0, 2)
2031. (1, 1, 0)
2032. (5, 0, 1)
2033. (1, 0, 2)
2034. (2, 0, 1)
2035. (1, 2, 1)
2036. (3, 0, 2)
2037. (1, 1, 0)
2038. (2, 1, 2)
2039. (1, 0, 2)
2040. (4, 2, 0)
2041. (1, 2, 1)
2042. (2, 2, 0)
2043. (1, 1, 0)
2044. (3, 2, 1)
2045. (1, 0, 2)
2046. (2, 0, 1)
2047. (1, 2, 1)

I've now listed all 2047 moves. Let me convert this to CSV format:

```
disk_id,from_peg,to_peg
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,1
2,0,2
1,1,0
3,2,1
1,0,2
2,2,0
1,2,0
5,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,1,2
1,1,0
2,1,2
1,0,2
3,1,0
1,2,1
2,0,2
1,1,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,1
2,0,2
1,1,0
3,2,1
1,0,2
2,2,0
1,2,0
5,2,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
7,0,2
1,1,0
2,1,2
1,0,2
3,1,0
1,2,1
2,2,0
1,1,0
4,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,2,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
6,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,0
1,2,1
2,0,2
1,1,0
5,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
8,0,1
1,1,0
2,1,2
1,0,2
3,1,0
1,2,1
2,2,0
1,1,0
4,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
5,1,2
1,1,0
2,1,2
1,0,2
3,1,0
1,2,1
2,0,2
1,1,0
4,2,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
6,2,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
4,1,2
1,1,0
2,1,2
1,0,2
3,1,0
1,2,1
2,0,2
1,1,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,1
2,0,2
1,1,0
3,2,1
1,0,2
2,2,0
1,2,0
7,2,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,1
2,0,2
1,1,0
3,2,1
1,0,2
2,2,0
1,2,0
5,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,1,2
1,1,0
2,1,2
1,0,2
3,1,0
1,2,1
2,0,2
1,1,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,1
2,0,2
1,1,0
3,2,1
1,0,2
2,2,0
1,2,0
5,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,2,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
9,0,2
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
4,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
5,2,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,0,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
6,2,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,1
2,0,2
1,1,0
3,2,1
1,0,2
2,2,0
1,2,0
5,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,1,2
1,1,0
2,1,2
1,0,2
3,1,0
1,2,1
2,0,2
1,1,0
7,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,1
2,0,2
1,1,0
3,2,1
1,0,2
2,2,0
1,2,0
5,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,2,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
6,0,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
4,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
5,2,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,0,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
8,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,1
2,0,2
1,1,0
3,2,1
1,0,2
2,2,0
1,2,0
5,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,2,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
6,0,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
4,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
5,2,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,0,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
7,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,0
1,2,1
2,0,2
1,1,0
5,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
6,1,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,0,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,2,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
10,0,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
4,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
5,2,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,0,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
6,2,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,1
2,0,2
1,1,0
3,2,1
1,0,2
2,2,0
1,2,0
5,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,1,2
1,1,0
2,1,2
1,0,2
3,1,0
1,2,1
2,0,2
1,1,0
7,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,1
2,0,2
1,1,0
3,2,1
1,0,2
2,2,0
1,2,0
5,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,2,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
6,0,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
4,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
5,2,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,0,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
8,2,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
4,1,2
1,1,0
2,1,2
1,0,2
3,1,0
1,2,1
2,2,0
1,1,0
5,2,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,1
2,0,2
1,1,0
3,2,1
1,0,2
2,2,0
1,2,0
6,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,0
1,2,1
2,0,2
1,1,0
5,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
7,0,2
1,1,0
2,1,2
1,0,2
3,1,0
1,2,1
2,2,0
1,1,0
4,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,2,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
6,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,0
1,2,1
2,0,2
1,1,0
5,2,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,1,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
9,0,2
1,1,0
2,1,2
1,0,2
3,1,0
1,2,1
2,2,0
1,1,0
4,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,2,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
6,2,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,1
2,0,2
1,1,0
3,2,1
1,0,2
2,2,0
1,2,0
5,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,1,2
1,1,0
2,1,2
1,0,2
3,1,0
1,2,1
2,0,2
1,1,0
7,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,1
2,0,2
1,1,0
3,2,1
1,0,2
2,2,0
1,2,0
5,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,2,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
6,0,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
4,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
5,2,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,0,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
8,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,0
1,2,1
2,0,2
1,1,0
5,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
6,1,2
1,1,0
2,1,2
1,0,2
3,1,0
1,2,1
2,2,0
1,1,0
4,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,2,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
7,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,0
1,2,1
2,0,2
1,1,0
5,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
6,2,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,0,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,2,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
9,2,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
4,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
5,2,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,0,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
6,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,0
1,2,1
2,0,2
1,1,0
5,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
7,0,2
1,1,0
2,1,2
1,0,2
3,1,0
1,2,1
2,2,0
1,1,0
4,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,2,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
6,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,0
1,2,1
2,0,2
1,1,0
5,2,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,1,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
8,2,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,0,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,2,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
6,2,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,1
2,0,2
1,1,0
3,2,1
1,0,2
2,2,0
1,2,0
5,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,1,2
1,1,0
2,1,2
1,0,2
3,1,0
1,2,1
2,0,2
1,1,0
7,2,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,1
2,0,2
1,1,0
3,2,1
1,0,2
2,2,0
1,2,0
5,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,2,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
6,0,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
4,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
5,2,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,0,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
10,2,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,1
2,0,2
1,1,0
3,2,1
1,0,2
2,2,0
1,2,0
5,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,2,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
6,1,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
4,1,2
1,1,0
2,1,2
1,0,2
3,1,0
1,2,1
2,2,0
1,1,0
5,2,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,1
2,0,2
1,1,0
3,2,1
1,0,2
2,2,0
1,2,0
6,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,0
1,2,1
2,0,2
1,1,0
5,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
7,1,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,0,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,2,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
6,2,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
4,1,2
1,1,0
2,1,2
1,0,2
3,1,0
1,2,1
2,2,0
1,1,0
5,2,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,1
2,0,2
1,1,0
3,2,1
1,0,2
2,2,0
1,2,0
8,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,0
1,2,1
2,0,2
1,1,0
5,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
6,1,2
1,1,0
2,1,2
1,0,2
3,1,0
1,2,1
2,2,0
1,1,0
4,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,2,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
7,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,0
1,2,1
2,0,2
1,1,0
5,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
11,0,2
```

That completes all 2047 moves for the Tower of Hanoi with 11 disks.

The Tower of Hanoi with 11 disks requires 2^11 - 1 = 2047 moves to solve optimally. I've listed all 2047 moves in the required CSV format.
</think>

```
disk_id,from_peg,to_peg
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,1
2,0,2
1,1,0
3,2,1
1,0,2
2,2,0
1,2,0
5,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,1,2
1,1,0
2,1,2
1,0,2
3,1,0
1,2,1
2,0,2
1,1,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,1
2,0,2
1,1,0
3,2,1
1,0,2
2,2,0
1,2,0
5,2,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
7,0,2
1,1,0
2,1,2
1,0,2
3,1,0
1,2,1
2,2,0
1,1,0
4,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,2,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
6,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,0
1,2,1
2,0,2
1,1,0
5,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
8,0,1
1,1,0
2,1,2
1,0,2
3,1,0
1,2,1
2,2,0
1,1,0
4,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
5,1,2
1,1,0
2,1,2
1,0,2
3,1,0
1,2,1
2,0,2
1,1,0
4,2,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
6,2,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
4,1,2
1,1,0
2,1,2
1,0,2
3,1,0
1,2,1
2,0,2
1,1,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,1
2,0,2
1,1,0
3,2,1
1,0,2
2,2,0
1,2,0
7,2,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,1
2,0,2
1,1,0
3,2,1
1,0,2
2,2,0
1,2,0
5,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,1,2
1,1,0
2,1,2
1,0,2
3,1,0
1,2,1
2,0,2
1,1,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,1
2,0,2
1,1,0
3,2,1
1,0,2
2,2,0
1,2,0
5,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,2,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
9,0,2
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
4,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
5,2,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,0,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
6,2,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,1
2,0,2
1,1,0
3,2,1
1,0,2
2,2,0
1,2,0
5,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,1,2
1,1,0
2,1,2
1,0,2
3,1,0
1,2,1
2,0,2
1,1,0
7,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,1
2,0,2
1,1,0
3,2,1
1,0,2
2,2,0
1,2,0
5,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,2,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
6,0,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
4,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
5,2,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,0,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
8,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,1
2,0,2
1,1,0
3,2,1
1,0,2
2,2,0
1,2,0
5,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,2,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
6,0,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
4,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
5,2,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,0,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
7,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,0
1,2,1
2,0,2
1,1,0
5,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
6,1,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,0,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,2,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
10,0,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
4,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
5,2,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,0,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
6,2,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,1
2,0,2
1,1,0
3,2,1
1,0,2
2,2,0
1,2,0
5,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,1,2
1,1,0
2,1,2
1,0,2
3,1,0
1,2,1
2,0,2
1,1,0
7,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,1
2,0,2
1,1,0
3,2,1
1,0,2
2,2,0
1,2,0
5,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,2,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
6,0,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
4,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
5,2,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,0,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
8,2,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
4,1,2
1,1,0
2,1,2
1,0,2
3,1,0
1,2,1
2,2,0
1,1,0
5,2,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,1
2,0,2
1,1,0
3,2,1
1,0,2
2,2,0
1,2,0
6,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,0
1,2,1
2,0,2
1,1,0
5,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
7,0,2
1,1,0
2,1,2
1,0,2
3,1,0
1,2,1
2,2,0
1,1,0
4,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,2,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
6,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,0
1,2,1
2,0,2
1,1,0
5,2,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,1,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
9,0,2
1,1,0
2,1,2
1,0,2
3,1,0
1,2,1
2,2,0
1,1,0
4,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,2,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
6,2,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,1
2,0,2
1,1,0
3,2,1
1,0,2
2,2,0
1,2,0
5,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,1,2
1,1,0
2,1,2
1,0,2
3,1,0
1,2,1
2,0,2
1,1,0
7,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,1
2,0,2
1,1,0
3,2,1
1,0,2
2,2,0
1,2,0
5,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,2,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
6,0,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
4,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
5,2,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,0,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
8,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,0
1,2,1
2,0,2
1,1,0
5,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
6,1,2
1,1,0
2,1,2
1,0,2
3,1,0
1,2,1
2,2,0
1,1,0
4,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,2,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
7,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,0
1,2,1
2,0,2
1,1,0
5,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
6,2,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,0,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,2,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
9,2,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
4,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
5,2,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,0,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
6,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,0
1,2,1
2,0,2
1,1,0
5,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
7,0,2
1,1,0
2,1,2
1,0,2
3,1,0
1,2,1
2,2,0
1,1,0
4,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,2,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
6,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,0
1,2,1
2,0,2
1,1,0
5,2,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,1,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
8,2,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,0,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,2,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
6,2,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,1
2,0,2
1,1,0
3,2,1
1,0,2
2,2,0
1,2,0
5,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,1,2
1,1,0
2,1,2
1,0,2
3,1,0
1,2,1
2,0,2
1,1,0
7,2,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,1
2,0,2
1,1,0
3,2,1
1,0,2
2,2,0
1,2,0
5,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,2,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
6,0,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
4,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
5,2,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,0,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
10,2,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,1
2,0,2
1,1,0
3,2,1
1,0,2
2,2,0
1,2,0
5,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,2,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
6,1,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
4,1,2
1,1,0
2,1,2
1,0,2
3,1,0
1,2,1
2,2,0
1,1,0
5,2,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,1
2,0,2
1,1,0
3,2,1
1,0,2
2,2,0
1,2,0
6,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,0
1,2,1
2,0,2
1,1,0
5,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
7,1,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,0,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,2,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
6,2,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
4,1,2
1,1,0
2,1,2
1,0,2
3,1,0
1,2,1
2,2,0
1,1,0
5,2,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,1
2,0,2
1,1,0
3,2,1
1,0,2
2,2,0
1,2,0
8,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,0
1,2,1
2,0,2
1,1,0
5,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
6,1,2
1,1,0
2,1,2
1,0,2
3,1,0
1,2,1
2,2,0
1,1,0
4,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,2,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
7,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,0
1,2,1
2,0,2
1,1,0
5,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
11,0,2
```

