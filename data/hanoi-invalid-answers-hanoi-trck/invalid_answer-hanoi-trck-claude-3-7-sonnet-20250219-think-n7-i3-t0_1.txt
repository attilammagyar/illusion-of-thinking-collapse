# model_name='claude-3-7-sonnet-20250219', reasoning_budget=32000, tries=0, n=7, i=3
# valid_prefix_length=51, is_valid_solution=0, first_correction=-1

<think>
I need to solve the Tower of Hanoi puzzle with 7 disks. This is a classic problem with a well-known recursive solution.

For Tower of Hanoi with n disks, the minimum number of moves required is 2^n - 1. With 7 disks, that's 2^7 - 1 = 128 - 1 = 127 moves.

Let me solve this step by step using the recursive algorithm:

1. Move n-1 disks from source to auxiliary peg (using destination as a temporary storage)
2. Move the largest disk from source to destination
3. Move n-1 disks from auxiliary to destination (using source as a temporary storage)

Let's call the pegs: A (source, peg 0), B (auxiliary, peg 1), and C (destination, peg 2).

For n=7, I need to:
1. Move 6 disks from A to B (using C as temporary)
2. Move disk 7 from A to C
3. Move 6 disks from B to C (using A as temporary)

Let me write a recursive algorithm to generate the moves:

```
function hanoi(n, source, auxiliary, destination, moves = []) {
    if (n === 1) {
        moves.push({from: source, to: destination});
        return moves;
    }
    
    hanoi(n - 1, source, destination, auxiliary, moves);
    moves.push({from: source, to: destination});
    hanoi(n - 1, auxiliary, source, destination, moves);
    
    return moves;
}
```

Let me trace through this for n=7, source=0, auxiliary=1, destination=2:

hanoi(7, 0, 1, 2)
  hanoi(6, 0, 2, 1)
    hanoi(5, 0, 1, 2)
      hanoi(4, 0, 2, 1)
        hanoi(3, 0, 1, 2)
          hanoi(2, 0, 2, 1)
            hanoi(1, 0, 1, 2)
              move disk 1 from 0 to 2
            move disk 2 from 0 to 1
            hanoi(1, 2, 0, 1)
              move disk 1 from 2 to 1
          move disk 3 from 0 to 2
          hanoi(2, 1, 0, 2)
            hanoi(1, 1, 2, 0)
              move disk 1 from 1 to 0
            move disk 2 from 1 to 2
            hanoi(1, 0, 1, 2)
              move disk 1 from 0 to 2
        move disk 4 from 0 to 1
        hanoi(3, 2, 0, 1)
          hanoi(2, 2, 1, 0)
            hanoi(1, 2, 0, 1)
              move disk 1 from 2 to 1
            move disk 2 from 2 to 0
            hanoi(1, 1, 2, 0)
              move disk 1 from 1 to 0
          move disk 3 from 2 to 1
          hanoi(2, 0, 2, 1)
            hanoi(1, 0, 1, 2)
              move disk 1 from 0 to 2
            move disk 2 from 0 to 1
            hanoi(1, 2, 0, 1)
              move disk 1 from 2 to 1
      move disk 5 from 0 to 2
      hanoi(4, 1, 0, 2)
        hanoi(3, 1, 2, 0)
          hanoi(2, 1, 0, 2)
            hanoi(1, 1, 2, 0)
              move disk 1 from 1 to 0
            move disk 2 from 1 to 2
            hanoi(1, 0, 1, 2)
              move disk 1 from 0 to 2
          move disk 3 from 1 to 0
          hanoi(2, 2, 1, 0)
            hanoi(1, 2, 0, 1)
              move disk 1 from 2 to 1
            move disk 2 from 2 to 0
            hanoi(1, 1, 2, 0)
              move disk 1 from 1 to 0
        move disk 4 from 1 to 2
        hanoi(3, 0, 1, 2)
          hanoi(2, 0, 2, 1)
            hanoi(1, 0, 1, 2)
              move disk 1 from 0 to 2
            move disk 2 from 0 to 1
            hanoi(1, 2, 0, 1)
              move disk 1 from 2 to 1
          move disk 3 from 0 to 2
          hanoi(2, 1, 0, 2)
            hanoi(1, 1, 2, 0)
              move disk 1 from 1 to 0
            move disk 2 from 1 to 2
            hanoi(1, 0, 1, 2)
              move disk 1 from 0 to 2
    move disk 6 from 0 to 1
    hanoi(5, 2, 0, 1)
      hanoi(4, 2, 1, 0)
        hanoi(3, 2, 0, 1)
          hanoi(2, 2, 1, 0)
            hanoi(1, 2, 0, 1)
              move disk 1 from 2 to 1
            move disk 2 from 2 to 0
            hanoi(1, 1, 2, 0)
              move disk 1 from 1 to 0
          move disk 3 from 2 to 1
          hanoi(2, 0, 2, 1)
            hanoi(1, 0, 1, 2)
              move disk 1 from 0 to 2
            move disk 2 from 0 to 1
            hanoi(1, 2, 0, 1)
              move disk 1 from 2 to 1
        move disk 4 from 2 to 0
        hanoi(3, 1, 2, 0)
          hanoi(2, 1, 0, 2)
            hanoi(1, 1, 2, 0)
              move disk 1 from 1 to 0
            move disk 2 from 1 to 2
            hanoi(1, 0, 1, 2)
              move disk 1 from 0 to 2
          move disk 3 from 1 to 0
          hanoi(2, 2, 1, 0)
            hanoi(1, 2, 0, 1)
              move disk 1 from 2 to 1
            move disk 2 from 2 to 0
            hanoi(1, 1, 2, 0)
              move disk 1 from 1 to 0
      move disk 5 from 2 to 1
      hanoi(4, 0, 2, 1)
        hanoi(3, 0, 1, 2)
          hanoi(2, 0, 2, 1)
            hanoi(1, 0, 1, 2)
              move disk 1 from 0 to 2
            move disk 2 from 0 to 1
            hanoi(1, 2, 0, 1)
              move disk 1 from 2 to 1
          move disk 3 from 0 to 2
          hanoi(2, 1, 0, 2)
            hanoi(1, 1, 2, 0)
              move disk 1 from 1 to 0
            move disk 2 from 1 to 2
            hanoi(1, 0, 1, 2)
              move disk 1 from 0 to 2
        move disk 4 from 0 to 1
        hanoi(3, 2, 0, 1)
          hanoi(2, 2, 1, 0)
            hanoi(1, 2, 0, 1)
              move disk 1 from 2 to 1
            move disk 2 from 2 to 0
            hanoi(1, 1, 2, 0)
              move disk 1 from 1 to 0
          move disk 3 from 2 to 1
          hanoi(2, 0, 2, 1)
            hanoi(1, 0, 1, 2)
              move disk 1 from 0 to 2
            move disk 2 from 0 to 1
            hanoi(1, 2, 0, 1)
              move disk 1 from 2 to 1
  move disk 7 from 0 to 2
  hanoi(6, 1, 0, 2)
    hanoi(5, 1, 2, 0)
      hanoi(4, 1, 0, 2)
        hanoi(3, 1, 2, 0)
          hanoi(2, 1, 0, 2)
            hanoi(1, 1, 2, 0)
              move disk 1 from 1 to 0
            move disk 2 from 1 to 2
            hanoi(1, 0, 1, 2)
              move disk 1 from 0 to 2
          move disk 3 from 1 to 0
          hanoi(2, 2, 1, 0)
            hanoi(1, 2, 0, 1)
              move disk 1 from 2 to 1
            move disk 2 from 2 to 0
            hanoi(1, 1, 2, 0)
              move disk 1 from 1 to 0
        move disk 4 from 1 to 2
        hanoi(3, 0, 1, 2)
          hanoi(2, 0, 2, 1)
            hanoi(1, 0, 1, 2)
              move disk 1 from 0 to 2
            move disk 2 from 0 to 1
            hanoi(1, 2, 0, 1)
              move disk 1 from 2 to 1
          move disk 3 from 0 to 2
          hanoi(2, 1, 0, 2)
            hanoi(1, 1, 2, 0)
              move disk 1 from 1 to 0
            move disk 2 from 1 to 2
            hanoi(1, 0, 1, 2)
              move disk 1 from 0 to 2
      move disk 5 from 1 to 0
      hanoi(4, 2, 1, 0)
        hanoi(3, 2, 0, 1)
          hanoi(2, 2, 1, 0)
            hanoi(1, 2, 0, 1)
              move disk 1 from 2 to 1
            move disk 2 from 2 to 0
            hanoi(1, 1, 2, 0)
              move disk 1 from 1 to 0
          move disk 3 from 2 to 1
          hanoi(2, 0, 2, 1)
            hanoi(1, 0, 1, 2)
              move disk 1 from 0 to 2
            move disk 2 from 0 to 1
            hanoi(1, 2, 0, 1)
              move disk 1 from 2 to 1
        move disk 4 from 2 to 0
        hanoi(3, 1, 2, 0)
          hanoi(2, 1, 0, 2)
            hanoi(1, 1, 2, 0)
              move disk 1 from 1 to 0
            move disk 2 from 1 to 2
            hanoi(1, 0, 1, 2)
              move disk 1 from 0 to 2
          move disk 3 from 1 to 0
          hanoi(2, 2, 1, 0)
            hanoi(1, 2, 0, 1)
              move disk 1 from 2 to 1
            move disk 2 from 2 to 0
            hanoi(1, 1, 2, 0)
              move disk 1 from 1 to 0
    move disk 6 from 1 to 2
    hanoi(5, 0, 1, 2)
      hanoi(4, 0, 2, 1)
        hanoi(3, 0, 1, 2)
          hanoi(2, 0, 2, 1)
            hanoi(1, 0, 1, 2)
              move disk 1 from 0 to 2
            move disk 2 from 0 to 1
            hanoi(1, 2, 0, 1)
              move disk 1 from 2 to 1
          move disk 3 from 0 to 2
          hanoi(2, 1, 0, 2)
            hanoi(1, 1, 2, 0)
              move disk 1 from 1 to 0
            move disk 2 from 1 to 2
            hanoi(1, 0, 1, 2)
              move disk 1 from 0 to 2
        move disk 4 from 0 to 1
        hanoi(3, 2, 0, 1)
          hanoi(2, 2, 1, 0)
            hanoi(1, 2, 0, 1)
              move disk 1 from 2 to 1
            move disk 2 from 2 to 0
            hanoi(1, 1, 2, 0)
              move disk 1 from 1 to 0
          move disk 3 from 2 to 1
          hanoi(2, 0, 2, 1)
            hanoi(1, 0, 1, 2)
              move disk 1 from 0 to 2
            move disk 2 from 0 to 1
            hanoi(1, 2, 0, 1)
              move disk 1 from 2 to 1
      move disk 5 from 0 to 2
      hanoi(4, 1, 0, 2)
        hanoi(3, 1, 2, 0)
          hanoi(2, 1, 0, 2)
            hanoi(1, 1, 2, 0)
              move disk 1 from 1 to 0
            move disk 2 from 1 to 2
            hanoi(1, 0, 1, 2)
              move disk 1 from 0 to 2
          move disk 3 from 1 to 0
          hanoi(2, 2, 1, 0)
            hanoi(1, 2, 0, 1)
              move disk 1 from 2 to 1
            move disk 2 from 2 to 0
            hanoi(1, 1, 2, 0)
              move disk 1 from 1 to 0
        move disk 4 from 1 to 2
        hanoi(3, 0, 1, 2)
          hanoi(2, 0, 2, 1)
            hanoi(1, 0, 1, 2)
              move disk 1 from 0 to 2
            move disk 2 from 0 to 1
            hanoi(1, 2, 0, 1)
              move disk 1 from 2 to 1
          move disk 3 from 0 to 2
          hanoi(2, 1, 0, 2)
            hanoi(1, 1, 2, 0)
              move disk 1 from 1 to 0
            move disk 2 from 1 to 2
            hanoi(1, 0, 1, 2)
              move disk 1 from 0 to 2

This will give me 127 moves, but it's a lot of recursion to do by hand. Let me implement it programmatically:

```
function hanoi(n, source, auxiliary, destination) {
    const moves = [];
    
    function hanoiHelper(n, source, auxiliary, destination) {
        if (n === 1) {
            moves.push({from: source, to: destination});
            return;
        }
        
        hanoiHelper(n - 1, source, destination, auxiliary);
        moves.push({from: source, to: destination});
        hanoiHelper(n - 1, auxiliary, source, destination);
    }
    
    hanoiHelper(n, source, auxiliary, destination);
    return moves;
}

const moves = hanoi(7, 0, 1, 2);
```

Instead of generating the moves programmatically, let me follow a more systematic approach to solve this manually.

For Tower of Hanoi with 7 disks, the optimal solution requires 127 moves. I'll track the state of each peg after each move.

Initial state:
- Peg 0: 7 6 5 4 3 2 1 (top is 1)
- Peg 1: empty
- Peg 2: empty

When n is odd, the first move is from the source to the destination (peg 0 to peg 2). When n is even, the first move is from the source to the auxiliary (peg 0 to peg 1). In our case, n=7, which is odd, so the first move is from peg 0 to peg 2.

The optimal strategy for odd n follows this pattern:
1. Move disk 1 from source to destination.
2. Make the only legal move that doesn't involve disk 1.
3. Move disk 1 from its current peg to the remaining peg.
4. Repeat steps 2-3 until all disks are on the destination peg.

Let me trace through the moves step by step:

Move 1: Disk 1 from peg 0 to peg 2
- Peg 0: 7 6 5 4 3 2
- Peg 1: empty
- Peg 2: 1

Move 2: Disk 2 from peg 0 to peg 1
- Peg 0: 7 6 5 4 3
- Peg 1: 2
- Peg 2: 1

Move 3: Disk 1 from peg 2 to peg 1
- Peg 0: 7 6 5 4 3
- Peg 1: 2 1
- Peg 2: empty

Move 4: Disk 3 from peg 0 to peg 2
- Peg 0: 7 6 5 4
- Peg 1: 2 1
- Peg 2: 3

Move 5: Disk 1 from peg 1 to peg 0
- Peg 0: 7 6 5 4 1
- Peg 1: 2
- Peg 2: 3

Move 6: Disk 2 from peg 1 to peg 2
- Peg 0: 7 6 5 4 1
- Peg 1: empty
- Peg 2: 3 2

Move 7: Disk 1 from peg 0 to peg 2
- Peg 0: 7 6 5 4
- Peg 1: empty
- Peg 2: 3 2 1

Move 8: Disk 4 from peg 0 to peg 1
- Peg 0: 7 6 5
- Peg 1: 4
- Peg 2: 3 2 1

Move 9: Disk 1 from peg 2 to peg 1
- Peg 0: 7 6 5
- Peg 1: 4 1
- Peg 2: 3 2

Move 10: Disk 2 from peg 2 to peg 0
- Peg 0: 7 6 5 2
- Peg 1: 4 1
- Peg 2: 3

Move 11: Disk 1 from peg 1 to peg 0
- Peg 0: 7 6 5 2 1
- Peg 1: 4
- Peg 2: 3

Move 12: Disk 3 from peg 2 to peg 1
- Peg 0: 7 6 5 2 1
- Peg 1: 4 3
- Peg 2: empty

Move 13: Disk 1 from peg 0 to peg 2
- Peg 0: 7 6 5 2
- Peg 1: 4 3
- Peg 2: 1

Move 14: Disk 2 from peg 0 to peg 1
- Peg 0: 7 6 5
- Peg 1: 4 3 2
- Peg 2: 1

Move 15: Disk 1 from peg 2 to peg 1
- Peg 0: 7 6 5
- Peg 1: 4 3 2 1
- Peg 2: empty

Move 16: Disk 5 from peg 0 to peg 2
- Peg 0: 7 6
- Peg 1: 4 3 2 1
- Peg 2: 5

Move 17: Disk 1 from peg 1 to peg 0
- Peg 0: 7 6 1
- Peg 1: 4 3 2
- Peg 2: 5

Move 18: Disk 2 from peg 1 to peg 2
- Peg 0: 7 6 1
- Peg 1: 4 3
- Peg 2: 5 2

Move 19: Disk 1 from peg 0 to peg 2
- Peg 0: 7 6
- Peg 1: 4 3
- Peg 2: 5 2 1

Move 20: Disk 3 from peg 1 to peg 0
- Peg 0: 7 6 3
- Peg 1: 4
- Peg 2: 5 2 1

Move 21: Disk 1 from peg 2 to peg 1
- Peg 0: 7 6 3
- Peg 1: 4 1
- Peg 2: 5 2

Move 22: Disk 2 from peg 2 to peg 0
- Peg 0: 7 6 3 2
- Peg 1: 4 1
- Peg 2: 5

Move 23: Disk 1 from peg 1 to peg 0
- Peg 0: 7 6 3 2 1
- Peg 1: 4
- Peg 2: 5

Move 24: Disk 4 from peg 1 to peg 2
- Peg 0: 7 6 3 2 1
- Peg 1: empty
- Peg 2: 5 4

Move 25: Disk 1 from peg 0 to peg 2
- Peg 0: 7 6 3 2
- Peg 1: empty
- Peg 2: 5 4 1

Move 26: Disk 2 from peg 0 to peg 1
- Peg 0: 7 6 3
- Peg 1: 2
- Peg 2: 5 4 1

Move 27: Disk 1 from peg 2 to peg 1
- Peg 0: 7 6 3
- Peg 1: 2 1
- Peg 2: 5 4

Move 28: Disk 3 from peg 0 to peg 2
- Peg 0: 7 6
- Peg 1: 2 1
- Peg 2: 5 4 3

Move 29: Disk 1 from peg 1 to peg 0
- Peg 0: 7 6 1
- Peg 1: 2
- Peg 2: 5 4 3

Move 30: Disk 2 from peg 1 to peg 2
- Peg 0: 7 6 1
- Peg 1: empty
- Peg 2: 5 4 3 2

Move 31: Disk 1 from peg 0 to peg 2
- Peg 0: 7 6
- Peg 1: empty
- Peg 2: 5 4 3 2 1

Move 32: Disk 6 from peg 0 to peg 1
- Peg 0: 7
- Peg 1: 6
- Peg 2: 5 4 3 2 1

Move 33: Disk 1 from peg 2 to peg 1
- Peg 0: 7
- Peg 1: 6 1
- Peg 2: 5 4 3 2

Move 34: Disk 2 from peg 2 to peg 0
- Peg 0: 7 2
- Peg 1: 6 1
- Peg 2: 5 4 3

Move 35: Disk 1 from peg 1 to peg 0
- Peg 0: 7 2 1
- Peg 1: 6
- Peg 2: 5 4 3

Move 36: Disk 3 from peg 2 to peg 1
- Peg 0: 7 2 1
- Peg 1: 6 3
- Peg 2: 5 4

Move 37: Disk 1 from peg 0 to peg 2
- Peg 0: 7 2
- Peg 1: 6 3
- Peg 2: 5 4 1

Move 38: Disk 2 from peg 0 to peg 1
- Peg 0: 7
- Peg 1: 6 3 2
- Peg 2: 5 4 1

Move 39: Disk 1 from peg 2 to peg 1
- Peg 0: 7
- Peg 1: 6 3 2 1
- Peg 2: 5 4

Move 40: Disk 4 from peg 2 to peg 0
- Peg 0: 7 4
- Peg 1: 6 3 2 1
- Peg 2: 5

Move 41: Disk 1 from peg 1 to peg 0
- Peg 0: 7 4 1
- Peg 1: 6 3 2
- Peg 2: 5

Move 42: Disk 2 from peg 1 to peg 2
- Peg 0: 7 4 1
- Peg 1: 6 3
- Peg 2: 5 2

Move 43: Disk 1 from peg 0 to peg 2
- Peg 0: 7 4
- Peg 1: 6 3
- Peg 2: 5 2 1

Move 44: Disk 3 from peg 1 to peg 0
- Peg 0: 7 4 3
- Peg 1: 6
- Peg 2: 5 2 1

Move 45: Disk 1 from peg 2 to peg 1
- Peg 0: 7 4 3
- Peg 1: 6 1
- Peg 2: 5 2

Move 46: Disk 2 from peg 2 to peg 0
- Peg 0: 7 4 3 2
- Peg 1: 6 1
- Peg 2: 5

Move 47: Disk 1 from peg 1 to peg 0
- Peg 0: 7 4 3 2 1
- Peg 1: 6
- Peg 2: 5

Move 48: Disk 5 from peg 2 to peg 1
- Peg 0: 7 4 3 2 1
- Peg 1: 6 5
- Peg 2: empty

Move 49: Disk 1 from peg 0 to peg 2
- Peg 0: 7 4 3 2
- Peg 1: 6 5
- Peg 2: 1

Move 50: Disk 2 from peg 0 to peg 1
- Peg 0: 7 4 3
- Peg 1: 6 5 2
- Peg 2: 1

Move 51: Disk 1 from peg 2 to peg 1
- Peg 0: 7 4 3
- Peg 1: 6 5 2 1
- Peg 2: empty

Move 52: Disk 3 from peg 0 to peg 2
- Peg 0: 7 4
- Peg 1: 6 5 2 1
- Peg 2: 3

Move 53: Disk 1 from peg 1 to peg 0
- Peg 0: 7 4 1
- Peg 1: 6 5 2
- Peg 2: 3

Move 54: Disk 2 from peg 1 to peg 2
- Peg 0: 7 4 1
- Peg 1: 6 5
- Peg 2: 3 2

Move 55: Disk 1 from peg 0 to peg 2
- Peg 0: 7 4
- Peg 1: 6 5
- Peg 2: 3 2 1

Move 56: Disk 4 from peg 0 to peg 1
- Peg 0: 7
- Peg 1: 6 5 4
- Peg 2: 3 2 1

Move 57: Disk 1 from peg 2 to peg 1
- Peg 0: 7
- Peg 1: 6 5 4 1
- Peg 2: 3 2

Move 58: Disk 2 from peg 2 to peg 0
- Peg 0: 7 2
- Peg 1: 6 5 4 1
- Peg 2: 3

Move 59: Disk 1 from peg 1 to peg 0
- Peg 0: 7 2 1
- Peg 1: 6 5 4
- Peg 2: 3

Move 60: Disk 3 from peg 2 to peg 1
- Peg 0: 7 2 1
- Peg 1: 6 5 4 3
- Peg 2: empty

Move 61: Disk 1 from peg 0 to peg 2
- Peg 0: 7 2
- Peg 1: 6 5 4 3
- Peg 2: 1

Move 62: Disk 2 from peg 0 to peg 1
- Peg 0: 7
- Peg 1: 6 5 4 3 2
- Peg 2: 1

Move 63: Disk 1 from peg 2 to peg 1
- Peg 0: 7
- Peg 1: 6 5 4 3 2 1
- Peg 2: empty

Move 64: Disk 7 from peg 0 to peg 2
- Peg 0: empty
- Peg 1: 6 5 4 3 2 1
- Peg 2: 7

Move 65: Disk 1 from peg 1 to peg 0
- Peg 0: 1
- Peg 1: 6 5 4 3 2
- Peg 2: 7

Move 66: Disk 2 from peg 1 to peg 2
- Peg 0: 1
- Peg 1: 6 5 4 3
- Peg 2: 7 2

Move 67: Disk 1 from peg 0 to peg 2
- Peg 0: empty
- Peg 1: 6 5 4 3
- Peg 2: 7 2 1

Move 68: Disk 3 from peg 1 to peg 0
- Peg 0: 3
- Peg 1: 6 5 4
- Peg 2: 7 2 1

Move 69: Disk 1 from peg 2 to peg 1
- Peg 0: 3
- Peg 1: 6 5 4 1
- Peg 2: 7 2

Move 70: Disk 2 from peg 2 to peg 0
- Peg 0: 3 2
- Peg 1: 6 5 4 1
- Peg 2: 7

Move 71: Disk 1 from peg 1 to peg 0
- Peg 0: 3 2 1
- Peg 1: 6 5 4
- Peg 2: 7

Move 72: Disk 4 from peg 1 to peg 2
- Peg 0: 3 2 1
- Peg 1: 6 5
- Peg 2: 7 4

Move 73: Disk 1 from peg 0 to peg 2
- Peg 0: 3 2
- Peg 1: 6 5
- Peg 2: 7 4 1

Move 74: Disk 2 from peg 0 to peg 1
- Peg 0: 3
- Peg 1: 6 5 2
- Peg 2: 7 4 1

Move 75: Disk 1 from peg 2 to peg 1
- Peg 0: 3
- Peg 1: 6 5 2 1
- Peg 2: 7 4

Move 76: Disk 3 from peg 0 to peg 2
- Peg 0: empty
- Peg 1: 6 5 2 1
- Peg 2: 7 4 3

Move 77: Disk 1 from peg 1 to peg 0
- Peg 0: 1
- Peg 1: 6 5 2
- Peg 2: 7 4 3

Move 78: Disk 2 from peg 1 to peg 2
- Peg 0: 1
- Peg 1: 6 5
- Peg 2: 7 4 3 2

Move 79: Disk 1 from peg 0 to peg 2
- Peg 0: empty
- Peg 1: 6 5
- Peg 2: 7 4 3 2 1

Move 80: Disk 5 from peg 1 to peg 0
- Peg 0: 5
- Peg 1: 6
- Peg 2: 7 4 3 2 1

Move 81: Disk 1 from peg 2 to peg 1
- Peg 0: 5
- Peg 1: 6 1
- Peg 2: 7 4 3 2

Move 82: Disk 2 from peg 2 to peg 0
- Peg 0: 5 2
- Peg 1: 6 1
- Peg 2: 7 4 3

Move 83: Disk 1 from peg 1 to peg 0
- Peg 0: 5 2 1
- Peg 1: 6
- Peg 2: 7 4 3

Move 84: Disk 3 from peg 2 to peg 1
- Peg 0: 5 2 1
- Peg 1: 6 3
- Peg 2: 7 4

Move 85: Disk 1 from peg 0 to peg 2
- Peg 0: 5 2
- Peg 1: 6 3
- Peg 2: 7 4 1

Move 86: Disk 2 from peg 0 to peg 1
- Peg 0: 5
- Peg 1: 6 3 2
- Peg 2: 7 4 1

Move 87: Disk 1 from peg 2 to peg 1
- Peg 0: 5
- Peg 1: 6 3 2 1
- Peg 2: 7 4

Move 88: Disk 4 from peg 2 to peg 0
- Peg 0: 5 4
- Peg 1: 6 3 2 1
- Peg 2: 7

Move 89: Disk 1 from peg 1 to peg 0
- Peg 0: 5 4 1
- Peg 1: 6 3 2
- Peg 2: 7

Move 90: Disk 2 from peg 1 to peg 2
- Peg 0: 5 4 1
- Peg 1: 6 3
- Peg 2: 7 2

Move 91: Disk 1 from peg 0 to peg 2
- Peg 0: 5 4
- Peg 1: 6 3
- Peg 2: 7 2 1

Move 92: Disk 3 from peg 1 to peg 0
- Peg 0: 5 4 3
- Peg 1: 6
- Peg 2: 7 2 1

Move 93: Disk 1 from peg 2 to peg 1
- Peg 0: 5 4 3
- Peg 1: 6 1
- Peg 2: 7 2

Move 94: Disk 2 from peg 2 to peg 0
- Peg 0: 5 4 3 2
- Peg 1: 6 1
- Peg 2: 7

Move 95: Disk 1 from peg 1 to peg 0
- Peg 0: 5 4 3 2 1
- Peg 1: 6
- Peg 2: 7

Move 96: Disk 6 from peg 1 to peg 2
- Peg 0: 5 4 3 2 1
- Peg 1: empty
- Peg 2: 7 6

Move 97: Disk 1 from peg 0 to peg 2
- Peg 0: 5 4 3 2
- Peg 1: empty
- Peg 2: 7 6 1

Move 98: Disk 2 from peg 0 to peg 1
- Peg 0: 5 4 3
- Peg 1: 2
- Peg 2: 7 6 1

Move 99: Disk 1 from peg 2 to peg 1
- Peg 0: 5 4 3
- Peg 1: 2 1
- Peg 2: 7 6

Move 100: Disk 3 from peg 0 to peg 2
- Peg 0: 5 4
- Peg 1: 2 1
- Peg 2: 7 6 3

Move 101: Disk 1 from peg 1 to peg 0
- Peg 0: 5 4 1
- Peg 1: 2
- Peg 2: 7 6 3

Move 102: Disk 2 from peg 1 to peg 2
- Peg 0: 5 4 1
- Peg 1: empty
- Peg 2: 7 6 3 2

Move 103: Disk 1 from peg 0 to peg 2
- Peg 0: 5 4
- Peg 1: empty
- Peg 2: 7 6 3 2 1

Move 104: Disk 4 from peg 0 to peg 1
- Peg 0: 5
- Peg 1: 4
- Peg 2: 7 6 3 2 1

Move 105: Disk 1 from peg 2 to peg 1
- Peg 0: 5
- Peg 1: 4 1
- Peg 2: 7 6 3 2

Move 106: Disk 2 from peg 2 to peg 0
- Peg 0: 5 2
- Peg 1: 4 1
- Peg 2: 7 6 3

Move 107: Disk 1 from peg 1 to peg 0
- Peg 0: 5 2 1
- Peg 1: 4
- Peg 2: 7 6 3

Move 108: Disk 3 from peg 2 to peg 1
- Peg 0: 5 2 1
- Peg 1: 4 3
- Peg 2: 7 6

Move 109: Disk 1 from peg 0 to peg 2
- Peg 0: 5 2
- Peg 1: 4 3
- Peg 2: 7 6 1

Move 110: Disk 2 from peg 0 to peg 1
- Peg 0: 5
- Peg 1: 4 3 2
- Peg 2: 7 6 1

Move 111: Disk 1 from peg 2 to peg 1
- Peg 0: 5
- Peg 1: 4 3 2 1
- Peg 2: 7 6

Move 112: Disk 5 from peg 0 to peg 2
- Peg 0: empty
- Peg 1: 4 3 2 1
- Peg 2: 7 6 5

Move 113: Disk 1 from peg 1 to peg 0
- Peg 0: 1
- Peg 1: 4 3 2
- Peg 2: 7 6 5

Move 114: Disk 2 from peg 1 to peg 2
- Peg 0: 1
- Peg 1: 4 3
- Peg 2: 7 6 5 2

Move 115: Disk 1 from peg 0 to peg 2
- Peg 0: empty
- Peg 1: 4 3
- Peg 2: 7 6 5 2 1

Move 116: Disk 3 from peg 1 to peg 0
- Peg 0: 3
- Peg 1: 4
- Peg 2: 7 6 5 2 1

Move 117: Disk 1 from peg 2 to peg 1
- Peg 0: 3
- Peg 1: 4 1
- Peg 2: 7 6 5 2

Move 118: Disk 2 from peg 2 to peg 0
- Peg 0: 3 2
- Peg 1: 4 1
- Peg 2: 7 6 5

Move 119: Disk 1 from peg 1 to peg 0
- Peg 0: 3 2 1
- Peg 1: 4
- Peg 2: 7 6 5

Move 120: Disk 4 from peg 1 to peg 2
- Peg 0: 3 2 1
- Peg 1: empty
- Peg 2: 7 6 5 4

Move 121: Disk 1 from peg 0 to peg 2
- Peg 0: 3 2
- Peg 1: empty
- Peg 2: 7 6 5 4 1

Move 122: Disk 2 from peg 0 to peg 1
- Peg 0: 3
- Peg 1: 2
- Peg 2: 7 6 5 4 1

Move 123: Disk 1 from peg 2 to peg 1
- Peg 0: 3
- Peg 1: 2 1
- Peg 2: 7 6 5 4

Move 124: Disk 3 from peg 0 to peg 2
- Peg 0: empty
- Peg 1: 2 1
- Peg 2: 7 6 5 4 3

Move 125: Disk 1 from peg 1 to peg 0
- Peg 0: 1
- Peg 1: 2
- Peg 2: 7 6 5 4 3

Move 126: Disk 2 from peg 1 to peg 2
- Peg 0: 1
- Peg 1: empty
- Peg 2: 7 6 5 4 3 2

Move 127: Disk 1 from peg 0 to peg 2
- Peg 0: empty
- Peg 1: empty
- Peg 2: 7 6 5 4 3 2 1

Great, I've completed tracing all 127 moves for the Tower of Hanoi problem with 7 disks. Now let me format this according to the requirements.

Let me first double-check a few of my moves to make sure they're correct.

For move 64: I moved disk 7 from peg 0 to peg 2. The largest disk can only be moved when all other disks are on the auxiliary peg (peg 1). This is correct.

For move 96: I moved disk 6 from peg 1 to peg 2. At this point, peg 0 has disks 5, 4, 3, 2, 1, peg 1 has disk 6, and peg 2 has disk 7. The move is correct.

Now, let me format the solution according to the requirements:

move_id,from_peg,to_peg,peg0,peg1,peg2
1,0,2,7 6 5 4 3 2,,1
2,0,1,7 6 5 4 3,2,1
3,2,1,7 6 5 4 3,2 1,
4,0,2,7 6 5 4,,3
5,1,0,7 6 5 4 1,2,3
6,1,2,7 6 5 4 1,,3 2
7,0,2,7 6 5 4,,3 2 1
8,0,1,7 6 5,4,3 2 1
9,2,1,7 6 5,4 1,3 2
10,2,0,7 6 5 2,4 1,3
11,1,0,7 6 5 2 1,4,3
12,2,1,7 6 5 2 1,4 3,
13,0,2,7 6 5 2,4 3,1
14,0,1,7 6 5,4 3 2,1
15,2,1,7 6 5,4 3 2 1,
16,0,2,7 6,,5
17,1,0,7 6 1,4 3 2,5
18,1,2,7 6 1,4 3,5 2
19,0,2,7 6,4 3,5 2 1
20,1,0,7 6 3,4,5 2 1
21,2,1,7 6 3,4 1,5 2
22,2,0,7 6 3 2,4 1,5
23,1,0,7 6 3 2 1,4,5
24,1,2,7 6 3 2 1,,5 4
25,0,2,7 6 3 2,,5 4 1
26,0,1,7 6 3,2,5 4 1
27,2,1,7 6 3,2 1,5 4
28,0,2,7 6,,5 4 3
29,1,0,7 6 1,2,5 4 3
30,1,2,7 6 1,,5 4 3 2
31,0,2,7 6,,5 4 3 2 1
32,0,1,7,6,5 4 3 2 1
33,2,1,7,6 1,5 4 3 2
34,2,0,7 2,6 1,5 4 3
35,1,0,7 2 1,6,5 4 3
36,2,1,7 2 1,6 3,5 4
37,0,2,7 2,6 3,5 4 1
38,0,1,7,6 3 2,5 4 1
39,2,1,7,6 3 2 1,5 4
40,2,0,7 4,6 3 2 1,5
41,1,0,7 4 1,6 3 2,5
42,1,2,7 4 1,6 3,5 2
43,0,2,7 4,6 3,5 2 1
44,1,0,7 4 3,6,5 2 1
45,2,1,7 4 3,6 1,5 2
46,2,0,7 4 3 2,6 1,5
47,1,0,7 4 3 2 1,6,5
48,2,1,7 4 3 2 1,6 5,
49,0,2,7 4 3 2,6 5,1
50,0,1,7 4 3,6 5 2,1
51,2,1,7 4 3,6 5 2 1,
52,0,2,7 4,,6 5 2 1
53,1,0,7 4 1,6 5 2,3
54,1,2,7 4 1,6 5,3 2
55,0,2,7 4,6 5,3 2 1
56,0,1,7,6 5 4,3 2 1
57,2,1,7,6 5 4 1,3 2
58,2,0,7 2,6 5 4 1,3
59,1,0,7 2 1,6 5 4,3
60,2,1,7 2 1,6 5 4 3,
61,0,2,7 2,6 5 4 3,1
62,0,1,7,6 5 4 3 2,1
63,2,1,7,6 5 4 3 2 1,
64,0,2,,6 5 4 3 2 1,7
65,1,0,1,6 5 4 3 2,7
66,1,2,1,6 5 4 3,7 2
67,0,2,,6 5 4 3,7 2 1
68,1,0,3,6 5 4,7 2 1
69,2,1,3,6 5 4 1,7 2
70,2,0,3 2,6 5 4 1,7
71,1,0,3 2 1,6 5 4,7
72,1,2,3 2 1,6 5,7 4
73,0,2,3 2,6 5,7 4 1
74,0,1,3,6 5 2,7 4 1
75,2,1,3,6 5 2 1,7 4
76,0,2,,6 5 2 1,7 4 3
77,1,0,1,6 5 2,7 4 3
78,1,2,1,6 5,7 4 3 2
79,0,2,,6 5,7 4 3 2 1
80,1,0,5,6,7 4 3 2 1
81,2,1,5,6 1,7 4 3 2
82,2,0,5 2,6 1,7 4 3
83,1,0,5 2 1,6,7 4 3
84,2,1,5 2 1,6 3,7 4
85,0,2,5 2,6 3,7 4 1
86,0,1,5,6 3 2,7 4 1
87,2,1,5,6 3 2 1,7 4
88,2,0,5 4,6 3 2 1,7
89,1,0,5 4 1,6 3 2,7
90,1,2,5 4 1,6 3,7 2
91,0,2,5 4,6 3,7 2 1
92,1,0,5 4 3,6,7 2 1
93,2,1,5 4 3,6 1,7 2
94,2,0,5 4 3 2,6 1,7
95,1,0,5 4 3 2 1,6,7
96,1,2,5 4 3 2 1,,7 6
97,0,2,5 4 3 2,,7 6 1
98,0,1,5 4 3,2,7 6 1
99,2,1,5 4 3,2 1,7 6
100,0,2,5 4,,7 6 3
101,1,0,5 4 1,2,7 6 3
102,1,2,5 4 1,,7 6 3 2
103,0,2,5 4,,7 6 3 2 1
104,0,1,5,4,7 6 3 2 1
105,2,1,5,4 1,7 6 3 2
106,2,0,5 2,4 1,7 6 3
107,1,0,5 2 1,4,7 6 3
108,2,1,5 2 1,4 3,7 6
109,0,2,5 2,4 3,7 6 1
110,0,1,5,4 3 2,7 6 1
111,2,1,5,4 3 2 1,7 6
112,0,2,,4 3 2 1,7 6 5
113,1,0,1,4 3 2,7 6 5
114,1,2,1,4 3,7 6 5 2
115,0,2,,4 3,7 6 5 2 1
116,1,0,3,4,7 6 5 2 1
117,2,1,3,4 1,7 6 5 2
118,2,0,3 2,4 1,7 6 5
119,1,0,3 2 1,4,7 6 5
120,1,2,3 2 1,,7 6 5 4
121,0,2,3 2,,7 6 5 4 1
122,0,1,3,2,7 6 5 4 1
123,2,1,3,2 1,7 6 5 4
124,0,2,,2 1,7 6 5 4 3
125,1,0,1,2,7 6 5 4 3
126,1,2,1,,7 6 5 4 3 2
127,0,2,,,7 6 5 4 3 2 1

Let me verify a few states to make sure they're correct:

After move 1, we have:
- Peg 0: 7 6 5 4 3 2
- Peg 1: empty
- Peg 2: 1

After move 31, we have:
- Peg 0: 7 6
- Peg 1: empty
- Peg 2: 5 4 3 2 1

After move 64, we have:
- Peg 0: empty
- Peg 1: 6 5 4 3 2 1
- Peg 2: 7

After move 96, we have:
- Peg 0: 5 4 3 2 1
- Peg 1: empty
- Peg 2: 7 6

After move 127, we have:
- Peg 0: empty
- Peg 1: empty
- Peg 2: 7 6 5 4 3 2 1

These all look correct. Let me check once more if I made any mistakes in listing the moves above.

Actually, I need to double check my solution format. I should have represented each peg as a space-separated list of disk numbers, from bottom to top. Let me fix that.

move_id,from_peg,to_peg,peg0,peg1,peg2
1,0,2,7 6 5 4 3 2,,1
2,0,1,7 6 5 4 3,2,1
3,2,1,7 6 5 4 3,2 1,
4,0,2,7 6 5 4,,3
5,1,0,7 6 5 4 1,2,3
6,1,2,7 6 5 4 1,,3 2
7,0,2,7 6 5 4,,3 2 1
8,0,1,7 6 5,4,3 2 1
9,2,1,7 6 5,4 1,3 2
10,2,0,7 6 5 2,4 1,3
11,1,0,7 6 5 2 1,4,3
12,2,1,7 6 5 2 1,4 3,
13,0,2,7 6 5 2,4 3,1
14,0,1,7 6 5,4 3 2,1
15,2,1,7 6 5,4 3 2 1,
16,0,2,7 6,,5
17,1,0,7 6 1,4 3 2,5
18,1,2,7 6 1,4 3,5 2
19,0,2,7 6,4 3,5 2 1
20,1,0,7 6 3,4,5 2 1
21,2,1,7 6 3,4 1,5 2
22,2,0,7 6 3 2,4 1,5
23,1,0,7 6 3 2 1,4,5
24,1,2,7 6 3 2 1,,5 4
25,0,2,7 6 3 2,,5 4 1
26,0,1,7 6 3,2,5 4 1
27,2,1,7 6 3,2 1,5 4
28,0,2,7 6,,5 4 3
29,1,0,7 6 1,2,5 4 3
30,1,2,7 6 1,,5 4 3 2
31,0,2,7 6,,5 4 3 2 1
32,0,1,7,6,5 4 3 2 1
33,2,1,7,6 1,5 4 3 2
34,2,0,7 2,6 1,5 4 3
35,1,0,7 2 1,6,5 4 3
36,2,1,7 2 1,6 3,5 4
37,0,2,7 2,6 3,5 4 1
38,0,1,7,6 3 2,5 4 1
39,2,1,7,6 3 2 1,5 4
40,2,0,7 4,6 3 2 1,5
41,1,0,7 4 1,6 3 2,5
42,1,2,7 4 1,6 3,5 2
43,0,2,7 4,6 3,5 2 1
44,1,0,7 4 3,6,5 2 1
45,2,1,7 4 3,6 1,5 2
46,2,0,7 4 3 2,6 1,5
47,1,0,7 4 3 2 1,6,5
48,2,1,7 4 3 2 1,6 5,
49,0,2,7 4 3 2,6 5,1
50,0,1,7 4 3,6 5 2,1
51,2,1,7 4 3,6 5 2 1,
52,0,2,7 4,,6 5 2 1
53,1,0,7 4 1,6 5 2,3
54,1,2,7 4 1,6 5,3 2
55,0,2,7 4,6 5,3 2 1
56,0,1,7,6 5 4,3 2 1
57,2,1,7,6 5 4 1,3 2
58,2,0,7 2,6 5 4 1,3
59,1,0,7 2 1,6 5 4,3
60,2,1,7 2 1,6 5 4 3,
61,0,2,7 2,6 5 4 3,1
62,0,1,7,6 5 4 3 2,1
63,2,1,7,6 5 4 3 2 1,
64,0,2,,6 5 4 3 2 1,7
65,1,0,1,6 5 4 3 2,7
66,1,2,1,6 5 4 3,7 2
67,0,2,,6 5 4 3,7 2 1
68,1,0,3,6 5 4,7 2 1
69,2,1,3,6 5 4 1,7 2
70,2,0,3 2,6 5 4 1,7
71,1,0,3 2 1,6 5 4,7
72,1,2,3 2 1,6 5,7 4
73,0,2,3 2,6 5,7 4 1
74,0,1,3,6 5 2,7 4 1
75,2,1,3,6 5 2 1,7 4
76,0,2,,6 5 2 1,7 4 3
77,1,0,1,6 5 2,7 4 3
78,1,2,1,6 5,7 4 3 2
79,0,2,,6 5,7 4 3 2 1
80,1,0,5,6,7 4 3 2 1
81,2,1,5,6 1,7 4 3 2
82,2,0,5 2,6 1,7 4 3
83,1,0,5 2 1,6,7 4 3
84,2,1,5 2 1,6 3,7 4
85,0,2,5 2,6 3,7 4 1
86,0,1,5,6 3 2,7 4 1
87,2,1,5,6 3 2 1,7 4
88,2,0,5 4,6 3 2 1,7
89,1,0,5 4 1,6 3 2,7
90,1,2,5 4 1,6 3,7 2
91,0,2,5 4,6 3,7 2 1
92,1,0,5 4 3,6,7 2 1
93,2,1,5 4 3,6 1,7 2
94,2,0,5 4 3 2,6 1,7
95,1,0,5 4 3 2 1,6,7
96,1,2,5 4 3 2 1,,7 6
97,0,2,5 4 3 2,,7 6 1
98,0,1,5 4 3,2,7 6 1
99,2,1,5 4 3,2 1,7 6
100,0,2,5 4,,7 6 3
101,1,0,5 4 1,2,7 6 3
102,1,2,5 4 1,,7 6 3 2
103,0,2,5 4,,7 6 3 2 1
104,0,1,5,4,7 6 3 2 1
105,2,1,5,4 1,7 6 3 2
106,2,0,5 2,4 1,7 6 3
107,1,0,5 2 1,4,7 6 3
108,2,1,5 2 1,4 3,7 6
109,0,2,5 2,4 3,7 6 1
110,0,1,5,4 3 2,7 6 1
111,2,1,5,4 3 2 1,7 6
112,0,2,,4 3 2 1,7 6 5
113,1,0,1,4 3 2,7 6 5
114,1,2,1,4 3,7 6 5 2
115,0,2,,4 3,7 6 5 2 1
116,1,0,3,4,7 6 5 2 1
117,2,1,3,4 1,7 6 5 2
118,2,0,3 2,4 1,7 6 5
119,1,0,3 2 1,4,7 6 5
120,1,2,3 2 1,,7 6 5 4
121,0,2,3 2,,7 6 5 4 1
122,0,1,3,2,7 6 5 4 1
123,2,1,3,2 1,7 6 5 4
124,0,2,,2 1,7 6 5 4 3
125,1,0,1,2,7 6 5 4 3
126,1,2,1,,7 6 5 4 3 2
127,0,2,,,7 6 5 4 3 2 1

This looks good, but I need to make sure the disks are listed from bottom to top, with the bottom disk first. So for example, after Move 1, peg 0 should show "7 6 5 4 3 2" because 7 is at the bottom and 2 is at the top.

Actually I believe my solution already follows this convention.

Let me double check the final few states:

After move 124, we have:
- Peg 0: empty
- Peg 1: 2 1 (2 at bottom, 1 at top)
- Peg 2: 7 6 5 4 3 (7 at bottom, 3 at top)

After move 125, we have:
- Peg 0: 1 (just disk 1)
- Peg 1: 2 (just disk 2)
- Peg 2: 7 6 5 4 3 (7 at bottom, 3 at top)

After move 126, we have:
- Peg 0: 1 (just disk 1)
- Peg 1: empty
- Peg 2: 7 6 5 4 3 2 (7 at bottom, 2 at top)

After move 127, we have:
- Peg 0: empty
- Peg 1: empty
- Peg 2: 7 6 5 4 3 2 1 (7 at bottom, 1 at top)

These look correct. The full solution is the list of 127 moves shown above.
</think>

# Tower of Hanoi Solution (7 disks)

```
move_id,from_peg,to_peg,peg0,peg1,peg2
1,0,2,7 6 5 4 3 2,,1
2,0,1,7 6 5 4 3,2,1
3,2,1,7 6 5 4 3,2 1,
4,0,2,7 6 5 4,,3
5,1,0,7 6 5 4 1,2,3
6,1,2,7 6 5 4 1,,3 2
7,0,2,7 6 5 4,,3 2 1
8,0,1,7 6 5,4,3 2 1
9,2,1,7 6 5,4 1,3 2
10,2,0,7 6 5 2,4 1,3
11,1,0,7 6 5 2 1,4,3
12,2,1,7 6 5 2 1,4 3,
13,0,2,7 6 5 2,4 3,1
14,0,1,7 6 5,4 3 2,1
15,2,1,7 6 5,4 3 2 1,
16,0,2,7 6,,5
17,1,0,7 6 1,4 3 2,5
18,1,2,7 6 1,4 3,5 2
19,0,2,7 6,4 3,5 2 1
20,1,0,7 6 3,4,5 2 1
21,2,1,7 6 3,4 1,5 2
22,2,0,7 6 3 2,4 1,5
23,1,0,7 6 3 2 1,4,5
24,1,2,7 6 3 2 1,,5 4
25,0,2,7 6 3 2,,5 4 1
26,0,1,7 6 3,2,5 4 1
27,2,1,7 6 3,2 1,5 4
28,0,2,7 6,,5 4 3
29,1,0,7 6 1,2,5 4 3
30,1,2,7 6 1,,5 4 3 2
31,0,2,7 6,,5 4 3 2 1
32,0,1,7,6,5 4 3 2 1
33,2,1,7,6 1,5 4 3 2
34,2,0,7 2,6 1,5 4 3
35,1,0,7 2 1,6,5 4 3
36,2,1,7 2 1,6 3,5 4
37,0,2,7 2,6 3,5 4 1
38,0,1,7,6 3 2,5 4 1
39,2,1,7,6 3 2 1,5 4
40,2,0,7 4,6 3 2 1,5
41,1,0,7 4 1,6 3 2,5
42,1,2,7 4 1,6 3,5 2
43,0,2,7 4,6 3,5 2 1
44,1,0,7 4 3,6,5 2 1
45,2,1,7 4 3,6 1,5 2
46,2,0,7 4 3 2,6 1,5
47,1,0,7 4 3 2 1,6,5
48,2,1,7 4 3 2 1,6 5,
49,0,2,7 4 3 2,6 5,1
50,0,1,7 4 3,6 5 2,1
51,2,1,7 4 3,6 5 2 1,
52,0,2,7 4,,6 5 2 1
53,1,0,7 4 1,6 5 2,3
54,1,2,7 4 1,6 5,3 2
55,0,2,7 4,6 5,3 2 1
56,0,1,7,6 5 4,3 2 1
57,2,1,7,6 5 4 1,3 2
58,2,0,7 2,6 5 4 1,3
59,1,0,7 2 1,6 5 4,3
60,2,1,7 2 1,6 5 4 3,
61,0,2,7 2,6 5 4 3,1
62,0,1,7,6 5 4 3 2,1
63,2,1,7,6 5 4 3 2 1,
64,0,2,,6 5 4 3 2 1,7
65,1,0,1,6 5 4 3 2,7
66,1,2,1,6 5 4 3,7 2
67,0,2,,6 5 4 3,7 2 1
68,1,0,3,6 5 4,7 2 1
69,2,1,3,6 5 4 1,7 2
70,2,0,3 2,6 5 4 1,7
71,1,0,3 2 1,6 5 4,7
72,1,2,3 2 1,6 5,7 4
73,0,2,3 2,6 5,7 4 1
74,0,1,3,6 5 2,7 4 1
75,2,1,3,6 5 2 1,7 4
76,0,2,,6 5 2 1,7 4 3
77,1,0,1,6 5 2,7 4 3
78,1,2,1,6 5,7 4 3 2
79,0,2,,6 5,7 4 3 2 1
80,1,0,5,6,7 4 3 2 1
81,2,1,5,6 1,7 4 3 2
82,2,0,5 2,6 1,7 4 3
83,1,0,5 2 1,6,7 4 3
84,2,1,5 2 1,6 3,7 4
85,0,2,5 2,6 3,7 4 1
86,0,1,5,6 3 2,7 4 1
87,2,1,5,6 3 2 1,7 4
88,2,0,5 4,6 3 2 1,7
89,1,0,5 4 1,6 3 2,7
90,1,2,5 4 1,6 3,7 2
91,0,2,5 4,6 3,7 2 1
92,1,0,5 4 3,6,7 2 1
93,2,1,5 4 3,6 1,7 2
94,2,0,5 4 3 2,6 1,7
95,1,0,5 4 3 2 1,6,7
96,1,2,5 4 3 2 1,,7 6
97,0,2,5 4 3 2,,7 6 1
98,0,1,5 4 3,2,7 6 1
99,2,1,5 4 3,2 1,7 6
100,0,2,5 4,,7 6 3
101,1,0,5 4 1,2,7 6 3
102,1,2,5 4 1,,7 6 3 2
103,0,2,5 4,,7 6 3 2 1
104,0,1,5,4,7 6 3 2 1
105,2,1,5,4 1,7 6 3 2
106,2,0,5 2,4 1,7 6 3
107,1,0,5 2 1,4,7 6 3
108,2,1,5 2 1,4 3,7 6
109,0,2,5 2,4 3,7 6 1
110,0,1,5,4 3 2,7 6 1
111,2,1,5,4 3 2 1,7 6
112,0,2,,4 3 2 1,7 6 5
113,1,0,1,4 3 2,7 6 5
114,1,2,1,4 3,7 6 5 2
115,0,2,,4 3,7 6 5 2 1
116,1,0,3,4,7 6 5 2 1
117,2,1,3,4 1,7 6 5 2
118,2,0,3 2,4 1,7 6 5
119,1,0,3 2 1,4,7 6 5
120,1,2,3 2 1,,7 6 5 4
121,0,2,3 2,,7 6 5 4 1
122,0,1,3,2,7 6 5 4 1
123,2,1,3,2 1,7 6 5 4
124,0,2,,2 1,7 6 5 4 3
125,1,0,1,2,7 6 5 4 3
126,1,2,1,,7 6 5 4 3 2
127,0,2,,,7 6 5 4 3 2 1
```

