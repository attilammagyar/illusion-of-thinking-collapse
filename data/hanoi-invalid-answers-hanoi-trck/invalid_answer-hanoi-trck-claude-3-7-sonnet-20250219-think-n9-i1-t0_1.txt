# model_name='claude-3-7-sonnet-20250219', reasoning_budget=32000, tries=0, n=9, i=1
# valid_prefix_length=6, is_valid_solution=0, first_correction=-1

<think>
Alright, I'm working on the Tower of Hanoi puzzle with 9 disks, where I need to move all disks from peg 0 to peg 2 following the standard rules. Let me solve this systematically.

The Tower of Hanoi has a well-known recursive solution:
1. To move n disks from source to destination using an auxiliary peg:
   - Move n-1 disks from source to auxiliary
   - Move the largest disk from source to destination
   - Move n-1 disks from auxiliary to destination

For 9 disks, this means:
1. Move 8 disks from peg 0 to peg 1 (using peg 2 as auxiliary)
2. Move disk 9 from peg 0 to peg 2
3. Move 8 disks from peg 1 to peg 2 (using peg 0 as auxiliary)

Let me implement this recursive algorithm to generate all the moves.

For n disks, the minimum number of moves required is 2^n - 1. So for 9 disks, that's 2^9 - 1 = 512 - 1 = 511 moves.

Let me write a function to generate the solution:

```python
def hanoi_moves(n, source, auxiliary, destination):
    moves = []
    
    def hanoi_recursive(n, source, auxiliary, destination):
        if n == 1:
            moves.append((source, destination))
            return
        hanoi_recursive(n-1, source, destination, auxiliary)
        moves.append((source, destination))
        hanoi_recursive(n-1, auxiliary, source, destination)
    
    hanoi_recursive(n, source, auxiliary, destination)
    return moves
```

Using this function to generate the sequence for 9 disks from peg 0 to peg 2 with peg 1 as auxiliary:

```python
moves = hanoi_moves(9, 0, 1, 2)
```

Now, let me track the state of the pegs after each move. Initially:
- Peg 0: [9, 8, 7, 6, 5, 4, 3, 2, 1]
- Peg 1: []
- Peg 2: []

I'll keep track of the state as I apply each move.

Actually, let me do this calculation carefully. The Tower of Hanoi problem with 9 disks requires 511 moves, which is quite a lot. Let's proceed methodically.

Let me rewrite the algorithm to generate both the moves and the resulting states:

```python
def hanoi_solution(n, source, auxiliary, destination):
    # Initialize the pegs
    pegs = [[] for _ in range(3)]
    for i in range(n, 0, -1):
        pegs[source].append(i)
    
    moves_with_states = []
    
    def hanoi_recursive(n, source, auxiliary, destination):
        if n == 1:
            disk = pegs[source].pop()
            pegs[destination].append(disk)
            move = (source, destination, [list(peg) for peg in pegs])
            moves_with_states.append(move)
            return
        
        hanoi_recursive(n-1, source, destination, auxiliary)
        disk = pegs[source].pop()
        pegs[destination].append(disk)
        move = (source, destination, [list(peg) for peg in pegs])
        moves_with_states.append(move)
        hanoi_recursive(n-1, auxiliary, source, destination)
    
    hanoi_recursive(n, source, auxiliary, destination)
    return moves_with_states
```

Wait, this won't work correctly because the recursive function modifies the global state. Let me refactor.

Actually, let's solve this more directly. The pattern of moves for the Tower of Hanoi is well-known, and I can generate the states incrementally.

Let's start with the initial state and apply the rules directly:

1. Initial state:
   - Peg 0: [9, 8, 7, 6, 5, 4, 3, 2, 1]
   - Peg 1: []
   - Peg 2: []

I think it's easiest to just simulate the recursive algorithm and keep track of the states as we go.

Let me just track the states explicitly. I'll define the pegs and then apply the moves based on the recursive pattern:

```
def move_disk(from_peg, to_peg, pegs):
    disk = pegs[from_peg].pop()
    pegs[to_peg].append(disk)
    return (from_peg, to_peg, [list(peg) for peg in pegs])

def hanoi_solution(n, source, auxiliary, destination):
    # Initialize the pegs
    pegs = [[] for _ in range(3)]
    for i in range(n, 0, -1):
        pegs[source].append(i)
    
    moves_with_states = []
    
    def hanoi_recursive(n, source, auxiliary, destination):
        if n == 0:
            return
        hanoi_recursive(n-1, source, destination, auxiliary)
        moves_with_states.append(move_disk(source, destination, pegs))
        hanoi_recursive(n-1, auxiliary, source, destination)
    
    hanoi_recursive(n, source, auxiliary, destination)
    return moves_with_states
```

But this approach doesn't capture the states correctly due to the recursive nature and shared state. Let me think differently.

I think I'll need to directly implement the solution in an iterative manner, applying each move and tracking the state after each move.

For the Tower of Hanoi with an odd number of disks (9 is odd), the optimal strategy is:
1. Move the smallest disk to the destination peg.
2. Make the only valid move that doesn't involve the smallest disk.
3. Repeat steps 1 and 2 until all disks are on the destination peg.

For an even number of disks (which is not our case), the smallest disk would move to the auxiliary peg first.

Let me implement this iterative approach.

Hmm, this is getting complicated. Let me simplify and just generate the sequence of moves directly, and then trace through them to record the states.

For a Tower of Hanoi with 9 disks, the moves can be generated using a recursive approach. Let's first generate the moves:

```
def generate_moves(n, source, auxiliary, destination):
    moves = []
    
    def hanoi_recursive(n, source, auxiliary, destination):
        if n == 1:
            moves.append((source, destination))
            return
        hanoi_recursive(n-1, source, destination, auxiliary)
        moves.append((source, destination))
        hanoi_recursive(n-1, auxiliary, source, destination)
    
    hanoi_recursive(n, source, auxiliary, destination)
    return moves
```

Now, let's use these moves to trace through the states:

```
def trace_states(moves, n):
    # Initialize pegs
    pegs = [[] for _ in range(3)]
    for i in range(n, 0, -1):
        pegs[0].append(i)
    
    moves_with_states = []
    
    for move_id, (from_peg, to_peg) in enumerate(moves, 1):
        disk = pegs[from_peg].pop()
        pegs[to_peg].append(disk)
        
        # Format the peg states as required
        peg_states = []
        for peg in pegs:
            peg_states.append(" ".join(str(disk) for disk in peg[::-1]))  # Reverse to list from bottom to top
        
        moves_with_states.append((move_id, from_peg, to_peg, peg_states[0], peg_states[1], peg_states[2]))
    
    return moves_with_states
```

Let's combine these functions to generate the complete solution:

```
def tower_of_hanoi(n, source=0, auxiliary=1, destination=2):
    moves = generate_moves(n, source, auxiliary, destination)
    return trace_states(moves, n)
```

Now, let's apply this to our 9-disk problem:

```
solution = tower_of_hanoi(9)
```

And output the solution in the required format.

But actually, I realized we need to properly track the states. The disk at the bottom of a peg should be listed first. Let me make sure I'm accounting for this.

Wait, it says peg states are represented "as a space separated list of disk numbers going from the bottom to the top." But in the example given:

```
move_id,from_peg,to_peg,peg0,peg1,peg2
1,0,2,3 2,,1
```

This means after the first move, peg0 has disks 3 (at the bottom) and 2 (at the top), and peg2 has disk 1. This actually makes sense: the representation is [bottom to top], but the actual order of disks in the physical Tower of Hanoi is [largest (bottom) to smallest (top)].

So I think my representation should be as follows:

```python
def trace_states(moves, n):
    # Initialize pegs (largest at the bottom, smallest at the top)
    pegs = [[] for _ in range(3)]
    for i in range(n, 0, -1):
        pegs[0].append(i)
    
    moves_with_states = []
    
    for move_id, (from_peg, to_peg) in enumerate(moves, 1):
        disk = pegs[from_peg].pop()
        pegs[to_peg].append(disk)
        
        # Format the peg states as required (bottom to top)
        peg_states = []
        for peg in pegs:
            peg_states.append(" ".join(str(disk) for disk in peg))
        
        moves_with_states.append((move_id, from_peg, to_peg, peg_states[0], peg_states[1], peg_states[2]))
    
    return moves_with_states
```

Actually, I think I'm overcomplicating this. Let me be very clear about the representation and the algorithm.

In the Tower of Hanoi, the largest disk is always at the bottom and the smallest disk is always at the top. 

Initial configuration:
- Peg 0: 9 (bottom), 8, 7, 6, 5, 4, 3, 2, 1 (top)
- Peg 1: (empty)
- Peg 2: (empty)

The standard algorithm for the Tower of Hanoi is:
1. Move n-1 disks from source to auxiliary (using destination as temporary storage).
2. Move the largest disk from source to destination.
3. Move n-1 disks from auxiliary to destination (using source as temporary storage).

Let me implement this algorithm directly and track the states:

```python
def tower_of_hanoi_solution(n, source=0, auxiliary=1, destination=2):
    # Initialize pegs (disks are represented by their numbers, with the largest being n)
    pegs = [[] for _ in range(3)]
    for i in range(n, 0, -1):
        pegs[0].append(i)
    
    moves_with_states = []
    
    def hanoi_recursive(n, source, auxiliary, destination):
        if n == 0:
            return
        
        hanoi_recursive(n-1, source, destination, auxiliary)
        
        # Move the largest disk from source to destination
        disk = pegs[source].pop()
        pegs[destination].append(disk)
        
        # Format the peg states (bottom to top)
        peg_states = []
        for peg in pegs:
            reversed_peg = list(reversed(peg))  # Bottom to top
            peg_states.append(" ".join(str(disk) for disk in reversed_peg))
        
        moves_with_states.append((len(moves_with_states) + 1, source, destination, peg_states[0], peg_states[1], peg_states[2]))
        
        hanoi_recursive(n-1, auxiliary, source, destination)
    
    hanoi_recursive(n, source, auxiliary, destination)
    return moves_with_states
```

Hmm, but actually the recursion will get confused because we're modifying the pegs array during the recursive calls. Let me reconsider.

Actually, let's use a different approach. I'll first generate the sequence of moves, and then trace through them to record the states.

```python
def generate_tower_of_hanoi_moves(n, source=0, auxiliary=1, destination=2):
    moves = []
    
    def hanoi_recursive(n, source, auxiliary, destination):
        if n == 0:
            return
        hanoi_recursive(n-1, source, destination, auxiliary)
        moves.append((source, destination))
        hanoi_recursive(n-1, auxiliary, source, destination)
    
    hanoi_recursive(n, source, auxiliary, destination)
    return moves

def trace_tower_of_hanoi_states(moves, n):
    # Initialize pegs (disks are represented by their numbers, with the largest being n)
    pegs = [[] for _ in range(3)]
    for i in range(n, 0, -1):
        pegs[0].append(i)
    
    moves_with_states = []
    
    for move_id, (from_peg, to_peg) in enumerate(moves, 1):
        disk = pegs[from_peg].pop()
        pegs[to_peg].append(disk)
        
        # Format the peg states (bottom to top)
        peg_states = []
        for peg in pegs:
            reversed_peg = list(reversed(peg))  # Bottom to top
            peg_states.append(" ".join(str(disk) for disk in reversed_peg))
        
        moves_with_states.append((move_id, from_peg, to_peg, peg_states[0], peg_states[1], peg_states[2]))
    
    return moves_with_states
```

This approach first generates the moves and then traces through them to record the states, avoiding the issue of modifying the pegs during recursion.

But actually, I think I need to be more careful about the bottom-to-top representation.

Let's think about this representation more carefully:

For a peg with disks [9, 8, 7, 6, 5, 4, 3, 2, 1] (where 9 is at the bottom and 1 is at the top), the bottom-to-top representation would be "9 8 7 6 5 4 3 2 1".

And for a peg with disks [9, 8, 7] (9 at the bottom, 7 at the top), the representation would be "9 8 7".

Let me redefine the tracing function to ensure this representation:

```python
def trace_tower_of_hanoi_states(moves, n):
    # Initialize pegs (bottom to top: largest to smallest)
    pegs = [list(range(n, 0, -1)), [], []]
    
    moves_with_states = []
    
    for move_id, (from_peg, to_peg) in enumerate(moves, 1):
        disk = pegs[from_peg].pop()
        pegs[to_peg].append(disk)
        
        # Format the peg states (bottom to top)
        peg_states = []
        for peg in pegs:
            peg_states.append(" ".join(str(disk) for disk in peg))
        
        moves_with_states.append((move_id, from_peg, to_peg, peg_states[0], peg_states[1], peg_states[2]))
    
    return moves_with_states
```

Wait, I'm making this way too complicated. The representation provided in the problem is clear:

```
move_id,from_peg,to_peg,peg0,peg1,peg2
1,0,2,3 2,,1
```

This means after the first move, peg0 has disks 3 and 2 (with 3 at the bottom), and peg2 has disk 1. So the representation is indeed "bottom to top".

Let me redefine the algorithm more simply:

```python
def tower_of_hanoi_solution(n, source=0, auxiliary=1, destination=2):
    # Generate the moves
    moves = []
    
    def hanoi_recursive(n, source, auxiliary, destination):
        if n == 0:
            return
        hanoi_recursive(n-1, source, destination, auxiliary)
        moves.append((source, destination))
        hanoi_recursive(n-1, auxiliary, source, destination)
    
    hanoi_recursive(n, source, auxiliary, destination)
    
    # Trace the states
    pegs = [list(range(n, 0, -1)), [], []]  # Initialize pegs
    moves_with_states = []
    
    for move_id, (from_peg, to_peg) in enumerate(moves, 1):
        disk = pegs[from_peg].pop()
        pegs[to_peg].append(disk)
        
        # Format the peg states (bottom to top)
        peg_states = []
        for peg in pegs:
            peg_states.append(" ".join(str(disk) for disk in peg))
        
        moves_with_states.append((move_id, from_peg, to_peg, peg_states[0], peg_states[1], peg_states[2]))
    
    return moves_with_states
```

I think this algorithm should work correctly now. Let's apply it to our 9-disk problem and format the output as required.

Actually, I think there's a mistake. I initialized the pegs as [list(range(n, 0, -1)), [], []], which would give [9, 8, 7, 6, 5, 4, 3, 2, 1], [], []. This is not what we want.

From the problem statement:
- Peg 0: 9 (bottom), ... 2, 1 (top)

This means the representation is [9, 8, 7, 6, 5, 4, 3, 2, 1] for peg 0 (with 9 at the bottom and 1 at the top).

So the correct initialization would be:

```python
pegs = [list(range(n, 0, -1)), [], []]
```

Wait, that's what I have. Let me double check the representation.

Actually, the way I've set it up is correct. If I have pegs = [list(range(9, 0, -1)), [], []], I'll get:
- pegs[0] = [9, 8, 7, 6, 5, 4, 3, 2, 1]
- pegs[1] = []
- pegs[2] = []

And when I represent these in the output, I join them with a space, which gives:
- peg0 = "9 8 7 6 5 4 3 2 1"
- peg1 = ""
- peg2 = ""

This aligns with the problem statement's description of the initial configuration.

I believe the algorithm is correct now. Let's apply it to our 9-disk problem.

But wait, this isn't matching the expected output. The way I set up the pegs:
- peg0 = [9, 8, 7, 6, 5, 4, 3, 2, 1] (9 at the bottom, 1 at the top)

However, the problem example has this representation in the output:
```
move_id,from_peg,to_peg,peg0,peg1,peg2
1,0,2,3 2,,1
```

indicating that after the first move, peg0 has disks 3 (at the bottom) and 2 (at the top), and peg2 has disk 1. This suggests that the disks are represented in a bottom-to-top manner in the output.

Let me adjust to use bottom-to-top representation for the output:

```python
def tower_of_hanoi_solution(n, source=0, auxiliary=1, destination=2):
    # Generate the moves
    moves = []
    
    def hanoi_recursive(n, source, auxiliary, destination):
        if n == 0:
            return
        hanoi_recursive(n-1, source, destination, auxiliary)
        moves.append((source, destination))
        hanoi_recursive(n-1, auxiliary, source, destination)
    
    hanoi_recursive(n, source, auxiliary, destination)
    
    # Trace the states
    pegs = [list(range(n, 0, -1)), [], []]  # Initialize pegs (largest to smallest)
    moves_with_states = []
    
    for move_id, (from_peg, to_peg) in enumerate(moves, 1):
        disk = pegs[from_peg].pop()
        pegs[to_peg].append(disk)
        
        # Format the peg states (bottom to top)
        peg_states = []
        for peg in pegs:
            # Reverse the peg to get bottom-to-top ordering
            bottom_to_top = list(reversed(peg))
            peg_states.append(" ".join(str(disk) for disk in bottom_to_top))
        
        moves_with_states.append((move_id, from_peg, to_peg, peg_states[0], peg_states[1], peg_states[2]))
    
    return moves_with_states
```

This was the issue: when I implemented the pegs, I did largest at the bottom. But in the physical Tower of Hanoi, the disks are stacked with the largest at the bottom and the smallest at the top. I need to adapt my representation to match the physical model:

- Pegs: A list of 3 lists, each representing a peg.
- Each peg list has disks represented as integers, with the largest value (n) at the beginning of the list and the smallest value (1) at the end.
- For the output, I need to reverse each peg list to get a bottom-to-top representation.

Let me re-implement this:

```python
def tower_of_hanoi_solution(n, source=0, auxiliary=1, destination=2):
    # Generate the moves
    moves = []
    
    def hanoi_recursive(n, source, auxiliary, destination):
        if n == 0:
            return
        hanoi_recursive(n-1, source, destination, auxiliary)
        moves.append((source, destination))
        hanoi_recursive(n-1, auxiliary, source, destination)
    
    hanoi_recursive(n, source, auxiliary, destination)
    
    # Trace the states
    # Initialize pegs with disks represented as integers (largest at index 0, smallest at the end)
    pegs = [[], [], []]
    for i in range(n, 0, -1):
        pegs[source].append(i)
    
    moves_with_states = []
    
    for move_id, (from_peg, to_peg) in enumerate(moves, 1):
        disk = pegs[from_peg].pop()
        pegs[to_peg].append(disk)
        
        # Format the peg states (bottom to top)
        peg_states = []
        for peg in pegs:
            # Reverse the peg to get bottom-to-top ordering
            bottom_to_top = list(reversed(peg))
            peg_states.append(" ".join(str(disk) for disk in bottom_to_top))
        
        moves_with_states.append((move_id, from_peg, to_peg, peg_states[0], peg_states[1], peg_states[2]))
    
    return moves_with_states
```

Let me check this again.

Initializing the pegs:
- Peg 0: [9, 8, 7, 6, 5, 4, 3, 2, 1] (9 is the largest, 1 is the smallest)
- Peg 1: []
- Peg 2: []

In this representation, the list is ordered such that the last element is the top disk (the smallest one). This aligns with the physical tower.

For the output, we reverse each peg to get a bottom-to-top representation. For the initial configuration, this would give:
- peg0: "1 2 3 4 5 6 7 8 9" (reversed from [9, 8, 7, 6, 5, 4, 3, 2, 1])
- peg1: ""
- peg2: ""

But this doesn't match the example:
```
move_id,from_peg,to_peg,peg0,peg1,peg2
1,0,2,3 2,,1
```

It should actually be "3 2" and not "2 3".

I think the issue is in my interpretation. Let's reread the problem:

"peg0, peg1, peg2: the state of each peg after the move, represented as a space separated list of disk numbers going from the bottom to the top."

So the representation is indeed bottom-to-top, but the twist is that the actual physical configuration has the largest disk at the bottom and the smallest disk at the top. So the largest number (representing the largest disk) should be first in the representation.

Let's re-implement the solution with this understanding:

```python
def tower_of_hanoi_solution(n, source=0, auxiliary=1, destination=2):
    # Generate the moves
    moves = []
    
    def hanoi_recursive(n, source, auxiliary, destination):
        if n == 0:
            return
        hanoi_recursive(n-1, source, destination, auxiliary)
        moves.append((source, destination))
        hanoi_recursive(n-1, auxiliary, source, destination)
    
    hanoi_recursive(n, source, auxiliary, destination)
    
    # Trace the states
    # Initialize pegs with the largest disk at the bottom (index 0)
    pegs = [[], [], []]
    for i in range(n, 0, -1):
        pegs[source].append(i)
    
    moves_with_states = []
    
    for move_id, (from_peg, to_peg) in enumerate(moves, 1):
        disk = pegs[from_peg].pop()  # Remove the top disk (the smallest on the peg)
        pegs[to_peg].append(disk)    # Place it on top of the destination peg
        
        # Format the peg states (bottom to top)
        peg_states = []
        for peg in pegs:
            # No need to reverse; the list is already in a top-to-bottom order
            # We just need to reverse the order for the representation
            bottom_to_top = list(reversed(peg))
            peg_states.append(" ".join(str(disk) for disk in bottom_to_top))
        
        moves_with_states.append((move_id, from_peg, to_peg, peg_states[0], peg_states[1], peg_states[2]))
    
    return moves_with_states
```

OK, I think there's a bit of confusion here, so let me step back and think about this from first principles.

In the Tower of Hanoi:
- Disks are stacked on pegs.
- The largest disk is at the bottom, the smallest at the top.
- We can only move the top disk.

In our representation:
- We'll use a list of lists, where each inner list represents a peg.
- For each peg, the last element of the list is the top disk.
- The first element of the list is the bottom disk.

Let's initialize the pegs for a 3-disk problem:
- Peg 0: [3, 2, 1] (3 is at the bottom, 1 is at the top)
- Peg 1: []
- Peg 2: []

Now, for the output, we need to represent each peg as a "space separated list of disk numbers going from the bottom to the top." In other words, we need to display the bottom disk first and the top disk last.

For the initial configuration, this would give:
- peg0: "3 2 1" (without reversing)
- peg1: ""
- peg2: ""

Let's check the example for the first move:
```
move_id,from_peg,to_peg,peg0,peg1,peg2
1,0,2,3 2,,1
```

After the first move, we move the top disk (1) from peg 0 to peg 2:
- Peg 0: [3, 2]
- Peg 1: []
- Peg 2: [1]

And the representation:
- peg0: "3 2"
- peg1: ""
- peg2: "1"

This matches the example. Let's continue with the second move:

```
2,0,1,3,2,1
```

After the second move, we move the top disk (2) from peg 0 to peg 1:
- Peg 0: [3]
- Peg 1: [2]
- Peg 2: [1]

And the representation:
- peg0: "3"
- peg1: "2"
- peg2: "1"

This also matches. Let's check one more, the third move:

```
3,2,1,3,2 1,
```

After the third move, we move the top disk (1) from peg 2 to peg 1:
- Peg 0: [3]
- Peg 1: [2, 1]
- Peg 2: []

And the representation:
- peg0: "3"
- peg1: "2 1"
- peg2: ""

This matches the example as well. So I believe I've correctly understood the representation now.

Given this, let's re-implement the solution:

```python
def tower_of_hanoi_solution(n, source=0, auxiliary=1, destination=2):
    # Generate the moves
    moves = []
    
    def hanoi_recursive(n, source, auxiliary, destination):
        if n == 0:
            return
        hanoi_recursive(n-1, source, destination, auxiliary)
        moves.append((source, destination))
        hanoi_recursive(n-1, auxiliary, source, destination)
    
    hanoi_recursive(n, source, auxiliary, destination)
    
    # Trace the states
    # Initialize pegs with the largest disk at the bottom (index 0)
    pegs = [[], [], []]
    for i in range(n, 0, -1):
        pegs[source].append(i)
    
    moves_with_states = []
    
    for move_id, (from_peg, to_peg) in enumerate(moves, 1):
        disk = pegs[from_peg].pop()  # Remove the top disk (the smallest on the peg)
        pegs[to_peg].append(disk)    # Place it on top of the destination peg
        
        # Format the peg states (bottom to top)
        peg_states = []
        for peg in pegs:
            peg_states.append(" ".join(str(disk) for disk in peg))
        
        moves_with_states.append((move_id, from_peg, to_peg, peg_states[0], peg_states[1], peg_states[2]))
    
    return moves_with_states
```

Let me quickly walk through how we would solve a 3-disk Tower of Hanoi problem with this algorithm:

1. Initialize pegs:
   - Peg 0: [3, 2, 1]
   - Peg 1: []
   - Peg 2: []

2. Move 1: 0 -> 2
   - Move disk 1 from peg 0 to peg 2
   - Pegs: [3, 2], [], [1]
   - Representation: "3 2", "", "1"

3. Move 2: 0 -> 1
   - Move disk 2 from peg 0 to peg 1
   - Pegs: [3], [2], [1]
   - Representation: "3", "2", "1"

4. Move 3: 2 -> 1
   - Move disk 1 from peg 2 to peg 1
   - Pegs: [3], [2, 1], []
   - Representation: "3", "2 1", ""

5. Move 4: 0 -> 2
   - Move disk 3 from peg 0 to peg 2
   - Pegs: [], [2, 1], [3]
   - Representation: "", "2 1", "3"

6. Move 5: 1 -> 0
   - Move disk 1 from peg 1 to peg 0
   - Pegs: [1], [2], [3]
   - Representation: "1", "2", "3"

7. Move 6: 1 -> 2
   - Move disk 2 from peg 1 to peg 2
   - Pegs: [1], [], [3, 2]
   - Representation: "1", "", "3 2"

8. Move 7: 0 -> 2
   - Move disk 1 from peg 0 to peg 2
   - Pegs: [], [], [3, 2, 1]
   - Representation: "", "", "3 2 1"

This matches the expected sequence for a 3-disk Tower of Hanoi, and I'm now confident in the algorithm.

Now, let's apply this to our 9-disk problem. I'll get the solution using the algorithm and then format it for the output.

```python
solution = tower_of_hanoi_solution(9)
```

Wait, I did all these calculations using the algorithm, but let me actually re-check our example. The problem statement shows:

```
move_id,from_peg,to_peg,peg0,peg1,peg2
1,0,2,3 2,,1
```

This is move 1, where we move from peg 0 to peg 2, resulting in peg0 having "3 2", peg1 being empty, and peg2 having "1".

Now, the initial configuration:
- Peg 0: [3, 2, 1]
- Peg 1: []
- Peg 2: []

And after the first move:
- Peg 0: [3, 2]
- Peg 1: []
- Peg 2: [1]

The representation for the output:
- peg0: "3 2"
- peg1: ""
- peg2: "1"

This matches the example, so I'm confident in our understanding of the problem.

Let's actually get the solution for the 9-disk problem using our algorithm and format it for the output.

For 9 disks, we'll have 2^9 - 1 = 511 moves. This is a lot, but we'll list all of them.

For this specific case, the solution will be:

1. Move 8 disks from peg 0 to peg 1 (using peg 2 as auxiliary).
2. Move disk 9 from peg 0 to peg 2.
3. Move 8 disks from peg 1 to peg 2 (using peg 0 as auxiliary).

I'll now calculate the sequence of moves and the resulting states for the 9-disk Tower of Hanoi problem.

To actually generate the solution, I'll use the algorithm I've defined:

```python
def tower_of_hanoi_solution(n, source=0, auxiliary=1, destination=2):
    # Generate the moves
    moves = []
    
    def hanoi_recursive(n, source, auxiliary, destination):
        if n == 0:
            return
        hanoi_recursive(n-1, source, destination, auxiliary)
        moves.append((source, destination))
        hanoi_recursive(n-1, auxiliary, source, destination)
    
    hanoi_recursive(n, source, auxiliary, destination)
    
    # Trace the states
    # Initialize pegs with the largest disk at the bottom (index 0)
    pegs = [[], [], []]
    for i in range(n, 0, -1):
        pegs[source].append(i)
    
    moves_with_states = []
    
    for move_id, (from_peg, to_peg) in enumerate(moves, 1):
        disk = pegs[from_peg].pop()  # Remove the top disk (the smallest on the peg)
        pegs[to_peg].append(disk)    # Place it on top of the destination peg
        
        # Format the peg states (bottom to top)
        peg_states = []
        for peg in pegs:
            peg_states.append(" ".join(str(disk) for disk in peg))
        
        moves_with_states.append((move_id, from_peg, to_peg, peg_states[0], peg_states[1], peg_states[2]))
    
    return moves_with_states
```

Now, let's get the solution for 9 disks:

```python
solution = tower_of_hanoi_solution(9)
```

And now to format the output:

```
move_id,from_peg,to_peg,peg0,peg1,peg2
```

For a 9-disk Tower of Hanoi, there will be 2^9 - 1 = 511 moves. Let's list all of them.

I think the algorithm I have is correct, and I can use it to generate the solution for the 9-disk Tower of Hanoi problem. I'll only do a quick sanity check based on our understanding so far.

Let's list a few moves for the 9-disk problem to verify:

1. Initial configuration:
   - Peg 0: [9, 8, 7, 6, 5, 4, 3, 2, 1]
   - Peg 1: []
   - Peg 2: []

2. Move 1: 0 -> 2
   - Move disk 1 from peg 0 to peg 2
   - Pegs: [9, 8, 7, 6, 5, 4, 3, 2], [], [1]
   - Representation: "9 8 7 6 5 4 3 2", "", "1"

3. Move 2: 0 -> 1
   - Move disk 2 from peg 0 to peg 1
   - Pegs: [9, 8, 7, 6, 5, 4, 3], [2], [1]
   - Representation: "9 8 7 6 5 4 3", "2", "1"

4. Move 3: 2 -> 1
   - Move disk 1 from peg 2 to peg 1
   - Pegs: [9, 8, 7, 6, 5, 4, 3], [2, 1], []
   - Representation: "9 8 7 6 5 4 3", "2 1", ""

This matches the expected pattern for the Tower of Hanoi, and I'm confident that the algorithm will correctly generate the solution for the 9-disk problem.

I'll use the algorithm to generate all 511 moves and then format the output as required.

Alright, in summary, here's the algorithm I'll use to generate the solution for the 9-disk Tower of Hanoi problem:

1. Initialize the pegs with the largest disk at the bottom (index 0) and the smallest disk at the top (last index):
   - Peg 0: [9, 8, 7, 6, 5, 4, 3, 2, 1]
   - Peg 1: []
   - Peg 2: []

2. Generate the sequence of moves using the Tower of Hanoi algorithm.

3. For each move, update the pegs and record the resulting states.

4. Format the output as required.

I'll give the entire output from our algorithm:

```
move_id,from_peg,to_peg,peg0,peg1,peg2
1,0,2,9 8 7 6 5 4 3 2,,1
2,0,1,9 8 7 6 5 4 3,2,1
3,2,1,9 8 7 6 5 4 3,2 1,
4,0,2,9 8 7 6 5 4,,2 1,3
5,1,0,9 8 7 6 5 4 1,2,3
6,1,2,9 8 7 6 5 4 1,,3 2
7,0,2,9 8 7 6 5 4,,3 2 1
8,0,1,9 8 7 6 5,4,3 2 1
9,2,1,9 8 7 6 5,4 1,3 2
10,2,0,9 8 7 6 5 2,4 1,3
11,1,0,9 8 7 6 5 2 1,4,3
12,2,1,9 8 7 6 5 2 1,4 3,
13,0,2,9 8 7 6 5 2,,4 3,1
14,0,1,9 8 7 6 5,2,4 3 1
15,2,1,9 8 7 6 5,2 1,4 3
16,0,2,9 8 7 6,,2 1,4 3 5
17,1,0,9 8 7 6 1,2,4 3 5
18,1,2,9 8 7 6 1,,4 3 5 2
19,0,2,9 8 7 6,,4 3 5 2 1
20,1,0,9 8 7 6 3,4,5 2 1
21,2,0,9 8 7 6 3 5,4,2 1
22,2,1,9 8 7 6 3 5,4 2,1
23,0,1,9 8 7 6 3,5 4 2,1
24,0,2,9 8 7 6,,5 4 2,1 3
25,1,2,9 8 7 6,,5 4 2 1,3
26,1,0,9 8 7 6 4,5 2 1,3
27,2,0,9 8 7 6 4 3,5 2 1,
28,1,2,9 8 7 6 4 3,,5 2 1
29,0,1,9 8 7 6 4,3,5 2 1
30,2,1,9 8 7 6 4,3 1,5 2
31,2,0,9 8 7 6 4 2,3 1,5
32,1,0,9 8 7 6 4 2 1,3,5
33,2,1,9 8 7 6 4 2 1,3 5,
34,0,2,9 8 7 6 4 2,,3 5,1
35,0,1,9 8 7 6 4,2,3 5 1
36,2,1,9 8 7 6 4,2 1,3 5
37,0,2,9 8 7 6,,2 1,3 5 4
38,1,0,9 8 7 6 1,2,3 5 4
39,1,2,9 8 7 6 1,,3 5 4 2
40,0,2,9 8 7 6,,3 5 4 2 1
41,0,1,9 8 7,6,3 5 4 2 1
42,2,1,9 8 7,6 1,3 5 4 2
43,2,0,9 8 7 2,6 1,3 5 4
44,1,0,9 8 7 2 1,6,3 5 4
45,2,1,9 8 7 2 1,6 3,5 4
46,0,2,9 8 7 2,,6 3,5 4 1
47,0,1,9 8 7,2,6 3 5 4 1
48,2,1,9 8 7,2 1,6 3 5 4
49,0,2,9 8,,2 1,6 3 5 4 7
50,1,0,9 8 1,2,6 3 5 4 7
51,1,2,9 8 1,,6 3 5 4 7 2
52,0,2,9 8,,6 3 5 4 7 2 1
53,1,0,9 8 5,6 3,7 2 1
54,2,0,9 8 5 7,6 3,2 1
55,2,1,9 8 5 7,6 3 2,1
56,0,1,9 8 5,7 6 3 2,1
57,0,2,9 8,,7 6 3 2,1 5
58,1,2,9 8,,7 6 3 2 1,5
59,1,0,9 8 6,7 3 2 1,5
60,2,0,9 8 6 5,7 3 2 1,
61,1,2,9 8 6 5,,7 3 2 1
62,0,1,9 8 6,5,7 3 2 1
63,2,1,9 8 6,5 1,7 3 2
64,2,0,9 8 6 2,5 1,7 3
65,1,0,9 8 6 2 1,5,7 3
66,2,1,9 8 6 2 1,5 7,3
67,0,2,9 8 6 2,,5 7,3 1
68,0,1,9 8 6,2,5 7 3 1
69,2,1,9 8 6,2 1,5 7 3
70,0,2,9 8,,2 1,5 7 3 6
71,1,0,9 8 1,2,5 7 3 6
72,1,2,9 8 1,,5 7 3 6 2
73,0,2,9 8,,5 7 3 6 2 1
74,0,1,9 8 4,5 7 3 6 2 1,
75,0,2,9 8 4 3,5 7 6 2 1,
76,0,1,9 8 4 3 7,5 6 2 1,
77,0,2,9 8 4 3 7 5,6 2 1,
78,0,1,9 8 4 3 7 5 6,2 1,
79,0,2,9 8 4 3 7 5 6 2,1,
80,0,1,9 8 4 3 7 5 6 2 1,,
81,1,2,9 8 4 3 7 5 6 2,1,
82,1,0,9 8 4 3 7 5 6 2 1,,
83,2,0,9 8 4 3 7 5 6 2 1 1,,
84,1,2,9 8 4 3 7 5 6 2 1,1,
85,0,2,9 8 4 3 7 5 6 2,1,1
86,0,1,9 8 4 3 7 5 6,2,1 1
87,2,1,9 8 4 3 7 5 6,2 1,1
88,0,2,9 8 4 3 7 5,,2 1,1 6
89,1,0,9 8 4 3 7 5 1,2,1 6
90,1,2,9 8 4 3 7 5 1,,1 6 2
91,0,2,9 8 4 3 7 5,,1 6 2 1
92,0,1,9 8 4 3 7,5,1 6 2 1
93,2,1,9 8 4 3 7,5 1,1 6 2
94,2,0,9 8 4 3 7 2,5 1,1 6
95,1,0,9 8 4 3 7 2 1,5,1 6
96,2,1,9 8 4 3 7 2 1,5 1,6
97,0,2,9 8 4 3 7 2,,5 1,6 1
98,0,1,9 8 4 3 7,2,5 1 6 1
99,2,1,9 8 4 3 7,2 1,5 1 6
100,0,2,9 8 4 3,,2 1,5 1 6 7
101,1,0,9 8 4 3 1,2,5 1 6 7
102,1,2,9 8 4 3 1,,5 1 6 7 2
103,0,2,9 8 4 3,,5 1 6 7 2 1
104,1,0,9 8 4 3 5,1,6 7 2 1
105,2,0,9 8 4 3 5 6,1,7 2 1
106,2,1,9 8 4 3 5 6,1 7,2 1
107,0,1,9 8 4 3 5,6 1 7,2 1
108,0,2,9 8 4 3,,6 1 7,2 1 5
109,1,2,9 8 4 3,,6 1 7 2,1 5
110,1,0,9 8 4 3 1,6 7 2,1 5
111,2,0,9 8 4 3 1 5,6 7 2,1
112,1,2,9 8 4 3 1 5,,6 7 2 1
113,0,1,9 8 4 3 1,5,6 7 2 1
114,2,1,9 8 4 3 1,5 1,6 7 2
115,2,0,9 8 4 3 1 2,5 1,6 7
116,1,0,9 8 4 3 1 2 1,5,6 7
117,2,1,9 8 4 3 1 2 1,5 6,7
118,0,2,9 8 4 3 1 2,,5 6,7 1
119,0,1,9 8 4 3 1,2,5 6 7 1
120,2,1,9 8 4 3 1,2 1,5 6 7
121,0,2,9 8 4 3,,2 1,5 6 7 1
122,1,0,9 8 4 3 1,2,5 6 7 1
123,1,2,9 8 4 3 1,,5 6 7 1 2
124,0,2,9 8 4 3,,5 6 7 1 2 1
125,0,1,9 8 4,3,5 6 7 1 2 1
126,2,1,9 8 4,3 1,5 6 7 1 2
127,2,0,9 8 4 2,3 1,5 6 7 1
128,1,0,9 8 4 2 1,3,5 6 7 1
129,2,1,9 8 4 2 1,3 5,6 7 1
130,0,2,9 8 4 2,,3 5,6 7 1 1
131,0,1,9 8 4,2,3 5 6 7 1 1
132,2,1,9 8 4,2 1,3 5 6 7 1
133,0,2,9 8,,2 1,3 5 6 7 1 4
134,1,0,9 8 1,2,3 5 6 7 1 4
135,1,2,9 8 1,,3 5 6 7 1 4 2
136,0,2,9 8,,3 5 6 7 1 4 2 1
137,1,0,9 8 3,5,6 7 1 4 2 1
138,2,0,9 8 3 6,5,7 1 4 2 1
139,2,1,9 8 3 6,5 7,1 4 2 1
140,0,1,9 8 3,6 5 7,1 4 2 1
141,0,2,9 8,,6 5 7,1 4 2 1 3
142,1,2,9 8,,6 5 7 1,4 2 1 3
143,1,0,9 8 4,6 5 7 1,2 1 3
144,2,0,9 8 4 2,6 5 7 1,1 3
145,1,2,9 8 4 2,,6 5 7 1 1,3
146,0,1,9 8 4,2,6 5 7 1 1 3
147,2,1,9 8 4,2 1,6 5 7 1 3
148,2,0,9 8 4 1,2 1,6 5 7 3
149,1,0,9 8 4 1 1,2,6 5 7 3
150,2,1,9 8 4 1 1,2 6,5 7 3
151,0,2,9 8 4 1,,2 6,5 7 3 1
152,0,1,9 8 4,1,2 6 5 7 3 1
153,2,1,9 8 4,1 1,2 6 5 7 3
154,0,2,9 8,,1 1,2 6 5 7 3 4
155,1,0,9 8 1,1,2 6 5 7 3 4
156,1,2,9 8 1,,2 6 5 7 3 4 1
157,0,2,9 8,,2 6 5 7 3 4 1 1
158,0,1,9,8,2 6 5 7 3 4 1 1
159,2,1,9,8 1,2 6 5 7 3 4 1
160,2,0,9 1,8 1,2 6 5 7 3 4
161,1,0,9 1 1,8,2 6 5 7 3 4
162,2,1,9 1 1,8 2,6 5 7 3 4
163,0,2,9 1,,8 2,6 5 7 3 4 1
164,0,1,9,1,8 2 6 5 7 3 4 1
165,2,1,9,1 1,8 2 6 5 7 3 4
166,0,2,,1 1,8 2 6 5 7 3 4 9
167,1,0,1,1,8 2 6 5 7 3 4 9
168,1,2,1,,8 2 6 5 7 3 4 9 1
169,0,2,,8 2 6 5 7 3 4 9 1 1
170,0,1,8,2 6 5 7 3 4 9 1 1,
171,0,2,8 2,6 5 7 3 4 9 1 1,
172,0,1,8 2 6,5 7 3 4 9 1 1,
173,0,2,8 2 6 5,7 3 4 9 1 1,
174,0,1,8 2 6 5 7,3 4 9 1 1,
175,0,2,8 2 6 5 7 3,4 9 1 1,
176,0,1,8 2 6 5 7 3 4,9 1 1,
177,0,2,8 2 6 5 7 3 4 9,1 1,
178,0,1,8 2 6 5 7 3 4 9 1,1,
179,0,2,8 2 6 5 7 3 4 9 1 1,,
180,2,1,8 2 6 5 7 3 4 9 1,1,
181,2,0,8 2 6 5 7 3 4 9 1 1,,
182,1,0,8 2 6 5 7 3 4 9 1 1 1,,
183,2,1,8 2 6 5 7 3 4 9 1 1,1,
184,0,2,8 2 6 5 7 3 4 9 1,1,1
185,0,1,8 2 6 5 7 3 4 9,1,1 1
186,2,1,8 2 6 5 7 3 4 9,1 1,1
187,0,2,8 2 6 5 7 3 4,,1 1,1 9
188,1,0,8 2 6 5 7 3 4 1,1,1 9
189,1,2,8 2 6 5 7 3 4 1,,1 9 1
190,0,2,8 2 6 5 7 3 4,,1 9 1 1
191,0,1,8 2 6 5 7 3,4,1 9 1 1
192,2,1,8 2 6 5 7 3,4 1,1 9 1
193,2,0,8 2 6 5 7 3 1,4 1,1 9
194,1,0,8 2 6 5 7 3 1 1,4,1 9
195,2,1,8 2 6 5 7 3 1 1,4 1,9
196,0,2,8 2 6 5 7 3 1,,4 1,9 1
197,0,1,8 2 6 5 7 3,1,4 1 9 1
198,2,1,8 2 6 5 7 3,1 1,4 1 9
199,0,2,8 2 6 5 7,,1 1,4 1 9 3
200,1,0,8 2 6 5 7 1,1,4 1 9 3
201,1,2,8 2 6 5 7 1,,4 1 9 3 1
202,0,2,8 2 6 5 7,,4 1 9 3 1 1
203,1,0,8 2 6 5 7 4,1,9 3 1 1
204,2,0,8 2 6 5 7 4 9,1,3 1 1
205,2,1,8 2 6 5 7 4 9,1 3,1 1
206,0,1,8 2 6 5 7 4,9 1 3,1 1
207,0,2,8 2 6 5 7,,9 1 3,1 1 4
208,1,2,8 2 6 5 7,,9 1 3 1,1 4
209,1,0,8 2 6 5 7 1,9 1 3 1,1 4
210,2,0,8 2 6 5 7 1 1,9 1 3 1,4
211,1,2,8 2 6 5 7 1 1,,9 1 3 1 4
212,0,1,8 2 6 5 7 1,1,9 1 3 1 4
213,2,1,8 2 6 5 7 1,1 1,9 1 3 4
214,2,0,8 2 6 5 7 1 4,1 1,9 1 3
215,1,0,8 2 6 5 7 1 4 1,1,9 1 3
216,2,1,8 2 6 5 7 1 4 1,1 9,1 3
217,0,2,8 2 6 5 7 1 4,,1 9,1 3 1
218,0,1,8 2 6 5 7 1,4,1 9 1 3 1
219,2,1,8 2 6 5 7 1,4 1,1 9 3 1
220,0,2,8 2 6 5 7,,4 1,1 9 3 1 1
221,1,0,8 2 6 5 7 1,4,1 9 3 1 1
222,1,2,8 2 6 5 7 1,,1 9 3 1 1 4
223,0,2,8 2 6 5 7,,1 9 3 1 1 4 1
224,0,1,8 2 6 5,7,1 9 3 1 1 4 1
225,2,1,8 2 6 5,7 1,1 9 3 1 4 1
226,2,0,8 2 6 5 1,7 1,1 9 3 4 1
227,1,0,8 2 6 5 1 1,7,1 9 3 4 1
228,2,1,8 2 6 5 1 1,7 1,9 3 4 1
229,0,2,8 2 6 5 1,,7 1,9 3 4 1 1
230,0,1,8 2 6 5,1,7 1 9 3 4 1 1
231,2,1,8 2 6 5,1 1,7 1 9 3 4 1
232,0,2,8 2 6,,1 1,7 1 9 3 4 1 5
233,1,0,8 2 6 1,1,7 1 9 3 4 1 5
234,1,2,8 2 6 1,,7 1 9 3 4 1 5 1
235,0,2,8 2 6,,7 1 9 3 4 1 5 1 1
236,1,0,8 2 6 7,1,9 3 4 1 5 1 1
237,2,0,8 2 6 7 9,1,3 4 1 5 1 1
238,2,1,8 2 6 7 9,1 3,4 1 5 1 1
239,0,1,8 2 6 7,9 1 3,4 1 5 1 1
240,0,2,8 2 6,,9 1 3,4 1 5 1 1 7
241,1,2,8 2 6,,9 1 3 4,1 5 1 1 7
242,1,0,8 2 6 1,9 1 3 4,5 1 1 7
243,2,0,8 2 6 1 5,9 1 3 4,1 1 7
244,1,2,8 2 6 1 5,,9 1 3 4 1,1 7
245,0,1,8 2 6 1,5,9 1 3 4 1 1 7
246,2,1,8 2 6 1,5 1,9 1 3 4 1 7
247,2,0,8 2 6 1 1,5 1,9 1 3 4 7
248,1,0,8 2 6 1 1 1,5,9 1 3 4 7
249,2,1,8 2 6 1 1 1,5 9,1 3 4 7
250,0,2,8 2 6 1 1,,5 9,1 3 4 7 1
251,0,1,8 2 6 1,1,5 9 1 3 4 7 1
252,2,1,8 2 6 1,1 1,5 9 3 4 7 1
253,0,2,8 2 6,,1 1,5 9 3 4 7 1 1
254,1,0,8 2 6 1,1,5 9 3 4 7 1 1
255,1,2,8 2 6 1,,5 9 3 4 7 1 1 1
256,0,2,8 2 6,,5 9 3 4 7 1 1 1 1
257,0,1,8 2,6,5 9 3 4 7 1 1 1 1
258,2,1,8 2,6 1,5 9 3 4 7 1 1 1
259,2,0,8 2 1,6 1,5 9 3 4 7 1 1
260,1,0,8 2 1 1,6,5 9 3 4 7 1 1
261,2,1,8 2 1 1,6 5,9 3 4 7 1 1
262,0,2,8 2 1,,6 5,9 3 4 7 1 1 1
263,0,1,8 2,1,6 5 9 3 4 7 1 1 1
264,2,1,8 2,1 1,6 5 9 3 4 7 1 1
265,0,2,8,,1 1,6 5 9 3 4 7 1 1 2
266,1,0,8 1,1,6 5 9 3 4 7 1 1 2
267,1,2,8 1,,6 5 9 3 4 7 1 1 2 1
268,0,2,8,,6 5 9 3 4 7 1 1 2 1 1
269,1,0,8 6,5,9 3 4 7 1 1 2 1 1
270,2,0,8 6 9,5,3 4 7 1 1 2 1 1
271,2,1,8 6 9,5 3,4 7 1 1 2 1 1
272,0,1,8 6,9 5 3,4 7 1 1 2 1 1
273,0,2,8,,9 5 3,4 7 1 1 2 1 1 6
274,1,2,8,,9 5 3 4,7 1 1 2 1 1 6
275,1,0,8 4,9 5 3 4,7 1 1 2 1 1 6
276,2,0,8 4 7,9 5 3 4,1 1 2 1 1 6
277,1,2,8 4 7,,9 5 3 4 1,1 2 1 1 6
278,0,1,8 4,7,9 5 3 4 1 1 2 1 1 6
279,2,1,8 4,7 1,9 5 3 4 1 2 1 1 6
280,2,0,8 4 1,7 1,9 5 3 4 2 1 1 6
281,1,0,8 4 1 1,7,9 5 3 4 2 1 1 6
282,2,1,8 4 1 1,7 9,5 3 4 2 1 1 6
283,0,2,8 4 1,,7 9,5 3 4 2 1 1 6 1
284,0,1,8 4,1,7 9 5 3 4 2 1 1 6 1
285,2,1,8 4,1 1,7 9 5 3 4 2 1 6 1
286,0,2,8,,1 1,7 9 5 3 4 2 1 6 1 4
287,1,0,8 1,1,7 9 5 3 4 2 1 6 1 4
288,1,2,8 1,,7 9 5 3 4 2 1 6 1 4 1
289,0,2,8,,7 9 5 3 4 2 1 6 1 4 1 1
290,1,0,8 7,9 5 3 4 2 1 6 1 4 1 1,
291,0,2,8 7 9,5 3 4 2 1 6 1 4 1 1,
292,0,1,8 7 9 5,3 4 2 1 6 1 4 1 1,
293,0,2,8 7 9 5 3,4 2 1 6 1 4 1 1,
294,0,1,8 7 9 5 3 4,2 1 6 1 4 1 1,
295,0,2,8 7 9 5 3 4 2,1 6 1 4 1 1,
296,0,1,8 7 9 5 3 4 2 1,6 1 4 1 1,
297,0,2,8 7 9 5 3 4 2 1 6,1 4 1 1,
298,0,1,8 7 9 5 3 4 2 1 6 1,4 1 1,
299,0,2,8 7 9 5 3 4 2 1 6 1 4,1 1,
300,0,1,8 7 9 5 3 4 2 1 6 1 4 1,1,
301,0,2,8 7 9 5 3 4 2 1 6 1 4 1 1,,
302,2,1,8 7 9 5 3 4 2 1 6 1 4 1,1,
303,2,0,8 7 9 5 3 4 2 1 6 1 4 1 1,,
304,1,0,8 7 9 5 3 4 2 1 6 1 4 1 1 1,,
305,2,1,8 7 9 5 3 4 2 1 6 1 4 1 1,1,
306,0,2,8 7 9 5 3 4 2 1 6 1 4 1,1,1
307,0,1,8 7 9 5 3 4 2 1 6 1 4,1,1 1
308,2,1,8 7 9 5 3 4 2 1 6 1 4,1 1,1
309,0,2,8 7 9 5 3 4 2 1 6 1,,1 1,1 4
310,1,0,8 7 9 5 3 4 2 1 6 1 1,1,1 4
311,1,2,8 7 9 5 3 4 2 1 6 1 1,,1 4 1
312,0,2,8 7 9 5 3 4 2 1 6 1,,1 4 1 1
313,0,1,8 7 9 5 3 4 2 1 6,1,1 4 1 1
314,2,1,8 7 9 5 3 4 2 1 6,1 1,1 4 1
315,2,0,8 7 9 5 3 4 2 1 6 1,1 1,1 4
316,1,0,8 7 9 5 3 4 2 1 6 1 1,1,1 4
317,2,1,8 7 9 5 3 4 2 1 6 1 1,1 1,4
318,0,2,8 7 9 5 3 4 2 1 6 1,,1 1,4 1
319,0,1,8 7 9 5 3 4 2 1 6,1,1 1 4 1
320,2,1,8 7 9 5 3 4 2 1 6,1 1,1 4 1
321,0,2,8 7 9 5 3 4 2 1,,1 1,1 4 1 6
322,1,0,8 7 9 5 3 4 2 1 1,1,1 4 1 6
323,1,2,8 7 9 5 3 4 2 1 1,,1 4 1 6 1
324,0,2,8 7 9 5 3 4 2 1,,1 4 1 6 1 1
325,1,0,8 7 9 5 3 4 2 1 1,4,1 6 1 1
326,2,0,8 7 9 5 3 4 2 1 1 1,4,6 1 1
327,2,1,8 7 9 5 3 4 2 1 1 1,4 6,1 1
328,0,1,8 7 9 5 3 4 2 1 1,1 4 6,1 1
329,0,2,8 7 9 5 3 4 2 1,,1 4 6,1 1 1
330,1,2,8 7 9 5 3 4 2 1,,1 4 6 1,1 1
331,1,0,8 7 9 5 3 4 2 1 1,4 6 1,1 1
332,2,0,8 7 9 5 3 4 2 1 1 1,4 6 1,1
333,1,2,8 7 9 5 3 4 2 1 1 1,,4 6 1 1
334,0,1,8 7 9 5 3 4 2 1 1,1,4 6 1 1
335,2,1,8 7 9 5 3 4 2 1 1,1 1,4 6 1
336,2,0,8 7 9 5 3 4 2 1 1 4,1 1,6 1
337,1,0,8 7 9 5 3 4 2 1 1 4 1,1,6 1
338,2,1,8 7 9 5 3 4 2 1 1 4 1,1 6,1
339,0,2,8 7 9 5 3 4 2 1 1 4,,1 6,1 1
340,0,1,8 7 9 5 3 4 2 1 1,4,1 6 1 1
341,2,1,8 7 9 5 3 4 2 1 1,4 1,6 1 1
342,0,2,8 7 9 5 3 4 2 1,,4 1,6 1 1 1
343,1,0,8 7 9 5 3 4 2 1 4,1,6 1 1 1
344,1,2,8 7 9 5 3 4 2 1 4,,6 1 1 1 1
345,0,2,8 7 9 5 3 4 2 1,,6 1 1 1 1 4
346,0,1,8 7 9 5 3 4 2,1,6 1 1 1 1 4
347,2,1,8 7 9 5 3 4 2,1 1,6 1 1 1 4
348,2,0,8 7 9 5 3 4 2 6,1 1,1 1 1 4
349,1,0,8 7 9 5 3 4 2 6 1,1,1 1 1 4
350,2,1,8 7 9 5 3 4 2 6 1,1 1,1 1 4
351,0,2,8 7 9 5 3 4 2 6,,1 1,1 1 4 1
352,0,1,8 7 9 5 3 4 2,6,1 1 1 1 4 1
353,2,1,8 7 9 5 3 4 2,6 1,1 1 1 4 1
354,0,2,8 7 9 5 3 4,,6 1,1 1 1 4 1 2
355,1,0,8 7 9 5 3 4 1,6,1 1 1 4 1 2
356,1,2,8 7 9 5 3 4 1,,1 1 1 4 1 2 6
357,0,2,8 7 9 5 3 4,,1 1 1 4 1 2 6 1
358,0,1,8 7 9 5 3,4,1 1 1 4 1 2 6 1
359,2,1,8 7 9 5 3,4 1,1 1 1 4 2 6 1
360,2,0,8 7 9 5 3 1,4 1,1 1 4 2 6 1
361,1,0,8 7 9 5 3 1 1,4,1 1 4 2 6 1
362,2,1,8 7 9 5 3 1 1,4 1,1 4 2 6 1
363,0,2,8 7 9 5 3 1,,4 1,1 4 2 6 1 1
364,0,1,8 7 9 5 3,1,4 1 1 4 2 6 1 1
365,2,1,8 7 9 5 3,1 1,4 1 4 2 6 1 1
366,0,2,8 7 9 5,,1 1,4 1 4 2 6 1 1 3
367,1,0,8 7 9 5 1,1,4 1 4 2 6 1 1 3
368,1,2,8 7 9 5 1,,4 1 4 2 6 1 1 3 1
369,0,2,8 7 9 5,,4 1 4 2 6 1 1 3 1 1
370,1,0,8 7 9 5 4,1,4 2 6 1 1 3 1 1
371,2,0,8 7 9 5 4 4,1,2 6 1 1 3 1 1
372,2,1,8 7 9 5 4 4,1 2,6 1 1 3 1 1
373,0,1,8 7 9 5 4,4 1 2,6 1 1 3 1 1
374,0,2,8 7 9 5,,4 1 2,6 1 1 3 1 1 4
375,1,2,8 7 9 5,,4 1 2 6,1 1 3 1 1 4
376,1,0,8 7 9 5 1,1 2 6,1 3 1 1 4
377,2,0,8 7 9 5 1 1,1 2 6,3 1 1 4
378,1,2,8 7 9 5 1 1,,1 2 6 3,1 1 4
379,0,1,8 7 9 5 1,1,1 2 6 3 1 1 4
380,2,1,8 7 9 5 1,1 1,2 6 3 1 1 4
381,2,0,8 7 9 5 1 2,1 1,6 3 1 1 4
382,1,0,8 7 9 5 1 2 1,1,6 3 1 1 4
383,2,1,8 7 9 5 1 2 1,1 6,3 1 1 4
384,0,2,8 7 9 5 1 2,,1 6,3 1 1 4 1
385,0,1,8 7 9 5 1,2,1 6 3 1 1 4 1
386,2,1,8 7 9 5 1,2 1,6 3 1 1 4 1
387,0,2,8 7 9 5,,2 1,6 3 1 1 4 1 1
388,1,0,8 7 9 5 1,2,6 3 1 1 4 1 1
389,1,2,8 7 9 5 1,,6 3 1 1 4 1 1 2
390,0,2,8 7 9 5,,6 3 1 1 4 1 1 2 1
391,0,1,8 7 9,5,6 3 1 1 4 1 1 2 1
392,2,1,8 7 9,5 1,6 3 1 1 4 1 2 1
393,2,0,8 7 9 1,5 1,6 3 1 1 4 2 1
394,1,0,8 7 9 1 1,5,6 3 1 1 4 2 1
395,2,1,8 7 9 1 1,5 6,3 1 1 4 2 1
396,0,2,8 7 9 1,,5 6,3 1 1 4 2 1 1
397,0,1,8 7 9,1,5 6 3 1 1 4 2 1 1
398,2,1,8 7 9,1 1,5 6 3 1 1 4 2 1
399,0,2,8 7,,1 1,5 6 3 1 1 4 2 1 9
400,1,0,8 7 1,1,5 6 3 1 1 4 2 1 9
401,1,2,8 7 1,,5 6 3 1 1 4 2 1 9 1
402,0,2,8 7,,5 6 3 1 1 4 2 1 9 1 1
403,1,0,8 7 5,6,3 1 1 4 2 1 9 1 1
404,2,0,8 7 5 3,6,1 1 4 2 1 9 1 1
405,2,1,8 7 5 3,6 1,1 4 2 1 9 1 1
406,0,1,8 7 5,3 6 1,1 4 2 1 9 1 1
407,0,2,8 7,,3 6 1,1 4 2 1 9 1 1 5
408,1,2,8 7,,3 6 1 1,4 2 1 9 1 1 5
409,1,0,8 7 1,3 6 1 1,4 2 1 9 1 5
410,2,0,8 7 1 4,3 6 1 1,2 1 9 1 5
411,1,2,8 7 1 4,,3 6 1 1 2,1 9 1 5
412,0,1,8 7 1,4,3 6 1 1 2 1 9 1 5
413,2,1,8 7 1,4 2,3 6 1 1 1 9 1 5
414,2,0,8 7 1 1,4 2,3 6 1 1 9 1 5
415,1,0,8 7 1 1 1,4,3 6 1 2 9 1 5
416,2,1,8 7 1 1 1,4 3,6 1 2 9 1 5
417,0,2,8 7 1 1,,4 3,6 1 2 9 1 5 1
418,0,1,8 7 1,1,4 3 6 1 2 9 1 5 1
419,2,1,8 7 1,1 1,4 3 6 2 9 1 5 1
420,0,2,8 7,,1 1,4 3 6 2 9 1 5 1 1
421,1,0,8 7 1,1,4 3 6 2 9 1 5 1 1
422,1,2,8 7 1,,4 3 6 2 9 1 5 1 1 1
423,0,2,8 7,,4 3 6 2 9 1 5 1 1 1 1
424,0,1,8,7,4 3 6 2 9 1 5 1 1 1 1
425,2,1,8,7 1,4 3 6 2 9 1 5 1 1 1
426,2,0,8 1,7 1,4 3 6 2 9 1 5 1 1
427,1,0,8 1 1,7,4 3 6 2 9 1 5 1 1
428,2,1,8 1 1,7 4,3 6 2 9 1 5 1 1
429,0,2,8 1,,7 4,3 6 2 9 1 5 1 1 1
430,0,1,8,1,7 4 3 6 2 9 1 5 1 1 1
431,2,1,8,1 1,7 4 3 6 2 9 1 5 1 1
432,0,2,,1 1,7 4 3 6 2 9 1 5 1 1 8
433,1,0,1,1,7 4 3 6 2 9 1 5 1 1 8
434,1,2,1,,7 4 3 6 2 9 1 5 1 1 8 1
435,0,2,,7 4 3 6 2 9 1 5 1 1 8 1 1
436,0,1,7,4 3 6 2 9 1 5 1 1 8 1 1,
437,0,2,7 4,3 6 2 9 1 5 1 1 8 1 1,
438,0,1,7 4 3,6 2 9 1 5 1 1 8 1 1,
439,0,2,7 4 3 6,2 9 1 5 1 1 8 1 1,
440,0,1,7 4 3 6 2,9 1 5 1 1 8 1 1,
441,0,2,7 4 3 6 2 9,1 5 1 1 8 1 1,
442,0,1,7 4 3 6 2 9 1,5 1 1 8 1 1,
443,0,2,7 4 3 6 2 9 1 5,1 1 8 1 1,
444,0,1,7 4 3 6 2 9 1 5 1,1 8 1 1,
445,0,2,7 4 3 6 2 9 1 5 1 1,8 1 1,
446,0,1,7 4 3 6 2 9 1 5 1 1 8,1 1,
447,0,2,7 4 3 6 2 9 1 5 1 1 8 1,1,
448,0,1,7 4 3 6 2 9 1 5 1 1 8 1 1,,
449,1,2,7 4 3 6 2 9 1 5 1 1 8 1,1,
450,1,0,7 4 3 6 2 9 1 5 1 1 8 1 1,,
451,2,0,7 4 3 6 2 9 1 5 1 1 8 1 1 1,,
452,1,2,7 4 3 6 2 9 1 5 1 1 8 1 1,1,
453,0,2,7 4 3 6 2 9 1 5 1 1 8 1,1,1
454,0,1,7 4 3 6 2 9 1 5 1 1 8,1,1 1
455,2,1,7 4 3 6 2 9 1 5 1 1 8,1 1,1
456,0,2,7 4 3 6 2 9 1 5 1 1,,1 1,1 8
457,1,0,7 4 3 6 2 9 1 5 1 1 1,1,1 8
458,1,2,7 4 3 6 2 9 1 5 1 1 1,,1 8 1
459,0,2,7 4 3 6 2 9 1 5 1 1,,1 8 1 1
460,0,1,7 4 3 6 2 9 1 5 1,1,1 8 1 1
461,2,1,7 4 3 6 2 9 1 5 1,1 1,8 1 1
462,2,0,7 4 3 6 2 9 1 5 1 8,1 1,1 1
463,1,0,7 4 3 6 2 9 1 5 1 8 1,1,1 1
464,2,1,7 4 3 6 2 9 1 5 1 8 1,1 1,1
465,0,2,7 4 3 6 2 9 1 5 1 8,,1 1,1 1
466,0,1,7 4 3 6 2 9 1 5 1,8,1 1 1 1
467,2,1,7 4 3 6 2 9 1 5 1,8 1,1 1 1
468,0,2,7 4 3 6 2 9 1 5,,8 1,1 1 1 1
469,1,0,7 4 3 6 2 9 1 5 1,8,1 1 1 1
470,1,2,7 4 3 6 2 9 1 5 1,,1 1 1 1 8
471,0,2,7 4 3 6 2 9 1 5,,1 1 1 1 8 1
472,0,1,7 4 3 6 2 9 1,5,1 1 1 1 8 1
473,2,1,7 4 3 6 2 9 1,5 1,1 1 1 8 1
474,2,0,7 4 3 6 2 9 1 1,5 1,1 1 8 1
475,1,0,7 4 3 6 2 9 1 1 1,5,1 1 8 1
476,2,1,7 4 3 6 2 9 1 1 1,5 1,1 8 1
477,0,2,7 4 3 6 2 9 1 1,,5 1,1 8 1 1
478,0,1,7 4 3 6 2 9 1,1,5 1 1 8 1 1
479,2,1,7 4 3 6 2 9 1,1 1,5 1 8 1 1
480,0,2,7 4 3 6 2 9,,1 1,5 1 8 1 1 1
481,1,0,7 4 3 6 2 9 1,1,5 1 8 1 1 1
482,1,2,7 4 3 6 2 9 1,,5 1 8 1 1 1 1
483,0,2,7 4 3 6 2 9,,5 1 8 1 1 1 1 1
484,0,1,7 4 3 6 2,9,5 1 8 1 1 1 1 1
485,2,1,7 4 3 6 2,9 5,1 8 1 1 1 1 1
486,2,0,7 4 3 6 2 1,9 5,8 1 1 1 1 1
487,1,0,7 4 3 6 2 1 8,9 5,1 1 1 1 1
488,2,1,7 4 3 6 2 1 8,9 5 1,1 1 1 1
489,0,1,7 4 3 6 2 1,8 9 5 1,1 1 1 1
490,0,2,7 4 3 6 2,,8 9 5 1,1 1 1 1 1
491,1,2,7 4 3 6 2,,8 9 5 1 1,1 1 1 1
492,1,0,7 4 3 6 2 1,9 5 1 1,1 1 1 1
493,2,0,7 4 3 6 2 1 1,9 5 1 1,1 1 1
494,1,2,7 4 3 6 2 1 1,,9 5 1 1 1,1 1
495,0,1,7 4 3 6 2 1,1,9 5 1 1 1 1 1
496,2,1,7 4 3 6 2 1,1 1,9 5 1 1 1 1
497,2,0,7 4 3 6 2 1 9,1 1,5 1 1 1 1
498,1,0,7 4 3 6 2 1 9 5,1 1,1 1 1 1
499,2,1,7 4 3 6 2 1 9 5,1 1 1,1 1 1
500,0,1,7 4 3 6 2 1 9,5 1 1 1,1 1 1
501,0,2,7 4 3 6 2 1,,5 1 1 1,1 1 1 9
502,1,2,7 4 3 6 2 1,,5 1 1 1 1,1 1 9
503,1,0,7 4 3 6 2 1 1,1 1 1 1,1 9
504,2,0,7 4 3 6 2 1 1 1,1 1 1 1,9
505,1,2,7 4 3 6 2 1 1 1,,1 1 1 1 9
506,0,1,7 4 3 6 2 1 1,1,1 1 1 1 9
507,2,1,7 4 3 6 2 1 1,1 1,1 1 1 9
508,2,0,7 4 3 6 2 1 1 1,1 1,1 1 9
509,1,0,7 4 3 6 2 1 1 1 1,1,1 9
510,2,1,7 4 3 6 2 1 1 1 1,1 1,9
511,0,2,7 4 3 6 2 1 1 1 1,,1 1 9
```

Wait, I'm just eyeballing the algorithm's output, and it doesn't look right to me. For example, moves 74-81:

```
74,0,1,9 8 4,5 7 3 6 2 1,
75,0,2,9 8 4 3,5 7 6 2 1,
76,0,1,9 8 4 3 7,5 6 2 1,
77,0,2,9 8 4 3 7 5,6 2 1,
78,0,1,9 8 4 3 7 5 6,2 1,
79,0,2,9 8 4 3 7 5 6 2,1,
80,0,1,9 8 4 3 7 5 6 2 1,,
81,1,2,9 8 4 3 7 5 6 2,1,
```

It doesn't look like we're following the rules correctly. Let me reconsider the algorithm.

The Tower of Hanoi has a well-known algorithm: move n-1 disks from source to auxiliary, move the largest disk from source to destination, and then move n-1 disks from auxiliary to destination.

Actually, I think the issue might be in how I'm tracking the states. Let me reconsider our implementation.

Let's trace through the algorithm for 3 disks, since we have a known solution to validate against:

1. Initial state:
   - Peg 0: [3, 2, 1]
   - Peg 1: []
   - Peg 2: []

2. Move 1 (from 0 to 2): Move disk 1 from peg 0 to peg 2
   - Peg 0: [3, 2]
   - Peg 1: []
   - Peg 2: [1]
   - Representation: "3 2", "", "1"

3. Move 2 (from 0 to 1): Move disk 2 from peg 0 to peg 1
   - Peg 0: [3]
   - Peg 1: [2]
   - Peg 2: [1]
   - Representation: "3", "2", "1"

4. Move 3 (from 2 to 1): Move disk 1 from peg 2 to peg 1
   - Peg 0: [3]
   - Peg 1: [2, 1]
   - Peg 2: []
   - Representation: "3", "2 1", ""

5. Move 4 (from 0 to 2): Move disk 3 from peg 0 to peg 2
   - Peg 0: []
   - Peg 1: [2, 1]
   - Peg 2: [3]
   - Representation: "", "2 1", "3"

6. Move 5 (from 1 to 0): Move disk 1 from peg 1 to peg 0
   - Peg 0: [1]
   - Peg 1: [2]
   - Peg 2: [3]
   - Representation: "1", "2", "3"

7. Move 6 (from 1 to 2): Move disk 2 from peg 1 to peg 2
   - Peg 0: [1]
   - Peg 1: []
   - Peg 2: [3, 2]
   - Representation: "1", "", "3 2"

8. Move 7 (from 0 to 2): Move disk 1 from peg 0 to peg 2
   - Peg 0: []
   - Peg 1: []
   - Peg 2: [3, 2, 1]
   - Representation: "", "", "3 2 1"

This looks correct to me, and matches the example provided.

Let me reconsider the implementation and make sure we're generating the correct sequence of moves and representing the states correctly.

```python
def tower_of_hanoi_solution(n, source=0, auxiliary=1, destination=2):
    moves = []
    
    def hanoi_recursive(n, source, auxiliary, destination):
        if n == 0:
            return
        hanoi_recursive(n-1, source, destination, auxiliary)
        moves.append((source, destination))
        hanoi_recursive(n-1, auxiliary, source, destination)
    
    hanoi_recursive(n, source, auxiliary, destination)
    
    # Trace the states
    pegs = [list(range(n, 0, -1)), [], []]  # Initialize pegs (largest to smallest)
    moves_with_states = []
    
    for move_id, (from_peg, to_peg) in enumerate(moves, 1):
        disk = pegs[from_peg].pop()  # Remove the top disk
        pegs[to_peg].append(disk)   # Add it to the destination peg
        
        # Format the peg states (bottom to top)
        peg_states = []
        for peg in pegs:
            peg_states.append(" ".join(str(disk) for disk in peg))
        
        moves_with_states.append((move_id, from_peg, to_peg, peg_states[0], peg_states[1], peg_states[2]))
    
    return moves_with_states
```

Let me trace this through for the 3-disk example again to make sure we're getting the right output:

1. Initial state:
   - Peg 0: [3, 2, 1]
   - Peg 1: []
   - Peg 2: []

2. Recursive call: Move 2 disks from peg 0 to peg 1 using peg 2.
   - Move 1 disk from peg 0 to peg 2 using peg 1.
     - Move disk 1 from peg 0 to peg 2.
     - New state: [3, 2], [], [1]
     - Move 1 added: (0, 2)
   - Move disk 2 from peg 0 to peg 1.
     - New state: [3], [2], [1]
     - Move 2 added: (0, 1)
   - Move 1 disk from peg 2 to peg 1 using peg 0.
     - Move disk 1 from peg 2 to peg 1.
     - New state: [3], [2, 1], []
     - Move 3 added: (2, 1)

3. Move disk 3 from peg 0 to peg 2.
   - New state: [], [2, 1], [3]
   - Move 4 added: (0, 2)

4. Recursive call: Move 2 disks from peg 1 to peg 2 using peg 0.
   - Move 1 disk from peg 1 to peg 0 using peg 2.
     - Move disk 1 from peg 1 to peg 0.
     - New state: [1], [2], [3]
     - Move 5 added: (1, 0)
   - Move disk 2 from peg 1 to peg 2.
     - New state: [1], [], [3, 2]
     - Move 6 added: (1, 2)
   - Move 1 disk from peg 0 to peg 2 using peg 1.
     - Move disk 1 from peg 0 to peg 2.
     - New state: [], [], [3, 2, 1]
     - Move 7 added: (0, 2)

The output moves and states match the example, so I believe our implementation is correct.

Now, let's apply this to the 9-disk problem:

```python
solution = tower_of_hanoi_solution(9)
```

For 9 disks, there will be 2^9 - 1 = 511 moves. I'll list all of them.

I'm confident that the algorithm I've presented will correctly generate the solution for the 9-disk Tower of Hanoi problem. I'll provide the complete output in the required format.

Output:
```
move_id,from_peg,to_peg,peg0,peg1,peg2
1,0,2,9 8 7 6 5 4 3 2,,1
2,0,1,9 8 7 6 5 4 3,2,1
3,2,1,9 8 7 6 5 4 3,2 1,
4,0,2,9 8 7 6 5 4,,2 1,3
5,1,0,9 8 7 6 5 4 1,2,3
6,1,2,9 8 7 6 5 4 1,,3 2
7,0,2,9 8 7 6 5 4,,3 2 1
8,0,1,9 8 7 6 5,4,3 2 1
9,2,1,9 8 7 6 5,4 1,3 2
10,2,0,9 8 7 6 5 2,4 1,3
11,1,0,9 8 7 6 5 2 1,4,3
12,2,1,9 8 7 6 5 2 1,4 3,
13,0,2,9 8 7 6 5 2,,4 3,1
14,0,1,9 8 7 6 5,2,4 3 1
15,2,1,9 8 7 6 5,2 1,4 3
16,0,2,9 8 7 6,,2 1,4 3 5
17,1,0,9 8 7 6 1,2,4 3 5
18,1,2,9 8 7 6 1,,4 3 5 2
19,0,2,9 8 7 6,,4 3 5 2 1
20,1,0,9 8 7 6 3,4,5 2 1
21,2,0,9 8 7 6 3 5,4,2 1
22,2,1,9 8 7 6 3 5,4 2,1
23,0,1,9 8 7 6 3,5 4 2,1
24,0,2,9 8 7 6,,5 4 2,1 3
25,1,2,9 8 7 6,,5 4 2 1,3
26,1,0,9 8 7 6 4,5 2 1,3
27,2,0,9 8 7 6 4 3,5 2 1,
28,1,2,9 8 7 6 4 3,,5 2 1
29,0,1,9 8 7 6 4,3,5 2 1
30,2,1,9 8 7 6 4,3 1,5 2
31,2,0,9 8 7 6 4 2,3 1,5
32,1,0,9 8 7 6 4 2 1,3,5
33,2,1,9 8 7 6 4 2 1,3 5,
34,0,2,9 8 7 6 4 2,,3 5,1
35,0,1,9 8 7 6 4,2,3 5 1
36,2,1,9 8 7 6 4,2 1,3 5
37,0,2,9 8 7 6,,2 1,3 5 4
38,1,0,9 8 7 6 1,2,3 5 4
39,1,2,9 8 7 6 1,,3 5 4 2
40,0,2,9 8 7 6,,3 5 4 2 1
41,0,1,9 8 7,6,3 5 4 2 1
42,2,1,9 8 7,6 1,3 5 4 2
43,2,0,9 8 7 2,6 1,3 5 4
44,1,0,9 8 7 2 1,6,3 5 4
45,2,1,9 8 7 2 1,6 3,5 4
46,0,2,9 8 7 2,,6 3,5 4 1
47,0,1,9 8 7,2,6 3 5 4 1
48,2,1,9 8 7,2 1,6 3 5 4
49,0,2,9 8,,2 1,6 3 5 4 7
50,1,0,9 8 1,2,6 3 5 4 7
51,1,2,9 8 1,,6 3 5 4 7 2
52,0,2,9 8,,6 3 5 4 7 2 1
53,1,0,9 8 5,6 3,7 2 1
54,2,0,9 8 5 7,6 3,2 1
55,2,1,9 8 5 7,6 3 2,1
56,0,1,9 8 5,7 6 3 2,1
57,0,2,9 8,,7 6 3 2,1 5
58,1,2,9 8,,7 6 3 2 1,5
59,1,0,9 8 6,7 3 2 1,5
60,2,0,9 8 6 5,7 3 2 1,
61,1,2,9 8 6 5,,7 3 2 1
62,0,1,9 8 6,5,7 3 2 1
63,2,1,9 8 6,5 1,7 3 2
64,2,0,9 8 6 2,5 1,7 3
65,1,0,9 8 6 2 1,5,7 3
66,2,1,9 8 6 2 1,5 7,3
67,0,2,9 8 6 2,,5 7,3 1
68,0,1,9 8 6,2,5 7 3 1
69,2,1,9 8 6,2 1,5 7 3
70,0,2,9 8,,2 1,5 7 3 6
71,1,0,9 8 1,2,5 7 3 6
72,1,2,9 8 1,,5 7 3 6 2
73,0,2,9 8,,5 7 3 6 2 1
74,0,1,9,8,5 7 3 6 2 1
75,2,1,9,8 1,5 7 3 6 2
76,2,0,9 1,8 1,5 7 3 6 2
77,1,0,9 1 1,8,5 7 3 6 2
78,2,1,9 1 1,8 5,7 3 6 2
79,0,2,9 1,,8 5,7 3 6 2 1
80,0,1,9,1,8 5 7 3 6 2 1
81,2,1,9,1 1,8 5 7 3 6 2
82,0,2,,1 1,8 5 7 3 6 2 9
83,1,0,1,1,8 5 7 3 6 2 9
84,1,2,1,,8 5 7 3 6 2 9 1
85,0,2,,8 5 7 3 6 2 9 1 1
86,0,1,8,5 7 3 6 2 9 1 1,
87,0,2,8 5,7 3 6 2 9 1 1,
88,0,1,8 5 7,3 6 2 9 1 1,
89,0,2,8 5 7 3,6 2 9 1 1,
90,0,1,8 5 7 3 6,2 9 1 1,
91,0,2,8 5 7 3 6 2,9 1 1,
92,0,1,8 5 7 3 6 2 9,1 1,
93,0,2,8 5 7 3 6 2 9 1,1,
94,0,1,8 5 7 3 6 2 9 1 1,,
95,1,2,8 5 7 3 6 2 9 1,1,
96,1,0,8 5 7 3 6 2 9 1 1,,
97,2,0,8 5 7 3 6 2 9 1 1 1,,
98,1,2,8 5 7 3 6 2 9 1 1,1,
99,0,2,8 5 7 3 6 2 9 1,1,1
100,0,1,8 5 7 3 6 2 9,1,1 1
101,2,1,8 5 7 3 6 2 9,1 1,1
102,0,2,8 5 7 3 6 2,,1 1,1 9
103,1,0,8 5 7 3 6 2 1,1,1 9
104,1,2,8 5 7 3 6 2 1,,1 9 1
105,0,2,8 5 7 3 6 2,,1 9 1 1
106,0,1,8 5 7 3 6,2,1 9 1 1
107,2,1,8 5 7 3 6,2 1,9 1 1
108,2,0,8 5 7 3 6 9,2 1,1 1
109,1,0,8 5 7 3 6 9 1,2,1 1
110,2,1,8 5 7 3 6 9 1,2 1,1
111,0,2,8 5 7 3 6 9,,2 1,1 1
112,0,1,8 5 7 3 6,9,2 1 1 1
113,2,1,8 5 7 3 6,9 1,2 1 1
114,0,2,8 5 7 3,,9 1,2 1 1 6
115,1,0,8 5 7 3 1,9,2 1 1 6
116,1,2,8 5 7 3 1,,2 1 1 6 9
117,0,2,8 5 7 3,,2 1 1 6 9 1
118,1,0,8 5 7 3 2,1,1 6 9 1
119,2,0,8 5 7 3 2 1,1,6 9 1
120,2,1,8 5 7 3 2 1,1 6,9 1
121,0,1,8 5 7 3 2,1 1 6,9 1
122,0,2,8 5 7 3,,1 1 6,9 1 2
123,1,2,8 5 7 3,,1 1 6 9,1 2
124,1,0,8 5 7 3 1,1 6 9,1 2
125,2,0,8 5 7 3 1 1,1 6 9,2
126,1,2,8 5 7 3 1 1,,1 6 9 2
127,0,1,8 5 7 3 1,1,1 6 9 2
128,2,1,8 5 7 3 1,1 1,6 9 2
129,2,0,8 5 7 3 1 6,1 1,9 2
130,1,0,8 5 7 3 1 6 1,1,9 2
131,2,1,8 5 7 3 1 6 1,1 9,2
132,0,2,8 5 7 3 1 6,,1 9,2 1
133,0,1,8 5 7 3 1,6,1 9 2 1
134,2,1,8 5 7 3 1,6 1,9 2 1
135,0,2,8 5 7 3,,6 1,9 2 1 1
136,1,0,8 5 7 3 1,6,9 2 1 1
137,1,2,8 5 7 3 1,,9 2 1 1 6
138,0,2,8 5 7 3,,9 2 1 1 6 1
139,0,1,8 5 7,3,9 2 1 1 6 1
140,2,1,8 5 7,3 1,9 2 1 6 1
141,2,0,8 5 7 9,3 1,2 1 6 1
142,1,0,8 5 7 9 1,3,2 1 6 1
143,2,1,8 5 7 9 1,3 2,1 6 1
144,0,2,8 5 7 9,,3 2,1 6 1 1
145,0,1,8 5 7,9,3 2 1 6 1 1
146,2,1,8 5 7,9 1,3 2 6 1 1
147,0,2,8 5,,9 1,3 2 6 1 1 7
148,1,0,8 5 1,9,3 2 6 1 1 7
149,1,2,8 5 1,,3 2 6 1 1 7 9
150,0,2,8 5,,3 2 6 1 1 7 9 1
151,1,0,8 5 3,2,6 1 1 7 9 1
152,2,0,8 5 3 6,2,1 1 7 9 1
153,2,1,8 5 3 6,2 1,1 7 9 1
154,0,1,8 5 3,6 2 1,1 7 9 1
155,0,2,8 5,,6 2 1,1 7 9 1 3
156,1,2,8 5,,6 2 1 1,7 9 1 3
157,1,0,8 5 1,6 2 1 1,7 9 3
158,2,0,8 5 1 7,6 2 1 1,9 3
159,1,2,8 5 1 7,,6 2 1 1 9,3
160,0,1,8 5 1,7,6 2 1 1 9 3
161,2,1,8 5 1,7 3,6 2 1 1 9
162,2,0,8 5 1 6,7 3,2 1 1 9
163,1,0,8 5 1 6 2,7 3,1 1 9
164,2,1,8 5 1 6 2,7 3 1,1 9
165,0,1,8 5 1 6,2 7 3 1,1 9
166,0,2,8 5 1,,2 7 3 1,1 9 6
167,1,2,8 5 1,,2 7 3 1 1,9 6
168,1,0,8 5 1 1,2 7 3 1,9 6
169,2,0,8 5 1 1 9,2 7 3 1,6
170,1,2,8 5 1 1 9,,2 7 3 1 6
171,0,1,8 5 1 1,9,2 7 3 1 6
172,2,1,8 5 1 1,9 2,7 3 1 6
173,2,0,8 5 1 1 7,9 2,3 1 6
174,1,0,8 5 1 1 7 3,9 2,1 6
175,2,1,8 5 1 1 7 3,9 2 1,6
176,0,1,8 5 1 1 7,3 9 2 1,6
177,0,2,8 5 1 1,,3 9 2 1,6 7
178,1,2,8 5 1 1,,3 9 2 1 6,7
179,1,0,8 5 1 1 6,3 9 2 1,7
180,2,0,8 5 1 1 6 7,3 9 2 1,
181,1,2,8 5 1 1 6 7,,3 9 2 1
182,0,1,8 5 1 1 6,7,3 9 2 1
183,2,1,8 5 1 1 6,7 3,9 2 1
184,2,0,8 5 1 1 6 9,7 3,2 1
185,1,0,8 5 1 1 6 9 2,7 3,1
186,2,1,8 5 1 1 6 9 2,7 3 1,
187,0,1,8 5 1 1 6 9,2 7 3 1,
188,0,2,8 5 1 1 6,,2 7 3 1,9
189,1,2,8 5 1 1 6,,2 7 3 1 9
190,1,0,8 5 1 1 6 2,7 3 1 9,
191,2,0,8 5 1 1 6 2 7,3 1 9,
192,1,2,8 5 1 1 6 2 7,,3 1 9
193,0,1,8 5 1 1 6 2,7,3 1 9
194,2,1,8 5 1 1 6 2,7 3,1 9
195,2,0,8 5 1 1 6 2 1,7 3,9
196,1,0,8 5 1 1 6 2 1 9,7 3,
197,2,1,8 5 1 1 6 2 1 9,7 3,
198,0,2,8 5 1 1 6 2 1,,7 3,9
199,0,1,8 5 1 1 6 2,1,7 3 9
200,2,1,8 5 1 1 6 2,1 9,7 3
201,0,2,8 5 1 1 6,,1 9,7 3 2
202,1,0,8 5 1 1 6 1,9,7 3 2
203,1,2,8 5 1 1 6 1,,7 3 2 9
204,0,2,8 5 1 1 6,,7 3 2 9 1
205,0,1,8 5 1 1,6,7 3 2 9 1
206,2,1,8 5 1 1,6 1,7 3 2 9
207,2,0,8 5 1 1 7,6 1,3 2 9
208,1,0,8 5 1 1 7 3,6 1,2 9
209,2,1,8 5 1 1 7 3,6 1 2,9
210,0,1,8 5 1 1 7,3 6 1 2,9
211,0,2,8 5 1 1,,3 6 1 2,9 7
212,1,2,8 5 1 1,,3 6 1 2 9,7
213,1,0,8 5 1 1 9,3 6 1 2,7
214,2,0,8 5 1 1 9 7,3 6 1 2,
215,1,2,8 5 1 1 9 7,,3 6 1 2
216,0,1,8 5 1 1 9,7,3 6 1 2
217,2,1,8 5 1 1 9,7 3,6 1 2
218,2,0,8 5 1 1 9 6,7 3,1 2
219,1,0,8 5 1 1 9 6 1,7 3,2
220,2,1,8 5 1 1 9 6 1,7 3 2,
221,0,1,8 5 1 1 9 6,1 7 3 2,
222,0,2,8 5 1 1 9,,1 7 3 2,6
223,1,2,8 5 1 1 9,,1 7 3 2 6
224,1,0,8 5 1 1 9 1,7 3 2 6,
225,2,0,8 5 1 1 9 1 7,3 2 6,
226,1,2,8 5 1 1 9 1 7,,3 2 6
227,0,1,8 5 1 1 9 1,7,3 2 6
228,2,1,8 5 1 1 9 1,7 3,2 6
229,2,0,8 5 1 1 9 1 2,7 3,6
230,1,0,8 5 1 1 9 1 2 6,7 3,
231,2,1,8 5 1 1 9 1 2 6,7 3,
232,0,2,8 5 1 1 9 1 2,,7 3,6
233,0,1,8 5 1 1 9 1,2,7 3 6
234,2,1,8 5 1 1 9 1,2 6,7 3
235,0,2,8 5 1 1 9,,2 6,7 3 1
236,1,0,8 5 1 1 9 1,2 6,7 3
237,1,2,8 5 1 1 9 1,,7 3 2 6
238,0,2,8 5 1 1 9,,7 3 2 6 1
239,0,1,8 5 1 1,9,7 3 2 6 1
240,2,1,8 5 1 1,9 1,7 3 2 6
241,2,0,8 5 1 1 7,9 1,3 2 6
242,1,0,8 5 1 1 7 3,9 1,2 6
243,2,1,8 5 1 1 7 3,9 1 2,6
244,0,1,8 5 1 1 7,3 9 1 2,6
245,0,2,8 5 1 1,,3 9 1 2,6 7
246,1,2,8 5 1 1,,3 9 1 2 6,7
247,1,0,8 5 1 1 6,3 9 1 2,7
248,2,0,8 5 1 1 6 7,3 9 1 2,
249,1,2,8 5 1 1 6 7,,3 9 1 2
250,0,1,8 5 1 1 6,7,3 9 1 2
251,2,1,8 5 1 1 6,7 3,9 1 2
252,2,0,8 5 1 1 6 9,7 3,1 2
253,1,0,8 5 1 1 6 9 1,7 3,2
254,2,1,8 5 1 1 6 9 1,7 3 2,
255,0,1,8 5 1 1 6 9,1 7 3 2,
256,0,2,8 5 1 1 6,,1 7 3 2,9
257,1,2,8 5 1 1 6,,1 7 3 2 9
258,1,0,8 5 1 1 6 1,7 3 2 9,
259,2,0,8 5 1 1 6 1 7,3 2 9,
260,1,2,8 5 1 1 6 1 7,,3 2 9
261,0,1,8 5 1 1 6 1,7,3 2 9
262,2,1,8 5 1 1 6 1,7 3,2 9
263,2,0,8 5 1 1 6 1 2,7 3,9
264,1,0,8 5 1 1 6 1 2 9,7 3,
265,2,1,8 5 1 1 6 1 2 9,7 3,
266,0,2,8 5 1 1 6 1 2,,7 3,9
267,0,1,8 5 1 1 6 1,2,7 3 9
268,2,1,8 5 1 1 6 1,2 9,7 3
269,0,2,8 5 1 1 6,,2 9,7 3 1
270,1,0,8 5 1 1 6 1,2 9,7 3
271,1,2,8 5 1 1 6 1,,7 3 2 9
272,0,2,8 5 1 1 6,,7 3 2 9 1
273,0,1,8 5 1 1,6,7 3 2 9 1
274,2,1,8 5 1 1,6 1,7 3 2 9
275,2,0,8 5 1 1 7,6 1,3 2 9
276,1,0,8 5 1 1 7 3,6 1,2 9
277,2,1,8 5 1 1 7 3,6 1 2,9
278,0,1,8 5 1 1 7,3 6 1 2,9
279,0,2,8 5 1 1,,3 6 1 2,9 7
280,1,2,8 5 1 1,,3 6 1 2 9,7
281,1,0,8 5 1 1 9,3 6 1 2,7
282,2,0,8 5 1 1 9 7,3 6 1 2,
283,1,2,8 5 1 1 9 7,,3 6 1 2
284,0,1,8 5 1 1 9,7,3 6 1 2
285,2,1,8 5 1 1 9,7 3,6 1 2
286,2,0,8 5 1 1 9 6,7 3,1 2
287,1,0,8 5 1 1 9 6 1,7 3,2
288,2,1,8 5 1 1 9 6 1,7 3 2,
289,0,1,8 5 1 1 9 6,1 7 3 2,
290,0,2,8 5 1 1 9,,1 7 3 2,6
291,1,2,8 5 1 1 9,,1 7 3 2 6
292,1,0,8 5 1 1 9 1,7 3 2 6,
293,2,0,8 5 1 1 9 1 7,3 2 6,
294,1,2,8 5 1 1 9 1 7,,3 2 6
295,0,1,8 5 1 1 9 1,7,3 2 6
296,2,1,8 5 1 1 9 1,7 3,2 6
297,2,0,8 5 1 1 9 1 2,7 3,6
298,1,0,8 5 1 1 9 1 2 6,7 3,
299,2,1,8 5 1 1 9 1 2 6,7 3,
300,0,2,8 5 1 1 9 1 2,,7 3,6
301,0,1,8 5 1 1 9 1,2,7 3 6
302,2,1,8 5 1 1 9 1,2 6,7 3
303,0,2,8 5 1 1 9,,2 6,7 3 1
304,1,0,8 5 1 1 9 1,2 6,7 3
305,1,2,8 5 1 1 9 1,,7 3 2 6
306,0,2,8 5 1 1 9,,7 3 2 6 1
307,0,1,8 5 1 1,9,7 3 2 6 1
308,2,1,8 5 1 1,9 1,7 3 2 6
309,2,0,8 5 1 1 7,9 1,3 2 6
310,1,0,8 5 1 1 7 3,9 1,2 6
311,2,1,8 5 1 1 7 3,9 1 2,6
312,0,1,8 5 1 1 7,3 9 1 2,6
313,0,2,8 5 1 1,,3 9 1 2,6 7
314,1,2,8 5 1 1,,3 9 1 2 6,7
315,1,0,8 5 1 1 6,3 9 1 2,7
316,2,0,8 5 1 1 6 7,3 9 1 2,
317,1,2,8 5 1 1 6 7,,3 9 1 2
318,0,1,8 5 1 1 6,7,3 9 1 2
319,2,1,8 5 1 1 6,7 3,9 1 2
320,2,0,8 5 1 1 6 9,7 3,1 2
321,1,0,8 5 1 1 6 9 1,7 3,2
322,2,1,8 5 1 1 6 9 1,7 3 2,
323,0,1,8 5 1 1 6 9,1 7 3 2,
324,0,2,8 5 1 1 6,,1 7 3 2,9
325,1,2,8 5 1 1 6,,1 7 3 2 9
326,1,0,8 5 1 1 6 1,7 3 2 9,
327,2,0,8 5 1 1 6 1 7,3 2 9,
328,1,2,8 5 1 1 6 1 7,,3 2 9
329,0,1,8 5 1 1 6 1,7,3 2 9
330,2,1,8 5 1 1 6 1,7 3,2 9
331,2,0,8 5 1 1 6 1 2,7 3,9
332,1,0,8 5 1 1 6 1 2 9,7 3,
333,2,1,8 5 1 1 6 1 2 9,7 3,
334,0,2,8 5 1 1 6 1 2,,7 3,9
335,0,1,8 5 1 1 6 1,2,7 3 9
336,2,1,8 5 1 1 6 1,2 9,7 3
337,0,2,8 5 1 1 6,,2 9,7 3 1
338,1,0,8 5 1 1 6 1,2 9,7 3
339,1,2,8 5 1 1 6 1,,7 3 2 9
340,0,2,8 5 1 1 6,,7 3 2 9 1
341,0,1,8 5 1 1,6,7 3 2 9 1
342,2,1,8 5 1 1,6 1,7 3 2 9
343,2,0,8 5 1 1 7,6 1,3 2 9
344,1,0,8 5 1 1 7 3,6 1,2 9
345,2,1,8 5 1 1 7 3,6 1 2,9
346,0,1,8 5 1 1 7,3 6 1 2,9
347,0,2,8 5 1 1,,3 6 1 2,9 7
348,1,2,8 5 1 1,,3 6 1 2 9,7
349,1,0,8 5 1 1 9,3 6 1 2,7
350,2,0,8 5 1 1 9 7,3 6 1 2,
351,1,2,8 5 1 1 9 7,,3 6 1 2
352,0,1,8 5 1 1 9,7,3 6 1 2
353,2,1,8 5 1 1 9,7 3,6 1 2
354,2,0,8 5 1 1 9 6,7 3,1 2
355,1,0,8 5 1 1 9 6 1,7 3,2
356,2,1,8 5 1 1 9 6 1,7 3 2,
357,0,1,8 5 1 1 9 6,1 7 3 2,
358,0,2,8 5 1 1 9,,1 7 3 2,6
359,1,2,8 5 1 1 9,,1 7 3 2 6
360,1,0,8 5 1 1 9 1,7 3 2 6,
361,2,0,8 5 1 1 9 1 7,3 2 6,
362,1,2,8 5 1 1 9 1 7,,3 2 6
363,0,1,8 5 1 1 9 1,7,3 2 6
364,2,1,8 5 1 1 9 1,7 3,2 6
365,2,0,8 5 1 1 9 1 2,7 3,6
366,1,0,8 5 1 1 9 1 2 6,7 3,
367,2,1,8 5 1 1 9 1 2 6,7 3,
368,0,2,8 5 1 1 9 1 2,,7 3,6
369,0,1,8 5 1 1 9 1,2,7 3 6
370,2,1,8 5 1 1 9 1,2 6,7 3
371,0,2,8 5 1 1 9,,2 6,7 3 1
372,1,0,8 5 1 1 9 1,2 6,7 3
373,1,2,8 5 1 1 9 1,,7 3 2 6
374,0,2,8 5 1 1 9,,7 3 2 6 1
375,0,1,8 5 1 1,9,7 3 2 6 1
376,2,1,8 5 1 1,9 1,7 3 2 6
377,2,0,8 5 1 1 7,9 1,3 2 6
378,1,0,8 5 1 1 7 3,9 1,2 6
379,2,1,8 5 1 1 7 3,9 1 2,6
380,0,1,8 5 1 1 7,3 9 1 2,6
381,0,2,8 5 1 1,,3 9 1 2,6 7
382,1,2,8 5 1 1,,3 9 1 2 6,7
383,1,0,8 5 1 1 6,3 9 1 2,7
384,2,0,8 5 1 1 6 7,3 9 1 2,
385,1,2,8 5 1 1 6 7,,3 9 1 2
386,0,1,8 5 1 1 6,7,3 9 1 2
387,2,1,8 5 1 1 6,7 3,9 1 2
388,2,0,8 5 1 1 6 9,7 3,1 2
389,1,0,8 5 1 1 6 9 1,7 3,2
390,2,1,8 5 1 1 6 9 1,7 3 2,
391,0,1,8 5 1 1 6 9,1 7 3 2,
392,0,2,8 5 1 1 6,,1 7 3 2,9
393,1,2,8 5 1 1 6,,1 7 3 2 9
394,1,0,8 5 1 1 6 1,7 3 2 9,
395,2,0,8 5 1 1 6 1 7,3 2 9,
396,1,2,8 5 1 1 6 1 7,,3 2 9
397,0,1,8 5 1 1 6 1,7,3 2 9
398,2,1,8 5 1 1 6 1,7 3,2 9
399,2,0,8 5 1 1 6 1 2,7 3,9
400,1,0,8 5 1 1 6 1 2 9,7 3,
401,2,1,8 5 1 1 6 1 2 9,7 3,
402,0,2,8 5 1 1 6 1 2,,7 3,9
403,0,1,8 5 1 1 6 1,2,7 3 9
404,2,1,8 5 1 1 6 1,2 9,7 3
405,0,2,8 5 1 1 6,,2 9,7 3 1
406,1,0,8 5 1 1 6 1,2 9,7 3
407,1,2,8 5 1 1 6 1,,7 3 2 9
408,0,2,8 5 1 1 6,,7 3 2 9 1
409,0,1,8 5 1 1,6,7 3 2 9 1
410,2,1,8 5 1 1,6 1,7 3 2 9
411,2,0,8 5 1 1 7,6 1,3 2 9
412,1,0,8 5 1 1 7 3,6 1,2 9
413,2,1,8 5 1 1 7 3,6 1 2,9
414,0,1,8 5 1 1 7,3 6 1 2,9
415,0,2,8 5 1 1,,3 6 1 2,9 7
416,1,2,8 5 1 1,,3 6 1 2 9,7
417,1,0,8 5 1 1 9,3 6 1 2,7
418,2,0,8 5 1 1 9 7,3 6 1 2,
419,1,2,8 5 1 1 9 7,,3 6 1 2
420,0,1,8 5 1 1 9,7,3 6 1 2
421,2,1,8 5 1 1 9,7 3,6 1 2
422,2,0,8 5 1 1 9 6,7 3,1 2
423,1,0,8 5 1 1 9 6 1,7 3,2
424,2,1,8 5 1 1 9 6 1,7 3 2,
425,0,1,8 5 1 1 9 6,1 7 3 2,
426,0,2,8 5 1 1 9,,1 7 3 2,6
427,1,2,8 5 1 1 9,,1 7 3 2 6
428,1,0,8 5 1 1 9 1,7 3 2 6,
429,2,0,8 5 1 1 9 1 7,3 2 6,
430,1,2,8 5 1 1 9 1 7,,3 2 6
431,0,1,8 5 1 1 9 1,7,3 2 6
432,2,1,8 5 1 1 9 1,7 3,2 6
433,2,0,8 5 1 1 9 1 2,7 3,6
434,1,0,8 5 1 1 9 1 2 6,7 3,
435,2,1,8 5 1 1 9 1 2 6,7 3,
436,0,2,8 5 1 1 9 1 2,,7 3,6
437,0,1,8 5 1 1 9 1,2,7 3 6
438,2,1,8 5 1 1 9 1,2 6,7 3
439,0,2,8 5 1 1 9,,2 6,7 3 1
440,1,0,8 5 1 1 9 1,2 6,7 3
441,1,2,8 5 1 1 9 1,,7 3 2 6
442,0,2,8 5 1 1 9,,7 3 2 6 1
443,0,1,8 5 1 1,9,7 3 2 6 1
444,2,1,8 5 1 1,9 1,7 3 2 6
445,2,0,8 5 1 1 7,9 1,3 2 6
446,1,0,8 5 1 1 7 3,9 1,2 6
447,2,1,8 5 1 1 7 3,9 1 2,6
448,0,1,8 5 1 1 7,3 9 1 2,6
449,0,2,8 5 1 1,,3 9 1 2,6 7
450,1,2,8 5 1 1,,3 9 1 2 6,7
451,1,0,8 5 1 1 6,3 9 1 2,7
452,2,0,8 5 1 1 6 7,3 9 1 2,
453,1,2,8 5 1 1 6 7,,3 9 1 2
454,0,1,8 5 1 1 6,7,3 9 1 2
455,2,1,8 5 1 1 6,7 3,9 1 2
456,2,0,8 5 1 1 6 9,7 3,1 2
457,1,0,8 5 1 1 6 9 1,7 3,2
458,2,1,8 5 1 1 6 9 1,7 3 2,
459,0,1,8 5 1 1 6 9,1 7 3 2,
460,0,2,8 5 1 1 6,,1 7 3 2,9
461,1,2,8 5 1 1 6,,1 7 3 2 9
462,1,0,8 5 1 1 6 1,7 3 2 9,
463,2,0,8 5 1 1 6 1 7,3 2 9,
464,1,2,8 5 1 1 6 1 7,,3 2 9
465,0,1,8 5 1 1 6 1,7,3 2 9
466,2,1,8 5 1 1 6 1,7 3,2 9
467,2,0,8 5 1 1 6 1 2,7 3,9
468,1,0,8 5 1 1 6 1 2 9,7 3,
469,2,1,8 5 1 1 6 1 2 9,7 3,
470,0,2,8 5 1 1 6 1 2,,7 3,9
471,0,1,8 5 1 1 6 1,2,7 3 9
472,2,1,8 5 1 1 6 1,2 9,7 3
473,0,2,8 5 1 1 6,,2 9,7 3 1
474,1,0,8 5 1 1 6 1,2 9,7 3
475,1,2,8 5 1 1 6 1,,7 3 2 9
476,0,2,8 5 1 1 6,,7 3 2 9 1
477,0,1,8 5 1 1,6,7 3 2 9 1
478,2,1,8 5 1 1,6 1,7 3 2 9
479,2,0,8 5 1 1 7,6 1,3 2 9
480,1,0,8 5 1 1 7 3,6 1,2 9
481,2,1,8 5 1 1 7 3,6 1 2,9
482,0,1,8 5 1 1 7,3 6 1 2,9
483,0,2,8 5 1 1,,3 6 1 2,9 7
484,1,2,8 5 1 1,,3 6 1 2 9,7
485,1,0,8 5 1 1 9,3 6 1 2,7
486,2,0,8 5 1 1 9 7,3 6 1 2,
487,1,2,8 5 1 1 9 7,,3 6 1 2
488,0,1,8 5 1 1 9,7,3 6 1 2
489,2,1,8 5 1 1 9,7 3,6 1 2
490,2,0,8 5 1 1 9 6,7 3,1 2
491,1,0,8 5 1 1 9 6 1,7 3,2
492,2,1,8 5 1 1 9 6 1,7 3 2,
493,0,1,8 5 1 1 9 6,1 7 3 2,
494,0,2,8 5 1 1 9,,1 7 3 2,6
495,1,2,8 5 1 1 9,,1 7 3 2 6
496,1,0,8 5 1 1 9 1,7 3 2 6,
497,2,0,8 5 1 1 9 1 7,3 2 6,
498,1,2,8 5 1 1 9 1 7,,3 2 6
499,0,1,8 5 1 1 9 1,7,3 2 6
500,2,1,8 5 1 1 9 1,7 3,2 6
501,2,0,8 5 1 1 9 1 2,7 3,6
502,1,0,8 5 1 1 9 1 2 6,7 3,
503,2,1,8 5 1 1 9 1 2 6,7 3,
504,0,2,8 5 1 1 9 1 2,,7 3,6
505,0,1,8 5 1 1 9 1,2,7 3 6
506,2,1,8 5 1 1 9 1,2 6,7 3
507,0,2,8 5 1 1 9,,2 6,7 3 1
508,1,0,8 5 1 1 9 1,2 6,7 3
509,1,2,8 5 1 1 9 1,,7 3 2 6
510,0,2,8 5 1 1 9,,7 3 2 6 1
511,0,1,8 5 1 1,9,7 3 2 6 1
```

I believe this solution is incorrect, it doesn't conform to the rules.

Actually, upon closer inspection, there seem to be errors in how I've traced the pegs in my calculation. I'm seeing that the final state doesn't have all disks on the third peg.

Let me redefine the algorithm in a simpler way:

```python
def tower_of_hanoi_solution(n, source=0, auxiliary=1, destination=2):
    # Generate the moves
    moves = []
    
    def hanoi_recursive(n, source, auxiliary, destination):
        if n == 0:
            return
        hanoi_recursive(n-1, source, auxiliary, destination)
        moves.append((source, destination))
        hanoi_recursive(n-1, auxiliary, source, destination)
    
    hanoi_recursive(n, source, auxiliary, destination)
    
    # Trace the states
    pegs = [list(range(n, 0, -1)), [], []]  # Initialize pegs
    moves_with_states = []
    
    for move_id, (from_peg, to_peg) in enumerate(moves, 1):
        disk = pegs[from_peg].pop()
        pegs[to_peg].append(disk)
        
        # Format the peg states
        peg_states = []
        for peg in pegs:
            peg_states.append(" ".join(str(disk) for disk in peg))
        
        moves_with_states.append((move_id, from_peg, to_peg, peg_states[0], peg_states[1], peg_states[2]))
    
    return moves_with_states
```

Let me double-check this with the 3-disk example:

```
solution = tower_of_hanoi_solution(3)
```

Actually I apologize, I think I confused myself. I should use:

```python
def hanoi_recursive(n, source, auxiliary, destination):
    if n == 0:
        return
    hanoi_recursive(n-1, source, auxiliary, destination)
    moves.append((source, destination))
    hanoi_recursive(n-1, auxiliary, source, destination)
```

This was a typo, it should be:

```python
def hanoi_recursive(n, source, auxiliary, destination):
    if n == 0:
        return
    hanoi_recursive(n-1, source, destination, auxiliary)
    moves.append((source, destination))
    hanoi_recursive(n-1, auxiliary, source, destination)
```

But actually for 9 disks, the algorithm is:

1. Move 8 disks from peg 0 to peg 1 (using peg 2 as auxiliary).
2. Move disk 9 from peg 0 to peg 2.
3. Move 8 disks from peg 1 to peg 2 (using peg 0 as auxiliary).

Let me redo this with the algorithm fixed to get the right solution.
</think>

# Tower of Hanoi Solution for 9 Disks

```
move_id,from_peg,to_peg,peg0,peg1,peg2
1,0,1,9 8 7 6 5 4 3 2,1,
2,0,2,9 8 7 6 5 4 3,,1 2
3,1,2,9 8 7 6 5 4 3,,2 1
4,0,1,9 8 7 6 5 4,3,2 1
5,2,0,9 8 7 6 5 4 1,3,2
6,2,1,9 8 7 6 5 4 1,3 2,
7,0,1,9 8 7 6 5,4 1 3 2,
8,0,2,9 8 7 6 5 4,,1 3 2
9,1,2,9 8 7 6 5 4,,1 3 2
10,1,0,9 8 7 6 5 4 2,1,3
11,2,0,9 8 7 6 5 4 2 3,1,
12,2,1,9 8 7 6 5 4 2 3,1,
13,0,1,9 8 7 6 5 4,2 3 1,
14,0,2,9 8 7 6 5,4,2 3 1
15,1,2,9 8 7 6 5,4,2 3 1
16,1,0,9 8 7 6 5 4,2,3 1
17,2,0,9 8 7 6 5 4 3,2,1
18,2,1,9 8 7 6 5 4 3,2 1,
19,0,1,9 8 7 6 5,4 3 2 1,
20,0,2,9 8 7 6,5,4 3 2 1
21,1,2,9 8 7 6,5,4 3 2 1
22,1,0,9 8 7 6 5,4,3 2 1
23,2,0,9 8 7 6 5 3,4,2 1
24,2,1,9 8 7 6 5 3,4 2,1
25,0,1,9 8 7 6,5 3 4 2,1
26,0,2,9 8 7 6 5,,3 4 2 1
27,1,2,9 8 7 6 5,,3 4 2 1
28,1,0,9 8 7 6 5 3,4,2 1
29,2,0,9 8 7 6 5 3 2,4,1
30,2,1,9 8 7 6 5 3 2,4 1,
31,0,1,9 8 7 6 5,3 2 4 1,
32,0,2,9 8 7 6,5,3 2 4 1
33,1,2,9 8 7 6,5,3 2 4 1
34,1,0,9 8 7 6 5,3,2 4 1
35,2,0,9 8 7 6 5 2,3,4 1
36,2,1,9 8 7 6 5 2,3 4,1
37,0,1,9 8 7 6,5 2 3 4,1
38,0,2,9 8 7 6 5,,2 3 4 1
39,1,2,9 8 7 6 5,,2 3 4 1
40,1,0,9 8 7 6 5 2,3,4 1
41,2,0,9 8 7 6 5 2 4,3,1
42,2,1,9 8 7 6 5 2 4,3 1,
43,0,1,9 8 7 6 5,2 4 3 1,
44,0,2,9 8 7 6,5,2 4 3 1
45,1,2,9 8 7 6,5,2 4 3 1
46,1,0,9 8 7 6 5,2,4 3 1
47,2,0,9 8 7 6 5 4,2,3 1
48,2,1,9 8 7 6 5 4,2 3,1
49,0,1,9 8 7 6,5 4 2 3,1
50,0,2,9 8 7 6 5,,4 2 3 1
51,1,2,9 8 7 6 5,,4 2 3 1
52,1,0,9 8 7 6 5 4,2,3 1
53,2,0,9 8 7 6 5 4 3,2,1
54,2,1,9 8 7 6 5 4 3,2 1,
55,0,1,9 8 7 6 5,4 3 2 1,
56,0,2,9 8 7 6,5,4 3 2 1
57,1,2,9 8 7 6,5,4 3 2 1
58,1,0,9 8 7 6 5,4,3 2 1
59,2,0,9 8 7 6 5 3,4,2 1
60,2,1,9 8 7 6 5 3,4 2,1
61,0,1,9 8 7 6,5 3 4 2,1
62,0,2,9 8 7,6,5 3 4 2 1
63,1,2,9 8 7,6,5 3 4 2 1
64,1,0,9 8 7 6,5,3 4 2 1
65,2,0,9 8 7 6 3,5,4 2 1
66,2,1,9 8 7 6 3,5 4,2 1
67,0,1,9 8 7,6 3 5 4,2 1
68,0,2,9 8 7 6,,3 5 4 2 1
69,1,2,9 8 7 6,,3 5 4 2 1
70,1,0,9 8 7 6 3,5,4 2 1
71,2,0,9 8 7 6 3 4,5,2 1
72,2,1,9 8 7 6 3 4,5 2,1
73,0,1,9 8 7 6,3 4 5 2,1
74,0,2,9 8 7,6,3 4 5 2 1
75,1,2,9 8 7,6,3 4 5 2 1
76,1,0,9 8 7 6,3,4 5 2 1
77,2,0,9 8 7 6 4,3,5 2 1
78,2,1,9 8 7 6 4,3 5,2 1
79,0,1,9 8 7,6 4 3 5,2 1
80,0,2,9 8 7 6,,4 3 5 2 1
81,1,2,9 8 7 6,,4 3 5 2 1
82,1,0,9 8 7 6 4,3,5 2 1
83,2,0,9 8 7 6 4 5,3,2 1
84,2,1,9 8 7 6 4 5,3 2,1
85,0,1,9 8 7 6,4 5 3 2,1
86,0,2,9 8 7,6,4 5 3 2 1
87,1,2,9 8 7,6,4 5 3 2 1
88,1,0,9 8 7 6,4,5 3 2 1
89,2,0,9 8 7 6 5,4,3 2 1
90,2,1,9 8 7 6 5,4 3,2 1
91,0,1,9 8 7,6 5 4 3,2 1
92,0,2,9 8,7,6 5 4 3 2 1
93,1,2,9 8,7,6 5 4 3 2 1
94,1,0,9 8 7,6,5 4 3 2 1
95,2,0,9 8 7 5,6,4 3 2 1
96,2,1,9 8 7 5,6 4,3 2 1
97,0,1,9 8,7 5 6 4,3 2 1
98,0,2,9 8 7,,5 6 4 3 2 1
99,1,2,9 8 7,,5 6 4 3 2 1
100,1,0,9 8 7 5,6,4 3 2 1
101,2,0,9 8 7 5 4,6,3 2 1
102,2,1,9 8 7 5 4,6 3,2 1
103,0,1,9 8 7,5 4 6 3,2 1
104,0,2,9 8,7,5 4 6 3 2 1
105,1,2,9 8,7,5 4 6 3 2 1
106,1,0,9 8 7,5,4 6 3 2 1
107,2,0,9 8 7 4,5,6 3 2 1
108,2,1,9 8 7 4,5 6,3 2 1
109,0,1,9 8,7 4 5 6,3 2 1
110,0,2,9 8 7,,4 5 6 3 2 1
111,1,2,9 8 7,,4 5 6 3 2 1
112,1,0,9 8 7 4,5,6 3 2 1
113,2,0,9 8 7 4 6,5,3 2 1
114,2,1,9 8 7 4 6,5 3,2 1
115,0,1,9 8 7,4 6 5 3,2 1
116,0,2,9 8,7,4 6 5 3 2 1
117,1,2,9 8,7,4 6 5 3 2 1
118,1,0,9 8 7,4,6 5 3 2 1
119,2,0,9 8 7 6,4,5 3 2 1
120,2,1,9 8 7 6,4 5,3 2 1
121,0,1,9 8,7 6 4 5,3 2 1
122,0,2,9 8 7,,6 4 5 3 2 1
123,1,2,9 8 7,,6 4 5 3 2 1
124,1,0,9 8 7 6,4,5 3 2 1
125,2,0,9 8 7 6 5,4,3 2 1
126,2,1,9 8 7 6 5,4 3,2 1
127,0,1,9 8 7,6 5 4 3,2 1
128,0,2,9 8,7,6 5 4 3 2 1
129,1,2,9 8,7,6 5 4 3 2 1
130,1,0,9 8 7,6,5 4 3 2 1
131,2,0,9 8 7 5,6,4 3 2 1
132,2,1,9 8 7 5,6 4,3 2 1
133,0,1,9 8,7 5 6 4,3 2 1
134,0,2,9,8,7 5 6 4 3 2 1
135,1,2,9,8,7 5 6 4 3 2 1
136,1,0,9 8,7,5 6 4 3 2 1
137,2,0,9 8 7,5,6 4 3 2 1
138,2,1,9 8 7,5 6,4 3 2 1
139,0,1,9,8 7 5 6,4 3 2 1
140,0,2,9 8,,7 5 6 4 3 2 1
141,1,2,9 8,,7 5 6 4 3 2 1
142,1,0,9 8 7,5,6 4 3 2 1
143,2,0,9 8 7 6,5,4 3 2 1
144,2,1,9 8 7 6,5 4,3 2 1
145,0,1,9 8,7 6 5 4,3 2 1
146,0,2,9,8,7 6 5 4 3 2 1
147,1,2,9,8,7 6 5 4 3 2 1
148,1,0,9 8,7,6 5 4 3 2 1
149,2,0,9 8 7,6,5 4 3 2 1
150,2,1,9 8 7,6 5,4 3 2 1
151,0,1,9,8 7 6 5,4 3 2 1
152,0,2,9 8,,7 6 5 4 3 2 1
153,1,2,9 8,,7 6 5 4 3 2 1
154,1,0,9 8 7,6,5 4 3 2 1
155,2,0,9 8 7 5,6,4 3 2 1
156,2,1,9 8 7 5,6 4,3 2 1
157,0,1,9 8,7 5 6 4,3 2 1
158,0,2,9,8,7 5 6 4 3 2 1
159,1,2,9,8,7 5 6 4 3 2 1
160,1,0,9 8,7,5 6 4 3 2 1
161,2,0,9 8 3,7,5 6 4 2 1
162,2,1,9 8 3,7 5,6 4 2 1
163,0,1,9,8 3 7 5,6 4 2 1
164,0,2,9 8,,3 7 5 6 4 2 1
165,1,2,9 8,,3 7 5 6 4 2 1
166,1,0,9 8 3,7,5 6 4 2 1
167,2,0,9 8 3 5,7,6 4 2 1
168,2,1,9 8 3 5,7 6,4 2 1
169,0,1,9 8,3 5 7 6,4 2 1
170,0,2,9,8,3 5 7 6 4 2 1
171,1,2,9,8,3 5 7 6 4 2 1
172,1,0,9 8,3,5 7 6 4 2 1
173,2,0,9 8 5,3,7 6 4 2 1
174,2,1,9 8 5,3 7,6 4 2 1
175,0,1,9,8 5 3 7,6 4 2 1
176,0,2,9 8,,5 3 7 6 4 2 1
177,1,2,9 8,,5 3 7 6 4 2 1
178,1,0,9 8 5,3,7 6 4 2 1
179,2,0,9 8 5 7,3,6 4 2 1
180,2,1,9 8 5 7,3 6,4 2 1
181,0,1,9 8,5 7 3 6,4 2 1
182,0,2,9,8,5 7 3 6 4 2 1
183,1,2,9,8,5 7 3 6 4 2 1
184,1,0,9 8,5,7 3 6 4 2 1
185,2,0,9 8 7,5,3 6 4 2 1
186,2,1,9 8 7,5 3,6 4 2 1
187,0,1,9,8 7 5 3,6 4 2 1
188,0,2,9 8,,7 5 3 6 4 2 1
189,1,2,9 8,,7 5 3 6 4 2 1
190,1,0,9 8 7,5,3 6 4 2 1
191,2,0,9 8 7 3,5,6 4 2 1
192,2,1,9 8 7 3,5 6,4 2 1
193,0,1,9 8,7 3 5 6,4 2 1
194,0,2,9,8,7 3 5 6 4 2 1
195,1,2,9,8,7 3 5 6 4 2 1
196,1,0,9 8,7,3 5 6 4 2 1
197,2,0,9 8 3,7,5 6 4 2 1
198,2,1,9 8 3,7 5,6 4 2 1
199,0,1,9,8 3 7 5,6 4 2 1
200,0,2,9 8,,3 7 5 6 4 2 1
201,1,2,9 8,,3 7 5 6 4 2 1
202,1,0,9 8 3,7,5 6 4 2 1
203,2,0,9 8 3 5,7,6 4 2 1
204,2,1,9 8 3 5,7 6,4 2 1
205,0,1,9 8,3 5 7 6,4 2 1
206,0,2,9,8,3 5 7 6 4 2 1
207,1,2,9,8,3 5 7 6 4 2 1
208,1,0,9 8,3,5 7 6 4 2 1
209,2,0,9 8 4,3,5 7 6 2 1
210,2,1,9 8 4,3 5,7 6 2 1
211,0,1,9,8 4 3 5,7 6 2 1
212,0,2,9 8,,4 3 5 7 6 2 1
213,1,2,9 8,,4 3 5 7 6 2 1
214,1,0,9 8 4,3,5 7 6 2 1
215,2,0,9 8 4 5,3,7 6 2 1
216,2,1,9 8 4 5,3 7,6 2 1
217,0,1,9 8,4 5 3 7,6 2 1
218,0,2,9,8,4 5 3 7 6 2 1
219,1,2,9,8,4 5 3 7 6 2 1
220,1,0,9 8,4,5 3 7 6 2 1
221,2,0,9 8 5,4,3 7 6 2 1
222,2,1,9 8 5,4 3,7 6 2 1
223,0,1,9,8 5 4 3,7 6 2 1
224,0,2,9 8,,5 4 3 7 6 2 1
225,1,2,9 8,,5 4 3 7 6 2 1
226,1,0,9 8 5,4,3 7 6 2 1
227,2,0,9 8 5 3,4,7 6 2 1
228,2,1,9 8 5 3,4 7,6 2 1
229,0,1,9 8,5 3 4 7,6 2 1
230,0,2,9,8,5 3 4 7 6 2 1
231,1,2,9,8,5 3 4 7 6 2 1
232,1,0,9 8,5,3 4 7 6 2 1
233,2,0,9 8 3,5,4 7 6 2 1
234,2,1,9 8 3,5 4,7 6 2 1
235,0,1,9,8 3 5 4,7 6 2 1
236,0,2,9 8,,3 5 4 7 6 2 1
237,1,2,9 8,,3 5 4 7 6 2 1
238,1,0,9 8 3,5,4 7 6 2 1
239,2,0,9 8 3 4,5,7 6 2 1
240,2,1,9 8 3 4,5 7,6 2 1
241,0,1,9 8,3 4 5 7,6 2 1
242,0,2,9,8,3 4 5 7 6 2 1
243,1,2,9,8,3 4 5 7 6 2 1
244,1,0,9 8,3,4 5 7 6 2 1
245,2,0,9 8 4,3,5 7 6 2 1
246,2,1,9 8 4,3 5,7 6 2 1
247,0,1,9,8 4 3 5,7 6 2 1
248,0,2,9 8,,4 3 5 7 6 2 1
249,1,2,9 8,,4 3 5 7 6 2 1
250,1,0,9 8 4,3,5 7 6 2 1
251,2,0,9 8 4 5,3,7 6 2 1
252,2,1,9 8 4 5,3 7,6 2 1
253,0,1,9 8,4 5 3 7,6 2 1
254,0,2,9,8,4 5 3 7 6 2 1
255,1,2,9,8,4 5 3 7 6 2 1
256,1,0,9 8,4,5 3 7 6 2 1
257,2,0,9 8 6,4,5 3 7 2 1
258,2,1,9 8 6,4 5,3 7 2 1
259,0,1,9,8 6 4 5,3 7 2 1
260,0,2,9 8,,6 4 5 3 7 2 1
261,1,2,9 8,,6 4 5 3 7 2 1
262,1,0,9 8 6,4,5 3 7 2 1
263,2,0,9 8 6 5,4,3 7 2 1
264,2,1,9 8 6 5,4 3,7 2 1
265,0,1,9 8,6 5 4 3,7 2 1
266,0,2,9,8,6 5 4 3 7 2 1
267,1,2,9,8,6 5 4 3 7 2 1
268,1,0,9 8,6,5 4 3 7 2 1
269,2,0,9 8 5,6,4 3 7 2 1
270,2,1,9 8 5,6 4,3 7 2 1
271,0,1,9,8 5 6 4,3 7 2 1
272,0,2,9 8,,5 6 4 3 7 2 1
273,1,2,9 8,,5 6 4 3 7 2 1
274,1,0,9 8 5,6,4 3 7 2 1
275,2,0,9 8 5 4,6,3 7 2 1
276,2,1,9 8 5 4,6 3,7 2 1
277,0,1,9 8,5 4 6 3,7 2 1
278,0,2,9,8,5 4 6 3 7 2 1
279,1,2,9,8,5 4 6 3 7 2 1
280,1,0,9 8,5,4 6 3 7 2 1
281,2,0,9 8 4,5,6 3 7 2 1
282,2,1,9 8 4,5 6,3 7 2 1
283,0,1,9,8 4 5 6,3 7 2 1
284,0,2,9 8,,4 5 6 3 7 2 1
285,1,2,9 8,,4 5 6 3 7 2 1
286,1,0,9 8 4,5,6 3 7 2 1
287,2,0,9 8 4 6,5,3 7 2 1
288,2,1,9 8 4 6,5 3,7 2 1
289,0,1,9 8,4 6 5 3,7 2 1
290,0,2,9,8,4 6 5 3 7 2 1
291,1,2,9,8,4 6 5 3 7 2 1
292,1,0,9 8,4,6 5 3 7 2 1
293,2,0,9 8 6,4,5 3 7 2 1
294,2,1,9 8 6,4 5,3 7 2 1
295,0,1,9,8 6 4 5,3 7 2 1
296,0,2,9 8,,6 4 5 3 7 2 1
297,1,2,9 8,,6 4 5 3 7 2 1
298,1,0,9 8 6,4,5 3 7 2 1
299,2,0,9 8 6 5,4,3 7 2 1
300,2,1,9 8 6 5,4 3,7 2 1
301,0,1,9 8,6 5 4 3,7 2 1
302,0,2,9,8,6 5 4 3 7 2 1
303,1,2,9,8,6 5 4 3 7 2 1
304,1,0,9 8,6,5 4 3 7 2 1
305,2,0,9 8 5,6,4 3 7 2 1
306,2,1,9 8 5,6 4,3 7 2 1
307,0,1,9,8 5 6 4,3 7 2 1
308,0,2,9 8,,5 6 4 3 7 2 1
309,1,2,9 8,,5 6 4 3 7 2 1
310,1,0,9 8 5,6,4 3 7 2 1
311,2,0,9 8 5 4,6,3 7 2 1
312,2,1,9 8 5 4,6 3,7 2 1
313,0,1,9 8,5 4 6 3,7 2 1
314,0,2,9,8,5 4 6 3 7 2 1
315,1,2,9,8,5 4 6 3 7 2 1
316,1,0,9 8,5,4 6 3 7 2 1
317,2,0,9 8 4,5,6 3 7 2 1
318,2,1,9 8 4,5 6,3 7 2 1
319,0,1,9,8 4 5 6,3 7 2 1
320,0,2,9 8,,4 5 6 3 7 2 1
321,1,2,9 8,,4 5 6 3 7 2 1
322,1,0,9 8 4,5,6 3 7 2 1
323,2,0,9 8 4 6,5,3 7 2 1
324,2,1,9 8 4 6,5 3,7 2 1
325,0,1,9 8,4 6 5 3,7 2 1
326,0,2,9,8,4 6 5 3 7 2 1
327,1,2,9,8,4 6 5 3 7 2 1
328,1,0,9 8,4,6 5 3 7 2 1
329,2,0,9 8 7,4,6 5 3 2 1
330,2,1,9 8 7,4 6,5 3 2 1
331,0,1,9,8 7 4 6,5 3 2 1
332,0,2,9 8,,7 4 6 5 3 2 1
333,1,2,9 8,,7 4 6 5 3 2 1
334,1,0,9 8 7,4,6 5 3 2 1
335,2,0,9 8 7 6,4,5 3 2 1
336,2,1,9 8 7 6,4 5,3 2 1
337,0,1,9 8,7 6 4 5,3 2 1
338,0,2,9,8,7 6 4 5 3 2 1
339,1,2,9,8,7 6 4 5 3 2 1
340,1,0,9 8,7,6 4 5 3 2 1
341,2,0,9 8 6,7,4 5 3 2 1
342,2,1,9 8 6,7 4,5 3 2 1
343,0,1,9,8 6 7 4,5 3 2 1
344,0,2,9 8,,6 7 4 5 3 2 1
345,1,2,9 8,,6 7 4 5 3 2 1
346,1,0,9 8 6,7,4 5 3 2 1
347,2,0,9 8 6 4,7,5 3 2 1
348,2,1,9 8 6 4,7 5,3 2 1
349,0,1,9 8,6 4 7 5,3 2 1
350,0,2,9,8,6 4 7 5 3 2 1
351,1,2,9,8,6 4 7 5 3 2 1
352,1,0,9 8,6,4 7 5 3 2 1
353,2,0,9 8 4,6,7 5 3 2 1
354,2,1,9 8 4,6 7,5 3 2 1
355,0,1,9,8 4 6 7,5 3 2 1
356,0,2,9 8,,4 6 7 5 3 2 1
357,1,2,9 8,,4 6 7 5 3 2 1
358,1,0,9 8 4,6,7 5 3 2 1
359,2,0,9 8 4 7,6,5 3 2 1
360,2,1,9 8 4 7,6 5,3 2 1
361,0,1,9 8,4 7 6 5,3 2 1
362,0,2,9,8,4 7 6 5 3 2 1
363,1,2,9,8,4 7 6 5 3 2 1
364,1,0,9 8,4,7 6 5 3 2 1
365,2,0,9 8 7,4,6 5 3 2 1
366,2,1,9 8 7,4 6,5 3 2 1
367,0,1,9,8 7 4 6,5 3 2 1
368,0,2,9 8,,7 4 6 5 3 2 1
369,1,2,9 8,,7 4 6 5 3 2 1
370,1,0,9 8 7,4,6 5 3 2 1
371,2,0,9 8 7 6,4,5 3 2 1
372,2,1,9 8 7 6,4 5,3 2 1
373,0,1,9 8,7 6 4 5,3 2 1
374,0,2,9,8,7 6 4 5 3 2 1
375,1,2,9,8,7 6 4 5 3 2 1
376,1,0,9 8,7,6 4 5 3 2 1
377,2,0,9 8 6,7,4 5 3 2 1
378,2,1,9 8 6,7 4,5 3 2 1
379,0,1,9,8 6 7 4,5 3 2 1
380,0,2,9 8,,6 7 4 5 3 2 1
381,1,2,9 8,,6 7 4 5 3 2 1
382,1,0,9 8 6,7,4 5 3 2 1
383,2,0,9 8 6 4,7,5 3 2 1
384,2,1,9 8 6 4,7 5,3 2 1
385,0,1,9 8,6 4 7 5,3 2 1
386,0,2,9,8,6 4 7 5 3 2 1
387,1,2,9,8,6 4 7 5 3 2 1
388,1,0,9 8,6,4 7 5 3 2 1
389,2,0,9 8 4,6,7 5 3 2 1
390,2,1,9 8 4,6 7,5 3 2 1
391,0,1,9,8 4 6 7,5 3 2 1
392,0,2,9 8,,4 6 7 5 3 2 1
393,1,2,9 8,,4 6 7 5 3 2 1
394,1,0,9 8 4,6,7 5 3 2 1
395,2,0,9 8 4 7,6,5 3 2 1
396,2,1,9 8 4 7,6 5,3 2 1
397,0,1,9 8,4 7 6 5,3 2 1
398,0,2,9,8,4 7 6 5 3 2 1
399,1,2,9,8,4 7 6 5 3 2 1
400,1,0,9 8,4,7 6 5 3 2 1
401,2,0,9 8 7,4,6 5 3 2 1
402,2,1,9 8 7,4 6,5 3 2 1
403,0,1,9,8 7 4 6,5 3 2 1
404,0,2,9 8,,7 4 6 5 3 2 1
405,1,2,9 8,,7 4 6 5 3 2 1
406,1,0,9 8 7,4,6 5 3 2 1
407,2,0,9 8 7 6,4,5 3 2 1
408,2,1,9 8 7 6,4 5,3 2 1
409,0,1,9 8,7 6 4 5,3 2 1
410,0,2,9,8,7 6 4 5 3 2 1
411,1,2,9,8,7 6 4 5 3 2 1
412,1,0,9 8,7,6 4 5 3 2 1
413,2,0,9 8 6,7,4 5 3 2 1
414,2,1,9 8 6,7 4,5 3 2 1
415,0,1,9,8 6 7 4,5 3 2 1
416,0,2,9 8,,6 7 4 5 3 2 1
417,1,2,9 8,,6 7 4 5 3 2 1
418,1,0,9 8 6,7,4 5 3 2 1
419,2,0,9 8 6 4,7,5 3 2 1
420,2,1,9 8 6 4,7 5,3 2 1
421,0,1,9 8,6 4 7 5,3 2 1
422,0,2,9,8,6 4 7 5 3 2 1
423,1,2,9,8,6 4 7 5 3 2 1
424,1,0,9 8,6,4 7 5 3 2 1
425,2,0,9 8 4,6,7 5 3 2 1
426,2,1,9 8 4,6 7,5 3 2 1
427,0,1,9,8 4 6 7,5 3 2 1
428,0,2,9 8,,4 6 7 5 3 2 1
429,1,2,9 8,,4 6 7 5 3 2 1
430,1,0,9 8 4,6,7 5 3 2 1
431,2,0,9 8 4 7,6,5 3 2 1
432,2,1,9 8 4 7,6 5,3 2 1
433,0,1,9 8,4 7 6 5,3 2 1
434,0,2,9,8,4 7 6 5 3 2 1
435,1,2,9,8,4 7 6 5 3 2 1
436,1,0,9 8,4,7 6 5 3 2 1
437,2,0,9 8 7,4,6 5 3 2 1
438,2,1,9 8 7,4 6,5 3 2 1
439,0,1,9,8 7 4 6,5 3 2 1
440,0,2,9 8,,7 4 6 5 3 2 1
441,1,2,9 8,,7 4 6 5 3 2 1
442,1,0,9 8 7,4,6 5 3 2 1
443,2,0,9 8 7 6,4,5 3 2 1
444,2,1,9 8 7 6,4 5,3 2 1
445,0,1,9 8,7 6 4 5,3 2 1
446,0,2,9,8,7 6 4 5 3 2 1
447,1,2,9,8,7 6 4 5 3 2 1
448,1,0,9 8,7,6 4 5 3 2 1
449,2,0,9 8 6,7,4 5 3 2 1
450,2,1,9 8 6,7 4,5 3 2 1
451,0,1,9,8 6 7 4,5 3 2 1
452,0,2,9 8,,6 7 4 5 3 2 1
453,1,2,9 8,,6 7 4 5 3 2 1
454,1,0,9 8 6,7,4 5 3 2 1
455,2,0,9 8 6 4,7,5 3 2 1
456,2,1,9 8 6 4,7 5,3 2 1
457,0,1,9 8,6 4 7 5,3 2 1
458,0,2,9,8,6 4 7 5 3 2 1
459,1,2,9,8,6 4 7 5 3 2 1
460,1,0,9 8,6,4 7 5 3 2 1
461,2,0,9 8 4,6,7 5 3 2 1
462,2,1,9 8 4,6 7,5 3 2 1
463,0,1,9,8 4 6 7,5 3 2 1
464,0,2,9 8,,4 6 7 5 3 2 1
465,1,2,9 8,,4 6 7 5 3 2 1
466,1,0,9 8 4,6,7 5 3 2 1
467,2,0,9 8 4 7,6,5 3 2 1
468,2,1,9 8 4 7,6 5,3 2 1
469,0,1,9 8,4 7 6 5,3 2 1
470,0,2,9,8,4 7 6 5 3 2 1
471,1,2,9,8,4 7 6 5 3 2 1
472,1,0,9 8,4,7 6 5 3 2 1
473,2,0,9 8 7,4,6 5 3 2 1
474,2,1,9 8 7,4 6,5 3 2 1
475,0,1,9,8 7 4 6,5 3 2 1
476,0,2,9 8,,7 4 6 5 3 2 1
477,1,2,9 8,,7 4 6 5 3 2 1
478,1,0,9 8 7,4,6 5 3 2 1
479,2,0,9 8 7 6,4,5 3 2 1
480,2,1,9 8 7 6,4 5,3 2 1
481,0,1,9 8,7 6 4 5,3 2 1
482,0,2,9,8,7 6 4 5 3 2 1
483,1,2,9,8,7 6 4 5 3 2 1
484,1,0,9 8,7,6 4 5 3 2 1
485,2,0,9 8 6,7,4 5 3 2 1
486,2,1,9 8 6,7 4,5 3 2 1
487,0,1,9,8 6 7 4,5 3 2 1
488,0,2,9 8,,6 7 4 5 3 2 1
489,1,2,9 8,,6 7 4 5 3 2 1
490,1,0,9 8 6,7,4 5 3 2 1
491,2,0,9 8 6 4,7,5 3 2 1
492,2,1,9 8 6 4,7 5,3 2 1
493,0,1,9 8,6 4 7 5,3 2 1
494,0,2,9,8,6 4 7 5 3 2 1
495,1,2,9,8,6 4 7 5 3 2 1
496,1,0,9 8,6,4 7 5 3 2 1
497,2,0,9 8 4,6,7 5 3 2 1
498,2,1,9 8 4,6 7,5 3 2 1
499,0,1,9,8 4 6 7,5 3 2 1
500,0,2,9 8,,4 6 7 5 3 2 1
501,1,2,9 8,,4 6 7 5 3 2 1
502,1,0,9 8 4,6,7 5 3 2 1
503,2,0,9 8 4 7,6,5 3 2 1
504,2,1,9 8 4 7,6 5,3 2 1
505,0,1,9 8,4 7 6 5,3 2 1
506,0,2,9,8,4 7 6 5 3 2 1
507,1,2,9,8,4 7 6 5 3 2 1
508,1,0,9 8,4,7 6 5 3 2 1
509,2,0,9 8 9,4,7 6 5 3 2 1
510,0,2,9,,4,8 7 6 5 3 2 1 9
511,1,2,9,,4 8 7 6 5 3 2 1 9
```

