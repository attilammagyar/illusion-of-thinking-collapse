# model_name='sonar-reasoning-pro', reasoning_budget=32000, tries=0, n=11, i=0
# valid_prefix_length=22, is_valid_solution=0, first_correction=-1

<think>

Okay, let's tackle this Tower of Hanoi problem with 11 disks. The user wants the complete list of moves to transfer all disks from peg 0 to peg 2, following the standard rules. Since the optimal solution requires 2^11 - 1 = 2047 moves, generating all of them manually isn't feasible, but there's a pattern to follow.

First, I remember that the Tower of Hanoi problem can be solved using a recursive approach. For n disks, the solution involves moving the top n-1 disks to the auxiliary peg, then moving the nth disk to the target peg, and finally moving the n-1 disks from the auxiliary peg to the target peg. However, since recursion isn't directly applicable here, I need to find an iterative method.

Looking at the search results, the Gray code solution is mentioned. Each move corresponds to a bit change in the Gray code sequence. The disk to move is determined by the number of times the move count can be divided by 2. For the direction, since there are 11 disks (odd), the smallest disk moves in the order peg 0 → peg 2 → peg 1 → peg 0, and so on.

So, for each move from 1 to 2047:
1. Determine which disk to move by finding the number of trailing zeros in the binary representation of the move number. The disk number is the count of trailing zeros + 1.
2. Determine the direction for the smallest disk (disk 1). Since 11 is odd, the sequence is 0 → 2 → 1 → 0...
3. For other disks, there's only one valid move that doesn't place a larger disk on a smaller one.

But generating each move step-by-step for 2047 steps is tedious. However, there's a pattern in the moves. The sequence alternates moving the smallest disk and another disk. For each move:
- If the move number is odd, move disk 1 in the prescribed direction.
- If even, move the disk corresponding to the highest power of 2 dividing the move number.

Implementing this algorithmically, but since I can't write code here, I need to outline the steps. The initial move for disk 1 is from 0 to 2. Then, the next non-disk 1 move is disk 2 from 0 to 1. Then disk 1 from 2 to 0. Then disk 3 from 0 to 2, and so on. This follows the standard optimal solution.

Each subsequent disk's movement follows a pattern based on the parity of the number of disks. Since 11 is odd, the target peg is 2, and the auxiliary is 1. The recursive approach would be:

move n-1 disks from 0 to 1 using 2 as auxiliary.
move disk 11 from 0 to 2.
move n-1 disks from 1 to 2 using 0 as auxiliary.

But translating this into the exact sequence of moves requires tracking each step. However, given the constraints, the Gray code method might be more straightforward for generating the list.

Alternatively, using the iterative approach:

1. The smallest disk moves every other move, alternating between pegs based on the parity of the number of disks.
2. For other disks, the move is determined by the state of the pegs.

But without writing a program, manually listing all 2047 moves is impossible. However, the user insists on the complete list. Since the assistant can't generate such a long list here, perhaps there's a pattern to output the moves in the required format programmatically. But given the context, the assistant must provide the correct sequence.

Wait, the user provided a sample for 3 disks. Let's see the pattern there. The moves are:

[[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2]]

For 3 disks, the sequence alternates moving the smallest disk and the next available. The order for the smallest disk is 0→2→1→0→2→1→0→2. For each even move (1st, 3rd, 5th, 7th), disk 1 moves. The direction alternates based on the total number of disks.

Since 11 is odd, the smallest disk moves in the order 0→2→1→0→2→1... So for each odd-numbered move (1,3,5,...), disk 1 moves in that cycle.

The other disks follow a pattern where each disk moves every 2^(disk number) steps. For example, disk 2 moves every 2 steps, disk 3 every 4 steps, etc.

But to generate the entire list, the assistant must follow this algorithm. However, given the token limit, it's impossible to list all 2047 moves here. But the user insists, so perhaps the assistant can provide the correct approach and then the list, even if truncated. But the note says not to truncate. This is a dilemma.

Wait, the user says: "Do not truncate or summarize the output. Output the entire move list in full, even if it is long. This is required for task success." But given the token limit, the assistant can't output all 2047 moves. However, perhaps the model's token limit is sufficient, or the user is testing for the attempt.

Alternatively, maybe the assistant can generate the list programmatically within the answer. But the answer must be in text. So, the correct approach is to provide the algorithm and then the list. But given the constraints, the assistant must output the complete list.

But how? The only way is to generate the list programmatically, but within the text. Since the assistant can't compute, perhaps it's expected to recognize that the optimal solution for 11 disks follows the standard Tower of Hanoi sequence, which can be represented as a recursive pattern, but the exact moves are too lengthy. However, the user insists, so the assistant must try.

Alternatively, perhaps the assistant can output the list in a compressed way, but the user specified that formatting doesn't matter as long as it's parsable. So, the assistant can generate the list as a continuous sequence without line breaks.

But given the token limit, even that might not be feasible. However, the model might have a context window large enough to handle 2047 moves. Let's check: each move is like [1,0,2], which is about 7 characters. For 2047 moves, that's approximately 2047*7=14,329 characters, which is manageable within a 32k token context. So, the assistant can generate the entire list.

But how? The assistant needs to compute each move. Using the Gray code method:

For each move m from 1 to 2047:
- Determine the disk to move: the number of trailing zeros in m's binary representation plus 1.
- Determine the direction for the smallest disk (disk 1). Since 11 is odd, the order is 0→2→1→0→2→1...
- For other disks, there's only one possible move that doesn't violate the rules.

Implementing this step-by-step:

Initialize the pegs as [[11,10,...,1], [], []]
For each move m from 1 to 2047:
1. Find k = number of trailing zeros in m's binary + 1. This gives the disk to move (disk k).
2. If k is 1 (smallest disk):
   - Determine the direction based on the move count. Since 11 is odd, the sequence is 0→2→1→0→2→1...
   - The direction alternates every move. For move 1: 0→2, move 3: 2→1, move 5:1→0, move7:0→2, etc.
3. For other disks (k > 1):
   - The disk can only move to the peg that is not the source or the peg where the previous non-1 disk was moved. Alternatively, the allowed peg is determined by the parity of the disk's movement.

But this is complex. Alternatively, using the standard recursive approach, the moves can be generated by simulating the recursive steps.

The standard algorithm for Tower of Hanoi is:

def hanoi(n, source, target, auxiliary):
    if n == 1:
        print(f"Move disk 1 from {source} to {target}")
    else:
        hanoi(n-1, source, auxiliary, target)
        print(f"Move disk {n} from {source} to {target}")
        hanoi(n-1, auxiliary, target, source)

For n=11, this would generate the correct sequence. Translating this into the list of moves, the order would be:

Move the top 10 disks from peg 0 to peg 1 using peg 2 as auxiliary.
Move disk 11 from peg 0 to peg 2.
Move the top 10 disks from peg 1 to peg 2 using peg 0 as auxiliary.

Each of these steps involves recursively moving smaller disks. The exact sequence of moves follows this pattern, but enumerating all 2047 moves requires following the recursion.

However, the assistant can't execute code here, so it must rely on the known pattern. Given that the user provided a sample for 3 disks, which follows this recursive approach, the assistant can extrapolate that the sequence for 11 disks follows the same pattern but with many more steps.

Since the user insists on the complete list and the assistant's task is to provide it, the assistant must generate the list. However, doing so manually is impractical. Therefore, the assistant must output the list programmatically within the answer, but given the constraints, perhaps the assistant can generate the list using a formula.

Alternatively, the assistant can acknowledge that the list is too long but provide the first few and last few moves, but the user explicitly said not to truncate. Therefore, the correct approach is to provide the complete list as per the recursive solution.

But how? The assistant must generate all 2047 moves. Given that the model's context window is sufficient, the assistant can proceed.

The moves for 11 disks would start with moving disk 1 from 0 to 2, then disk 2 from 0 to 1, disk 1 from 2 to 1, disk 3 from 0 to 2, and so on, following the recursive pattern. Each time, the smallest disk alternates between pegs 0, 2, and 1 (since 11 is odd), and larger disks move when possible.

The exact sequence is lengthy, but following the standard Tower of Hanoi solution, the moves can be generated. However, without actual code, it's impossible to list all 2047 moves here. But the assistant must comply, so perhaps it's expected to output the list in the required format, even if it's long.

Given that, the assistant will proceed to generate the list of moves following the recursive approach, ensuring that each move is correctly ordered. The list will start with the moves for the smallest disks and progressively include larger disks, following the pattern observed in the 3-disk example.

</think>



moves=[[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[5,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,0,2],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[6,0,1],[1,2,1],[2,2,0],[1,0,2],[3,2,1],[1,1,0],[2,1,2],[1,0,2],[4,2,0],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[5,2,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,0,2],[3,2,1],[1,1,0],[2,1,2],[1,0,2],[7,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,0,2],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[5,1,0],[1,2,1],[2,2,0],[1,0,2],[3,2,1],[1,1,0],[2,1,2],[1,0,2],[4,2,0],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[6,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,0,2],[3,2,1],[1,1,0],[2,1,2],[1,0,2],[5,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,0,2],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[8,0,1],[1,2,1],[2,2,0],[1,0,2],[3,2,1],[1,1,0],[2,1,2],[1,0,2],[4,2,0],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[5,2,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,0,2],[3,2,1],[1,1,0],[2,1,2],[1,0,2],[6,2,0],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,0,2],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[5,1,0],[1,2,1],[2,2,0],[1,0,2],[3,2,1],[1,1,0],[2,1,2],[1,0,2],[4,2,0],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[7,2,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,0,2],[3,2,1],[1,1,0],[2,1,2],[1,0,2],[5,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,0,2],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[6,0,1],[1,2,1],[2,2,0],[1,0,2],[3,2,1],[1,1,0],[2,1,2],[1,0,2],[4,2,0],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[5,2,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,0,2],[3,2,1],[1,1,0],[2,1,2],[1,0,2],[9,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,0,2],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[5,1,0],[1,2,1],[2,2,0],[1,0,2],[3,2,1],[1,1,0],[2,1,2],[1,0,2],[4,2,0],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[6,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,0,2],[3,2,1],[1,1,0],[2,1,2],[1,0,2],[5,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,0,2],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[7,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,0,2],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[5,1,0],[1,2,1],[2,2,0],[1,0,2],[3,2,1],[1,1,0],[2,1,2],[1,0,2],[4,2,0],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[6,2,0],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,0,2],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[5,1,0],[1,2,1],[2,2,0],[1,0,2],[3,2,1],[1,1,0],[2,1,2],[1,0,2],[4,2,0],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[8,2,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,0,2],[3,2,1],[1,1,0],[2,1,2],[1,0,2],[5,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,0,2],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[6,0,1],[1,2,1],[2,2,0],[1,0,2],[3,2,1],[1,1,0],[2,1,2],[1,0,2],[4,2,0],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[5,2,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,0,2],[3,2,1],[1,1,0],[2,1,2],[1,0,2],[7,2,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,0,2],[3,2,1],[1,1,0],[2,1,2],[1,0,2],[5,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,0,2],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[6,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,0,2],[3,2,1],[1,1,0],[2,1,2],[1,0,2],[5,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,0,2],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[10,0,1],[1,2,1],[2,2,0],[1,0,2],[3,2,1],[1,1,0],[2,1,2],[1,0,2],[4,2,0],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[5,2,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,0,2],[3,2,1],[1,1,0],[2,1,2],[1,0,2],[6,2,0],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,0,2],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[5,1,0],[1,2,1],[2,2,0],[1,0,2],[3,2,1],[1,1,0],[2,1,2],[1,0,2],[4,2,0],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[7,2,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,0,2],[3,2,1],[1,1,0],[2,1,2],[1,0,2],[5,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,0,2],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[6,0,1],[1,2,1],[2,2,0],[1,0,2],[3,2,1],[1,1,0],[2,1,2],[1,0,2],[4,2,0],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[5,2,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,0,2],[3,2,1],[1,1,0],[2,1,2],[1,0,2],[8,2,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,0,2],[3,2,1],[1,1,0],[2,1,2],[1,0,2],[5,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,0,2],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[6,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,0,2],[3,2,1],[1,1,0],[2,1,2],[1,0,2],[5,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,0,2],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[7,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,0,2],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[5,1,0],[1,2,1],[2,2,0],[1,0,2],[3,2,1],[1,1,0],[2,1,2],[1,0,2],[4,2,0],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[6,2,0],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,0,2],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[5,1,0],[1,2,1],[2,2,0],[1,0,2],[3,2,1],[1,1,0],[2,1,2],[1,0,2],[4,2,0],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[9,2,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,0,2],[3,2,1],[1,1,0],[2,1,2],[1,0,2],[5,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,0,2],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[6,0,1],[1,2,1],[2,2,0],[1,0,2],[3,2,1],[1,1,0],[2,1,2],[1,0,2],[4,2,0],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[5,2,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,0,2],[3,2,1],[1,1,0],[2,1,2],[1,0,2],[7,2,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,0,2],[3,2,1],[1,1,0],[2,1,2],[1,0,2],[5,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,0,2],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[6,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,0,2],[3,2,1],[1,1,0],[2,1,2],[1,0,2],[5,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,0,2],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[7,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,0,2],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[5,1,0],[1,2,1],[2,2,0],[1,0,2],[3,2,1],[1,1,0],[2,1,2],[1,0,2],[4,2,0],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[6,2,0],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,0,2],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[5,1,0],[1,2,1],[2,2,0],[1,0,2],[3,2,1],[1,1,0],[2,1,2],[1,0,2],[4,2,0],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[11,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,0,2],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[5,1,0],[1,2,1],[2,2,0],[1,0,2],[3,2,1],[1,1,0],[2,1,2],[1,0,2],[4,2,0],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[6,2,0],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,0,2],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[5,1,0],[1,2,1],[2,2,0],[1,0,2],[3,2,1],[1,1,0],[2,1,2],[1,0,2],[4,2,0],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[7,2,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,0,2],[3,2,1],[1,1,0],[2,1,2],[1,0,2],[5,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,0,2],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[6,0,1],[1,2,1],[2,2,0],[1,0,2],[3,2,1],[1,1,0],[2,1,2],[1,0,2],[4,2,0],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[5,2,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,0,2],[3,2,1],[1,1,0],[2,1,2],[1,0,2],[8,2,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,0,2],[3,2,1],[1,1,0],[2,1,2],[1,0,2],[5,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,0,2],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[6,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,0,2],[3,2,1],[1,1,0],[2,1,2],[1,0,2],[5,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,0,2],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[7,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,0,2],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[5,1,0],[1,2,1],[2,2,0],[1,0,2],[3,2,1],[1,1,0],[2,1,2],[1,0,2],[4,2,0],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[6,2,0],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,0,2],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[5,1,0],[1,2,1],[2,2,0],[1,0,2],[3,2,1],[1,1,0],[2,1,2],[1,0,2],[4,2,0],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[10,2,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,0,2],[3,2,1],[1,1,0],[2,1,2],[1,0,2],[5,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,0,2],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[6,0,1],[1,2,1],[2,2,0],[1,0,2],[3,2,1],[1,1,0],[2,1,2],[1,0,2],[4,2,0],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[5,2,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,0,2],[3,2,1],[1,1,0],[2,1,2],[1,0,2],[7,2,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,0,2],[3,2,1],[1,1,0],[2,1,2],[1,0,2],[5,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,0,2],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[6,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,0,2],[3,2,1],[1,1,0],[2,1,2],[1,0,2],[5,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,0,2],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[7,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,0,2],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[5,1,0],[1,2,1],[2,2,0],[1,0,2],[3,2,1],[1,1,0],[2,1,2],[1,0,2],[4,2,0],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[6,2,0],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,0,2],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[5,1,0],[1,2,1],[2,2,0],[1,0,2],[3,2,1],[1,1,0],[2,1,2],[1,0,2],[4,2,0],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[8,2,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,0,2],[3,2,1],[1,1,0],[2,1,2],[1,0,2],[5,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,0,2],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[6,0,1],[1,2,1],[2,2,0],[1,0,2],[3,2,1],[1,1,0],[2,1,2],[1,0,2],[4,2,0],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[5,2,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,0,2],[3,2,1],[1,1,0],[2,1,2],[1,0,2],[7,2,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,0,2],[3,2,1],[1,1,0],[2,1,2],[1,0,2],[5,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,0,2],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[6,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,0,2],[3,2,1],[1,1,0],[2,1,2],[1,0,2],[5,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,0,2],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[7,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,0,2],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[5,1,0],[1,2,1],[2,2,0],[1,0,2],[3,2,1],[1,1,0],[2,1,2],[1,0,2],[4,2,0],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[6,2,0],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,0,2],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[5,1,0],[1,2,1],[2,2,0],[1,0,2],[3,2,1],[1,1,0],[2,1,2],[1,0,2],[4,2,0],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2]]

