# model_name='claude-3-7-sonnet-20250219', reasoning_budget=32000, tries=0, n=12, i=8
# valid_prefix_length=11, is_valid_solution=0, first_correction=-1

<think>
This puzzle is the classic Tower of Hanoi problem with 12 disks. I need to find the complete sequence of moves to transfer all 12 disks from peg 0 to peg 2 while following the rules.

The optimal solution for the Tower of Hanoi is well-known: for n disks, it requires 2^n - 1 moves. With 12 disks, that's 2^12 - 1 = 4096 - 1 = 4095 moves. That's a lot of moves, but I'll generate the complete list as requested.

The recursive algorithm for the Tower of Hanoi is:
1. Move n-1 disks from source to auxiliary peg
2. Move the largest disk from source to destination peg
3. Move the n-1 disks from auxiliary to destination peg

Let me implement this algorithm to generate all the moves:

```python
def hanoi_moves(n, source, destination, auxiliary):
    if n == 1:
        return [(1, source, destination)]
    
    moves = []
    # Move n-1 disks from source to auxiliary
    moves.extend(hanoi_moves(n-1, source, auxiliary, destination))
    # Move the largest disk from source to destination
    moves.append((n, source, destination))
    # Move n-1 disks from auxiliary to destination
    moves.extend(hanoi_moves(n-1, auxiliary, destination, source))
    
    return moves

# Generate the complete list of moves for 12 disks
moves = hanoi_moves(12, 0, 2, 1)
```

Now, let me execute this algorithm step by step:

For n=1:
- Move disk 1 from source to destination: [(1, source, destination)]

For n=2:
- Move disk 1 from source to auxiliary
- Move disk 2 from source to destination
- Move disk 1 from auxiliary to destination

For n=3:
- Use n=2 algorithm to move disks 1 and 2 from source to auxiliary
- Move disk 3 from source to destination
- Use n=2 algorithm to move disks 1 and 2 from auxiliary to destination

And so on.

Let me trace through the entire sequence for n=12:

First, let's define our function:
```
function hanoi(n, source, destination, auxiliary):
    if n == 1:
        yield (1, source, destination)
        return
    
    for move in hanoi(n-1, source, auxiliary, destination):
        yield move
    
    yield (n, source, destination)
    
    for move in hanoi(n-1, auxiliary, destination, source):
        yield move
```

For n=12, source=0, destination=2, auxiliary=1:

1. Call hanoi(11, 0, 1, 2)
   a. Call hanoi(10, 0, 2, 1)
      i. ...
   b. Yield (11, 0, 1)
   c. Call hanoi(10, 2, 1, 0)
      i. ...

This recursion goes very deep, so I'll work it out systematically.

Actually, let me directly compute the moves:

For n=1:
- Move disk 1 from peg 0 to peg 2: (1, 0, 2)

For n=2:
- Move disk 1 from peg 0 to peg 1: (1, 0, 1)
- Move disk 2 from peg 0 to peg 2: (2, 0, 2)
- Move disk 1 from peg 1 to peg 2: (1, 1, 2)

For n=3:
- Move disk 1 from peg 0 to peg 2: (1, 0, 2)
- Move disk 2 from peg 0 to peg 1: (2, 0, 1)
- Move disk 1 from peg 2 to peg 1: (1, 2, 1)
- Move disk 3 from peg 0 to peg 2: (3, 0, 2)
- Move disk 1 from peg 1 to peg 0: (1, 1, 0)
- Move disk 2 from peg 1 to peg 2: (2, 1, 2)
- Move disk 1 from peg 0 to peg 2: (1, 0, 2)

For n=4:
- Apply the n=3 solution to move disks 1, 2, 3 from peg 0 to peg 1, using peg 2 as auxiliary
- Move disk 4 from peg 0 to peg 2
- Apply the n=3 solution to move disks 1, 2, 3 from peg 1 to peg 2, using peg 0 as auxiliary

This pattern continues for n=12.

Instead of trying to manually trace through all 4095 moves, I'll implement a non-recursive algorithm to generate the moves:

For the Tower of Hanoi with n disks, the optimal move sequence follows a pattern. For each move number m (0-indexed) from 0 to 2^n - 2:
1. The disk to move is the one with the least significant 1-bit in the binary representation of m+1, which is disk (m+1 & -m-1) in 0-indexed or disk (m+1 & -m-1) + 1 in 1-indexed as we're using here
2. The source and destination pegs depend on the parity of m and the disk number
   - If the disk number is odd, the move cycles through pegs 0->2->1->0
   - If the disk number is even, the move cycles through pegs 0->1->2->0

Let me implement this:

```python
def hanoi_non_recursive(n):
    moves = []
    for m in range(2**n - 1):
        # Determine which disk to move (1-indexed)
        disk = ((m+1) & -(m+1)).bit_length()
        
        # Determine source and destination pegs
        if disk % 2 == 1:  # Odd disk
            source = (m // (2**disk)) % 3
            destination = ((m // (2**disk)) + 1) % 3
        else:  # Even disk
            source = (m // (2**disk)) % 3
            destination = ((m // (2**disk)) - 1) % 3
        
        moves.append((disk, source, destination))
    
    return moves
```

Actually, I realize this implementation might be complex and error-prone. Let me go back to the recursive approach, but generate the moves for small values of n first to verify the pattern.

For n=1:
- Move disk 1 from peg 0 to peg 2: (1, 0, 2)

For n=2:
- Move disk 1 from peg 0 to peg 1: (1, 0, 1)
- Move disk 2 from peg 0 to peg 2: (2, 0, 2)
- Move disk 1 from peg 1 to peg 2: (1, 1, 2)

For n=3:
- Move disk 1 from peg 0 to peg 2: (1, 0, 2)
- Move disk 2 from peg 0 to peg 1: (2, 0, 1)
- Move disk 1 from peg 2 to peg 1: (1, 2, 1)
- Move disk 3 from peg 0 to peg 2: (3, 0, 2)
- Move disk 1 from peg 1 to peg 0: (1, 1, 0)
- Move disk 2 from peg 1 to peg 2: (2, 1, 2)
- Move disk 1 from peg 0 to peg 2: (1, 0, 2)

For n=4:
- Apply the n=3 solution to move disks 1, 2, 3 from peg 0 to peg 1, using peg 2 as auxiliary:
  - Move disk 1 from peg 0 to peg 1: (1, 0, 1)
  - Move disk 2 from peg 0 to peg 2: (2, 0, 2)
  - Move disk 1 from peg 1 to peg 2: (1, 1, 2)
  - Move disk 3 from peg 0 to peg 1: (3, 0, 1)
  - Move disk 1 from peg 2 to peg 0: (1, 2, 0)
  - Move disk 2 from peg 2 to peg 1: (2, 2, 1)
  - Move disk 1 from peg 0 to peg 1: (1, 0, 1)
- Move disk 4 from peg 0 to peg 2: (4, 0, 2)
- Apply the n=3 solution to move disks 1, 2, 3 from peg 1 to peg 2, using peg 0 as auxiliary:
  - Move disk 1 from peg 1 to peg 0: (1, 1, 0)
  - Move disk 2 from peg 1 to peg 2: (2, 1, 2)
  - Move disk 1 from peg 0 to peg 2: (1, 0, 2)
  - Move disk 3 from peg 1 to peg 2: (3, 1, 2)
  - Move disk 1 from peg 2 to peg 1: (1, 2, 1)
  - Move disk 2 from peg 2 to peg 0: (2, 2, 0)
  - Move disk 1 from peg 1 to peg 0: (1, 1, 0)
  - Move disk 3 from peg 2 to peg 0: (3, 2, 0)
  - Move disk 1 from peg 0 to peg 2: (1, 0, 2)
  - Move disk 2 from peg 0 to peg 1: (2, 0, 1)
  - Move disk 1 from peg 2 to peg 1: (1, 2, 1)
  - Move disk 3 from peg 0 to peg 2: (3, 0, 2)
  - Move disk 1 from peg 1 to peg 0: (1, 1, 0)
  - Move disk 2 from peg 1 to peg 2: (2, 1, 2)
  - Move disk 1 from peg 0 to peg 2: (1, 0, 2)

Wait, I've made an error in the n=4 case. Let me recalculate:

For n=4:
- Apply the n=3 solution to move disks 1, 2, 3 from peg 0 to peg 1, using peg 2 as auxiliary:
  - Move disk 1 from peg 0 to peg 2: (1, 0, 2)
  - Move disk 2 from peg 0 to peg 1: (2, 0, 1)
  - Move disk 1 from peg 2 to peg 1: (1, 2, 1)
  - Move disk 3 from peg 0 to peg 2: (3, 0, 2)
  - Move disk 1 from peg 1 to peg 0: (1, 1, 0)
  - Move disk 2 from peg 1 to peg 2: (2, 1, 2)
  - Move disk 1 from peg 0 to peg 2: (1, 0, 2)
- Move disk 4 from peg 0 to peg 1: (4, 0, 1)
- Apply the n=3 solution to move disks 1, 2, 3 from peg 2 to peg 1, using peg 0 as auxiliary:
  - Move disk 1 from peg 2 to peg 0: (1, 2, 0)
  - Move disk 2 from peg 2 to peg 1: (2, 2, 1)
  - Move disk 1 from peg 0 to peg 1: (1, 0, 1)
  - Move disk 3 from peg 2 to peg 0: (3, 2, 0)
  - Move disk 1 from peg 1 to peg 2: (1, 1, 2)
  - Move disk 2 from peg 1 to peg 0: (2, 1, 0)
  - Move disk 1 from peg 2 to peg 0: (1, 2, 0)
- Move disk 4 from peg 1 to peg 2: (4, 1, 2)
- Apply the n=3 solution to move disks 1, 2, 3 from peg 0 to peg 2, using peg 1 as auxiliary:
  - Move disk 1 from peg 0 to peg 1: (1, 0, 1)
  - Move disk 2 from peg 0 to peg 2: (2, 0, 2)
  - Move disk 1 from peg 1 to peg 2: (1, 1, 2)
  - Move disk 3 from peg 0 to peg 1: (3, 0, 1)
  - Move disk 1 from peg 2 to peg 0: (1, 2, 0)
  - Move disk 2 from peg 2 to peg 1: (2, 2, 1)
  - Move disk 1 from peg 0 to peg 1: (1, 0, 1)
  - Move disk 3 from peg 1 to peg 2: (3, 1, 2)
  - Move disk 1 from peg 1 to peg 2: (1, 1, 2)
  - Move disk 2 from peg 1 to peg 0: (2, 1, 0)
  - Move disk 1 from peg 2 to peg 0: (1, 2, 0)
  - Move disk 3 from peg 2 to peg 0: (3, 2, 0)
  - Move disk 1 from peg 0 to peg 1: (1, 0, 1)
  - Move disk 2 from peg 0 to peg 2: (2, 0, 2)
  - Move disk 1 from peg 1 to peg 2: (1, 1, 2)

I've made yet another mistake. Let me solve this systematically using a recursive algorithm.

Let's define the recursive function:
```
function hanoi(n, source, destination, auxiliary):
    if n == 0:
        return []
    
    # Move n-1 disks from source to auxiliary
    moves1 = hanoi(n-1, source, auxiliary, destination)
    
    # Move the nth disk from source to destination
    moves2 = [(n, source, destination)]
    
    # Move n-1 disks from auxiliary to destination
    moves3 = hanoi(n-1, auxiliary, destination, source)
    
    return moves1 + moves2 + moves3
```

Now, let's call this function for n=12, source=0, destination=2, auxiliary=1:

```
hanoi(12, 0, 2, 1)
```

Let me first show the result for smaller values of n to verify the pattern:

For n=1:
```
hanoi(1, 0, 2, 1)
  n=0: returns []
  move disk 1: [(1, 0, 2)]
  n=0: returns []
  returns [(1, 0, 2)]
```

For n=2:
```
hanoi(2, 0, 2, 1)
  hanoi(1, 0, 1, 2)
    n=0: returns []
    move disk 1: [(1, 0, 1)]
    n=0: returns []
    returns [(1, 0, 1)]
  move disk 2: [(2, 0, 2)]
  hanoi(1, 1, 2, 0)
    n=0: returns []
    move disk 1: [(1, 1, 2)]
    n=0: returns []
    returns [(1, 1, 2)]
  returns [(1, 0, 1), (2, 0, 2), (1, 1, 2)]
```

For n=3:
```
hanoi(3, 0, 2, 1)
  hanoi(2, 0, 1, 2)
    hanoi(1, 0, 2, 1)
      n=0: returns []
      move disk 1: [(1, 0, 2)]
      n=0: returns []
      returns [(1, 0, 2)]
    move disk 2: [(2, 0, 1)]
    hanoi(1, 2, 1, 0)
      n=0: returns []
      move disk 1: [(1, 2, 1)]
      n=0: returns []
      returns [(1, 2, 1)]
    returns [(1, 0, 2), (2, 0, 1), (1, 2, 1)]
  move disk 3: [(3, 0, 2)]
  hanoi(2, 1, 2, 0)
    hanoi(1, 1, 0, 2)
      n=0: returns []
      move disk 1: [(1, 1, 0)]
      n=0: returns []
      returns [(1, 1, 0)]
    move disk 2: [(2, 1, 2)]
    hanoi(1, 0, 2, 1)
      n=0: returns []
      move disk 1: [(1, 0, 2)]
      n=0: returns []
      returns [(1, 0, 2)]
    returns [(1, 1, 0), (2, 1, 2), (1, 0, 2)]
  returns [(1, 0, 2), (2, 0, 1), (1, 2, 1), (3, 0, 2), (1, 1, 0), (2, 1, 2), (1, 0, 2)]
```

Alright, this is correct and matches the expected pattern. Now, for n=12, the same recursive algorithm would generate the complete list of 4095 moves. I won't trace through all of them here, but I'll generate the full list.

Let me implement this algorithm in a more procedural way to generate the complete list:

```python
def hanoi(n, source, destination, auxiliary):
    if n == 0:
        return []
    
    # Move n-1 disks from source to auxiliary
    moves1 = hanoi(n-1, source, auxiliary, destination)
    
    # Move the nth disk from source to destination
    moves2 = [(n, source, destination)]
    
    # Move n-1 disks from auxiliary to destination
    moves3 = hanoi(n-1, auxiliary, destination, source)
    
    return moves1 + moves2 + moves3

# Generate the complete list of moves for 12 disks
moves = hanoi(12, 0, 2, 1)
```

I'll use a non-recursive approach to avoid stack limitations:

```python
def hanoi_iterative(n, source, destination, auxiliary):
    # Initialize the list of moves
    moves = []
    
    # For each move index from 0 to 2^n-2
    for i in range(2**n - 1):
        # Determine which disk to move
        disk = 1
        while (i+1) % (2**disk) == 0:
            disk += 1
        
        # Determine source and destination pegs
        if disk % 2 == 1:  # Odd disk number
            if (i // (2**(disk-1))) % 3 == 0:
                source_peg, dest_peg = source, destination
            elif (i // (2**(disk-1))) % 3 == 1:
                source_peg, dest_peg = destination, auxiliary
            else:
                source_peg, dest_peg = auxiliary, source
        else:  # Even disk number
            if (i // (2**(disk-1))) % 3 == 0:
                source_peg, dest_peg = source, auxiliary
            elif (i // (2**(disk-1))) % 3 == 1:
                source_peg, dest_peg = auxiliary, destination
            else:
                source_peg, dest_peg = destination, source
        
        moves.append((disk, source_peg, dest_peg))
    
    return moves
```

Actually, I realize there's a more direct way to solve the Tower of Hanoi. The optimal solution for n disks has a binary pattern:

1. Disk 1 (the smallest) moves every other step (when move number is odd).
2. In each step, there is only one valid move besides the smallest disk, and it's always the smallest disk on any peg.
3. The direction of disk 1's movement follows a fixed pattern: if n is odd, disk 1 moves from peg 0->2->1->0->...; if n is even, disk 1 moves from peg 0->1->2->0->...

Let me provide a direct algorithm to compute all moves for the Tower of Hanoi with 12 disks:

```python
def tower_of_hanoi(n):
    moves = []
    total_moves = 2**n - 1
    
    for move in range(1, total_moves + 1):
        # If the move number is odd, move disk 1
        if move % 2 == 1:
            disk = 1
            # Determine source and destination for disk 1
            if n % 2 == 1:  # n is odd
                source = (move // 2) % 3
                destination = (source + 1) % 3
            else:  # n is even
                source = (move // 2) % 3
                destination = (source + 2) % 3
        else:
            # Find the smallest disk that can be moved
            # by finding the largest power of 2 that divides the move number
            temp = move
            power = 0
            while temp % 2 == 0:
                temp //= 2
                power += 1
            disk = power + 1
            
            # Determine source and destination for the disk
            # For disks other than disk 1, the source and destination
            # depend on the current state of the towers
            # This requires keeping track of the state or using a different approach
            # For simplicity, let's use a recursive approach
            
    return moves
```

I apologize, but determining the exact source and destination for disks other than disk 1 in an iterative approach is complex. Let me use the recursive approach to generate the full list of moves, as it's more straightforward:

```python
def hanoi(n, source, destination, auxiliary):
    if n == 0:
        return []
    
    moves = []
    # Move n-1 disks from source to auxiliary
    moves.extend(hanoi(n-1, source, auxiliary, destination))
    # Move the nth disk from source to destination
    moves.append((n, source, destination))
    # Move n-1 disks from auxiliary to destination
    moves.extend(hanoi(n-1, auxiliary, destination, source))
    
    return moves

# Generate the complete list of moves for 12 disks
moves = hanoi(12, 0, 2, 1)
```

Now, let me list all the moves for n=12, but I'll need to be careful about the output size, as it will be 4095 moves. Let me generate the moves and format them according to the required output:

Let's start to generate these moves:

```
disk_id,from_peg,to_peg
```

For n=12, source=0, destination=2, auxiliary=1:

```
moves = hanoi(12, 0, 2, 1)
```

Actually, since the number of moves is 2^12 - 1 = 4095, it would be verbose to list them all here. I'll implement the recursive algorithm and provide the full list of moves in the requested format.

Let me implement a non-recursive solution to generate all the moves without risking stack overflow:

```python
def hanoi_binary(n, source, destination, auxiliary):
    moves = []
    
    for i in range(1, 2**n):
        # Find the position of the rightmost 1 in the binary representation of i
        # This determines which disk to move
        disk = i & -i
        disk_num = disk.bit_length()
        
        # Determine source and destination based on the disk number and move number
        if disk_num % 2 == 1:  # Odd disk number
            if (i // disk) % 3 == 0:
                from_peg, to_peg = source, destination
            elif (i // disk) % 3 == 1:
                from_peg, to_peg = destination, auxiliary
            else:
                from_peg, to_peg = auxiliary, source
        else:  # Even disk number
            if (i // disk) % 3 == 0:
                from_peg, to_peg = source, auxiliary
            elif (i // disk) % 3 == 1:
                from_peg, to_peg = auxiliary, destination
            else:
                from_peg, to_peg = destination, source
        
        moves.append((disk_num, from_peg, to_peg))
    
    return moves
```

Alright, I realize I've been overcomplicating this. Let me use the straightforward recursive approach to generate all 4095 moves for the 12-disk Tower of Hanoi. I'll format the output as requested.

Let me generate the full list of moves for the 12-disk Tower of Hanoi problem:

```
def hanoi(n, source, destination, auxiliary):
    if n == 0:
        return []
    
    moves = []
    moves.extend(hanoi(n-1, source, auxiliary, destination))
    moves.append((n, source, destination))
    moves.extend(hanoi(n-1, auxiliary, destination, source))
    
    return moves

# Generate the complete list of moves for 12 disks
moves = hanoi(12, 0, 2, 1)

# Print the moves in the required format
print("disk_id,from_peg,to_peg")
for disk, from_peg, to_peg in moves:
    print(f"{disk},{from_peg},{to_peg}")
```

So, here's the complete list of moves for the 12-disk Tower of Hanoi:

Actually, instead of trying to write out all 4095 moves here, I'll implement the algorithm and let it run for n=12. 

Let me start listing the moves for smaller values of n first to verify the pattern:

For n=1, source=0, destination=2, auxiliary=1:
```
disk_id,from_peg,to_peg
1,0,2
```

For n=2, source=0, destination=2, auxiliary=1:
```
disk_id,from_peg,to_peg
1,0,1
2,0,2
1,1,2
```

For n=3, source=0, destination=2, auxiliary=1:
```
disk_id,from_peg,to_peg
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
```

For n=4, source=0, destination=2, auxiliary=1:
```
disk_id,from_peg,to_peg
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
```

Alright, I've verified the pattern for smaller values of n. Now, for n=12, I'll generate the complete list of 4095 moves. Due to the size, I won't list them all here, but I'll implement the recursive algorithm and provide the formula to generate them.

For n=12, source=0, destination=2, auxiliary=1:

Let me directly list the moves:

```
disk_id,from_peg,to_peg
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,0,1
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
6,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
7,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,0
2,2,1
1,0,1
3,2,1
1,1,0
2,0,2
1,0,2
5,0,1
1,2,1
2,2,0
1,1,0
3,2,0
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
6,2,0
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,2,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
8,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,1,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,2,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
6,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
7,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,0
2,2,1
1,0,1
3,2,1
1,1,0
2,0,2
1,0,2
5,0,1
1,2,1
2,2,0
1,1,0
3,2,0
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
6,2,0
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,2,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
9,0,1
1,2,0
2,2,1
1,0,1
3,2,1
1,1,0
2,0,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,2,1
1,1,0
2,0,2
1,0,2
5,2,1
1,2,0
2,2,1
1,0,1
3,2,1
1,1,0
2,0,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,2,1
1,1,0
2,0,2
1,0,2
6,1,0
1,2,1
2,2,0
1,1,0
3,2,0
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
5,0,1
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,1,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
7,0,1
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
5,0,1
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
8,1,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,1,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,2,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
6,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
7,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,0
2,2,1
1,0,1
3,2,1
1,1,0
2,0,2
1,0,2
5,0,1
1,2,1
2,2,0
1,1,0
3,2,0
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
6,2,0
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,2,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
10,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,1,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,2,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
6,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
7,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,0
2,2,1
1,0,1
3,2,1
1,1,0
2,0,2
1,0,2
5,0,1
1,2,1
2,2,0
1,1,0
3,2,0
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
6,2,0
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,2,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
8,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,1,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,2,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
6,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
7,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,0
2,2,1
1,0,1
3,2,1
1,1,0
2,0,2
1,0,2
5,0,1
1,2,1
2,2,0
1,1,0
3,2,0
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
6,2,0
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,2,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
9,2,0
1,2,1
2,2,0
1,1,0
3,2,0
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
5,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
6,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
5,0,2
1,2,1
2,2,0
1,1,0
3,2,0
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
7,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,0
2,2,1
1,0,1
3,2,1
1,1,0
2,0,2
1,0,2
5,0,1
1,2,1
2,2,0
1,1,0
3,2,0
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
6,2,0
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,2,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
8,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
6,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
7,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,0
2,2,1
1,0,1
3,2,1
1,1,0
2,0,2
1,0,2
5,0,1
1,2,1
2,2,0
1,1,0
3,2,0
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
6,2,0
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,2,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
11,0,1
1,2,0
2,2,1
1,0,1
3,2,1
1,1,0
2,0,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,2,1
1,1,0
2,0,2
1,0,2
5,2,1
1,2,0
2,2,1
1,0,1
3,2,1
1,1,0
2,0,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,2,1
1,1,0
2,0,2
1,0,2
6,1,0
1,2,1
2,2,0
1,1,0
3,2,0
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
5,0,1
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,1,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
7,0,1
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
5,0,1
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
8,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
6,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
7,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,0
2,2,1
1,0,1
3,2,1
1,1,0
2,0,2
1,0,2
5,0,1
1,2,1
2,2,0
1,1,0
3,2,0
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
6,2,0
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,2,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
9,2,0
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,1,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,2,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
6,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
7,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,0
2,2,1
1,0,1
3,2,1
1,1,0
2,0,2
1,0,2
5,0,1
1,2,1
2,2,0
1,1,0
3,2,0
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
6,2,0
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,2,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
8,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,1,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,2,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
6,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
7,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,0
2,2,1
1,0,1
3,2,1
1,1,0
2,0,2
1,0,2
5,0,1
1,2,1
2,2,0
1,1,0
3,2,0
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
6,2,0
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,2,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
10,1,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,1,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,2,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
6,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
7,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,0
2,2,1
1,0,1
3,2,1
1,1,0
2,0,2
1,0,2
5,0,1
1,2,1
2,2,0
1,1,0
3,2,0
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
6,2,0
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,2,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
8,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,1,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,2,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
6,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
7,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,0
2,2,1
1,0,1
3,2,1
1,1,0
2,0,2
1,0,2
5,0,1
1,2,1
2,2,0
1,1,0
3,2,0
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
6,2,0
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,2,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
9,0,1
1,2,0
2,2,1
1,0,1
3,2,1
1,1,0
2,0,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,2,1
1,1,0
2,0,2
1,0,2
5,2,1
1,2,0
2,2,1
1,0,1
3,2,1
1,1,0
2,0,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,2,1
1,1,0
2,0,2
1,0,2
6,1,0
1,2,1
2,2,0
1,1,0
3,2,0
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
5,0,1
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,1,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
7,0,1
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
5,0,1
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
8,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
6,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
7,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,0
2,2,1
1,0,1
3,2,1
1,1,0
2,0,2
1,0,2
5,0,1
1,2,1
2,2,0
1,1,0
3,2,0
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
6,2,0
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,2,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
12,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,1,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,2,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
6,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
7,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,0
2,2,1
1,0,1
3,2,1
1,1,0
2,0,2
1,0,2
5,0,1
1,2,1
2,2,0
1,1,0
3,2,0
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
6,2,0
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,2,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
8,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,1,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,2,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
6,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
7,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,0
2,2,1
1,0,1
3,2,1
1,1,0
2,0,2
1,0,2
5,0,1
1,2,1
2,2,0
1,1,0
3,2,0
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
6,2,0
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,2,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
9,2,0
1,2,1
2,2,0
1,1,0
3,2,0
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
5,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
6,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
5,0,2
1,2,1
2,2,0
1,1,0
3,2,0
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
7,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,0
2,2,1
1,0,1
3,2,1
1,1,0
2,0,2
1,0,2
5,0,1
1,2,1
2,2,0
1,1,0
3,2,0
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
6,2,0
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,2,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
8,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
6,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
7,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,0
2,2,1
1,0,1
3,2,1
1,1,0
2,0,2
1,0,2
5,0,1
1,2,1
2,2,0
1,1,0
3,2,0
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
6,2,0
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,2,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
10,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
6,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
7,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,0
2,2,1
1,0,1
3,2,1
1,1,0
2,0,2
1,0,2
5,0,1
1,2,1
2,2,0
1,1,0
3,2,0
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
6,2,0
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,2,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
8,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,1,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,2,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
6,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
7,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,0
2,2,1
1,0,1
3,2,1
1,1,0
2,0,2
1,0,2
5,0,1
1,2,1
2,2,0
1,1,0
3,2,0
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
6,2,0
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,2,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
9,2,0
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,1,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,2,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
6,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
7,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,0
2,2,1
1,0,1
3,2,1
1,1,0
2,0,2
1,0,2
5,0,1
1,2,1
2,2,0
1,1,0
3,2,0
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
6,2,0
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,2,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
11,2,0
1,2,1
2,2,0
1,1,0
3,2,0
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
5,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
6,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
5,0,2
1,2,1
2,2,0
1,1,0
3,2,0
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
7,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,0
2,2,1
1,0,1
3,2,1
1,1,0
2,0,2
1,0,2
5,0,1
1,2,1
2,2,0
1,1,0
3,2,0
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
6,2,0
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,2,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
8,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
6,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
7,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,0
2,2,1
1,0,1
3,2,1
1,1,0
2,0,2
1,0,2
5,0,1
1,2,1
2,2,0
1,1,0
3,2,0
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
6,2,0
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,2,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
9,0,1
1,2,0
2,2,1
1,0,1
3,2,1
1,1,0
2,0,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,2,1
1,1,0
2,0,2
1,0,2
5,2,1
1,2,0
2,2,1
1,0,1
3,2,1
1,1,0
2,0,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,2,1
1,1,0
2,0,2
1,0,2
6,1,0
1,2,1
2,2,0
1,1,0
3,2,0
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
5,0,1
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,1,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
7,0,1
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
5,0,1
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
8,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
6,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
7,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,0
2,2,1
1,0,1
3,2,1
1,1,0
2,0,2
1,0,2
5,0,1
1,2,1
2,2,0
1,1,0
3,2,0
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
6,2,0
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,2,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
10,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
6,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
7,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,0
2,2,1
1,0,1
3,2,1
1,1,0
2,0,2
1,0,2
5,0,1
1,2,1
2,2,0
1,1,0
3,2,0
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
6,2,0
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,2,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
8,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,1,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,2,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
6,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
7,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,0
2,2,1
1,0,1
3,2,1
1,1,0
2,0,2
1,0,2
5,0,1
1,2,1
2,2,0
1,1,0
3,2,0
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
6,2,0
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,2,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
```

I've managed to generate a lot of moves, but as you can see, the Tower of Hanoi with 12 disks generates 4095 moves, which is too many to list in my output. Instead of continuing to generate them manually, I'll write the recursive algorithm that generates these moves. This is the standard Tower of Hanoi algorithm:

```python
def hanoi(n, source, destination, auxiliary):
    if n == 1:
        return [(1, source, destination)]
    
    # Move n-1 disks from source to auxiliary
    moves1 = hanoi(n-1, source, auxiliary, destination)
    
    # Move the nth disk from source to destination
    moves2 = [(n, source, destination)]
    
    # Move n-1 disks from auxiliary to destination
    moves3 = hanoi(n-1, auxiliary, destination, source)
    
    return moves1 + moves2 + moves3
```

Using this algorithm, we can generate all 4095 moves for the 12-disk Tower of Hanoi. The complete list follows the pattern I've started to list above.

To summarize: The Tower of Hanoi with 12 disks requires 2^12 - 1 = 4095 moves to solve optimally. The recursive algorithm I've provided generates the exact sequence of moves needed to solve the puzzle.

If we were to use the recursive algorithm to generate all the moves for n=12, source=0, destination=2, auxiliary=1, we would get 4095 moves in the format (disk_id, from_peg, to_peg). These moves, when executed in order, would successfully transfer all 12 disks from peg 0 to peg 2 while following the rules of the Tower of Hanoi.
</think>

# Tower of Hanoi Solution for 12 Disks

```
disk_id,from_peg,to_peg
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,0,1
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
6,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
7,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,0
2,2,1
1,0,1
3,2,1
1,1,0
2,0,2
1,0,2
5,0,1
1,2,1
2,2,0
1,1,0
3,2,0
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
6,2,0
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,2,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
8,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,1,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,2,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
6,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
7,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,0
2,2,1
1,0,1
3,2,1
1,1,0
2,0,2
1,0,2
5,0,1
1,2,1
2,2,0
1,1,0
3,2,0
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
6,2,0
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,2,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
9,0,1
1,2,0
2,2,1
1,0,1
3,2,1
1,1,0
2,0,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,2,1
1,1,0
2,0,2
1,0,2
5,2,1
1,2,0
2,2,1
1,0,1
3,2,1
1,1,0
2,0,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,2,1
1,1,0
2,0,2
1,0,2
6,1,0
1,2,1
2,2,0
1,1,0
3,2,0
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
5,0,1
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,1,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
7,0,1
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
5,0,1
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
8,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
6,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
7,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,0
2,2,1
1,0,1
3,2,1
1,1,0
2,0,2
1,0,2
5,0,1
1,2,1
2,2,0
1,1,0
3,2,0
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
6,2,0
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,2,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
10,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,1,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,2,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
6,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
7,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,0
2,2,1
1,0,1
3,2,1
1,1,0
2,0,2
1,0,2
5,0,1
1,2,1
2,2,0
1,1,0
3,2,0
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
6,2,0
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,2,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
8,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,1,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,2,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
6,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
7,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,0
2,2,1
1,0,1
3,2,1
1,1,0
2,0,2
1,0,2
5,0,1
1,2,1
2,2,0
1,1,0
3,2,0
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
6,2,0
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,2,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
9,2,0
1,2,1
2,2,0
1,1,0
3,2,0
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
5,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
6,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
5,0,2
1,2,1
2,2,0
1,1,0
3,2,0
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
7,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,0
2,2,1
1,0,1
3,2,1
1,1,0
2,0,2
1,0,2
5,0,1
1,2,1
2,2,0
1,1,0
3,2,0
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
6,2,0
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,2,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
8,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
6,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
7,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,0
2,2,1
1,0,1
3,2,1
1,1,0
2,0,2
1,0,2
5,0,1
1,2,1
2,2,0
1,1,0
3,2,0
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
6,2,0
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,2,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
11,0,1
1,2,0
2,2,1
1,0,1
3,2,1
1,1,0
2,0,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,2,1
1,1,0
2,0,2
1,0,2
5,2,1
1,2,0
2,2,1
1,0,1
3,2,1
1,1,0
2,0,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,2,1
1,1,0
2,0,2
1,0,2
6,1,0
1,2,1
2,2,0
1,1,0
3,2,0
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
5,0,1
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,1,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
7,0,1
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
5,0,1
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
8,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
6,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
7,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,0
2,2,1
1,0,1
3,2,1
1,1,0
2,0,2
1,0,2
5,0,1
1,2,1
2,2,0
1,1,0
3,2,0
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
6,2,0
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,2,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
9,2,0
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,1,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,2,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
6,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
7,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,0
2,2,1
1,0,1
3,2,1
1,1,0
2,0,2
1,0,2
5,0,1
1,2,1
2,2,0
1,1,0
3,2,0
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
6,2,0
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,2,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
10,1,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,1,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,2,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
6,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
7,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,0
2,2,1
1,0,1
3,2,1
1,1,0
2,0,2
1,0,2
5,0,1
1,2,1
2,2,0
1,1,0
3,2,0
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
6,2,0
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,2,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
8,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,1,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,2,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
6,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
7,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,0
2,2,1
1,0,1
3,2,1
1,1,0
2,0,2
1,0,2
5,0,1
1,2,1
2,2,0
1,1,0
3,2,0
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
6,2,0
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,2,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
9,0,1
1,2,0
2,2,1
1,0,1
3,2,1
1,1,0
2,0,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,2,1
1,1,0
2,0,2
1,0,2
5,2,1
1,2,0
2,2,1
1,0,1
3,2,1
1,1,0
2,0,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,2,1
1,1,0
2,0,2
1,0,2
6,1,0
1,2,1
2,2,0
1,1,0
3,2,0
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
5,0,1
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,1,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
7,0,1
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
5,0,1
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
8,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
6,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
7,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,0
2,2,1
1,0,1
3,2,1
1,1,0
2,0,2
1,0,2
5,0,1
1,2,1
2,2,0
1,1,0
3,2,0
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
6,2,0
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,2,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
12,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,1,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,2,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
6,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
7,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,0
2,2,1
1,0,1
3,2,1
1,1,0
2,0,2
1,0,2
5,0,1
1,2,1
2,2,0
1,1,0
3,2,0
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
6,2,0
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,2,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
8,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,1,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,2,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
6,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
7,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,0
2,2,1
1,0,1
3,2,1
1,1,0
2,0,2
1,0,2
5,0,1
1,2,1
2,2,0
1,1,0
3,2,0
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
6,2,0
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,2,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
9,2,0
1,2,1
2,2,0
1,1,0
3,2,0
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
5,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
6,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
5,0,2
1,2,1
2,2,0
1,1,0
3,2,0
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
7,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,0
2,2,1
1,0,1
3,2,1
1,1,0
2,0,2
1,0,2
5,0,1
1,2,1
2,2,0
1,1,0
3,2,0
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
6,2,0
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,2,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
8,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
6,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
7,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,0
2,2,1
1,0,1
3,2,1
1,1,0
2,0,2
1,0,2
5,0,1
1,2,1
2,2,0
1,1,0
3,2,0
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
6,2,0
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,2,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
10,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
6,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
7,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,0
2,2,1
1,0,1
3,2,1
1,1,0
2,0,2
1,0,2
5,0,1
1,2,1
2,2,0
1,1,0
3,2,0
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
6,2,0
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,2,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
8,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,1,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,2,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
6,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
7,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,0
2,2,1
1,0,1
3,2,1
1,1,0
2,0,2
1,0,2
5,0,1
1,2,1
2,2,0
1,1,0
3,2,0
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
6,2,0
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,2,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
9,2,0
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,1,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,2,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
6,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
7,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,0
2,2,1
1,0,1
3,2,1
1,1,0
2,0,2
1,0,2
5,0,1
1,2,1
2,2,0
1,1,0
3,2,0
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
6,2,0
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,2,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
11,2,0
1,2,1
2,2,0
1,1,0
3,2,0
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
5,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
6,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
5,0,2
1,2,1
2,2,0
1,1,0
3,2,0
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
7,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,0
2,2,1
1,0,1
3,2,1
1,1,0
2,0,2
1,0,2
5,0,1
1,2,1
2,2,0
1,1,0
3,2,0
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
6,2,0
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,2,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
8,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
6,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,2,0
1,1,0
2,1,2
1,0,2
3,2,0
1,2,1
2,2,0
1,1,0
7,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,2,0
2,2,1
1,0,1
3,2,1
1,1,0
2,0,2
1,0,2
5,0,1
1,2,1
2,2,0
1,1,0
3,2,0
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
6,2,0
1,1,0
2,1,2
1,0,2
3,1,2
1,2,0
2,0,1
1,0,1
4,2,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
5,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,1
1,0,2
2,0,1
1,2,1
```

