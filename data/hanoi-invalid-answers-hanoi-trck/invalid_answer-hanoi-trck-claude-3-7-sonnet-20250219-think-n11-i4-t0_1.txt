# model_name='claude-3-7-sonnet-20250219', reasoning_budget=32000, tries=0, n=11, i=4
# valid_prefix_length=8, is_valid_solution=0, first_correction=-1

<think>
This is the classic Tower of Hanoi puzzle with 11 disks. 

For the Tower of Hanoi with n disks, the minimum number of moves required to solve the puzzle is 2^n - 1. With 11 disks, that's 2^11 - 1 = 2048 - 1 = 2047 moves.

The optimal solution for the Tower of Hanoi follows a recursive pattern:
1. Move the top n-1 disks from the source peg to the auxiliary peg (using the destination peg as auxiliary)
2. Move the largest disk from the source peg to the destination peg
3. Move the n-1 disks from the auxiliary peg to the destination peg (using the source peg as auxiliary)

Let me implement this recursive algorithm to generate the complete list of moves for 11 disks:

```
function hanoi(n, source, auxiliary, destination, moves = []) {
    if (n === 1) {
        moves.push([source, destination]);
        return moves;
    }
    
    hanoi(n - 1, source, destination, auxiliary, moves);
    moves.push([source, destination]);
    hanoi(n - 1, auxiliary, source, destination, moves);
    
    return moves;
}

const moves = hanoi(11, 0, 1, 2);
```

This will give us the sequence of moves in the form [from_peg, to_peg]. Now I need to track the state of each peg after every move.

Let me initialize the pegs:
- Peg 0: [11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
- Peg 1: []
- Peg 2: []

Now I'll manually trace through the moves and track the state of each peg.

Actually, let me implement a simulation to track the states:

```
function simulateHanoi(n) {
    // Initialize pegs
    const pegs = [
        Array.from({length: n}, (_, i) => n - i), // Peg 0 with disks n down to 1
        [], // Peg 1 (empty)
        []  // Peg 2 (empty)
    ];
    
    // Generate moves using recursive algorithm
    const moves = [];
    
    function hanoiMoves(n, source, auxiliary, destination) {
        if (n === 1) {
            // Move disk 1 from source to destination
            const disk = pegs[source].pop();
            pegs[destination].push(disk);
            moves.push({
                move_id: moves.length + 1,
                from_peg: source,
                to_peg: destination,
                peg0: [...pegs[0]].reverse().join(' '),
                peg1: [...pegs[1]].reverse().join(' '),
                peg2: [...pegs[2]].reverse().join(' ')
            });
            return;
        }
        
        // Move n-1 disks from source to auxiliary
        hanoiMoves(n - 1, source, destination, auxiliary);
        
        // Move disk n from source to destination
        const disk = pegs[source].pop();
        pegs[destination].push(disk);
        moves.push({
            move_id: moves.length + 1,
            from_peg: source,
            to_peg: destination,
            peg0: [...pegs[0]].reverse().join(' '),
            peg1: [...pegs[1]].reverse().join(' '),
            peg2: [...pegs[2]].reverse().join(' ')
        });
        
        // Move n-1 disks from auxiliary to destination
        hanoiMoves(n - 1, auxiliary, source, destination);
    }
    
    hanoiMoves(n, 0, 1, 2);
    return moves;
}

const moveList = simulateHanoi(11);
```

Actually, wait. I realized there's an issue with my approach. I'm reversing the arrays to display them from bottom to top, but I'm also treating the arrays as stacks where the top disk is at the end. Let me correct this:

```
function simulateHanoi(n) {
    // Initialize pegs
    const pegs = [
        Array.from({length: n}, (_, i) => n - i), // Peg 0 with disks n down to 1
        [], // Peg 1 (empty)
        []  // Peg 2 (empty)
    ];
    
    // Generate moves using recursive algorithm
    const moves = [];
    
    function hanoiMoves(n, source, auxiliary, destination) {
        if (n === 1) {
            // Move disk 1 from source to destination
            const disk = pegs[source].pop();
            pegs[destination].push(disk);
            moves.push({
                move_id: moves.length + 1,
                from_peg: source,
                to_peg: destination,
                peg0: pegs[0].join(' '),
                peg1: pegs[1].join(' '),
                peg2: pegs[2].join(' ')
            });
            return;
        }
        
        // Move n-1 disks from source to auxiliary
        hanoiMoves(n - 1, source, destination, auxiliary);
        
        // Move disk n from source to destination
        const disk = pegs[source].pop();
        pegs[destination].push(disk);
        moves.push({
            move_id: moves.length + 1,
            from_peg: source,
            to_peg: destination,
            peg0: pegs[0].join(' '),
            peg1: pegs[1].join(' '),
            peg2: pegs[2].join(' ')
        });
        
        // Move n-1 disks from auxiliary to destination
        hanoiMoves(n - 1, auxiliary, source, destination);
    }
    
    hanoiMoves(n, 0, 1, 2);
    return moves;
}
```

Actually, I need to be more careful about the representation. In the problem statement, the disks are numbered from 1 (smallest) to n (largest), and the pegs are displayed from bottom to top. Let me be more precise:

```
function simulateHanoi(n) {
    // Initialize pegs
    const pegs = [
        Array.from({length: n}, (_, i) => n - i), // Peg 0 with disks n down to 1
        [], // Peg 1 (empty)
        []  // Peg 2 (empty)
    ];
    
    // Generate moves using recursive algorithm
    const moves = [];
    
    function formatPeg(peg) {
        return peg.length === 0 ? '' : peg.join(' ');
    }
    
    function hanoiMoves(n, source, auxiliary, destination) {
        if (n === 1) {
            // Move disk 1 from source to destination
            const disk = pegs[source].pop();
            pegs[destination].push(disk);
            moves.push({
                move_id: moves.length + 1,
                from_peg: source,
                to_peg: destination,
                peg0: formatPeg(pegs[0]),
                peg1: formatPeg(pegs[1]),
                peg2: formatPeg(pegs[2])
            });
            return;
        }
        
        // Move n-1 disks from source to auxiliary
        hanoiMoves(n - 1, source, destination, auxiliary);
        
        // Move disk n from source to destination
        const disk = pegs[source].pop();
        pegs[destination].push(disk);
        moves.push({
            move_id: moves.length + 1,
            from_peg: source,
            to_peg: destination,
            peg0: formatPeg(pegs[0]),
            peg1: formatPeg(pegs[1]),
            peg2: formatPeg(pegs[2])
        });
        
        // Move n-1 disks from auxiliary to destination
        hanoiMoves(n - 1, auxiliary, source, destination);
    }
    
    hanoiMoves(n, 0, 1, 2);
    return moves;
}
```

Hmm, I still don't think I'm getting the representation right. Let's look at the example from the problem statement:

```
move_id,from_peg,to_peg,peg0,peg1,peg2
1,0,2,3 2,,1
```

This means:
- Move disk 1 from peg 0 to peg 2.
- After the move, peg 0 has disks 3 and 2 (with 2 on top), peg 1 is empty, and peg 2 has disk 1.

So the format is showing the disks from bottom to top, with the bottom disk being the largest (highest number).

Let me redefine the simulation:

```
function simulateHanoi(n) {
    // Initialize pegs
    const pegs = [
        Array.from({length: n}, (_, i) => n - i), // Peg 0 with disks n down to 1
        [], // Peg 1 (empty)
        []  // Peg 2 (empty)
    ];
    
    // Generate moves using recursive algorithm
    const moves = [];
    
    function formatPeg(peg) {
        // Return the peg state from bottom to top
        return peg.length === 0 ? '' : [...peg].reverse().join(' ');
    }
    
    function hanoiMoves(n, source, auxiliary, destination) {
        if (n === 1) {
            // Move disk 1 from source to destination
            const disk = pegs[source].pop();
            pegs[destination].push(disk);
            moves.push({
                move_id: moves.length + 1,
                from_peg: source,
                to_peg: destination,
                peg0: formatPeg([...pegs[0]]),
                peg1: formatPeg([...pegs[1]]),
                peg2: formatPeg([...pegs[2]])
            });
            return;
        }
        
        // Move n-1 disks from source to auxiliary
        hanoiMoves(n - 1, source, destination, auxiliary);
        
        // Move disk n from source to destination
        const disk = pegs[source].pop();
        pegs[destination].push(disk);
        moves.push({
            move_id: moves.length + 1,
            from_peg: source,
            to_peg: destination,
            peg0: formatPeg([...pegs[0]]),
            peg1: formatPeg([...pegs[1]]),
            peg2: formatPeg([...pegs[2]])
        });
        
        // Move n-1 disks from auxiliary to destination
        hanoiMoves(n - 1, auxiliary, source, destination);
    }
    
    hanoiMoves(n, 0, 1, 2);
    return moves;
}
```

No, I think I'm still not getting it right. The problem statement shows that the disks are numbered from 1 (smallest) to n (largest). So disk 1 is the smallest and disk n is the largest. Let me be more explicit:

```
function simulateHanoi(n) {
    // Initialize pegs
    const pegs = [
        Array.from({length: n}, (_, i) => n - i), // Peg 0 with disks n down to 1
        [], // Peg 1 (empty)
        []  // Peg 2 (empty)
    ];
    
    // Generate moves using recursive algorithm
    const moves = [];
    
    function formatPeg(peg) {
        if (peg.length === 0) return '';
        
        // The bottom disk is the largest, so we need to sort in descending order
        const sortedPeg = [...peg].sort((a, b) => b - a);
        return sortedPeg.join(' ');
    }
    
    function hanoiMoves(n, source, auxiliary, destination) {
        if (n === 1) {
            // Move disk 1 from source to destination
            const disk = pegs[source].pop();
            pegs[destination].push(disk);
            moves.push({
                move_id: moves.length + 1,
                from_peg: source,
                to_peg: destination,
                peg0: formatPeg(pegs[0]),
                peg1: formatPeg(pegs[1]),
                peg2: formatPeg(pegs[2])
            });
            return;
        }
        
        // Move n-1 disks from source to auxiliary
        hanoiMoves(n - 1, source, destination, auxiliary);
        
        // Move disk n from source to destination
        const disk = pegs[source].pop();
        pegs[destination].push(disk);
        moves.push({
            move_id: moves.length + 1,
            from_peg: source,
            to_peg: destination,
            peg0: formatPeg(pegs[0]),
            peg1: formatPeg(pegs[1]),
            peg2: formatPeg(pegs[2])
        });
        
        // Move n-1 disks from auxiliary to destination
        hanoiMoves(n - 1, auxiliary, source, destination);
    }
    
    hanoiMoves(n, 0, 1, 2);
    return moves;
}
```

Hmm, sorting the peg doesn't make sense here because the disks must maintain their order on the peg. Let me try a clearer approach:

1. Each peg will be represented as an array where the last element is the top disk.
2. When formatting the peg for output, we'll list the disks from bottom to top (first element to last).

Let me redefine:

```
function simulateHanoi(n) {
    // Initialize pegs
    const pegs = [
        Array.from({length: n}, (_, i) => n - i), // Peg 0 with disks n down to 1
        [], // Peg 1 (empty)
        []  // Peg 2 (empty)
    ];
    
    // Generate moves using recursive algorithm
    const moves = [];
    
    function formatPeg(peg) {
        return peg.join(' ');
    }
    
    function hanoiMoves(n, source, auxiliary, destination) {
        if (n === 1) {
            // Move disk 1 from source to destination
            const disk = pegs[source].pop();
            pegs[destination].push(disk);
            moves.push({
                move_id: moves.length + 1,
                from_peg: source,
                to_peg: destination,
                peg0: formatPeg(pegs[0]),
                peg1: formatPeg(pegs[1]),
                peg2: formatPeg(pegs[2])
            });
            return;
        }
        
        // Move n-1 disks from source to auxiliary
        hanoiMoves(n - 1, source, destination, auxiliary);
        
        // Move disk n from source to destination
        const disk = pegs[source].pop();
        pegs[destination].push(disk);
        moves.push({
            move_id: moves.length + 1,
            from_peg: source,
            to_peg: destination,
            peg0: formatPeg(pegs[0]),
            peg1: formatPeg(pegs[1]),
            peg2: formatPeg(pegs[2])
        });
        
        // Move n-1 disks from auxiliary to destination
        hanoiMoves(n - 1, auxiliary, source, destination);
    }
    
    hanoiMoves(n, 0, 1, 2);
    return moves;
}
```

Wait, let me look at the example again:

```
move_id,from_peg,to_peg,peg0,peg1,peg2
1,0,2,3 2,,1
```

This indicates:
- After moving disk 1 from peg 0 to peg 2, peg 0 has disks 3 and 2 (with 2 on top), peg 1 is empty, and peg 2 has disk 1.

So the peg states are listed from bottom to top, and I need to explicitly handle the case where a peg is empty.

OK, I think the issue was with the initialization. If the disks are numbered from 1 (smallest) to n (largest), then the initial state should be:

Peg 0: [n, n-1, ..., 2, 1] (with n at the bottom and 1 at the top)
Peg 1: []
Peg 2: []

Let me correct the simulation:

```
function simulateHanoi(n) {
    // Initialize pegs
    const pegs = [
        Array.from({length: n}, (_, i) => n - i), // Peg 0 with disks n, n-1, ..., 2, 1
        [], // Peg 1 (empty)
        []  // Peg 2 (empty)
    ];
    
    // Generate moves using recursive algorithm
    const moves = [];
    
    function formatPeg(peg) {
        return peg.length === 0 ? '' : peg.join(' ');
    }
    
    function hanoiMoves(n, source, auxiliary, destination) {
        if (n === 1) {
            // Move disk 1 from source to destination
            const disk = pegs[source].pop();
            pegs[destination].push(disk);
            moves.push({
                move_id: moves.length + 1,
                from_peg: source,
                to_peg: destination,
                peg0: formatPeg(pegs[0]),
                peg1: formatPeg(pegs[1]),
                peg2: formatPeg(pegs[2])
            });
            return;
        }
        
        // Move n-1 disks from source to auxiliary
        hanoiMoves(n - 1, source, destination, auxiliary);
        
        // Move disk n from source to destination
        const disk = pegs[source].pop();
        pegs[destination].push(disk);
        moves.push({
            move_id: moves.length + 1,
            from_peg: source,
            to_peg: destination,
            peg0: formatPeg(pegs[0]),
            peg1: formatPeg(pegs[1]),
            peg2: formatPeg(pegs[2])
        });
        
        // Move n-1 disks from auxiliary to destination
        hanoiMoves(n - 1, auxiliary, source, destination);
    }
    
    hanoiMoves(n, 0, 1, 2);
    return moves;
}
```

Let me test this with a simple example of n = 3, and see if it matches the expected output from the problem statement.

Initial state:
- Peg 0: [3, 2, 1]
- Peg 1: []
- Peg 2: []

Let's trace through:

1. Move disk 1 from peg 0 to peg 2:
   - Peg 0: [3, 2]
   - Peg 1: []
   - Peg 2: [1]
   - Move: 1,0,2,3 2,,1

2. Move disk 2 from peg 0 to peg 1:
   - Peg 0: [3]
   - Peg 1: [2]
   - Peg 2: [1]
   - Move: 2,0,1,3,2,1

3. Move disk 1 from peg 2 to peg 1:
   - Peg 0: [3]
   - Peg 1: [2, 1]
   - Peg 2: []
   - Move: 3,2,1,3,2 1,

Wait, this doesn't match the example. Let me review:

```
move_id,from_peg,to_peg,peg0,peg1,peg2
1,0,2,3 2,,1
2,0,1,3,2,1
3,2,1,3,2 1,
```

The issue might be with the spacing. In the example, there's a space between the disks when they're listed from bottom to top. Let me adjust my function:

```
function formatPeg(peg) {
    if (peg.length === 0) return '';
    return peg.join(' ');
}
```

Ah, actually, upon further inspection of the example, I see that the representation is from bottom to top:

```
1,0,2,3 2,,1
```

means:
- Move disk 1 from peg 0 to peg 2.
- After the move, peg 0 has disks 3 (bottom) and 2 (top), peg 1 is empty, and peg 2 has disk 1.

So if the disks are represented as [3, 2, 1] in the code (with 1 being the top), then when formatting for output, I need to reverse the order to show from bottom to top.

Let me adjust:

```
function formatPeg(peg) {
    if (peg.length === 0) return '';
    return [...peg].reverse().join(' ');
}
```

But wait, this would give:
```
1,0,2,2 3,,1
```

which is not what we want. The correct representation should be:
```
1,0,2,3 2,,1
```

This means that in the actual code, the peg should be represented from top to bottom, so the bottom disk is at the beginning of the array.

Let me re-adjust:

```
function simulateHanoi(n) {
    // Initialize pegs: bottom disk first, top disk last
    const pegs = [
        Array.from({length: n}, (_, i) => n - i).reverse(), // Peg 0 with disks n, n-1, ..., 2, 1
        [], // Peg 1 (empty)
        []  // Peg 2 (empty)
    ];
    
    // Generate moves using recursive algorithm
    const moves = [];
    
    function formatPeg(peg) {
        if (peg.length === 0) return '';
        return peg.join(' ');
    }
    
    function hanoiMoves(n, source, auxiliary, destination) {
        if (n === 0) return;
        
        // Move n-1 disks from source to auxiliary
        hanoiMoves(n - 1, source, destination, auxiliary);
        
        // Move disk n from source to destination
        const disk = pegs[source].pop();
        pegs[destination].push(disk);
        moves.push({
            move_id: moves.length + 1,
            from_peg: source,
            to_peg: destination,
            peg0: formatPeg(pegs[0]),
            peg1: formatPeg(pegs[1]),
            peg2: formatPeg(pegs[2])
        });
        
        // Move n-1 disks from auxiliary to destination
        hanoiMoves(n - 1, auxiliary, source, destination);
    }
    
    hanoiMoves(n, 0, 1, 2);
    return moves;
}
```

Actually, I think I'm overcomplicating this. Let me step back and think more clearly.

I need to:
1. Represent each peg as an array where the first element is the bottom disk and the last element is the top disk.
2. When moving a disk, pop it from the source peg and push it to the destination peg.
3. When formatting the peg for output, just join the elements with a space.

Let me revise:

```
function simulateHanoi(n) {
    // Initialize pegs: bottom disk first, top disk last
    const pegs = [
        Array.from({length: n}, (_, i) => n - i), // Peg 0 with disks [n, n-1, ..., 2, 1]
        [], // Peg 1 (empty)
        []  // Peg 2 (empty)
    ];
    
    // Generate moves using recursive algorithm
    const moves = [];
    
    function formatPeg(peg) {
        if (peg.length === 0) return '';
        return peg.join(' ');
    }
    
    function hanoiMoves(n, source, auxiliary, destination, diskToMove) {
        if (n === 0) return;
        
        // Move n-1 disks from source to auxiliary
        hanoiMoves(n - 1, source, destination, auxiliary, diskToMove - 1);
        
        // Move disk n from source to destination
        const diskIndex = pegs[source].indexOf(diskToMove);
        if (diskIndex !== -1) {
            const disk = pegs[source].splice(diskIndex, 1)[0];
            pegs[destination].push(disk);
            moves.push({
                move_id: moves.length + 1,
                from_peg: source,
                to_peg: destination,
                peg0: formatPeg(pegs[0]),
                peg1: formatPeg(pegs[1]),
                peg2: formatPeg(pegs[2])
            });
        }
        
        // Move n-1 disks from auxiliary to destination
        hanoiMoves(n - 1, auxiliary, source, destination, diskToMove - 1);
    }
    
    hanoiMoves(n, 0, 1, 2, n);
    return moves;
}
```

Hmm, that's not quite right either. I'm trying to explicitly track which disk is being moved, but the traditional Tower of Hanoi algorithm doesn't do that. Let me go back to the traditional approach, but ensure that the pegs are represented correctly.

Wait, I think I might be confused because I'm overthinking this. Let me go back to the basics:

In the Tower of Hanoi, the disks are traditionally numbered from 1 (smallest) to n (largest). The pegs are represented as stacks, with the largest disk at the bottom and the smallest at the top.

In our representation:
- Each peg is an array where the first element is the bottom disk and the last element is the top disk.
- When moving a disk, we pop it from the source peg and push it to the destination peg.
- When formatting the peg for output, we join the elements with a space.

Let me try a simpler approach, keeping track of the disk being moved:

```
function simulateHanoi(n) {
    // Initialize pegs: bottom disk first, top disk last
    const pegs = [
        Array.from({length: n}, (_, i) => n - i), // Peg 0 with disks [n, n-1, ..., 2, 1]
        [], // Peg 1 (empty)
        []  // Peg 2 (empty)
    ];
    
    // Generate moves using recursive algorithm
    const moves = [];
    
    function formatPeg(peg) {
        if (peg.length === 0) return '';
        return peg.join(' ');
    }
    
    function moveDisk(source, destination) {
        const disk = pegs[source].pop();
        pegs[destination].push(disk);
        moves.push({
            move_id: moves.length + 1,
            from_peg: source,
            to_peg: destination,
            peg0: formatPeg(pegs[0]),
            peg1: formatPeg(pegs[1]),
            peg2: formatPeg(pegs[2])
        });
    }
    
    function hanoiMoves(n, source, auxiliary, destination) {
        if (n === 1) {
            moveDisk(source, destination);
            return;
        }
        
        hanoiMoves(n - 1, source, destination, auxiliary);
        moveDisk(source, destination);
        hanoiMoves(n - 1, auxiliary, source, destination);
    }
    
    hanoiMoves(n, 0, 1, 2);
    return moves;
}
```

OK let me trace through this to see if it works.

Initial state:
- Peg 0: [11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
- Peg 1: []
- Peg 2: []

Let's trace a few steps:

1. Move disk 1 from peg 0 to peg 2:
   - Peg 0: [11, 10, 9, 8, 7, 6, 5, 4, 3, 2]
   - Peg 1: []
   - Peg 2: [1]
   - Move: 1,0,2,11 10 9 8 7 6 5 4 3 2,,1

2. Move disk 2 from peg 0 to peg 1:
   - Peg 0: [11, 10, 9, 8, 7, 6, 5, 4, 3]
   - Peg 1: [2]
   - Peg 2: [1]
   - Move: 2,0,1,11 10 9 8 7 6 5 4 3,2,1

3. Move disk 1 from peg 2 to peg 1:
   - Peg 0: [11, 10, 9, 8, 7, 6, 5, 4, 3]
   - Peg 1: [2, 1]
   - Peg 2: []
   - Move: 3,2,1,11 10 9 8 7 6 5 4 3,2 1,

That doesn't seem to match the typical Tower of Hanoi solution. Let me double-check the initial state. 

For n = 3, the initial state should be:
- Peg 0: [3, 2, 1]
- Peg 1: []
- Peg 2: []

And the steps should be:
1. Move disk 1 from peg 0 to peg 2.
2. Move disk 2 from peg 0 to peg 1.
3. Move disk 1 from peg 2 to peg 1.
4. Move disk 3 from peg 0 to peg 2.
5. Move disk 1 from peg 1 to peg 0.
6. Move disk 2 from peg 1 to peg 2.
7. Move disk 1 from peg 0 to peg 2.

Let me trace through our function:

1. Call hanoiMoves(3, 0, 1, 2).
2. Since n > 1, call hanoiMoves(2, 0, 2, 1).
3. Since n > 1, call hanoiMoves(1, 0, 1, 2).
4. Since n = 1, move disk 1 from peg 0 to peg 2. (Move 1)
5. Back to step 2, move disk 2 from peg 0 to peg 1. (Move 2)
6. Call hanoiMoves(1, 2, 0, 1).
7. Since n = 1, move disk 1 from peg 2 to peg 1. (Move 3)
8. Back to step 1, move disk 3 from peg 0 to peg 2. (Move 4)
9. Call hanoiMoves(2, 1, 0, 2).
10. Since n > 1, call hanoiMoves(1, 1, 2, 0).
11. Since n = 1, move disk 1 from peg 1 to peg 0. (Move 5)
12. Back to step 9, move disk 2 from peg 1 to peg 2. (Move 6)
13. Call hanoiMoves(1, 0, 1, 2).
14. Since n = 1, move disk 1 from peg 0 to peg 2. (Move 7)

This seems to match the expected steps. However, our tracing and the expected output don't match.

OK I think I see the issue. I need to properly represent the state of each peg after each move. 

The states are listed from bottom to top. So after the first move:
- Peg 0: [3, 2]
- Peg 1: []
- Peg 2: [1]

The output should be:
```
1,0,2,3 2,,1
```

Let me adjust my function:

```
function simulateHanoi(n) {
    // Initialize pegs: bottom disk first, top disk last
    const pegs = [
        Array.from({length: n}, (_, i) => n - i), // Peg 0 with disks [n, n-1, ..., 2, 1]
        [], // Peg 1 (empty)
        []  // Peg 2 (empty)
    ];
    
    // Generate moves using recursive algorithm
    const moves = [];
    
    function formatPeg(peg) {
        if (peg.length === 0) return '';
        return peg.join(' ');
    }
    
    function moveDisk(source, destination) {
        const disk = pegs[source].pop();
        pegs[destination].push(disk);
        moves.push({
            move_id: moves.length + 1,
            from_peg: source,
            to_peg: destination,
            peg0: formatPeg([...pegs[0]]),
            peg1: formatPeg([...pegs[1]]),
            peg2: formatPeg([...pegs[2]])
        });
    }
    
    function hanoiMoves(n, source, auxiliary, destination) {
        if (n === 1) {
            moveDisk(source, destination);
            return;
        }
        
        hanoiMoves(n - 1, source, destination, auxiliary);
        moveDisk(source, destination);
        hanoiMoves(n - 1, auxiliary, source, destination);
    }
    
    hanoiMoves(n, 0, 1, 2);
    return moves;
}
```

I'm still not convinced that the disk representation is correct, based on the example. Let me think through it again.

Let's take a simple example with n = 3:
- Initial state: Peg 0 has disks 3 (bottom), 2, and 1 (top). Pegs 1 and 2 are empty.

After the first move (disk 1 from peg 0 to peg 2):
- Peg 0: [3, 2]
- Peg 1: []
- Peg 2: [1]

The output for this move should be:
```
1,0,2,3 2,,1
```

This implies that the peg states are listed from bottom to top, with the largest disk at the bottom. So for n = 3, the initial state in our representation would be:
- Peg 0: [3, 2, 1]
- Peg 1: []
- Peg 2: []

This is consistent with our current implementation. Let's continue with another move:

After the second move (disk 2 from peg 0 to peg 1):
- Peg 0: [3]
- Peg 1: [2]
- Peg 2: [1]

The output should be:
```
2,0,1,3,2,1
```

This seems correct. Let's do one more:

After the third move (disk 1 from peg 2 to peg 1):
- Peg 0: [3]
- Peg 1: [2, 1]
- Peg 2: []

The output should be:
```
3,2,1,3,2 1,
```

Note the space in `2 1`. This is crucial. It means that disk 1 is on top of disk 2 on peg 1.

Ah, I now see the issue. The formatting of the pegs in the output should include spaces between the disks. Let me adjust:

```
function formatPeg(peg) {
    if (peg.length === 0) return '';
    return peg.join(' ');
}
```

But actually, this should already be the case with our current implementation.

It seems like the formatting in the example has spaces between disks on the same peg. Let's double check.

OK, I've been overthinking this. Let's simplify and focus on just getting the correct moves.

```
function simulateHanoi(n) {
    // Initialize pegs: bottom disk first, top disk last
    const pegs = [
        Array.from({length: n}, (_, i) => n - i), // Peg 0 with disks [n, n-1, ..., 2, 1]
        [], // Peg 1 (empty)
        []  // Peg 2 (empty)
    ];
    
    // Generate moves using recursive algorithm
    const moves = [];
    
    function formatPeg(peg) {
        if (peg.length === 0) return '';
        return peg.join(' ');
    }
    
    function moveDisk(source, destination) {
        const disk = pegs[source].pop();
        pegs[destination].push(disk);
        moves.push({
            move_id: moves.length + 1,
            from_peg: source,
            to_peg: destination,
            peg0: formatPeg(pegs[0]),
            peg1: formatPeg(pegs[1]),
            peg2: formatPeg(pegs[2])
        });
    }
    
    function hanoiMoves(n, source, auxiliary, destination) {
        if (n === 1) {
            moveDisk(source, destination);
            return;
        }
        
        hanoiMoves(n - 1, source, destination, auxiliary);
        moveDisk(source, destination);
        hanoiMoves(n - 1, auxiliary, source, destination);
    }
    
    hanoiMoves(n, 0, 1, 2);
    return moves;
}
```

OK so with the current implementation, after the first move for n = 3, we would have:
- Peg 0: [3, 2]
- Peg 1: []
- Peg 2: [1]

The output for this move would be:
```
1,0,2,3 2,,1
```

This seems correct, but I want to double-check by comparing with the example:

```
move_id,from_peg,to_peg,peg0,peg1,peg2
1,0,2,3 2,,1
```

This matches, so I think our representation is correct.

Now, let's run the simulation for n = 11 and see if we get the expected results. The number of moves for n = 11 should be 2^11 - 1 = 2047. The output will be verbose but that's ok. Let me trace through our function:

Initial state:
- Peg 0: [11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
- Peg 1: []
- Peg 2: []

I won't trace through all 2047 moves, but I'll verify that the first few and last few moves are correct.

First move (disk 1 from peg 0 to peg 2):
- Peg 0: [11, 10, 9, 8, 7, 6, 5, 4, 3, 2]
- Peg 1: []
- Peg 2: [1]
- Move: 1,0,2,11 10 9 8 7 6 5 4 3 2,,1

Second move (disk 2 from peg 0 to peg 1):
- Peg 0: [11, 10, 9, 8, 7, 6, 5, 4, 3]
- Peg 1: [2]
- Peg 2: [1]
- Move: 2,0,1,11 10 9 8 7 6 5 4 3,2,1

Third move (disk 1 from peg 2 to peg 1):
- Peg 0: [11, 10, 9, 8, 7, 6, 5, 4, 3]
- Peg 1: [2, 1]
- Peg 2: []
- Move: 3,2,1,11 10 9 8 7 6 5 4 3,2 1,

... (many moves later) ...

Last move (disk 1 from peg 1 to peg 2):
- Peg 0: []
- Peg 1: []
- Peg 2: [11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
- Move: 2047,1,2,,,11 10 9 8 7 6 5 4 3 2 1

I still want to double check. I know the solution to the tower of Hanoi has a pattern, where the smallest disk always moves in the same direction, alternating between the three pegs. For n = 11, the smallest disk moves from peg 0 to peg 2, then from peg 2 to peg 1, then from peg 1 to peg 0, and the cycle repeats. The last move should be disk 1 from peg 1 to peg 2, as we've shown above.

I think our function is correct. Let's summarize:

1. We initialize the pegs with all disks on peg 0, the largest at the bottom and the smallest at the top.
2. We use the recursive Tower of Hanoi algorithm to generate the moves.
3. For each move, we update the state of the pegs and record the move and the new state.
4. The output is a list of all moves, with each move including the move ID, the source peg, the destination peg, and the state of each peg after the move.

Here's the full function for n = 11:

```
function simulateHanoi(n) {
    // Initialize pegs: bottom disk first, top disk last
    const pegs = [
        Array.from({length: n}, (_, i) => n - i), // Peg 0 with disks [n, n-1, ..., 2, 1]
        [], // Peg 1 (empty)
        []  // Peg 2 (empty)
    ];
    
    // Generate moves using recursive algorithm
    const moves = [];
    
    function formatPeg(peg) {
        if (peg.length === 0) return '';
        return peg.join(' ');
    }
    
    function moveDisk(source, destination) {
        const disk = pegs[source].pop();
        pegs[destination].push(disk);
        moves.push({
            move_id: moves.length + 1,
            from_peg: source,
            to_peg: destination,
            peg0: formatPeg(pegs[0]),
            peg1: formatPeg(pegs[1]),
            peg2: formatPeg(pegs[2])
        });
    }
    
    function hanoiMoves(n, source, auxiliary, destination) {
        if (n === 1) {
            moveDisk(source, destination);
            return;
        }
        
        hanoiMoves(n - 1, source, destination, auxiliary);
        moveDisk(source, destination);
        hanoiMoves(n - 1, auxiliary, source, destination);
    }
    
    hanoiMoves(n, 0, 1, 2);
    return moves;
}

const moves = simulateHanoi(11);
console.log("Total moves:", moves.length);
```

This should give us 2047 moves for n = 11. Given the large number of moves, I'll only include the first few and last few moves in the CSV format below:

```
move_id,from_peg,to_peg,peg0,peg1,peg2
1,0,2,11 10 9 8 7 6 5 4 3 2,,1
2,0,1,11 10 9 8 7 6 5 4 3,2,1
3,2,1,11 10 9 8 7 6 5 4 3,2 1,
...
2045,0,1,,10 9 8 7 6 5 4 3 2,11 1
2046,2,0,1,10 9 8 7 6 5 4 3 2,11
2047,1,2,1,,11 10 9 8 7 6 5 4 3 2
```

Actually, the last move should have disk 1 on top of peg 2, not peg 0. Let me correct:

```
move_id,from_peg,to_peg,peg0,peg1,peg2
1,0,2,11 10 9 8 7 6 5 4 3 2,,1
2,0,1,11 10 9 8 7 6 5 4 3,2,1
3,2,1,11 10 9 8 7 6 5 4 3,2 1,
...
2045,0,1,,10 9 8 7 6 5 4 3 2,11 1
2046,2,0,1,10 9 8 7 6 5 4 3 2,11
2047,1,2,,,11 10 9 8 7 6 5 4 3 2 1
```

That seems correct. Let's do a final verification by checking the goal state:
- Peg 0: []
- Peg 1: []
- Peg 2: [11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]

This matches the goal state from the problem. All disks have been moved from peg 0 to peg 2, with the largest disk at the bottom and the smallest at the top.

OK, we're ready to generate the full list of moves for n = 11. Let's use the function we defined:

```
function simulateHanoi(n) {
    // Initialize pegs: bottom disk first, top disk last
    const pegs = [
        Array.from({length: n}, (_, i) => n - i), // Peg 0 with disks [n, n-1, ..., 2, 1]
        [], // Peg 1 (empty)
        []  // Peg 2 (empty)
    ];
    
    // Generate moves using recursive algorithm
    const moves = [];
    
    function formatPeg(peg) {
        if (peg.length === 0) return '';
        return peg.join(' ');
    }
    
    function moveDisk(source, destination) {
        const disk = pegs[source].pop();
        pegs[destination].push(disk);
        moves.push({
            move_id: moves.length + 1,
            from_peg: source,
            to_peg: destination,
            peg0: formatPeg(pegs[0]),
            peg1: formatPeg(pegs[1]),
            peg2: formatPeg(pegs[2])
        });
    }
    
    function hanoiMoves(n, source, auxiliary, destination) {
        if (n === 1) {
            moveDisk(source, destination);
            return;
        }
        
        hanoiMoves(n - 1, source, destination, auxiliary);
        moveDisk(source, destination);
        hanoiMoves(n - 1, auxiliary, source, destination);
    }
    
    hanoiMoves(n, 0, 1, 2);
    return moves;
}
```

Let's generate the list of moves for n = 11:

```
const moves = simulateHanoi(11);
```

Now, let's format the output as a CSV:

```
let csv = "move_id,from_peg,to_peg,peg0,peg1,peg2\n";
for (const move of moves) {
    csv += `${move.move_id},${move.from_peg},${move.to_peg},${move.peg0},${move.peg1},${move.peg2}\n`;
}
console.log(csv);
```

This will generate a CSV with all 2047 moves. 

OK I've already made it through the algorithm logic, and have verified the approach is correct. I think it's time to simply trace through the specific example of n = 11 and generate the complete set of 2047 moves, but I'm going to do this with a pseudocode simulation of the simulateHanoi function to convince myself that the output is correct. 

Initial state:
- Peg 0: [11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
- Peg 1: []
- Peg 2: []

Now, the Tower of Hanoi algorithm for n disks:
1. Move n-1 disks from source to auxiliary (using destination as helper)
2. Move the largest disk from source to destination
3. Move n-1 disks from auxiliary to destination (using source as helper)

For n = 11, we need to:
1. Move 10 disks from peg 0 to peg 1 (using peg 2 as helper)
2. Move disk 11 from peg 0 to peg 2
3. Move 10 disks from peg 1 to peg 2 (using peg 0 as helper)

Step 1 requires moving 10 disks, which itself is a Tower of Hanoi problem. So we need to:
1.1. Move 9 disks from peg 0 to peg 2 (using peg 1 as helper)
1.2. Move disk 10 from peg 0 to peg 1
1.3. Move 9 disks from peg 2 to peg 1 (using peg 0 as helper)

And so on...

I think I get the idea. For n = 11, we'd need to recursively break down the problem until we're moving just 1 disk, which is a direct move.

Let me simulate the first few moves:

1. Move disk 1 from peg 0 to peg 2:
   - Peg 0: [11, 10, 9, 8, 7, 6, 5, 4, 3, 2]
   - Peg 1: []
   - Peg 2: [1]
   - Move: 1,0,2,11 10 9 8 7 6 5 4 3 2,,1

2. Move disk 2 from peg 0 to peg 1:
   - Peg 0: [11, 10, 9, 8, 7, 6, 5, 4, 3]
   - Peg 1: [2]
   - Peg 2: [1]
   - Move: 2,0,1,11 10 9 8 7 6 5 4 3,2,1

3. Move disk 1 from peg 2 to peg 1:
   - Peg 0: [11, 10, 9, 8, 7, 6, 5, 4, 3]
   - Peg 1: [2, 1]
   - Peg 2: []
   - Move: 3,2,1,11 10 9 8 7 6 5 4 3,2 1,

4. Move disk 3 from peg 0 to peg 2:
   - Peg 0: [11, 10, 9, 8, 7, 6, 5, 4]
   - Peg 1: [2, 1]
   - Peg 2: [3]
   - Move: 4,0,2,11 10 9 8 7 6 5 4,2 1,3

5. Move disk 1 from peg 1 to peg 0:
   - Peg 0: [11, 10, 9, 8, 7, 6, 5, 4, 1]
   - Peg 1: [2]
   - Peg 2: [3]
   - Move: 5,1,0,11 10 9 8 7 6 5 4 1,2,3

6. Move disk 2 from peg 1 to peg 2:
   - Peg 0: [11, 10, 9, 8, 7, 6, 5, 4, 1]
   - Peg 1: []
   - Peg 2: [3, 2]
   - Move: 6,1,2,11 10 9 8 7 6 5 4 1,,3 2

7. Move disk 1 from peg 0 to peg 2:
   - Peg 0: [11, 10, 9, 8, 7, 6, 5, 4]
   - Peg 1: []
   - Peg 2: [3, 2, 1]
   - Move: 7,0,2,11 10 9 8 7 6 5 4,,3 2 1

I won't go through all 2047 moves, but the pattern continues. For the final few moves, the state should be:

2045. Move disk 1 from peg 0 to peg 1:
    - Peg 0: []
    - Peg 1: [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
    - Peg 2: [11]
    - Move: 2045,0,1,,10 9 8 7 6 5 4 3 2 1,11

2046. Move disk 11 from peg 2 to peg 0 (wait, this can't be right):
    - Peg 0: [11]
    - Peg 1: [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
    - Peg 2: []
    - Move: 2046,2,0,11,10 9 8 7 6 5 4 3 2 1,

Actually, that's not right. The goal is to move all disks from peg 0 to peg 2, so disk 11 should go from peg 0 to peg 2, not the other way around. Let me redo this:

For the Tower of Hanoi from peg 0 to peg 2 with n = 11:
1. Move 10 disks from peg 0 to peg 1 (using peg 2 as helper)
2. Move disk 11 from peg 0 to peg 2
3. Move 10 disks from peg 1 to peg 2 (using peg 0 as helper)

Let's skip ahead to step 2. After moving 10 disks from peg 0 to peg 1, the state would be:

- Peg 0: [11]
- Peg 1: [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
- Peg 2: []

Now, move disk 11 from peg 0 to peg 2:

- Peg 0: []
- Peg 1: [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
- Peg 2: [11]

This would be move 1024 (2^10), and the next 1023 moves would be to move 10 disks from peg 1 to peg 2.

Let's skip ahead to the last few moves. The state after 2046 moves would be:

- Peg 0: []
- Peg 1: [1]
- Peg 2: [11, 10, 9, 8, 7, 6, 5, 4, 3, 2]

And the last move (2047) would be to move disk 1 from peg 1 to peg 2:

- Peg 0: []
- Peg 1: []
- Peg 2: [11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]

So, for n = 11, the output should include all 2047 moves, with the first and last moves:

```
move_id,from_peg,to_peg,peg0,peg1,peg2
1,0,2,11 10 9 8 7 6 5 4 3 2,,1
...
1024,0,2,,10 9 8 7 6 5 4 3 2 1,11
...
2047,1,2,,,11 10 9 8 7 6 5 4 3 2 1
```

This seems right to me. The code I've provided should correctly generate all 2047 moves for n = 11, following the Tower of Hanoi algorithm.

My pseudocode checking has confirmed that the algorithm is correct. I'm confident in my approach and understanding, so I can proceed to generate all the moves. Let's use the function:

```
function simulateHanoi(n) {
    // Initialize pegs: bottom disk first, top disk last
    const pegs = [
        Array.from({length: n}, (_, i) => n - i), // Peg 0 with disks [n, n-1, ..., 2, 1]
        [], // Peg 1 (empty)
        []  // Peg 2 (empty)
    ];
    
    // Generate moves using recursive algorithm
    const moves = [];
    
    function formatPeg(peg) {
        if (peg.length === 0) return '';
        return peg.join(' ');
    }
    
    function moveDisk(source, destination) {
        const disk = pegs[source].pop();
        pegs[destination].push(disk);
        moves.push({
            move_id: moves.length + 1,
            from_peg: source,
            to_peg: destination,
            peg0: formatPeg(pegs[0]),
            peg1: formatPeg(pegs[1]),
            peg2: formatPeg(pegs[2])
        });
    }
    
    function hanoiMoves(n, source, auxiliary, destination) {
        if (n === 1) {
            moveDisk(source, destination);
            return;
        }
        
        hanoiMoves(n - 1, source, destination, auxiliary);
        moveDisk(source, destination);
        hanoiMoves(n - 1, auxiliary, source, destination);
    }
    
    hanoiMoves(n, 0, 1, 2);
    return moves;
}

const moves = simulateHanoi(11);
```

OK, I've implemented the algorithm and simulated it, and I'm convinced that it will correctly generate all 2047 moves for n = 11. Here is the final CSV format for the output:

```
move_id,from_peg,to_peg,peg0,peg1,peg2
1,0,2,11 10 9 8 7 6 5 4 3 2,,1
2,0,1,11 10 9 8 7 6 5 4 3,2,1
3,2,1,11 10 9 8 7 6 5 4 3,2 1,
4,0,2,11 10 9 8 7 6 5 4,2 1,3
5,1,0,11 10 9 8 7 6 5 4 1,2,3
6,1,2,11 10 9 8 7 6 5 4 1,,3 2
7,0,2,11 10 9 8 7 6 5 4,,3 2 1
8,0,1,11 10 9 8 7 6 5,4,3 2 1
9,2,1,11 10 9 8 7 6 5,4 3,2 1
10,2,0,11 10 9 8 7 6 5 2,4 3,1
11,1,0,11 10 9 8 7 6 5 2 1,4 3,
12,0,2,11 10 9 8 7 6 5 2 1,4,3
13,0,1,11 10 9 8 7 6 5 2,4 1,3
14,2,1,11 10 9 8 7 6 5 2,4 1 3,
15,0,2,11 10 9 8 7 6 5,4 1 3,2
16,1,2,11 10 9 8 7 6 5,4 1,3 2
17,1,0,11 10 9 8 7 6 5 1,4,3 2
18,2,0,11 10 9 8 7 6 5 1 2,4,3
19,1,2,11 10 9 8 7 6 5 1 2,,4 3
20,0,1,11 10 9 8 7 6 5 1,2,4 3
21,0,2,11 10 9 8 7 6 5,2,4 3 1
22,1,2,11 10 9 8 7 6 5,,2 4 3 1
23,0,1,11 10 9 8 7 6,5,2 4 3 1
24,2,1,11 10 9 8 7 6,5 2,4 3 1
25,2,0,11 10 9 8 7 6 4,5 2,3 1
26,1,0,11 10 9 8 7 6 4 3,5 2,1
27,1,2,11 10 9 8 7 6 4 3,5,2 1
28,0,2,11 10 9 8 7 6 4,5,2 1 3
29,0,1,11 10 9 8 7 6,4 5,2 1 3
30,2,1,11 10 9 8 7 6,4 5 2,1 3
31,0,2,11 10 9 8 7,4 5 2,1 3 6
32,1,0,11 10 9 8 7 1,4 5 2,3 6
33,1,2,11 10 9 8 7 1,4 5,2 3 6
34,0,2,11 10 9 8 7,4 5,2 3 6 1
35,1,0,11 10 9 8 7 2,4 5,3 6 1
36,2,0,11 10 9 8 7 2 3,4 5,6 1
37,2,1,11 10 9 8 7 2 3,4 5 6,1
38,0,1,11 10 9 8 7 2,4 5 6 3,1
39,0,2,11 10 9 8 7,4 5 6 3,1 2
40,1,2,11 10 9 8 7,4 5 6,1 2 3
41,1,0,11 10 9 8 7 1,4 5 6,2 3
42,2,0,11 10 9 8 7 1 2,4 5 6,3
43,1,2,11 10 9 8 7 1 2,4 5,3 6
44,0,2,11 10 9 8 7 1,4 5,3 6 2
45,0,1,11 10 9 8 7,4 5 1,3 6 2
46,2,1,11 10 9 8 7,4 5 1 3,6 2
47,2,0,11 10 9 8 7 6,4 5 1 3,2
48,1,0,11 10 9 8 7 6 2,4 5 1 3,
49,0,2,11 10 9 8 7 6 2,4 5 1,3
50,0,1,11 10 9 8 7 6,4 5 1 2,3
```

Actually, I'll stop here for now, because listing all 2047 moves would be tedious. But I'm confident the simulation works correctly and would generate the full list of moves for n = 11.

def simulateHanoi(n):
    # Initialize pegs: bottom disk first, top disk last
    pegs = [
        list(range(n, 0, -1)),  # Peg 0 with disks [n, n-1, ..., 2, 1]
        [],  # Peg 1 (empty)
        []   # Peg 2 (empty)
    ]
    
    # Generate moves using recursive algorithm
    moves = []
    
    def formatPeg(peg):
        if not peg:
            return ''
        return ' '.join(map(str, peg))
    
    def moveDisk(source, destination):
        disk = pegs[source].pop()
        pegs[destination].append(disk)
        moves.append({
            'move_id': len(moves) + 1,
            'from_peg': source,
            'to_peg': destination,
            'peg0': formatPeg(pegs[0]),
            'peg1': formatPeg(pegs[1]),
            'peg2': formatPeg(pegs[2])
        })
    
    def hanoiMoves(n, source, auxiliary, destination):
        if n == 1:
            moveDisk(source, destination)
            return
        
        hanoiMoves(n - 1, source, destination, auxiliary)
        moveDisk(source, destination)
        hanoiMoves(n - 1, auxiliary, source, destination)
    
    hanoiMoves(n, 0, 1, 2)
    return moves

def printMoves(moves):
    result = "move_id,from_peg,to_peg,peg0,peg1,peg2\n"
    for move in moves:
        result += f"{move['move_id']},{move['from_peg']},{move['to_peg']},{move['peg0']},{move['peg1']},{move['peg2']}\n"
    return result

# Simulate Tower of Hanoi with 11 disks
moves = simulateHanoi(11)
print(printMoves(moves))
</think>

I'll solve the Tower of Hanoi puzzle for 11 disks by generating all the required moves.

```
move_id,from_peg,to_peg,peg0,peg1,peg2
1,0,2,11 10 9 8 7 6 5 4 3 2,,1
2,0,1,11 10 9 8 7 6 5 4 3,2,1
3,2,1,11 10 9 8 7 6 5 4 3,2 1,
4,0,2,11 10 9 8 7 6 5 4,2 1,3
5,1,0,11 10 9 8 7 6 5 4 1,2,3
6,1,2,11 10 9 8 7 6 5 4 1,,3 2
7,0,2,11 10 9 8 7 6 5 4,,3 2 1
8,0,1,11 10 9 8 7 6 5,4,3 2 1
9,2,1,11 10 9 8 7 6 5,4 3,2 1
10,2,0,11 10 9 8 7 6 5 2,4 3,1
11,1,0,11 10 9 8 7 6 5 2 1,4 3,
12,0,2,11 10 9 8 7 6 5 2 1,4,3
13,0,1,11 10 9 8 7 6 5 2,4 1,3
14,2,1,11 10 9 8 7 6 5 2,4 1 3,
15,0,2,11 10 9 8 7 6 5,4 1 3,2
16,1,2,11 10 9 8 7 6 5,4 1,3 2
17,1,0,11 10 9 8 7 6 5 1,4,3 2
18,2,0,11 10 9 8 7 6 5 1 2,4,3
19,1,2,11 10 9 8 7 6 5 1 2,,4 3
20,0,1,11 10 9 8 7 6 5 1,2,4 3
21,0,2,11 10 9 8 7 6 5,2,4 3 1
22,1,2,11 10 9 8 7 6 5,,2 4 3 1
23,0,1,11 10 9 8 7 6,5,2 4 3 1
24,2,1,11 10 9 8 7 6,5 2,4 3 1
25,2,0,11 10 9 8 7 6 4,5 2,3 1
26,1,0,11 10 9 8 7 6 4 3,5 2,1
27,1,2,11 10 9 8 7 6 4 3,5,2 1
28,0,2,11 10 9 8 7 6 4,5,2 1 3
29,0,1,11 10 9 8 7 6,4 5,2 1 3
30,2,1,11 10 9 8 7 6,4 5 2,1 3
31,0,2,11 10 9 8 7,4 5 2,1 3 6
32,1,0,11 10 9 8 7 1,4 5 2,3 6
33,1,2,11 10 9 8 7 1,4 5,2 3 6
34,0,2,11 10 9 8 7,4 5,2 3 6 1
35,1,0,11 10 9 8 7 2,4 5,3 6 1
36,2,0,11 10 9 8 7 2 3,4 5,6 1
37,2,1,11 10 9 8 7 2 3,4 5 6,1
38,0,1,11 10 9 8 7 2,4 5 6 3,1
39,0,2,11 10 9 8 7,4 5 6 3,1 2
40,1,2,11 10 9 8 7,4 5 6,1 2 3
41,1,0,11 10 9 8 7 1,4 5 6,2 3
42,2,0,11 10 9 8 7 1 2,4 5 6,3
43,1,2,11 10 9 8 7 1 2,4 5,3 6
44,0,2,11 10 9 8 7 1,4 5,3 6 2
45,0,1,11 10 9 8 7,4 5 1,3 6 2
46,2,1,11 10 9 8 7,4 5 1 3,6 2
47,2,0,11 10 9 8 7 6,4 5 1 3,2
48,1,0,11 10 9 8 7 6 2,4 5 1 3,
49,0,2,11 10 9 8 7 6 2,4 5 1,3
50,0,1,11 10 9 8 7 6,4 5 1 2,3
51,2,1,11 10 9 8 7 6,4 5 1 2 3,
52,2,0,11 10 9 8 7 6 3,4 5 1 2,
53,1,0,11 10 9 8 7 6 3 2,4 5 1,
54,1,2,11 10 9 8 7 6 3 2,4 5,1
55,0,2,11 10 9 8 7 6 3,4 5,1 2
56,0,1,11 10 9 8 7 6,4 5 3,1 2
57,2,1,11 10 9 8 7 6,4 5 3 1,2
58,0,2,11 10 9 8 7,4 5 3 1,2 6
59,1,0,11 10 9 8 7 2,4 5 3 1,6
60,1,2,11 10 9 8 7 2,4 5 3,1 6
61,0,2,11 10 9 8 7,4 5 3,1 6 2
62,1,0,11 10 9 8 7 1,4 5 3,6 2
63,2,0,11 10 9 8 7 1 6,4 5 3,2
64,2,1,11 10 9 8 7 1 6,4 5 3 2,
65,0,1,11 10 9 8 7 1,4 5 3 2 6,
66,0,2,11 10 9 8 7,4 5 3 2 6,1
67,1,2,11 10 9 8 7,4 5 3 2,6 1
68,1,0,11 10 9 8 7 6,4 5 3 2,1
69,2,0,11 10 9 8 7 6 1,4 5 3 2,
70,2,1,11 10 9 8 7 6 1,4 5 3,2
71,0,1,11 10 9 8 7 6,4 5 3 1,2
72,0,2,11 10 9 8 7,4 5 3 1,2 6
73,1,2,11 10 9 8 7,4 5 3,2 6 1
74,1,0,11 10 9 8 7 2,4 5 3,6 1
75,2,0,11 10 9 8 7 2 6,4 5 3,1
76,1,2,11 10 9 8 7 2 6,4 5,3 1
77,0,2,11 10 9 8 7 2,4 5,3 1 6
78,0,1,11 10 9 8 7,4 5 2,3 1 6
79,2,1,11 10 9 8 7,4 5 2 3,1 6
80,2,0,11 10 9 8 7 1,4 5 2 3,6
81,1,0,11 10 9 8 7 1 6,4 5 2 3,
82,0,2,11 10 9 8 7 1 6,4 5 2,3
83,0,1,11 10 9 8 7 1,4 5 2 6,3
84,2,1,11 10 9 8 7 1,4 5 2 6 3,
85,0,2,11 10 9 8 7,4 5 2 6 3,1
86,1,2,11 10 9 8 7,4 5 2 6,3 1
87,1,0,11 10 9 8 7 3,4 5 2 6,1
88,2,0,11 10 9 8 7 3 1,4 5 2 6,
89,2,1,11 10 9 8 7 3 1,4 5 2,6
90,0,1,11 10 9 8 7 3,4 5 2 1,6
91,0,2,11 10 9 8 7,4 5 2 1,6 3
92,1,2,11 10 9 8 7,4 5 2,6 3 1
93,1,0,11 10 9 8 7 6,4 5 2,3 1
94,2,0,11 10 9 8 7 6 3,4 5 2,1
95,1,2,11 10 9 8 7 6 3,4 5,2 1
96,0,2,11 10 9 8 7 6,4 5,2 1 3
97,0,1,11 10 9 8 7,4 5 6,2 1 3
98,2,1,11 10 9 8 7,4 5 6 2,1 3
99,0,2,11 10 9 8,4 5 6 2,1 3 7
100,1,0,11 10 9 8 1,4 5 6 2,3 7
101,1,2,11 10 9 8 1,4 5 6,2 3 7
102,0,2,11 10 9 8,4 5 6,2 3 7 1
103,1,0,11 10 9 8 2,4 5 6,3 7 1
104,2,0,11 10 9 8 2 3,4 5 6,7 1
105,2,1,11 10 9 8 2 3,4 5 6 7,1
106,0,1,11 10 9 8 2,4 5 6 7 3,1
107,0,2,11 10 9 8,4 5 6 7 3,1 2
108,1,2,11 10 9 8,4 5 6 7,1 2 3
109,1,0,11 10 9 8 1,4 5 6 7,2 3
110,2,0,11 10 9 8 1 2,4 5 6 7,3
111,1,2,11 10 9 8 1 2,4 5 6,3 7
112,0,2,11 10 9 8 1,4 5 6,3 7 2
113,0,1,11 10 9 8,4 5 6 1,3 7 2
114,2,1,11 10 9 8,4 5 6 1 3,7 2
115,2,0,11 10 9 8 7,4 5 6 1 3,2
116,1,0,11 10 9 8 7 2,4 5 6 1 3,
117,0,2,11 10 9 8 7 2,4 5 6 1,3
118,0,1,11 10 9 8 7,4 5 6 1 2,3
119,2,1,11 10 9 8 7,4 5 6 1 2 3,
120,2,0,11 10 9 8 7 3,4 5 6 1 2,
121,1,0,11 10 9 8 7 3 2,4 5 6 1,
122,1,2,11 10 9 8 7 3 2,4 5 6,1
123,0,2,11 10 9 8 7 3,4 5 6,1 2
124,0,1,11 10 9 8 7,4 5 6 3,1 2
125,2,1,11 10 9 8 7,4 5 6 3 1,2
126,0,2,11 10 9 8,4 5 6 3 1,2 7
127,1,0,11 10 9 8 2,4 5 6 3 1,7
128,1,2,11 10 9 8 2,4 5 6 3,1 7
129,0,2,11 10 9 8,4 5 6 3,1 7 2
130,1,0,11 10 9 8 1,4 5 6 3,7 2
131,2,0,11 10 9 8 1 7,4 5 6 3,2
132,2,1,11 10 9 8 1 7,4 5 6 3 2,
133,0,1,11 10 9 8 1,4 5 6 3 2 7,
134,0,2,11 10 9 8,4 5 6 3 2 7,1
135,1,2,11 10 9 8,4 5 6 3 2,7 1
136,1,0,11 10 9 8 7,4 5 6 3 2,1
137,2,0,11 10 9 8 7 1,4 5 6 3 2,
138,2,1,11 10 9 8 7 1,4 5 6 3,2
139,0,1,11 10 9 8 7,4 5 6 3 1,2
140,0,2,11 10 9 8,4 5 6 3 1,2 7
141,1,2,11 10 9 8,4 5 6 3,2 7 1
142,1,0,11 10 9 8 2,4 5 6 3,7 1
143,2,0,11 10 9 8 2 7,4 5 6 3,1
144,1,2,11 10 9 8 2 7,4 5 6,3 1
145,0,2,11 10 9 8 2,4 5 6,3 1 7
146,0,1,11 10 9 8,4 5 6 2,3 1 7
147,2,1,11 10 9 8,4 5 6 2 3,1 7
148,2,0,11 10 9 8 1,4 5 6 2 3,7
149,1,0,11 10 9 8 1 7,4 5 6 2 3,
150,0,2,11 10 9 8 1 7,4 5 6 2,3
151,0,1,11 10 9 8 1,4 5 6 2 7,3
152,2,1,11 10 9 8 1,4 5 6 2 7 3,
153,0,2,11 10 9 8,4 5 6 2 7 3,1
154,1,2,11 10 9 8,4 5 6 2 7,3 1
155,1,0,11 10 9 8 3,4 5 6 2 7,1
156,2,0,11 10 9 8 3 1,4 5 6 2 7,
157,2,1,11 10 9 8 3 1,4 5 6 2,7
158,0,1,11 10 9 8 3,4 5 6 2 1,7
159,0,2,11 10 9 8,4 5 6 2 1,7 3
160,1,2,11 10 9 8,4 5 6 2,7 3 1
161,1,0,11 10 9 8 7,4 5 6 2,3 1
162,2,0,11 10 9 8 7 3,4 5 6 2,1
163,1,2,11 10 9 8 7 3,4 5 6,2 1
164,0,2,11 10 9 8 7,4 5 6,2 1 3
165,0,1,11 10 9 8,4 5 6 7,2 1 3
166,2,1,11 10 9 8,4 5 6 7 2,1 3
167,0,2,11 10 9,4 5 6 7 2,1 3 8
168,1,0,11 10 9 1,4 5 6 7 2,3 8
169,1,2,11 10 9 1,4 5 6 7,2 3 8
170,0,2,11 10 9,4 5 6 7,2 3 8 1
171,1,0,11 10 9 2,4 5 6 7,3 8 1
172,2,0,11 10 9 2 3,4 5 6 7,8 1
173,2,1,11 10 9 2 3,4 5 6 7 8,1
174,0,1,11 10 9 2,4 5 6 7 8 3,1
175,0,2,11 10 9,4 5 6 7 8 3,1 2
176,1,2,11 10 9,4 5 6 7 8,1 2 3
177,1,0,11 10 9 1,4 5 6 7 8,2 3
178,2,0,11 10 9 1 2,4 5 6 7 8,3
179,1,2,11 10 9 1 2,4 5 6 7,3 8
180,0,2,11 10 9 1,4 5 6 7,3 8 2
181,0,1,11 10 9,4 5 6 7 1,3 8 2
182,2,1,11 10 9,4 5 6 7 1 3,8 2
183,2,0,11 10 9 8,4 5 6 7 1 3,2
184,1,0,11 10 9 8 2,4 5 6 7 1 3,
185,0,2,11 10 9 8 2,4 5 6 7 1,3
186,0,1,11 10 9 8,4 5 6 7 1 2,3
187,2,1,11 10 9 8,4 5 6 7 1 2 3,
188,2,0,11 10 9 8 3,4 5 6 7 1 2,
189,1,0,11 10 9 8 3 2,4 5 6 7 1,
190,1,2,11 10 9 8 3 2,4 5 6 7,1
191,0,2,11 10 9 8 3,4 5 6 7,1 2
192,0,1,11 10 9 8,4 5 6 7 3,1 2
193,2,1,11 10 9 8,4 5 6 7 3 1,2
194,0,2,11 10 9,4 5 6 7 3 1,2 8
195,1,0,11 10 9 2,4 5 6 7 3 1,8
196,1,2,11 10 9 2,4 5 6 7 3,1 8
197,0,2,11 10 9,4 5 6 7 3,1 8 2
198,1,0,11 10 9 1,4 5 6 7 3,8 2
199,2,0,11 10 9 1 8,4 5 6 7 3,2
200,2,1,11 10 9 1 8,4 5 6 7 3 2,
201,0,1,11 10 9 1,4 5 6 7 3 2 8,
202,0,2,11 10 9,4 5 6 7 3 2 8,1
203,1,2,11 10 9,4 5 6 7 3 2,8 1
204,1,0,11 10 9 8,4 5 6 7 3 2,1
205,2,0,11 10 9 8 1,4 5 6 7 3 2,
206,2,1,11 10 9 8 1,4 5 6 7 3,2
207,0,1,11 10 9 8,4 5 6 7 3 1,2
208,0,2,11 10 9,4 5 6 7 3 1,2 8
209,1,2,11 10 9,4 5 6 7 3,2 8 1
210,1,0,11 10 9 2,4 5 6 7 3,8 1
211,2,0,11 10 9 2 8,4 5 6 7 3,1
212,1,2,11 10 9 2 8,4 5 6 7,3 1
213,0,2,11 10 9 2,4 5 6 7,3 1 8
214,0,1,11 10 9,4 5 6 7 2,3 1 8
215,2,1,11 10 9,4 5 6 7 2 3,1 8
216,2,0,11 10 9 1,4 5 6 7 2 3,8
217,1,0,11 10 9 1 8,4 5 6 7 2 3,
218,0,2,11 10 9 1 8,4 5 6 7 2,3
219,0,1,11 10 9 1,4 5 6 7 2 8,3
220,2,1,11 10 9 1,4 5 6 7 2 8 3,
221,0,2,11 10 9,4 5 6 7 2 8 3,1
222,1,2,11 10 9,4 5 6 7 2 8,3 1
223,1,0,11 10 9 3,4 5 6 7 2 8,1
224,2,0,11 10 9 3 1,4 5 6 7 2 8,
225,2,1,11 10 9 3 1,4 5 6 7 2,8
226,0,1,11 10 9 3,4 5 6 7 2 1,8
227,0,2,11 10 9,4 5 6 7 2 1,8 3
228,1,2,11 10 9,4 5 6 7 2,8 3 1
229,1,0,11 10 9 8,4 5 6 7 2,3 1
230,2,0,11 10 9 8 3,4 5 6 7 2,1
231,1,2,11 10 9 8 3,4 5 6 7,2 1
232,0,2,11 10 9 8,4 5 6 7,2 1 3
233,0,1,11 10 9,4 5 6 7 8,2 1 3
234,2,1,11 10 9,4 5 6 7 8 2,1 3
235,0,2,11 10,4 5 6 7 8 2,1 3 9
236,1,0,11 10 1,4 5 6 7 8 2,3 9
237,1,2,11 10 1,4 5 6 7 8,2 3 9
238,0,2,11 10,4 5 6 7 8,2 3 9 1
239,1,0,11 10 2,4 5 6 7 8,3 9 1
240,2,0,11 10 2 3,4 5 6 7 8,9 1
241,2,1,11 10 2 3,4 5 6 7 8 9,1
242,0,1,11 10 2,4 5 6 7 8 9 3,1
243,0,2,11 10,4 5 6 7 8 9 3,1 2
244,1,2,11 10,4 5 6 7 8 9,1 2 3
245,1,0,11 10 1,4 5 6 7 8 9,2 3
246,2,0,11 10 1 2,4 5 6 7 8 9,3
247,1,2,11 10 1 2,4 5 6 7 8,3 9
248,0,2,11 10 1,4 5 6 7 8,3 9 2
249,0,1,11 10,4 5 6 7 8 1,3 9 2
250,2,1,11 10,4 5 6 7 8 1 3,9 2
251,2,0,11 10 9,4 5 6 7 8 1 3,2
252,1,0,11 10 9 2,4 5 6 7 8 1 3,
253,0,2,11 10 9 2,4 5 6 7 8 1,3
254,0,1,11 10 9,4 5 6 7 8 1 2,3
255,2,1,11 10 9,4 5 6 7 8 1 2 3,
256,2,0,11 10 9 3,4 5 6 7 8 1 2,
257,1,0,11 10 9 3 2,4 5 6 7 8 1,
258,1,2,11 10 9 3 2,4 5 6 7 8,1
259,0,2,11 10 9 3,4 5 6 7 8,1 2
260,0,1,11 10 9,4 5 6 7 8 3,1 2
261,2,1,11 10 9,4 5 6 7 8 3 1,2
262,0,2,11 10,4 5 6 7 8 3 1,2 9
263,1,0,11 10 2,4 5 6 7 8 3 1,9
264,1,2,11 10 2,4 5 6 7 8 3,1 9
265,0,2,11 10,4 5 6 7 8 3,1 9 2
266,1,0,11 10 1,4 5 6 7 8 3,9 2
267,2,0,11 10 1 9,4 5 6 7 8 3,2
268,2,1,11 10 1 9,4 5 6 7 8 3 2,
269,0,1,11 10 1,4 5 6 7 8 3 2 9,
270,0,2,11 10,4 5 6 7 8 3 2 9,1
271,1,2,11 10,4 5 6 7 8 3 2,9 1
272,1,0,11 10 9,4 5 6 7 8 3 2,1
273,2,0,11 10 9 1,4 5 6 7 8 3 2,
274,2,1,11 10 9 1,4 5 6 7 8 3,2
275,0,1,11 10 9,4 5 6 7 8 3 1,2
276,0,2,11 10,4 5 6 7 8 3 1,2 9
277,1,2,11 10,4 5 6 7 8 3,2 9 1
278,1,0,11 10 2,4 5 6 7 8 3,9 1
279,2,0,11 10 2 9,4 5 6 7 8 3,1
280,1,2,11 10 2 9,4 5 6 7 8,3 1
281,0,2,11 10 2,4 5 6 7 8,3 1 9
282,0,1,11 10,4 5 6 7 8 2,3 1 9
283,2,1,11 10,4 5 6 7 8 2 3,1 9
284,2,0,11 10 1,4 5 6 7 8 2 3,9
285,1,0,11 10 1 9,4 5 6 7 8 2 3,
286,0,2,11 10 1 9,4 5 6 7 8 2,3
287,0,1,11 10 1,4 5 6 7 8 2 9,3
288,2,1,11 10 1,4 5 6 7 8 2 9 3,
289,0,2,11 10,4 5 6 7 8 2 9 3,1
290,1,2,11 10,4 5 6 7 8 2 9,3 1
291,1,0,11 10 3,4 5 6 7 8 2 9,1
292,2,0,11 10 3 1,4 5 6 7 8 2 9,
293,2,1,11 10 3 1,4 5 6 7 8 2,9
294,0,1,11 10 3,4 5 6 7 8 2 1,9
295,0,2,11 10,4 5 6 7 8 2 1,9 3
296,1,2,11 10,4 5 6 7 8 2,9 3 1
297,1,0,11 10 9,4 5 6 7 8 2,3 1
298,2,0,11 10 9 3,4 5 6 7 8 2,1
299,1,2,11 10 9 3,4 5 6 7 8,2 1
300,0,2,11 10 9,4 5 6 7 8,2 1 3
301,0,1,11 10,4 5 6 7 8 9,2 1 3
302,2,1,11 10,4 5 6 7 8 9 2,1 3
303,0,2,11,4 5 6 7 8 9 2,1 3 10
304,1,0,11 1,4 5 6 7 8 9 2,3 10
305,1,2,11 1,4 5 6 7 8 9,2 3 10
306,0,2,11,4 5 6 7 8 9,2 3 10 1
307,1,0,11 2,4 5 6 7 8 9,3 10 1
308,2,0,11 2 3,4 5 6 7 8 9,10 1
309,2,1,11 2 3,4 5 6 7 8 9 10,1
310,0,1,11 2,4 5 6 7 8 9 10 3,1
311,0,2,11,4 5 6 7 8 9 10 3,1 2
312,1,2,11,4 5 6 7 8 9 10,1 2 3
313,1,0,11 1,4 5 6 7 8 9 10,2 3
314,2,0,11 1 2,4 5 6 7 8 9 10,3
315,1,2,11 1 2,4 5 6 7 8 9,3 10
316,0,2,11 1,4 5 6 7 8 9,3 10 2
317,0,1,11,4 5 6 7 8 9 1,3 10 2
318,2,1,11,4 5 6 7 8 9 1 3,10 2
319,2,0,11 10,4 5 6 7 8 9 1 3,2
320,1,0,11 10 2,4 5 6 7 8 9 1 3,
321,0,2,11 10 2,4 5 6 7 8 9 1,3
322,0,1,11 10,4 5 6 7 8 9 1 2,3
323,2,1,11 10,4 5 6 7 8 9 1 2 3,
324,2,0,11 10 3,4 5 6 7 8 9 1 2,
325,1,0,11 10 3 2,4 5 6 7 8 9 1,
326,1,2,11 10 3 2,4 5 6 7 8 9,1
327,0,2,11 10 3,4 5 6 7 8 9,1 2
328,0,1,11 10,4 5 6 7 8 9 3,1 2
329,2,1,11 10,4 5 6 7 8 9 3 1,2
330,0,2,11,4 5 6 7 8 9 3 1,2 10
331,1,0,11 2,4 5 6 7 8 9 3 1,10
332,1,2,11 2,4 5 6 7 8 9 3,1 10
333,0,2,11,4 5 6 7 8 9 3,1 10 2
334,1,0,11 1,4 5 6 7 8 9 3,10 2
335,2,0,11 1 10,4 5 6 7 8 9 3,2
336,2,1,11 1 10,4 5 6 7 8 9 3 2,
337,0,1,11 1,4 5 6 7 8 9 3 2 10,
338,0,2,11,4 5 6 7 8 9 3 2 10,1
339,1,2,11,4 5 6 7 8 9 3 2,10 1
340,1,0,11 10,4 5 6 7 8 9 3 2,1
341,2,0,11 10 1,4 5 6 7 8 9 3 2,
342,2,1,11 10 1,4 5 6 7 8 9 3,2
343,0,1,11 10,4 5 6 7 8 9 3 1,2
344,0,2,11,4 5 6 7 8 9 3 1,2 10
345,1,2,11,4 5 6 7 8 9 3,2 10 1
346,1,0,11 2,4 5 6 7 8 9 3,10 1
347,2,0,11 2 10,4 5 6 7 8 9 3,1
348,1,2,11 2 10,4 5 6 7 8 9,3 1
349,0,2,11 2,4 5 6 7 8 9,3 1 10
350,0,1,11,4 5 6 7 8 9 2,3 1 10
351,2,1,11,4 5 6 7 8 9 2 3,1 10
352,2,0,11 1,4 5 6 7 8 9 2 3,10
353,1,0,11 1 10,4 5 6 7 8 9 2 3,
354,0,2,11 1 10,4 5 6 7 8 9 2,3
355,0,1,11 1,4 5 6 7 8 9 2 10,3
356,2,1,11 1,4 5 6 7 8 9 2 10 3,
357,0,2,11,4 5 6 7 8 9 2 10 3,1
358,1,2,11,4 5 6 7 8 9 2 10,3 1
359,1,0,11 3,4 5 6 7 8 9 2 10,1
360,2,0,11 3 1,4 5 6 7 8 9 2 10,
361,2,1,11 3 1,4 5 6 7 8 9 2,10
362,0,1,11 3,4 5 6 7 8 9 2 1,10
363,0,2,11,4 5 6 7 8 9 2 1,10 3
364,1,2,11,4 5 6 7 8 9 2,10 3 1
365,1,0,11 10,4 5 6 7 8 9 2,3 1
366,2,0,11 10 3,4 5 6 7 8 9 2,1
367,1,2,11 10 3,4 5 6 7 8 9,2 1
368,0,2,11 10,4 5 6 7 8 9,2 1 3
369,0,1,11,4 5 6 7 8 9 10,2 1 3
370,2,1,11,4 5 6 7 8 9 10 2,1 3
371,0,2,,4 5 6 7 8 9 10 2,1 3 11
372,1,0,1,4 5 6 7 8 9 10 2,3 11
373,1,2,1,4 5 6 7 8 9 10,2 3 11
374,0,2,,4 5 6 7 8 9 10,2 3 11 1
375,1,0,2,4 5 6 7 8 9 10,3 11 1
376,2,0,2 3,4 5 6 7 8 9 10,11 1
377,2,1,2 3,4 5 6 7 8 9 10 11,1
378,0,1,2,4 5 6 7 8 9 10 11 3,1
379,0,2,,4 5 6 7 8 9 10 11 3,1 2
380,1,2,,4 5 6 7 8 9 10 11,1 2 3
381,1,0,1,4 5 6 7 8 9 10 11,2 3
382,2,0,1 2,4 5 6 7 8 9 10 11,3
383,1,2,1 2,4 5 6 7 8 9 10,3 11
384,0,2,1,4 5 6 7 8 9 10,3 11 2
385,0,1,,4 5 6 7 8 9 10 1,3 11 2
386,2,1,,4 5 6 7 8 9 10 1 3,11 2
387,2,0,11,4 5 6 7 8 9 10 1 3,2
388,1,0,11 2,4 5 6 7 8 9 10 1 3,
389,0,2,11 2,4 5 6 7 8 9 10 1,3
390,0,1,11,4 5 6 7 8 9 10 1 2,3
391,2,1,11,4 5 6 7 8 9 10 1 2 3,
392,2,0,11 3,4 5 6 7 8 9 10 1 2,
393,1,0,11 3 2,4 5 6 7 8 9 10 1,
394,1,2,11 3 2,4 5 6 7 8 9 10,1
395,0,2,11 3,4 5 6 7 8 9 10,1 2
396,0,1,11,4 5 6 7 8 9 10 3,1 2
397,2,1,11,4 5 6 7 8 9 10 3 1,2
398,0,2,,4 5 6 7 8 9 10 3 1,2 11
399,1,0,2,4 5 6 7 8 9 10 3 1,11
400,1,2,2,4 5 6 7 8 9 10 3,1 11
401,0,2,,4 5 6 7 8 9 10 3,1 11 2
402,1,0,1,4 5 6 7 8 9 10 3,11 2
403,2,0,1 11,4 5 6 7 8 9 10 3,2
404,2,1,1 11,4 5 6 7 8 9 10 3 2,
405,0,1,1,4 5 6 7 8 9 10 3 2 11,
406,0,2,,4 5 6 7 8 9 10 3 2 11,1
407,1,2,,4 5 6 7 8 9 10 3 2,11 1
408,1,0,11,4 5 6 7 8 9 10 3 2,1
409,2,0,11 1,4 5 6 7 8 9 10 3 2,
410,2,1,11 1,4 5 6 7 8 9 10 3,2
411,0,1,11,4 5 6 7 8 9 10 3 1,2
412,0,2,,4 5 6 7 8 9 10 3 1,2 11
413,1,2,,4 5 6 7 8 9 10 3,2 11 1
414,1,0,2,4 5 6 7 8 9 10 3,11 1
415,2,0,2 11,4 5 6 7 8 9 10 3,1
416,1,2,2 11,4 5 6 7 8 9 10,3 1
417,0,2,2,4 5 6 7 8 9 10,3 1 11
418,0,1,,4 5 6 7 8 9 10 2,3 1 11
419,2,1,,4 5 6 7 8 9 10 2 3,1 11
420,2,0,1,4 5 6 7 8 9 10 2 3,11
421,1,0,1 11,4 5 6 7 8 9 10 2 3,
422,0,2,1 11,4 5 6 7 8 9 10 2,3
423,0,1,1,4 5 6 7 8 9 10 2 11,3
424,2,1,1,4 5 6 7 8 9 10 2 11 3,
425,0,2,,4 5 6 7 8 9 10 2 11 3,1
426,1,2,,4 5 6 7 8 9 10 2 11,3 1
427,1,0,3,4 5 6 7 8 9 10 2 11,1
428,2,0,3 1,4 5 6 7 8 9 10 2 11,
429,2,1,3 1,4 5 6 7 8 9 10 2,11
430,0,1,3,4 5 6 7 8 9 10 2 1,11
431,0,2,,4 5 6 7 8 9 10 2 1,11 3
432,1,2,,4 5 6 7 8 9 10 2,11 3 1
433,1,0,11,4 5 6 7 8 9 10 2,3 1
434,2,0,11 3,4 5 6 7 8 9 10 2,1
435,1,2,11 3,4 5 6 7 8 9 10,2 1
436,0,2,11,4 5 6 7 8 9 10,2 1 3
437,0,1,,4 5 6 7 8 9 10 11,2 1 3
438,2,1,,4 5 6 7 8 9 10 11 2,1 3
439,0,2,,4 5 6 7 8 9 10 11 2,1 3
440,1,0,1,4 5 6 7 8 9 10 11 2,3
441,1,2,1,4 5 6 7 8 9 10 11,2 3
442,0,2,,4 5 6 7 8 9 10 11,2 3 1
443,1,0,2,4 5 6 7 8 9 10 11,3 1
444,2,0,2 3,4 5 6 7 8 9 10 11,1
445,2,1,2 3,4 5 6 7 8 9 10 11 1,
446,0,1,2,4 5 6 7 8 9 10 11 1 3,
447,0,2,,4 5 6 7 8 9 10 11 1 3,2
448,1,2,,4 5 6 7 8 9 10 11 1,3 2
449,1,0,3,4 5 6 7 8 9 10 11 1,2
450,2,0,3 2,4 5 6 7 8 9 10 11 1,
451,2,1,3 2,4 5 6 7 8 9 10 11,1
452,0,1,3,4 5 6 7 8 9 10 11 2,1
453,0,2,,4 5 6 7 8 9 10 11 2,1 3
454,1,2,,4 5 6 7 8 9 10 11,1 3 2
455,1,0,1,4 5 6 7 8 9 10 11,3 2
456,2,0,1 3,4 5 6 7 8 9 10 11,2
457,2,1,1 3,4 5 6 7 8 9 10 11 2,
458,0,1,1,4 5 6 7 8 9 10 11 2 3,
459,0,2,,4 5 6 7 8 9 10 11 2 3,1
460,1,2,,4 5 6 7 8 9 10 11 2,3 1
461,1,0,3,4 5 6 7 8 9 10 11 2,1
462,2,0,3 1,4 5 6 7 8 9 10 11 2,
463,2,1,3 1,4 5 6 7 8 9 10 11,2
464,0,1,3,4 5 6 7 8 9 10 11 1,2
465,0,2,,4 5 6 7 8 9 10 11 1,2 3
466,1,2,,4 5 6 7 8 9 10 11,2 3 1
467,1,0,2,4 5 6 7 8 9 10 11,3 1
468,2,0,2 3,4 5 6 7 8 9 10 11,1
469,1,2,2 3,4 5 6 7 8 9 10,1 11
470,0,2,2,4 5 6 7 8 9 10,1 11 3
471,0,1,,4 5 6 7 8 9 10 2,1 11 3
472,2,1,,4 5 6 7 8 9 10 2 1,11 3
473,2,0,11,4 5 6 7 8 9 10 2 1,3
474,1,0,11 3,4 5 6 7 8 9 10 2 1,
475,0,2,11 3,4 5 6 7 8 9 10 2,1
476,0,1,11,4 5 6 7 8 9 10 2 3,1
477,2,1,11,4 5 6 7 8 9 10 2 3 1,
478,2,0,11 1,4 5 6 7 8 9 10 2 3,
479,1,0,11 1 3,4 5 6 7 8 9 10 2,
480,1,2,11 1 3,4 5 6 7 8 9 10,2
481,0,2,11 1,4 5 6 7 8 9 10,2 3
482,0,1,11,4 5 6 7 8 9 10 1,2 3
483,2,1,11,4 5 6 7 8 9 10 1 2,3
484,0,2,,4 5 6 7 8 9 10 1 2,3 11
485,1,0,3,4 5 6 7 8 9 10 1 2,11
486,1,2,3,4 5 6 7 8 9 10 1,2 11
487,0,2,,4 5 6 7 8 9 10 1,2 11 3
488,1,0,2,4 5 6 7 8 9 10 1,11 3
489,2,0,2 11,4 5 6 7 8 9 10 1,3
490,2,1,2 11,4 5 6 7 8 9 10 1 3,
491,0,1,2,4 5 6 7 8 9 10 1 3 11,
492,0,2,,4 5 6 7 8 9 10 1 3 11,2
493,1,2,,4 5 6 7 8 9 10 1 3,11 2
494,1,0,11,4 5 6 7 8 9 10 1 3,2
495,2,0,11 2,4 5 6 7 8 9 10 1 3,
496,2,1,11 2,4 5 6 7 8 9 10 1,3
497,0,1,11,4 5 6 7 8 9 10 1 2,3
498,0,2,,4 5 6 7 8 9 10 1 2,3 11
499,1,2,,4 5 6 7 8 9 10 1,3 11 2
500,1,0,3,4 5 6 7 8 9 10 1,11 2
501,2,0,3 11,4 5 6 7 8 9 10 1,2
502,1,2,3 11,4 5 6 7 8 9 10,1 2
503,0,2,3,4 5 6 7 8 9 10,1 2 11
504,0,1,,4 5 6 7 8 9 10 3,1 2 11
505,2,1,,4 5 6 7 8 9 10 3 1,2 11
506,2,0,2,4 5 6 7 8 9 10 3 1,11
507,1,0,2 11,4 5 6 7 8 9 10 3 1,
508,0,2,2 11,4 5 6 7 8 9 10 3,1
509,0,1,2,4 5 6 7 8 9 10 3 11,1
510,2,1,2,4 5 6 7 8 9 10 3 11 1,
511,0,2,,4 5 6 7 8 9 10 3 11 1,2
512,1,2,,4 5 6 7 8 9 10 3 11,1 2
513,1,0,1,4 5 6 7 8 9 10 3 11,2
514,2,0,1 2,4 5 6 7 8 9 10 3 11,
515,2,1,1 2,4 5 6 7 8 9 10 3,11
516,0,1,1,4 5 6 7 8 9 10 3 2,11
517,0,2,,4 5 6 7 8 9 10 3 2,11 1
518,1,2,,4 5 6 7 8 9 10 3,11 1 2
519,1,0,11,4 5 6 7 8 9 10 3,1 2
520,2,0,11 1,4 5 6 7 8 9 10 3,2
521,1,2,11 1,4 5 6 7 8 9 10,3 2
522,0,2,11,4 5 6 7 8 9 10,3 2 1
523,0,1,,4 5 6 7 8 9 10 11,3 2 1
524,2,1,,4 5 6 7 8 9 10 11 3,2 1
525,0,2,,4 5 6 7 8 9 10 11 3,2 1
526,1,0,2,4 5 6 7 8 9 10 11 3,1
527,1,2,2,4 5 6 7 8 9 10 11,3 1
528,0,2,,4 5 6 7 8 9 10 11,3 1 2
529,1,0,3,4 5 6 7 8 9 10 11,1 2
530,2,0,3 1,4 5 6 7 8 9 10 11,2
531,2,1,3 1,4 5 6 7 8 9 10 11 2,
532,0,1,3,4 5 6 7 8 9 10 11 2 1,
533,0,2,,4 5 6 7 8 9 10 11 2 1,3
534,1,2,,4 5 6 7 8 9 10 11 2,1 3
535,1,0,1,4 5 6 7 8 9 10 11 2,3
536,2,0,1 3,4 5 6 7 8 9 10 11 2,
537,2,1,1 3,4 5 6 7 8 9 10 11,2
538,0,1,1,4 5 6 7 8 9 10 11 3,2
539,0,2,,4 5 6 7 8 9 10 11 3,2 1
540,1,2,,4 5 6 7 8 9 10 11,2 1 3
541,1,0,2,4 5 6 7 8 9 10 11,1 3
542,2,0,2 1,4 5 6 7 8 9 10 11,3
543,2,1,2 1,4 5 6 7 8 9 10 11 3,
544,0,1,2,4 5 6 7 8 9 10 11 3 1,
545,0,2,,4 5 6 7 8 9 10 11 3 1,2
546,1,2,,4 5 6 7 8 9 10 11 3,1 2
547,1,0,1,4 5 6 7 8 9 10 11 3,2
548,2,0,1 2,4 5 6 7 8 9 10 11 3,
549,2,1,1 2,4 5 6 7 8 9 10 11,3
550,0,1,1,4 5 6 7 8 9 10 11 2,3
551,0,2,,4 5 6 7 8 9 10 11 2,3 1
552,1,2,,4 5 6 7 8 9 10 11,3 1 2
553,1,0,3,4 5 6 7 8 9 10 11,1 2
554,2,0,3 1,4 5 6 7 8 9 10 11,2
555,1,2,3 1,4 5 6 7 8 9 10,2 11
556,0,2,3,4 5 6 7 8 9 10,2 11 1
557,0,1,,4 5 6 7 8 9 10 3,2 11 1
558,2,1,,4 5 6 7 8 9 10 3 2,11 1
559,2,0,11,4 5 6 7 8 9 10 3 2,1
560,1,0,11 1,4 5 6 7 8 9 10 3 2,
561,0,2,11 1,4 5 6 7 8 9 10 3,2
562,0,1,11,4 5 6 7 8 9 10 3 1,2
563,2,1,11,4 5 6 7 8 9 10 3 1 2,
564,2,0,11 2,4 5 6 7 8 9 10 3 1,
565,1,0,11 2 1,4 5 6 7 8 9 10 3,
566,1,2,11 2 1,4 5 6 7 8 9 10,3
567,0,2,11 2,4 5 6 7 8 9 10,3 1
568,0,1,11,4 5 6 7 8 9 10 2,3 1
569,2,1,11,4 5 6 7 8 9 10 2 3,1
570,0,2,,4 5 6 7 8 9 10 2 3,1 11
571,1,0,1,4 5 6 7 8 9 10 2 3,11
572,1,2,1,4 5 6 7 8 9 10 2,3 11
573,0,2,,4 5 6 7 8 9 10 2,3 11 1
574,1,0,3,4 5 6 7 8 9 10 2,11 1
575,2,0,3 11,4 5 6 7 8 9 10 2,1
576,2,1,3 11,4 5 6 7 8 9 10 2 1,
577,0,1,3,4 5 6 7 8 9 10 2 1 11,
578,0,2,,4 5 6 7 8 9 10 2 1 11,3
579,1,2,,4 5 6 7 8 9 10 2 1,11 3
580,1,0,11,4 5 6 7 8 9 10 2 1,3
581,2,0,11 3,4 5 6 7 8 9 10 2 1,
582,2,1,11 3,4 5 6 7 8 9 10 2,1
583,0,1,11,4 5 6 7 8 9 10 2 3,1
584,0,2,,4 5 6 7 8 9 10 2 3,1 11
585,1,2,,4 5 6 7 8 9 10 2,1 11 3
586,1,0,1,4 5 6 7 8 9 10 2,11 3
587,2,0,1 11,4 5 6 7 8 9 10 2,3
588,1,2,1 11,4 5 6 7 8 9 10,2 3
589,0,2,1,4 5 6 7 8 9 10,2 3 11
590,0,1,,4 5 6 7 8 9 10 1,2 3 11
591,2,1,,4 5 6 7 8 9 10 1 2,3 11
592,2,0,3,4 5 6 7 8 9 10 1 2,11
593,1,0,3 11,4 5 6 7 8 9 10 1 2,
594,0,2,3 11,4 5 6 7 8 9 10 1,2
595,0,1,3,4 5 6 7 8 9 10 1 11,2
596,2,1,3,4 5 6 7 8 9 10 1 11 2,
597,0,2,,4 5 6 7 8 9 10 1 11 2,3
598,1,2,,4 5 6 7 8 9 10 1 11,2 3
599,1,0,2,4 5 6 7 8 9 10 1 11,3
600,2,0,2 3,4 5 6 7 8 9 10 1 11,
601,2,1,2 3,4 5 6 7 8 9 10 1,11
602,0,1,2,4 5 6 7 8 9 10 1 3,11
603,0,2,,4 5 6 7 8 9 10 1 3,11 2
604,1,2,,4 5 6 7 8 9 10 1,11 2 3
605,1,0,11,4 5 6 7 8 9 10 1,2 3
606,2,0,11 2,4 5 6 7 8 9 10 1,3
607,1,2,11 2,4 5 6 7 8 9 10,1 3
608,0,2,11,4 5 6 7 8 9 10,1 3 2
609,0,1,,4 5 6 7 8 9 10 11,1 3 2
610,2,1,,4 5 6 7 8 9 10 11 1,3 2
611,0,2,,4 5 6 7 8 9 10 11 1,3 2
612,1,0,3,4 5 6 7 8 9 10 11 1,2
613,1,2,3,4 5 6 7 8 9 10 11,1 2
614,0,2,,4 5 6 7 8 9 10 11,1 2 3
615,1,0,1,4 5 6 7 8 9 10 11,2 3
616,2,0,1 2,4 5 6 7 8 9 10 11,3
617,2,1,1 2,4 5 6 7 8 9 10 11 3,
618,0,1,1,4 5 6 7 8 9 10 11 3 2,
619,0,2,,4 5 6 7 8 9 10 11 3 2,1
620,1,2,,4 5 6 7 8 9 10 11 3,2 1
621,1,0,2,4 5 6 7 8 9 10 11 3,1
622,2,0,2 1,4 5 6 7 8 9 10 11 3,
623,2,1,2 1,4 5 6 7 8 9 10 11,3
624,0,1,2,4 5 6 7 8 9 10 11 1,3
625,0,2,,4 5 6 7 8 9 10 11 1,3 2
626,1,2,,4 5 6 7 8 9 10 11,3 2 1
627,1,0,3,4 5 6 7 8 9 10 11,2 1
628,2,0,3 2,4 5 6 7 8 9 10 11,1
629,2,1,3 2,4 5 6 7 8 9 10 11 1,
630,0,1,3,4 5 6 7 8 9 10 11 1 2,
631,0,2,,4 5 6 7 8 9 10 11 1 2,3
632,1,2,,4 5 6 7 8 9 10 11 1,2 3
633,1,0,2,4 5 6 7 8 9 10 11 1,3
634,2,0,2 3,4 5 6 7 8 9 10 11 1,
635,2,1,2 3,4 5 6 7 8 9 10 11,1
636,0,1,2,4 5 6 7 8 9 10 11 3,1
637,0,2,,4 5 6 7 8 9 10 11 3,1 2
638,1,2,,4 5 6 7 8 9 10 11,1 2 3
639,1,0,1,4 5 6 7 8 9 10 11,2 3
640,2,0,1 2,4 5 6 7 8 9 10 11,3
641,1,2,1 2,4 5 6 7 8 9 10,3 11
642,0,2,1,4 5 6 7 8 9 10,3 11 2
643,0,1,,4 5 6 7 8 9 10 1,3 11 2
644,2,1,,4 5 6 7 8 9 10 1 3,11 2
645,2,0,11,4 5 6 7 8 9 10 1 3,2
646,1,0,11 2,4 5 6 7 8 9 10 1 3,
647,0,2,11 2,4 5 6 7 8 9 10 1,3
648,0,1,11,4 5 6 7 8 9 10 1 2,3
649,2,1,11,4 5 6 7 8 9 10 1 2 3,
650,2,0,11 3,4 5 6 7 8 9 10 1 2,
651,1,0,11 3 2,4 5 6 7 8 9 10 1,
652,1,2,11 3 2,4 5 6 7 8 9 10,1
653,0,2,11 3,4 5 6 7 8 9 10,1 2
654,0,1,11,4 5 6 7 8 9 10 3,1 2
655,2,1,11,4 5 6 7 8 9 10 3 1,2
656,0,2,,4 5 6 7 8 9 10 3 1,2 11
657,1,0,2,4 5 6 7 8 9 10 3 1,11
658,1,2,2,4 5 6 7 8 9 10 3,1 11
659,0,2,,4 5 6 7 8 9 10 3,1 11 2
660,1,0,1,4 5 6 7 8 9 10 3,11 2
661,2,0,1 11,4 5 6 7 8 9 10 3,2
662,2,1,1 11,4 5 6 7 8 9 10 3 2,
663,0,1,1,4 5 6 7 8 9 10 3 2 11,
664,0,2,,4 5 6 7 8 9 10 3 2 11,1
665,1,2,,4 5 6 7 8 9 10 3 2,11 1
666,1,0,11,4 5 6 7 8 9 10 3 2,1
667,2,0,11 1,4 5 6 7 8 9 10 3 2,
668,2,1,11 1,4 5 6 7 8 9 10 3,2
669,0,1,11,4 5 6 7 8 9 10 3 1,2
670,0,2,,4 5 6 7 8 9 10 3 1,2 11
671,1,2,,4 5 6 7 8 9 10 3,2 11 1
672,1,0,2,4 5 6 7 8 9 10 3,11 1
673,2,0,2 11,4 5 6 7 8 9 10 3,1
674,1,2,2 11,4 5 6 7 8 9 10,3 1
675,0,2,2,4 5 6 7 8 9 10,3 1 11
676,0,1,,4 5 6 7 8 9 10 2,3 1 11
677,2,1,,4 5 6 7 8 9 10 2 3,1 11
678,2,0,1,4 5 6 7 8 9 10 2 3,11
679,1,0,1 11,4 5 6 7 8 9 10 2 3,
680,0,2,1 11,4 5 6 7 8 9 10 2,3
681,0,1,1,4 5 6 7 8 9 10 2 11,3
682,2,1,1,4 5 6 7 8 9 10 2 11 3,
683,0,2,,4 5 6 7 8 9 10 2 11 3,1
684,1,2,,4 5 6 7 8 9 10 2 11,3 1
685,1,0,3,4 5 6 7 8 9 10 2 11,1
686,2,0,3 1,4 5 6 7 8 9 10 2 11,
687,2,1,3 1,4 5 6 7 8 9 10 2,11
688,0,1,3,4 5 6 7 8 9 10 2 1,11
689,0,2,,4 5 6 7 8 9 10 2 1,11 3
690,1,2,,4 5 6 7 8 9 10 2,11 3 1
691,1,0,11,4 5 6 7 8 9 10 2,3 1
692,2,0,11 3,4 5 6 7 8 9 10 2,1
693,1,2,11 3,4 5 6 7 8 9 10,2 1
694,0,2,11,4 5 6 7 8 9 10,2 1 3
695,0,1,,4 5 6 7 8 9 10 11,2 1 3
696,2,1,,4 5 6 7 8 9 10 11 2,1 3
697,0,2,,4 5 6 7 8 9 10 11 2,1 3
698,1,0,1,4 5 6 7 8 9 10 11 2,3
699,1,2,1,4 5 6 7 8 9 10 11,2 3
700,0,2,,4 5 6 7 8 9 10 11,2 3 1
701,1,0,2,4 5 6 7 8 9 10 11,3 1
702,2,0,2 3,4 5 6 7 8 9 10 11,1
703,2,1,2 3,4 5 6 7 8 9 10 11 1,
704,0,1,2,4 5 6 7 8 9 10 11 1 3,
705,0,2,,4 5 6 7 8 9 10 11 1 3,2
706,1,2,,4 5 6 7 8 9 10 11 1,3 2
707,1,0,3,4 5 6 7 8 9 10 11 1,2
708,2,0,3 2,4 5 6 7 8 9 10 11 1,
709,2,1,3 2,4 5 6 7 8 9 10 11,1
710,0,1,3,4 5 6 7 8 9 10 11 2,1
711,0,2,,4 5 6 7 8 9 10 11 2,1 3
712,1,2,,4 5 6 7 8 9 10 11,1 3 2
713,1,0,1,4 5 6 7 8 9 10 11,3 2
714,2,0,1 3,4 5 6 7 8 9 10 11,2
715,2,1,1 3,4 5 6 7 8 9 10 11 2,
716,0,1,1,4 5 6 7 8 9 10 11 2 3,
717,0,2,,4 5 6 7 8 9 10 11 2 3,1
718,1,2,,4 5 6 7 8 9 10 11 2,3 1
719,1,0,3,4 5 6 7 8 9 10 11 2,1
720,2,0,3 1,4 5 6 7 8 9 10 11 2,
721,2,1,3 1,4 5 6 7 8 9 10 11,2
722,0,1,3,4 5 6 7 8 9 10 11 1,2
723,0,2,,4 5 6 7 8 9 10 11 1,2 3
724,1,2,,4 5 6 7 8 9 10 11,2 3 1
725,1,0,2,4 5 6 7 8 9 10 11,3 1
726,2,0,2 3,4 5 6 7 8 9 10 11,1
727,1,2,2 3,4 5 6 7 8 9 10,1 11
728,0,2,2,4 5 6 7 8 9 10,1 11 3
729,0,1,,4 5 6 7 8 9 10 2,1 11 3
730,2,1,,4 5 6 7 8 9 10 2 1,11 3
731,2,0,11,4 5 6 7 8 9 10 2 1,3
732,1,0,11 3,4 5 6 7 8 9 10 2 1,
733,0,2,11 3,4 5 6 7 8 9 10 2,1
734,0,1,11,4 5 6 7 8 9 10 2 3,1
735,2,1,11,4 5 6 7 8 9 10 2 3 1,
736,2,0,11 1,4 5 6 7 8 9 10 2 3,
737,1,0,11 1 3,4 5 6 7 8 9 10 2,
738,1,2,11 1 3,4 5 6 7 8 9 10,2
739,0,2,11 1,4 5 6 7 8 9 10,2 3
740,0,1,11,4 5 6 7 8 9 10 1,2 3
741,2,1,11,4 5 6 7 8 9 10 1 2,3
742,0,2,,4 5 6 7 8 9 10 1 2,3 11
743,1,0,3,4 5 6 7 8 9 10 1 2,11
744,1,2,3,4 5 6 7 8 9 10 1,2 11
745,0,2,,4 5 6 7 8 9 10 1,2 11 3
746,1,0,2,4 5 6 7 8 9 10 1,11 3
747,2,0,2 11,4 5 6 7 8 9 10 1,3
748,2,1,2 11,4 5 6 7 8 9 10 1 3,
749,0,1,2,4 5 6 7 8 9 10 1 3 11,
750,0,2,,4 5 6 7 8 9 10 1 3 11,2
751,1,2,,4 5 6 7 8 9 10 1 3,11 2
752,1,0,11,4 5 6 7 8 9 10 1 3,2
753,2,0,11 2,4 5 6 7 8 9 10 1 3,
754,2,1,11 2,4 5 6 7 8 9 10 1,3
755,0,1,11,4 5 6 7 8 9 10 1 2,3
756,0,2,,4 5 6 7 8 9 10 1 2,3 11
757,1,2,,4 5 6 7 8 9 10 1,3 11 2
758,1,0,3,4 5 6 7 8 9 10 1,11 2
759,2,0,3 11,4 5 6 7 8 9 10 1,2
760,1,2,3 11,4 5 6 7 8 9 10,1 2
761,0,2,3,4 5 6 7 8 9 10,1 2 11
762,0,1,,4 5 6 7 8 9 10 3,1 2 11
763,2,1,,4 5 6 7 8 9 10 3 1,2 11
764,2,0,2,4 5 6 7 8 9 10 3 1,11
765,1,0,2 11,4 5 6 7 8 9 10 3 1,
766,0,2,2 11,4 5 6 7 8 9 10 3,1
767,0,1,2,4 5 6 7 8 9 10 3 11,1
768,2,1,2,4 5 6 7 8 9 10 3 11 1,
769,0,2,,4 5 6 7 8 9 10 3 11 1,2
770,1,2,,4 5 6 7 8 9 10 3 11,1 2
771,1,0,1,4 5 6 7 8 9 10 3 11,2
772,2,0,1 2,4 5 6 7 8 9 10 3 11,
773,2,1,1 2,4 5 6 7 8 9 10 3,11
774,0,1,1,4 5 6 7 8 9 10 3 2,11
775,0,2,,4 5 6 7 8 9 10 3 2,11 1
776,1,2,,4 5 6 7 8 9 10 3,11 1 2
777,1,0,11,4 5 6 7 8 9 10 3,1 2
778,2,0,11 1,4 5 6 7 8 9 10 3,2
779,1,2,11 1,4 5 6 7 8 9 10,3 2
780,0,2,11,4 5 6 7 8 9 10,3 2 1
781,0,1,,4 5 6 7 8 9 10 11,3 2 1
782,2,1,,4 5 6 7 8 9 10 11 3,2 1
783,0,2,,4 5 6 7 8 9 10 11 3,2 1
784,1,0,2,4 5 6 7 8 9 10 11 3,1
785,1,2,2,4 5 6 7 8 9 10 11,3 1
786,0,2,,4 5 6 7 8 9 10 11,3 1 2
787,1,0,3,4 5 6 7 8 9 10 11,1 2
788,2,0,3 1,4 5 6 7 8 9 10 11,2
789,2,1,3 1,4 5 6 7 8 9 10 11 2,
790,0,1,3,4 5 6 7 8 9 10 11 2 1,
791,0,2,,4 5 6 7 8 9 10 11 2 1,3
792,1,2,,4 5 6 7 8 9 10 11 2,1 3
793,1,0,1,4 5 6 7 8 9 10 11 2,3
794,2,0,1 3,4 5 6 7 8 9 10 11 2,
795,2,1,1 3,4 5 6 7 8 9 10 11,2
796,0,1,1,4 5 6 7 8 9 10 11 3,2
797,0,2,,4 5 6 7 8 9 10 11 3,2 1
798,1,2,,4 5 6 7 8 9 10 11,2 1 3
799,1,0,2,4 5 6 7 8 9 10 11,1 3
800,2,0,2 1,4 5 6 7 8 9 10 11,3
801,2,1,2 1,4 5 6 7 8 9 10 11 3,
802,0,1,2,4 5 6 7 8 9 10 11 3 1,
803,0,2,,4 5 6 7 8 9 10 11 3 1,2
804,1,2,,4 5 6 7 8 9 10 11 3,1 2
805,1,0,1,4 5 6 7 8 9 10 11 3,2
806,2,0,1 2,4 5 6 7 8 9 10 11 3,
807,2,1,1 2,4 5 6 7 8 9 10 11,3
808,0,1,1,4 5 6 7 8 9 10 11 2,3
809,0,2,,4 5 6 7 8 9 10 11 2,3 1
810,1,2,,4 5 6 7 8 9 10 11,3 1 2
811,1,0,3,4 5 6 7 8 9 10 11,1 2
812,2,0,3 1,4 5 6 7 8 9 10 11,2
813,1,2,3 1,4 5 6 7 8 9 10,2 11
814,0,2,3,4 5 6 7 8 9 10,2 11 1
815,0,1,,4 5 6 7 8 9 10 3,2 11 1
816,2,1,,4 5 6 7 8 9 10 3 2,11 1
817,2,0,11,4 5 6 7 8 9 10 3 2,1
818,1,0,11 1,4 5 6 7 8 9 10 3 2,
819,0,2,11 1,4 5 6 7 8 9 10 3,2
820,0,1,11,4 5 6 7 8 9 10 3 1,2
821,2,1,11,4 5 6 7 8 9 10 3 1 2,
822,2,0,11 2,4 5 6 7 8 9 10 3 1,
823,1,0,11 2 1,4 5 6 7 8 9 10 3,
824,1,2,11 2 1,4 5 6 7 8 9 10,3
825,0,2,11 2,4 5 6 7 8 9 10,3 1
826,0,1,11,4 5 6 7 8 9 10 2,3 1
827,2,1,11,4 5 6 7 8 9 10 2 3,1
828,0,2,,4 5 6 7 8 9 10 2 3,1 11
829,1,0,1,4 5 6 7 8 9 10 2 3,11
830,1,2,1,4 5 6 7 8 9 10 2,3 11
831,0,2,,4 5 6 7 8 9 10 2,3 11 1
832,1,0,3,4 5 6 7 8 9 10 2,11 1
833,2,0,3 11,4 5 6 7 8 9 10 2,1
834,2,1,3 11,4 5 6 7 8 9 10 2 1,
835,0,1,3,4 5 6 7 8 9 10 2 1 11,
836,0,2,,4 5 6 7 8 9 10 2 1 11,3
837,1,2,,4 5 6 7 8 9 10 2 1,11 3
838,1,0,11,4 5 6 7 8 9 10 2 1,3
839,2,0,11 3,4 5 6 7 8 9 10 2 1,
840,2,1,11 3,4 5 6 7 8 9 10 2,1
841,0,1,11,4 5 6 7 8 9 10 2 3,1
842,0,2,,4 5 6 7 8 9 10 2 3,1 11
843,1,2,,4 5 6 7 8 9 10 2,1 11 3
844,1,0,1,4 5 6 7 8 9 10 2,11 3
845,2,0,1 11,4 5 6 7 8 9 10 2,3
846,1,2,1 11,4 5 6 7 8 9 10,2 3
847,0,2,1,4 5 6 7 8 9 10,2 3 11
848,0,1,,4 5 6 7 8 9 10 1,2 3 11
849,2,1,,4 5 6 7 8 9 10 1 2,3 11
850,2,0,3,4 5 6 7 8 9 10 1 2,11
851,1,0,3 11,4 5 6 7 8 9 10 1 2,
852,0,2,3 11,4 5 6 7 8 9 10 1,2
853,0,1,3,4 5 6 7 8 9 10 1 11,2
854,2,1,3,4 5 6 7 8 9 10 1 11 2,
855,0,2,,4 5 6 7 8 9 10 1 11 2,3
856,1,2,,4 5 6 7 8 9 10 1 11,2 3
857,1,0,2,4 5 6 7 8 9 10 1 11,3
858,2,0,2 3,4 5 6 7 8 9 10 1 11,
859,2,1,2 3,4 5 6 7 8 9 10 1,11
860,0,1,2,4 5 6 7 8 9 10 1 3,11
861,0,2,,4 5 6 7 8 9 10 1 3,11 2
862,1,2,,4 5 6 7 8 9 10 1,11 2 3
863,1,0,11,4 5 6 7 8 9 10 1,2 3
864,2,0,11 2,4 5 6 7 8 9 10 1,3
865,1,2,11 2,4 5 6 7 8 9 10,1 3
866,0,2,11,4 5 6 7 8 9 10,1 3 2
867,0,1,,4 5 6 7 8 9 10 11,1 3 2
868,2,1,,4 5 6 7 8 9 10 11 1,3 2
869,0,2,,4 5 6 7 8 9 10 11 1,3 2
870,1,0,3,4 5 6 7 8 9 10 11 1,2
871,1,2,3,4 5 6 7 8 9 10 11,1 2
872,0,2,,4 5 6 7 8 9 10 11,1 2 3
873,1,0,1,4 5 6 7 8 9 10 11,2 3
874,2,0,1 2,4 5 6 7 8 9 10 11,3
875,2,1,1 2,4 5 6 7 8 9 10 11 3,
876,0,1,1,4 5 6 7 8 9 10 11 3 2,
877,0,2,,4 5 6 7 8 9 10 11 3 2,1
878,1,2,,4 5 6 7 8 9 10 11 3,2 1
879,1,0,2,4 5 6 7 8 9 10 11 3,1
880,2,0,2 1,4 5 6 7 8 9 10 11 3,
881,2,1,2 1,4 5 6 7 8 9 10 11,3
882,0,1,2,4 5 6 7 8 9 10 11 1,3
883,0,2,,4 5 6 7 8 9 10 11 1,3 2
884,1,2,,4 5 6 7 8 9 10 11,3 2 1
885,1,0,3,4 5 6 7 8 9 10 11,2 1
886,2,0,3 2,4 5 6 7 8 9 10 11,1
887,2,1,3 2,4 5 6 7 8 9 10 11 1,
888,0,1,3,4 5 6 7 8 9 10 11 1 2,
889,0,2,,4 5 6 7 8 9 10 11 1 2,3
890,1,2,,4 5 6 7 8 9 10 11 1,2 3
891,1,0,2,4 5 6 7 8 9 10 11 1,3
892,2,0,2 3,4 5 6 7 8 9 10 11 1,
893,2,1,2 3,4 5 6 7 8 9 10 11,1
894,0,1,2,4 5 6 7 8 9 10 11 3,1
895,0,2,,4 5 6 7 8 9 10 11 3,1 2
896,1,2,,4 5 6 7 8 9 10 11,1 2 3
897,1,0,1,4 5 6 7 8 9 10 11,2 3
898,2,0,1 2,4 5 6 7 8 9 10 11,3
899,1,2,1 2,4 5 6 7 8 9 10,3 11
900,0,2,1,4 5 6 7 8 9 10,3 11 2
901,0,1,,4 5 6 7 8 9 10 1,3 11 2
902,2,1,,4 5 6 7 8 9 10 1 3,11 2
903,2,0,11,4 5 6 7 8 9 10 1 3,2
904,1,0,11 2,4 5 6 7 8 9 10 1 3,
905,0,2,11 2,4 5 6 7 8 9 10 1,3
906,0,1,11,4 5 6 7 8 9 10 1 2,3
907,2,1,11,4 5 6 7 8 9 10 1 2 3,
908,2,0,11 3,4 5 6 7 8 9 10 1 2,
909,1,0,11 3 2,4 5 6 7 8 9 10 1,
910,1,2,11 3 2,4 5 6 7 8 9 10,1
911,0,2,11 3,4 5 6 7 8 9 10,1 2
912,0,1,11,4 5 6 7 8 9 10 3,1 2
913,2,1,11,4 5 6 7 8 9 10 3 1,2
914,0,2,,4 5 6 7 8 9 10 3 1,2 11
915,1,0,2,4 5 6 7 8 9 10 3 1,11
916,1,2,2,4 5 6 7 8 9 10 3,1 11
917,0,2,,4 5 6 7 8 9 10 3,1 11 2
918,1,0,1,4 5 6 7 8 9 10 3,11 2
919,2,0,1 11,4 5 6 7 8 9 10 3,2
920,2,1,1 11,4 5 6 7 8 9 10 3 2,
921,0,1,1,4 5 6 7 8 9 10 3 2 11,
922,0,2,,4 5 6 7 8 9 10 3 2 11,1
923,1,2,,4 5 6 7 8 9 10 3 2,11 1
924,1,0,11,4 5 6 7 8 9 10 3 2,1
925,2,0,11 1,4 5 6 7 8 9 10 3 2,
926,2,1,11 1,4 5 6 7 8 9 10 3,2
927,0,1,11,4 5 6 7 8 9 10 3 1,2
928,0,2,,4 5 6 7 8 9 10 3 1,2 11
929,1,2,,4 5 6 7 8 9 10 3,2 11 1
930,1,0,2,4 5 6 7 8 9 10 3,11 1
931,2,0,2 11,4 5 6 7 8 9 10 3,1
932,1,2,2 11,4 5 6 7 8 9 10,3 1
933,0,2,2,4 5 6 7 8 9 10,3 1 11
934,0,1,,4 5 6 7 8 9 10 2,3 1 11
935,2,1,,4 5 6 7 8 9 10 2 3,1 11
936,2,0,1,4 5 6 7 8 9 10 2 3,11
937,1,0,1 11,4 5 6 7 8 9 10 2 3,
938,0,2,1 11,4 5 6 7 8 9 10 2,3
939,0,1,1,4 5 6 7 8 9 10 2 11,3
940,2,1,1,4 5 6 7 8 9 10 2 11 3,
941,0,2,,4 5 6 7 8 9 10 2 11 3,1
942,1,2,,4 5 6 7 8 9 10 2 11,3 1
943,1,0,3,4 5 6 7 8 9 10 2 11,1
944,2,0,3 1,4 5 6 7 8 9 10 2 11,
945,2,1,3 1,4 5 6 7 8 9 10 2,11
946,0,1,3,4 5 6 7 8 9 10 2 1,11
947,0,2,,4 5 6 7 8 9 10 2 1,11 3
948,1,2,,4 5 6 7 8 9 10 2,11 3 1
949,1,0,11,4 5 6 7 8 9 10 2,3 1
950,2,0,11 3,4 5 6 7 8 9 10 2,1
951,1,2,11 3,4 5 6 7 8 9 10,2 1
952,0,2,11,4 5 6 7 8 9 10,2 1 3
953,0,1,,4 5 6 7 8 9 10 11,2 1 3
954,2,1,,4 5 6 7 8 9 10 11 2,1 3
955,0,2,,4 5 6 7 8 9 10 11 2,1 3
956,1,0,1,4 5 6 7 8 9 10 11 2,3
957,1,2,1,4 5 6 7 8 9 10 11,2 3
958,0,2,,4 5 6 7 8 9 10 11,2 3 1
959,1,0,2,4 5 6 7 8 9 10 11,3 1
960,2,0,2 3,4 5 6 7 8 9 10 11,1
961,2,1,2 3,4 5 6 7 8 9 10 11 1,
962,0,1,2,4 5 6 7 8 9 10 11 1 3,
963,0,2,,4 5 6 7 8 9 10 11 1 3,2
964,1,2,,4 5 6 7 8 9 10 11 1,3 2
965,1,0,3,4 5 6 7 8 9 10 11 1,2
966,2,0,3 2,4 5 6 7 8 9 10 11 1,
967,2,1,3 2,4 5 6 7 8 9 10 11,1
968,0,1,3,4 5 6 7 8 9 10 11 2,1
969,0,2,,4 5 6 7 8 9 10 11 2,1 3
970,1,2,,4 5 6 7 8 9 10 11,1 3 2
971,1,0,1,4 5 6 7 8 9 10 11,3 2
972,2,0,1 3,4 5 6 7 8 9 10 11,2
973,2,1,1 3,4 5 6 7 8 9 10 11 2,
974,0,1,1,4 5 6 7 8 9 10 11 2 3,
975,0,2,,4 5 6 7 8 9 10 11 2 3,1
976,1,2,,4 5 6 7 8 9 10 11 2,3 1
977,1,0,3,4 5 6 7 8 9 10 11 2,1
978,2,0,3 1,4 5 6 7 8 9 10 11 2,
979,2,1,3 1,4 5 6 7 8 9 10 11,2
980,0,1,3,4 5 6 7 8 9 10 11 1,2
981,0,2,,4 5 6 7 8 9 10 11 1,2 3
982,1,2,,4 5 6 7 8 9 10 11,2 3 1
983,1,0,2,4 5 6 7 8 9 10 11,3 1
984,2,0,2 3,4 5 6 7 8 9 10 11,1
985,1,2,2 3,4 5 6 7 8 9 10,1 11
986,0,2,2,4 5 6 7 8 9 10,1 11 3
987,0,1,,4 5 6 7 8 9 10 2,1 11 3
988,2,1,,4 5 6 7 8 9 10 2 1,11 3
989,2,0,11,4 5 6 7 8 9 10 2 1,3
990,1,0,11 3,4 5 6 7 8 9 10 2 1,
991,0,2,11 3,4 5 6 7 8 9 10 2,1
992,0,1,11,4 5 6 7 8 9 10 2 3,1
993,2,1,11,4 5 6 7 8 9 10 2 3 1,
994,2,0,11 1,4 5 6 7 8 9 10 2 3,
995,1,0,11 1 3,4 5 6 7 8 9 10 2,
996,1,2,11 1 3,4 5 6 7 8 9 10,2
997,0,2,11 1,4 5 6 7 8 9 10,2 3
998,0,1,11,4 5 6 7 8 9 10 1,2 3
999,2,1,11,4 5 6 7 8 9 10 1 2,3
1000,0,2,,4 5 6 7 8 9 10 1 2,3 11
1001,1,0,3,4 5 6 7 8 9 10 1 2,11
1002,1,2,3,4 5 6 7 8 9 10 1,2 11
1003,0,2,,4 5 6 7 8 9 10 1,2 11 3
1004,1,0,2,4 5 6 7 8 9 10 1,11 3
1005,2,0,2 11,4 5 6 7 8 9 10 1,3
1006,2,1,2 11,4 5 6 7 8 9 10 1 3,
1007,0,1,2,4 5 6 7 8 9 10 1 3 11,
1008,0,2,,4 5 6 7 8 9 10 1 3 11,2
1009,1,2,,4 5 6 7 8 9 10 1 3,11 2
1010,1,0,11,4 5 6 7 8 9 10 1 3,2
1011,2,0,11 2,4 5 6 7 8 9 10 1 3,
1012,2,1,11 2,4 5 6 7 8 9 10 1,3
1013,0,1,11,4 5 6 7 8 9 10 1 2,3
1014,0,2,,4 5 6 7 8 9 10 1 2,3 11
1015,1,2,,4 5 6 7 8 9 10 1,3 11 2
1016,1,0,3,4 5 6 7 8 9 10 1,11 2
1017,2,0,3 11,4 5 6 7 8 9 10 1,2
1018,1,2,3 11,4 5 6 7 8 9 10,1 2
1019,0,2,3,4 5 6 7 8 9 10,1 2 11
1020,0,1,,4 5 6 7 8 9 10 3,1 2 11
1021,2,1,,4 5 6 7 8 9 10 3 1,2 11
1022,2,0,2,4 5 6 7 8 9 10 3 1,11
1023,1,0,2 11,4 5 6 7 8 9 10 3 1,
1024,0,2,2 11,4 5 6 7 8 9 10 3,1
1025,0,1,2,4 5 6 7 8 9 10 3 11,1
1026,2,1,2,4 5 6 7 8 9 10 3 11 1,
1027,0,2,,4 5 6 7 8 9 10 3 11 1,2
1028,1,2,,4 5 6 7 8 9 10 3 11,1 2
1029,1,0,1,4 5 6 7 8 9 10 3 11,2
1030,2,0,1 2,4 5 6 7 8 9 10 3 11,
1031,2,1,1 2,4 5 6 7 8 9 10 3,11
1032,0,1,1,4 5 6 7 8 9 10 3 2,11
1033,0,2,,4 5 6 7 8 9 10 3 2,11 1
1034,1,2,,4 5 6 7 8 9 10 3,11 1 2
1035,1,0,11,4 5 6 7 8 9 10 3,1 2
1036,2,0,11 1,4 5 6 7 8 9 10 3,2
1037,1,2,11 1,4 5 6 7 8 9 10,3 2
1038,0,2,11,4 5 6 7 8 9 10,3 2 1
1039,0,1,,4 5 6 7 8 9 10 11,3 2 1
1040,2,1,,4 5 6 7 8 9 10 11 3,2 1
1041,0,2,,4 5 6 7 8 9 10 11 3,2 1
1042,1,0,2,4 5 6 7 8 9 10 11 3,1
1043,1,2,2,4 5 6 7 8 9 10 11,3 1
1044,0,2,,4 5 6 7 8 9 10 11,3 1 2
1045,1,0,3,4 5 6 7 8 9 10 11,1 2
1046,2,0,3 1,4 5 6 7 8 9 10 11,2
1047,2,1,3 1,4 5 6 7 8 9 10 11 2,
1048,0,1,3,4 5 6 7 8 9 10 11 2 1,
1049,0,2,,4 5 6 7 8 9 10 11 2 1,3
1050,1,2,,4 5 6 7 8 9 10 11 2,1 3
1051,1,0,1,4 5 6 7 8 9 10 11 2,3
1052,2,0,1 3,4 5 6 7 8 9 10 11 2,
1053,2,1,1 3,4 5 6 7 8 9 10 11,2
1054,0,1,1,4 5 6 7 8 9 10 11 3,2
1055,0,2,,4 5 6 7 8 9 10 11 3,2 1
1056,1,2,,4 5 6 7 8 9 10 11,2 1 3
1057,1,0,2,4 5 6 7 8 9 10 11,1 3
1058,2,0,2 1,4 5 6 7 8 9 10 11,3
1059,2,1,2 1,4 5 6 7 8 9 10 11 3,
1060,0,1,2,4 5 6 7 8 9 10 11 3 1,
1061,0,2,,4 5 6 7 8 9 10 11 3 1,2
1062,1,2,,4 5 6 7 8 9 10 11 3,1 2
1063,1,0,1,4 5 6 7 8 9 10 11 3,2
1064,2,0,1 2,4 5 6 7 8 9 10 11 3,
1065,2,1,1 2,4 5 6 7 8 9 10 11,3
1066,0,1,1,4 5 6 7 8 9 10 11 2,3
1067,0,2,,4 5 6 7 8 9 10 11 2,3 1
1068,1,2,,4 5 6 7 8 9 10 11,3 1 2
1069,1,0,3,4 5 6 7 8 9 10 11,1 2
1070,2,0,3 1,4 5 6 7 8 9 10 11,2
1071,1,2,3 1,4 5 6 7 8 9 10,2 11
1072,0,2,3,4 5 6 7 8 9 10,2 11 1
1073,0,1,,4 5 6 7 8 9 10 3,2 11 1
1074,2,1,,4 5 6 7 8 9 10 3 2,11 1
1075,2,0,11,4 5 6 7 8 9 10 3 2,1
1076,1,0,11 1,4 5 6 7 8 9 10 3 2,
1077,0,2,11 1,4 5 6 7 8 9 10 3,2
1078,0,1,11,4 5 6 7 8 9 10 3 1,2
1079,2,1,11,4 5 6 7 8 9 10 3 1 2,
1080,2,0,11 2,4 5 6 7 8 9 10 3 1,
1081,1,0,11 2 1,4 5 6 7 8 9 10 3,
1082,1,2,11 2 1,4 5 6 7 8 9 10,3
1083,0,2,11 2,4 5 6 7 8 9 10,3 1
1084,0,1,11,4 5 6 7 8 9 10 2,3 1
1085,2,1,11,4 5 6 7 8 9 10 2 3,1
1086,0,2,,4 5 6 7 8 9 10 2 3,1 11
1087,1,0,1,4 5 6 7 8 9 10 2 3,11
1088,1,2,1,4 5 6 7 8 9 10 2,3 11
1089,0,2,,4 5 6 7 8 9 10 2,3 11 1
1090,1,0,3,4 5 6 7 8 9 10 2,11 1
1091,2,0,3 11,4 5 6 7 8 9 10 2,1
1092,2,1,3 11,4 5 6 7 8 9 10 2 1,
1093,0,1,3,4 5 6 7 8 9 10 2 1 11,
1094,0,2,,4 5 6 7 8 9 10 2 1 11,3
1095,1,2,,4 5 6 7 8 9 10 2 1,11 3
1096,1,0,11,4 5 6 7 8 9 10 2 1,3
1097,2,0,11 3,4 5 6 7 8 9 10 2 1,
1098,2,1,11 3,4 5 6 7 8 9 10 2,1
1099,0,1,11,4 5 6 7 8 9 10 2 3,1
1100,0,2,,4 5 6 7 8 9 10 2 3,1 11
1101,1,2,,4 5 6 7 8 9 10 2,1 11 3
1102,1,0,1,4 5 6 7 8 9 10 2,11 3
1103,2,0,1 11,4 5 6 7 8 9 10 2,3
1104,1,2,1 11,4 5 6 7 8 9 10,2 3
1105,0,2,1,4 5 6 7 8 9 10,2 3 11
1106,0,1,,4 5 6 7 8 9 10 1,2 3 11
1107,2,1,,4 5 6 7 8 9 10 1 2,3 11
1108,2,0,3,4 5 6 7 8 9 10 1 2,11
1109,1,0,3 11,4 5 6 7 8 9 10 1 2,
1110,0,2,3 11,4 5 6 7 8 9 10 1,2
1111,0,1,3,4 5 6 7 8 9 10 1 11,2
1112,2,1,3,4 5 6 7 8 9 10 1 11 2,
1113,0,2,,4 5 6 7 8 9 10 1 11 2,3
1114,1,2,,4 5 6 7 8 9 10 1 11,2 3
1115,1,0,2,4 5 6 7 8 9 10 1 11,3
1116,2,0,2 3,4 5 6 7 8 9 10 1 11,
1117,2,1,2 3,4 5 6 7 8 9 10 1,11
1118,0,1,2,4 5 6 7 8 9 10 1 3,11
1119,0,2,,4 5 6 7 8 9 10 1 3,11 2
1120,1,2,,4 5 6 7 8 9 10 1,11 2 3
1121,1,0,11,4 5 6 7 8 9 10 1,2 3
1122,2,0,11 2,4 5 6 7 8 9 10 1,3
1123,1,2,11 2,4 5 6 7 8 9 10,1 3
1124,0,2,11,4 5 6 7 8 9 10,1 3 2
1125,0,1,,4 5 6 7 8 9 10 11,1 3 2
1126,2,1,,4 5 6 7 8 9 10 11 1,3 2
1127,0,2,,4 5 6 7 8 9 10 11 1,3 2
1128,1,0,3,4 5 6 7 8 9 10 11 1,2
1129,1,2,3,4 5 6 7 8 9 10 11,1 2
1130,0,2,,4 5 6 7 8 9 10 11,1 2 3
1131,1,0,1,4 5 6 7 8 9 10 11,2 3
1132,2,0,1 2,4 5 6 7 8 9 10 11,3
1133,2,1,1 2,4 5 6 7 8 9 10 11 3,
1134,0,1,1,4 5 6 7 8 9 10 11 3 2,
1135,0,2,,4 5 6 7 8 9 10 11 3 2,1
1136,1,2,,4 5 6 7 8 9 10 11 3,2 1
1137,1,0,2,4 5 6 7 8 9 10 11 3,1
1138,2,0,2 1,4 5 6 7 8 9 10 11 3,
1139,2,1,2 1,4 5 6 7 8 9 10 11,3
1140,0,1,2,4 5 6 7 8 9 10 11 1,3
1141,0,2,,4 5 6 7 8 9 10 11 1,3 2
1142,1,2,,4 5 6 7 8 9 10 11,3 2 1
1143,1,0,3,4 5 6 7 8 9 10 11,2 1
1144,2,0,3 2,4 5 6 7 8 9 10 11,1
1145,2,1,3 2,4 5 6 7 8 9 10 11 1,
1146,0,1,3,4 5 6 7 8 9 10 11 1 2,
1147,0,2,,4 5 6 7 8 9 10 11 1 2,3
1148,1,2,,4 5 6 7 8 9 10 11 1,2 3
1149,1,0,2,4 5 6 7 8 9 10 11 1,3
1150,2,0,2 3,4 5 6 7 8 9 10 11 1,
1151,2,1,2 3,4 5 6 7 8 9 10 11,1
1152,0,1,2,4 5 6 7 8 9 10 11 3,1
1153,0,2,,4 5 6 7 8 9 10 11 3,1 2
1154,1,2,,4 5 6 7 8 9 10 11,1 2 3
1155,1,0,1,4 5 6 7 8 9 10 11,2 3
1156,2,0,1 2,4 5 6 7 8 9 10 11,3
1157,1,2,1 2,4 5 6 7 8 9 10,3 11
1158,0,2,1,4 5 6 7 8 9 10,3 11 2
1159,0,1,,4 5 6 7 8 9 10 1,3 11 2
1160,2,1,,4 5 6 7 8 9 10 1 3,11 2
1161,2,0,11,4 5 6 7 8 9 10 1 3,2
1162,1,0,11 2,4 5 6 7 8 9 10 1 3,
1163,0,2,11 2,4 5 6 7 8 9 10 1,3
1164,0,1,11,4 5 6 7 8 9 10 1 2,3
1165,2,1,11,4 5 6 7 8 9 10 1 2 3,
1166,2,0,11 3,4 5 6 7 8 9 10 1 2,
1167,1,0,11 3 2,4 5 6 7 8 9 10 1,
1168,1,2,11 3 2,4 5 6 7 8 9 10,1
1169,0,2,11 3,4 5 6 7 8 9 10,1 2
1170,0,1,11,4 5 6 7 8 9 10 3,1 2
1171,2,1,11,4 5 6 7 8 9 10 3 1,2
1172,0,2,,4 5 6 7 8 9 10 3 1,2 11
1173,1,0,2,4 5 6 7 8 9 10 3 1,11
1174,1,2,2,4 5 6 7 8 9 10 3,1 11
1175,0,2,,4 5 6 7 8 9 10 3,1 11 2
1176,1,0,1,4 5 6 7 8 9 10 3,11 2
1177,2,0,1 11,4 5 6 7 8 9 10 3,2
1178,2,1,1 11,4 5 6 7 8 9 10 3 2,
1179,0,1,1,4 5 6 7 8 9 10 3 2 11,
1180,0,2,,4 5 6 7 8 9 10 3 2 11,1
1181,1,2,,4 5 6 7 8 9 10 3 2,11 1
1182,1,0,11,4 5 6 7 8 9 10 3 2,1
1183,2,0,11 1,4 5 6 7 8 9 10 3 2,
1184,2,1,11 1,4 5 6 7 8 9 10 3,2
1185,0,1,11,4 5 6 7 8 9 10 3 1,2
1186,0,2,,4 5 6 7 8 9 10 3 1,2 11
1187,1,2,,4 5 6 7 8 9 10 3,2 11 1
1188,1,0,2,4 5 6 7 8 9 10 3,11 1
1189,2,0,2 11,4 5 6 7 8 9 10 3,1
1190,1,2,2 11,4 5 6 7 8 9 10,3 1
1191,0,2,2,4 5 6 7 8 9 10,3 1 11
1192,0,1,,4 5 6 7 8 9 10 2,3 1 11
1193,2,1,,4 5 6 7 8 9 10 2 3,1 11
1194,2,0,1,4 5 6 7 8 9 10 2 3,11
1195,1,0,1 11,4 5 6 7 8 9 10 2 3,
1196,0,2,1 11,4 5 6 7 8 9 10 2,3
1197,0,1,1,4 5 6 7 8 9 10 2 11,3
1198,2,1,1,4 5 6 7 8 9 10 2 11 3,
1199,0,2,,4 5 6 7 8 9 10 2 11 3,1
1200,1,2,,4 5 6 7 8 9 10 2 11,3 1
1201,1,0,3,4 5 6 7 8 9 10 2 11,1
1202,2,0,3 1,4 5 6 7 8 9 10 2 11,
1203,2,1,3 1,4 5 6 7 8 9 10 2,11
1204,0,1,3,4 5 6 7 8 9 10 2 1,11
1205,0,2,,4 5 6 7 8 9 10 2 1,11 3
1206,1,2,,4 5 6 7 8 9 10 2,11 3 1
1207,1,0,11,4 5 6 7 8 9 10 2,3 1
1208,2,0,11 3,4 5 6 7 8 9 10 2,1
1209,1,2,11 3,4 5 6 7 8 9 10,2 1
1210,0,2,11,4 5 6 7 8 9 10,2 1 3
1211,0,1,,4 5 6 7 8 9 10 11,2 1 3
1212,2,1,,4 5 6 7 8 9 10 11 2,1 3
1213,0,2,,4 5 6 7 8 9 10 11 2,1 3
1214,1,0,1,4 5 6 7 8 9 10 11 2,3
1215,1,2,1,4 5 6 7 8 9 10 11,2 3
1216,0,2,,4 5 6 7 8 9 10 11,2 3 1
1217,1,0,2,4 5 6 7 8 9 10 11,3 1
1218,2,0,2 3,4 5 6 7 8 9 10 11,1
1219,2,1,2 3,4 5 6 7 8 9 10 11 1,
1220,0,1,2,4 5 6 7 8 9 10 11 1 3,
1221,0,2,,4 5 6 7 8 9 10 11 1 3,2
1222,1,2,,4 5 6 7 8 9 10 11 1,3 2
1223,1,0,3,4 5 6 7 8 9 10 11 1,2
1224,2,0,3 2,4 5 6 7 8 9 10 11 1,
1225,2,1,3 2,4 5 6 7 8 9 10 11,1
1226,0,1,3,4 5 6 7 8 9 10 11 2,1
1227,0,2,,4 5 6 7 8 9 10 11 2,1 3
1228,1,2,,4 5 6 7 8 9 10 11,1 3 2
1229,1,0,1,4 5 6 7 8 9 10 11,3 2
1230,2,0,1 3,4 5 6 7 8 9 10 11,2
1231,2,1,1 3,4 5 6 7 8 9 10 11 2,
1232,0,1,1,4 5 6 7 8 9 10 11 2 3,
1233,0,2,,4 5 6 7 8 9 10 11 2 3,1
1234,1,2,,4 5 6 7 8 9 10 11 2,3 1
1235,1,0,3,4 5 6 7 8 9 10 11 2,1
1236,2,0,3 1,4 5 6 7 8 9 10 11 2,
1237,2,1,3 1,4 5 6 7 8 9 10 11,2
1238,0,1,3,4 5 6 7 8 9 10 11 1,2
1239,0,2,,4 5 6 7 8 9 10 11 1,2 3
1240,1,2,,4 5 6 7 8 9 10 11,2 3 1
1241,1,0,2,4 5 6 7 8 9 10 11,3 1
1242,2,0,2 3,4 5 6 7 8 9 10 11,1
1243,1,2,2 3,4 5 6 7 8 9 10,1 11
1244,0,2,2,4 5 6 7 8 9 10,1 11 3
1245,0,1,,4 5 6 7 8 9 10 2,1 11 3
1246,2,1,,4 5 6 7 8 9 10 2 1,11 3
1247,2,0,11,4 5 6 7 8 9 10 2 1,3
1248,1,0,11 3,4 5 6 7 8 9 10 2 1,
1249,0,2,11 3,4 5 6 7 8 9 10 2,1
1250,0,1,11,4 5 6 7 8 9 10 2 3,1
1251,2,1,11,4 5 6 7 8 9 10 2 3 1,
1252,2,0,11 1,4 5 6 7 8 9 10 2 3,
1253,1,0,11 1 3,4 5 6 7 8 9 10 2,
1254,1,2,11 1 3,4 5 6 7 8 9 10,2
1255,0,2,11 1,4 5 6 7 8 9 10,2 3
1256,0,1,11,4 5 6 7 8 9 10 1,2 3
1257,2,1,11,4 5 6 7 8 9 10 1 2,3
1258,0,2,,4 5 6 7 8 9 10 1 2,3 11
1259,1,0,3,4 5 6 7 8 9 10 1 2,11
1260,1,2,3,4 5 6 7 8 9 10 1,2 11
1261,0,2,,4 5 6 7 8 9 10 1,2 11 3
1262,1,0,2,4 5 6 7 8 9 10 1,11 3
1263,2,0,2 11,4 5 6 7 8 9 10 1,3
1264,2,1,2 11,4 5 6 7 8 9 10 1 3,
1265,0,1,2,4 5 6 7 8 9 10 1 3 11,
1266,0,2,,4 5 6 7 8 9 10 1 3 11,2
1267,1,2,,4 5 6 7 8 9 10 1 3,11 2
1268,1,0,11,4 5 6 7 8 9 10 1 3,2
1269,2,0,11 2,4 5 6 7 8 9 10 1 3,
1270,2,1,11 2,4 5 6 7 8 9 10 1,3
1271,0,1,11,4 5 6 7 8 9 10 1 2,3
1272,0,2,,4 5 6 7 8 9 10 1 2,3 11
1273,1,2,,4 5 6 7 8 9 10 1,3 11 2
1274,1,0,3,4 5 6 7 8 9 10 1,11 2
1275,2,0,3 11,4 5 6 7 8 9 10 1,2
1276,1,2,3 11,4 5 6 7 8 9 10,1 2
1277,0,2,3,4 5 6 7 8 9 10,1 2 11
1278,0,1,,4 5 6 7 8 9 10 3,1 2 11
1279,2,1,,4 5 6 7 8 9 10 3 1,2 11
1280,2,0,2,4 5 6 7 8 9 10 3 1,11
1281,1,0,2 11,4 5 6 7 8 9 10 3 1,
1282,0,2,2 11,4 5 6 7 8 9 10 3,1
1283,0,1,2,4 5 6 7 8 9 10 3 11,1
1284,2,1,2,4 5 6 7 8 9 10 3 11 1,
1285,0,2,,4 5 6 7 8 9 10 3 11 1,2
1286,1,2,,4 5 6 7 8 9 10 3 11,1 2
1287,1,0,1,4 5 6 7 8 9 10 3 11,2
1288,2,0,1 2,4 5 6 7 8 9 10 3 11,
1289,2,1,1 2,4 5 6 7 8 9 10 3,11
1290,0,1,1,4 5 6 7 8 9 10 3 2,11
1291,0,2,,4 5 6 7 8 9 10 3 2,11 1
1292,1,2,,4 5 6 7 8 9 10 3,11 1 2
1293,1,0,11,4 5 6 7 8 9 10 3,1 2
1294,2,0,11 1,4 5 6 7 8 9 10 3,2
1295,1,2,11 1,4 5 6 7 8 9 10,3 2
1296,0,2,11,4 5 6 7 8 9 10,3 2 1
1297,0,1,,4 5 6 7 8 9 10 11,3 2 1
1298,2,1,,4 5 6 7 8 9 10 11 3,2 1
1299,0,2,,4 5 6 7 8 9 10 11 3,2 1
1300,1,0,2,4 5 6 7 8 9 10 11 3,1
1301,1,2,2,4 5 6 7 8 9 10 11,3 1
1302,0,2,,4 5 6 7 8 9 10 11,3 1 2
1303,1,0,3,4 5 6 7 8 9 10 11,1 2
1304,2,0,3 1,4 5 6 7 8 9 10 11,2
1305,2,1,3 1,4 5 6 7 8 9 10 11 2,
1306,0,1,3,4 5 6 7 8 9 10 11 2 1,
1307,0,2,,4 5 6 7 8 9 10 11 2 1,3
1308,1,2,,4 5 6 7 8 9 10 11 2,1 3
1309,1,0,1,4 5 6 7 8 9 10 11 2,3
1310,2,0,1 3,4 5 6 7 8 9 10 11 2,
1311,2,1,1 3,4 5 6 7 8 9 10 11,2
1312,0,1,1,4 5 6 7 8 9 10 11 3,2
1313,0,2,,4 5 6 7 8 9 10 11 3,2 1
1314,1,2,,4 5 6 7 8 9 10 11,2 1 3
1315,1,0,2,4 5 6 7 8 9 10 11,1 3
1316,2,0,2 1,4 5 6 7 8 9 10 11,3
1317,2,1,2 1,4 5 6 7 8 9 10 11 3,
1318,0,1,2,4 5 6 7 8 9 10 11 3 1,
1319,0,2,,4 5 6 7 8 9 10 11 3 1,2
1320,1,2,,4 5 6 7 8 9 10 11 3,1 2
1321,1,0,1,4 5 6 7 8 9 10 11 3,2
1322,2,0,1 2,4 5 6 7 8 9 10 11 3,
1323,2,1,1 2,4 5 6 7 8 9 10 11,3
1324,0,1,1,4 5 6 7 8 9 10 11 2,3
1325,0,2,,4 5 6 7 8 9 10 11 2,3 1
1326,1,2,,4 5 6 7 8 9 10 11,3 1 2
1327,1,0,3,4 5 6 7 8 9 10 11,1 2
1328,2,0,3 1,4 5 6 7 8 9 10 11,2
1329,1,2,3 1,4 5 6 7 8 9 10,2 11
1330,0,2,3,4 5 6 7 8 9 10,2 11 1
1331,0,1,,4 5 6 7 8 9 10 3,2 11 1
1332,2,1,,4 5 6 7 8 9 10 3 2,11 1
1333,2,0,11,4 5 6 7 8 9 10 3 2,1
1334,1,0,11 1,4 5 6 7 8 9 10 3 2,
1335,0,2,11 1,4 5 6 7 8 9 10 3,2
1336,0,1,11,4 5 6 7 8 9 10 3 1,2
1337,2,1,11,4 5 6 7 8 9 10 3 1 2,
1338,2,0,11 2,4 5 6 7 8 9 10 3 1,
1339,1,0,11 2 1,4 5 6 7 8 9 10 3,
1340,1,2,11 2 1,4 5 6 7 8 9 10,3
1341,0,2,11 2,4 5 6 7 8 9 10,3 1
1342,0,1,11,4 5 6 7 8 9 10 2,3 1
1343,2,1,11,4 5 6 7 8 9 10 2 3,1
1344,0,2,,4 5 6 7 8 9 10 2 3,1 11
1345,1,0,1,4 5 6 7 8 9 10 2 3,11
1346,1,2,1,4 5 6 7 8 9 10 2,3 11
1347,0,2,,4 5 6 7 8 9 10 2,3 11 1
1348,1,0,3,4 5 6 7 8 9 10 2,11 1
1349,2,0,3 11,4 5 6 7 8 9 10 2,1
1350,2,1,3 11,4 5 6 7 8 9 10 2 1,
1351,0,1,3,4 5 6 7 8 9 10 2 1 11,
1352,0,2,,4 5 6 7 8 9 10 2 1 11,3
1353,1,2,,4 5 6 7 8 9 10 2 1,11 3
1354,1,0,11,4 5 6 7 8 9 10 2 1,3
1355,2,0,11 3,4 5 6 7 8 9 10 2 1,
1356,2,1,11 3,4 5 6 7 8 9 10 2,1
1357,0,1,11,4 5 6 7 8 9 10 2 3,1
1358,0,2,,4 5 6 7 8 9 10 2 3,1 11
1359,1,2,,4 5 6 7 8 9 10 2,1 11 3
1360,1,0,1,4 5 6 7 8 9 10 2,11 3
1361,2,0,1 11,4 5 6 7 8 9 10 2,3
1362,1,2,1 11,4 5 6 7 8 9 10,2 3
1363,0,2,1,4 5 6 7 8 9 10,2 3 11
1364,0,1,,4 5 6 7 8 9 10 1,2 3 11
1365,2,1,,4 5 6 7 8 9 10 1 2,3 11
1366,2,0,3,4 5 6 7 8 9 10 1 2,11
1367,1,0,3 11,4 5 6 7 8 9 10 1 2,
1368,0,2,3 11,4 5 6 7 8 9 10 1,2
1369,0,1,3,4 5 6 7 8 9 10 1 11,2
1370,2,1,3,4 5 6 7 8 9 10 1 11 2,
1371,0,2,,4 5 6 7 8 9 10 1 11 2,3
1372,1,2,,4 5 6 7 8 9 10 1 11,2 3
1373,1,0,2,4 5 6 7 8 9 10 1 11,3
1374,2,0,2 3,4 5 6 7 8 9 10 1 11,
1375,2,1,2 3,4 5 6 7 8 9 10 1,11
1376,0,1,2,4 5 6 7 8 9 10 1 3,11
1377,0,2,,4 5 6 7 8 9 10 1 3,11 2
1378,1,2,,4 5 6 7 8 9 10 1,11 2 3
1379,1,0,11,4 5 6 7 8 9 10 1,2 3
1380,2,0,11 2,4 5 6 7 8 9 10 1,3
1381,1,2,11 2,4 5 6 7 8 9 10,1 3
1382,0,2,11,4 5 6 7 8 9 10,1 3 2
1383,0,1,,4 5 6 7 8 9 10 11,1 3 2
1384,2,1,,4 5 6 7 8 9 10 11 1,3 2
1385,0,2,,4 5 6 7 8 9 10 11 1,3 2
1386,1,0,3,4 5 6 7 8 9 10 11 1,2
1387,1,2,3,4 5 6 7 8 9 10 11,1 2
1388,0,2,,4 5 6 7 8 9 10 11,1 2 3
1389,1,0,1,4 5 6 7 8 9 10 11,2 3
1390,2,0,1 2,4 5 6 7 8 9 10 11,3
1391,2,1,1 2,4 5 6 7 8 9 10 11 3,
1392,0,1,1,4 5 6 7 8 9 10 11 3 2,
1393,0,2,,4 5 6 7 8 9 10 11 3 2,1
1394,1,2,,4 5 6 7 8 9 10 11 3,2 1
1395,1,0,2,4 5 6 7 8 9 10 11 3,1
1396,2,0,2 1,4 5 6 7 8 9 10 11 3,
1397,2,1,2 1,4 5 6 7 8 9 10 11,3
1398,0,1,2,4 5 6 7 8 9 10 11 1,3
1399,0,2,,4 5 6 7 8 9 10 11 1,3 2
1400,1,2,,4 5 6 7 8 9 10 11,3 2 1
1401,1,0,3,4 5 6 7 8 9 10 11,2 1
1402,2,0,3 2,4 5 6 7 8 9 10 11,1
1403,2,1,3 2,4 5 6 7 8 9 10 11 1,
1404,0,1,3,4 5 6 7 8 9 10 11 1 2,
1405,0,2,,4 5 6 7 8 9 10 11 1 2,3
1406,1,2,,4 5 6 7 8 9 10 11 1,2 3
1407,1,0,2,4 5 6 7 8 9 10 11 1,3
1408,2,0,2 3,4 5 6 7 8 9 10 11 1,
1409,2,1,2 3,4 5 6 7 8 9 10 11,1
1410,0,1,2,4 5 6 7 8 9 10 11 3,1
1411,0,2,,4 5 6 7 8 9 10 11 3,1 2
1412,1,2,,4 5 6 7 8 9 10 11,1 2 3
1413,1,0,1,4 5 6 7 8 9 10 11,2 3
1414,2,0,1 2,4 5 6 7 8 9 10 11,3
1415,1,2,1 2,4 5 6 7 8 9 10,3 11
1416,0,2,1,4 5 6 7 8 9 10,3 11 2
1417,0,1,,4 5 6 7 8 9 10 1,3 11 2
1418,2,1,,4 5 6 7 8 9 10 1 3,11 2
1419,2,0,11,4 5 6 7 8 9 10 1 3,2
1420,1,0,11 2,4 5 6 7 8 9 10 1 3,
1421,0,2,11 2,4 5 6 7 8 9 10 1,3
1422,0,1,11,4 5 6 7 8 9 10 1 2,3
1423,2,1,11,4 5 6 7 8 9 10 1 2 3,
1424,2,0,11 3,4 5 6 7 8 9 10 1 2,
1425,1,0,11 3 2,4 5 6 7 8 9 10 1,
1426,1,2,11 3 2,4 5 6 7 8 9 10,1
1427,0,2,11 3,4 5 6 7 8 9 10,1 2
1428,0,1,11,4 5 6 7 8 9 10 3,1 2
1429,2,1,11,4 5 6 7 8 9 10 3 1,2
1430,0,2,,4 5 6 7 8 9 10 3 1,2 11
1431,1,0,2,4 5 6 7 8 9 10 3 1,11
1432,1,2,2,4 5 6 7 8 9 10 3,1 11
1433,0,2,,4 5 6 7 8 9 10 3,1 11 2
1434,1,0,1,4 5 6 7 8 9 10 3,11 2
1435,2,0,1 11,4 5 6 7 8 9 10 3,2
1436,2,1,1 11,4 5 6 7 8 9 10 3 2,
1437,0,1,1,4 5 6 7 8 9 10 3 2 11,
1438,0,2,,4 5 6 7 8 9 10 3 2 11,1
1439,1,2,,4 5 6 7 8 9 10 3 2,11 1
1440,1,0,11,4 5 6 7 8 9 10 3 2,1
1441,2,0,11 1,4 5 6 7 8 9 10 3 2,
1442,2,1,11 1,4 5 6 7 8 9 10 3,2
1443,0,1,11,4 5 6 7 8 9 10 3 1,2
1444,0,2,,4 5 6 7 8 9 10 3 1,2 11
1445,1,2,,4 5 6 7 8 9 10 3,2 11 1
1446,1,0,2,4 5 6 7 8 9 10 3,11 1
1447,2,0,2 11,4 5 6 7 8 9 10 3,1
1448,1,2,2 11,4 5 6 7 8 9 10,3 1
1449,0,2,2,4 5 6 7 8 9 10,3 1 11
1450,0,1,,4 5 6 7 8 9 10 2,3 1 11
1451,2,1,,4 5 6 7 8 9 10 2 3,1 11
1452,2,0,1,4 5 6 7 8 9 10 2 3,11
1453,1,0,1 11,4 5 6 7 8 9 10 2 3,
1454,0,2,1 11,4 5 6 7 8 9 10 2,3
1455,0,1,1,4 5 6 7 8 9 10 2 11,3
1456,2,1,1,4 5 6 7 8 9 10 2 11 3,
1457,0,2,,4 5 6 7 8 9 10 2 11 3,1
1458,1,2,,4 5 6 7 8 9 10 2 11,3 1
1459,1,0,3,4 5 6 7 8 9 10 2 11,1
1460,2,0,3 1,4 5 6 7 8 9 10 2 11,
1461,2,1,3 1,4 5 6 7 8 9 10 2,11
1462,0,1,3,4 5 6 7 8 9 10 2 1,11
1463,0,2,,4 5 6 7 8 9 10 2 1,11 3
1464,1,2,,4 5 6 7 8 9 10 2,11 3 1
1465,1,0,11,4 5 6 7 8 9 10 2,3 1
1466,2,0,11 3,4 5 6 7 8 9 10 2,1
1467,1,2,11 3,4 5 6 7 8 9 10,2 1
1468,0,2,11,4 5 6 7 8 9 10,2 1 3
1469,0,1,,4 5 6 7 8 9 10 11,2 1 3
1470,2,1,,4 5 6 7 8 9 10 11 2,1 3
1471,0,2,,4 5 6 7 8 9 10 11 2,1 3
1472,1,0,1,4 5 6 7 8 9 10 11 2,3
1473,1,2,1,4 5 6 7 8 9 10 11,2 3
1474,0,2,,4 5 6 7 8 9 10 11,2 3 1
1475,1,0,2,4 5 6 7 8 9 10 11,3 1
1476,2,0,2 3,4 5 6 7 8 9 10 11,1
1477,2,1,2 3,4 5 6 7 8 9 10 11 1,
1478,0,1,2,4 5 6 7 8 9 10 11 1 3,
1479,0,2,,4 5 6 7 8 9 10 11 1 3,2
1480,1,2,,4 5 6 7 8 9 10 11 1,3 2
1481,1,0,3,4 5 6 7 8 9 10 11 1,2
1482,2,0,3 2,4 5 6 7 8 9 10 11 1,
1483,2,1,3 2,4 5 6 7 8 9 10 11,1
1484,0,1,3,4 5 6 7 8 9 10 11 2,1
1485,0,2,,4 5 6 7 8 9 10 11 2,1 3
1486,1,2,,4 5 6 7 8 9 10 11,1 3 2
1487,1,0,1,4 5 6 7 8 9 10 11,3 2
1488,2,0,1 3,4 5 6 7 8 9 10 11,2
1489,2,1,1 3,4 5 6 7 8 9 10 11 2,
1490,0,1,1,4 5 6 7 8 9 10 11 2 3,
1491,0,2,,4 5 6 7 8 9 10 11 2 3,1
1492,1,2,,4 5 6 7 8 9 10 11 2,3 1
1493,1,0,3,4 5 6 7 8 9 10 11 2,1
1494,2,0,3 1,4 5 6 7 8 9 10 11 2,
1495,2,1,3 1,4 5 6 7 8 9 10 11,2
1496,0,1,3,4 5 6 7 8 9 10 11 1,2
1497,0,2,,4 5 6 7 8 9 10 11 1,2 3
1498,1,2,,4 5 6 7 8 9 10 11,2 3 1
1499,1,0,2,4 5 6 7 8 9 10 11,3 1
1500,2,0,2 3,4 5 6 7 8 9 10 11,1
1501,1,2,2 3,4 5 6 7 8 9 10,1 11
1502,0,2,2,4 5 6 7 8 9 10,1 11 3
1503,0,1,,4 5 6 7 8 9 10 2,1 11 3
1504,2,1,,4 5 6 7 8 9 10 2 1,11 3
1505,2,0,11,4 5 6 7 8 9 10 2 1,3
1506,1,0,11 3,4 5 6 7 8 9 10 2 1,
1507,0,2,11 3,4 5 6 7 8 9 10 2,1
1508,0,1,11,4 5 6 7 8 9 10 2 3,1
1509,2,1,11,4 5 6 7 8 9 10 2 3 1,
1510,2,0,11 1,4 5 6 7 8 9 10 2 3,
1511,1,0,11 1 3,4 5 6 7 8 9 10 2,
1512,1,2,11 1 3,4 5 6 7 8 9 10,2
1513,0,2,11 1,4 5 6 7 8 9 10,2 3
1514,0,1,11,4 5 6 7 8 9 10 1,2 3
1515,2,1,11,4 5 6 7 8 9 10 1 2,3
1516,0,2,,4 5 6 7 8 9 10 1 2,3 11
1517,1,0,3,4 5 6 7 8 9 10 1 2,11
1518,1,2,3,4 5 6 7 8 9 10 1,2 11
1519,0,2,,4 5 6 7 8 9 10 1,2 11 3
1520,1,0,2,4 5 6 7 8 9 10 1,11 3
1521,2,0,2 11,4 5 6 7 8 9 10 1,3
1522,2,1,2 11,4 5 6 7 8 9 10 1 3,
1523,0,1,2,4 5 6 7 8 9 10 1 3 11,
1524,0,2,,4 5 6 7 8 9 10 1 3 11,2
1525,1,2,,4 5 6 7 8 9 10 1 3,11 2
1526,1,0,11,4 5 6 7 8 9 10 1 3,2
1527,2,0,11 2,4 5 6 7 8 9 10 1 3,
1528,2,1,11 2,4 5 6 7 8 9 10 1,3
1529,0,1,11,4 5 6 7 8 9 10 1 2,3
1530,0,2,,4 5 6 7 8 9 10 1 2,3 11
1531,1,2,,4 5 6 7 8 9 10 1,3 11 2
1532,1,0,3,4 5 6 7 8 9 10 1,11 2
1533,2,0,3 11,4 5 6 7 8 9 10 1,2
1534,1,2,3 11,4 5 6 7 8 9 10,1 2
1535,0,2,3,4 5 6 7 8 9 10,1 2 11
1536,0,1,,4 5 6 7 8 9 10 3,1 2 11
1537,2,1,,4 5 6 7 8 9 10 3 1,2 11
1538,2,0,2,4 5 6 7 8 9 10 3 1,11
1539,1,0,2 11,4 5 6 7 8 9 10 3 1,
1540,0,2,2 11,4 5 6 7 8 9 10 3,1
1541,0,1,2,4 5 6 7 8 9 10 3 11,1
1542,2,1,2,4 5 6 7 8 9 10 3 11 1,
1543,0,2,,4 5 6 7 8 9 10 3 11 1,2
1544,1,2,,4 5 6 7 8 9 10 3 11,1 2
1545,1,0,1,4 5 6 7 8 9 10 3 11,2
1546,2,0,1 2,4 5 6 7 8 9 10 3 11,
1547,2,1,1 2,4 5 6 7 8 9 10 3,11
1548,0,1,1,4 5 6 7 8 9 10 3 2,11
1549,0,2,,4 5 6 7 8 9 10 3 2,11 1
1550,1,2,,4 5 6 7 8 9 10 3,11 1 2
1551,1,0,11,4 5 6 7 8 9 10 3,1 2
1552,2,0,11 1,4 5 6 7 8 9 10 3,2
1553,1,2,11 1,4 5 6 7 8 9 10,3 2
1554,0,2,11,4 5 6 7 8 9 10,3 2 1
1555,0,1,,4 5 6 7 8 9 10 11,3 2 1
1556,2,1,,4 5 6 7 8 9 10 11 3,2 1
1557,0,2,,4 5 6 7 8 9 10 11 3,2 1
1558,1,0,2,4 5 6 7 8 9 10 11 3,1
1559,1,2,2,4 5 6 7 8 9 10 11,3 1
1560,0,2,,4 5 6 7 8 9 10 11,3 1 2
1561,1,0,3,4 5 6 7 8 9 10 11,1 2
1562,2,0,3 1,4 5 6 7 8 9 10 11,2
1563,2,1,3 1,4 5 6 7 8 9 10 11 2,
1564,0,1,3,4 5 6 7 8 9 10 11 2 1,
1565,0,2,,4 5 6 7 8 9 10 11 2 1,3
1566,1,2,,4 5 6 7 8 9 10 11 2,1 3
1567,1,0,1,4 5 6 7 8 9 10 11 2,3
1568,2,0,1 3,4 5 6 7 8 9 10 11 2,
1569,2,1,1 3,4 5 6 7 8 9 10 11,2
1570,0,1,1,4 5 6 7 8 9 10 11 3,2
1571,0,2,,4 5 6 7 8 9 10 11 3,2 1
1572,1,2,,4 5 6 7 8 9 10 11,2 1 3
1573,1,0,2,4 5 6 7 8 9 10 11,1 3
1574,2,0,2 1,4 5 6 7 8 9 10 11,3
1575,2,1,2 1,4 5 6 7 8 9 10 11 3,
1576,0,1,2,4 5 6 7 8 9 10 11 3 1,
1577,0,2,,4 5 6 7 8 9 10 11 3 1,2
1578,1,2,,4 5 6 7 8 9 10 11 3,1 2
1579,1,0,1,4 5 6 7 8 9 10 11 3,2
1580,2,0,1 2,4 5 6 7 8 9 10 11 3,
1581,2,1,1 2,4 5 6 7 8 9 10 11,3
1582,0,1,1,4 5 6 7 8 9 10 11 2,3
1583,0,2,,4 5 6 7 8 9 10 11 2,3 1
1584,1,2,,4 5 6 7 8 9 10 11,3 1 2
1585,1,0,3,4 5 6 7 8 9 10 11,1 2
1586,2,0,3 1,4 5 6 7 8 9 10 11,2
1587,1,2,3 1,4 5 6 7 8 9 10,2 11
1588,0,2,3,4 5 6 7 8 9 10,2 11 1
1589,0,1,,4 5 6 7 8 9 10 3,2 11 1
1590,2,1,,4 5 6 7 8 9 10 3 2,11 1
1591,2,0,11,4 5 6 7 8 9 10 3 2,1
1592,1,0,11 1,4 5 6 7 8 9 10 3 2,
1593,0,2,11 1,4 5 6 7 8 9 10 3,2
1594,0,1,11,4 5 6 7 8 9 10 3 1,2
1595,2,1,11,4 5 6 7 8 9 10 3 1 2,
1596,2,0,11 2,4 5 6 7 8 9 10 3 1,
1597,1,0,11 2 1,4 5 6 7 8 9 10 3,
1598,1,2,11 2 1,4 5 6 7 8 9 10,3
1599,0,2,11 2,4 5 6 7 8 9 10,3 1
1600,0,1,11,4 5 6 7 8 9 10 2,3 1
1601,2,1,11,4 5 6 7 8 9 10 2 3,1
1602,0,2,,4 5 6 7 8 9 10 2 3,1 11
1603,1,0,1,4 5 6 7 8 9 10 2 3,11
1604,1,2,1,4 5 6 7 8 9 10 2,3 11
1605,0,2,,4 5 6 7 8 9 10 2,3 11 1
1606,1,0,3,4 5 6 7 8 9 10 2,11 1
1607,2,0,3 11,4 5 6 7 8 9 10 2,1
1608,2,1,3 11,4 5 6 7 8 9 10 2 1,
1609,0,1,3,4 5 6 7 8 9 10 2 1 11,
1610,0,2,,4 5 6 7 8 9 10 2 1 11,3
1611,1,2,,4 5 6 7 8 9 10 2 1,11 3
1612,1,0,11,4 5 6 7 8 9 10 2 1,3
1613,2,0,11 3,4 5 6 7 8 9 10 2 1,
1614,2,1,11 3,4 5 6 7 8 9 10 2,1
1615,0,1,11,4 5 6 7 8 9 10 2 3,1
1616,0,2,,4 5 6 7 8 9 10 2 3,1 11
1617,1,2,,4 5 6 7 8 9 10 2,1 11 3
1618,1,0,1,4 5 6 7 8 9 10 2,11 3
1619,2,0,1 11,4 5 6 7 8 9 10 2,3
1620,1,2,1 11,4 5 6 7 8 9 10,2 3
1621,0,2,1,4 5 6 7 8 9 10,2 3 11
1622,0,1,,4 5 6 7 8 9 10 1,2 3 11
1623,2,1,,4 5 6 7 8 9 10 1 2,3 11
1624,2,0,3,4 5 6 7 8 9 10 1 2,11
1625,1,0,3 11,4 5 6 7 8 9 10 1 2,
1626,0,2,3 11,4 5 6 7 8 9 10 1,2
1627,0,1,3,4 5 6 7 8 9 10 1 11,2
1628,2,1,3,4 5 6 7 8 9 10 1 11 2,
1629,0,2,,4 5 6 7 8 9 10 1 11 2,3
1630,1,2,,4 5 6 7 8 9 10 1 11,2 3
1631,1,0,2,4 5 6 7 8 9 10 1 11,3
1632,2,0,2 3,4 5 6 7 8 9 10 1 11,
1633,2,1,2 3,4 5 6 7 8 9 10 1,11
1634,0,1,2,4 5 6 7 8 9 10 1

