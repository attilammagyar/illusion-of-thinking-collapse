# model_name='claude-3-7-sonnet-20250219', reasoning_budget=32000, tries=0, n=10, i=2
# valid_prefix_length=39, is_valid_solution=0, first_correction=-1

<think>
This is the classic Tower of Hanoi puzzle with 10 disks. I'll solve this step by step.

For the Tower of Hanoi puzzle with n disks, the minimum number of moves required is 2^n - 1. With 10 disks, we need 2^10 - 1 = 1024 - 1 = 1023 moves.

The recursive algorithm for solving Tower of Hanoi is:
1. Move n-1 disks from source to auxiliary peg
2. Move the largest disk from source to destination peg
3. Move n-1 disks from auxiliary to destination peg

Let me work through this systematically for 10 disks. I'll keep track of the state of each peg after each move.

Initial state:
- Peg 0: [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
- Peg 1: []
- Peg 2: []

For clarity in the solution representation, I'll format the pegs as space-separated lists of disks from bottom to top.

Let me work through this methodically. I'll implement the recursive Tower of Hanoi algorithm:

```
function hanoi(n, source, auxiliary, destination):
    if n == 1:
        move disk 1 from source to destination
        return
    hanoi(n-1, source, destination, auxiliary)
    move disk n from source to destination
    hanoi(n-1, auxiliary, source, destination)
```

Let me trace through this algorithm for n=10:

1. Call hanoi(10, 0, 1, 2)
2. Since n=10 > 1, call hanoi(9, 0, 2, 1)
3. Since n=9 > 1, call hanoi(8, 0, 1, 2)
4. Since n=8 > 1, call hanoi(7, 0, 2, 1)
5. Since n=7 > 1, call hanoi(6, 0, 1, 2)
6. Since n=6 > 1, call hanoi(5, 0, 2, 1)
7. Since n=5 > 1, call hanoi(4, 0, 1, 2)
8. Since n=4 > 1, call hanoi(3, 0, 2, 1)
9. Since n=3 > 1, call hanoi(2, 0, 1, 2)
10. Since n=2 > 1, call hanoi(1, 0, 2, 1)
11. Since n=1, move disk 1 from peg 0 to peg 1

I see that this approach will get quite complicated to trace manually. Let me implement a more direct approach to list all the moves.

For Tower of Hanoi with 10 disks, I need to enumerate all 1023 moves systematically. Let me use a different approach.

For odd n, the first move is from peg 0 to peg 2, and for even n, the first move is from peg 0 to peg 1. After that, we always make the only legal move that doesn't undo the previous move.

Let me implement this strategy for n=10:

Since n=10 is even, the first move is from peg 0 to peg 1.

Actually, I think the most systematic way is to actually trace through the recursive algorithm and track the state after each move. Let me implement that.

I'll start by defining a function to solve the Tower of Hanoi recursively and generate the moves:

```
function solve_hanoi(n, source, auxiliary, destination, moves, states):
    if n == 0:
        return
    
    solve_hanoi(n-1, source, destination, auxiliary, moves, states)
    
    # Move disk n from source to destination
    moves.append((source, destination))
    
    # Update the state
    states[source].pop()
    states[destination].append(n)
    
    solve_hanoi(n-1, auxiliary, source, destination, moves, states)
```

Let me simulate this step by step:

Initial state:
- Peg 0: [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
- Peg 1: []
- Peg 2: []

I'll track the state of each peg after each move. Let's start:

Move 1: Move disk 1 from peg 0 to peg 2
- Peg 0: [10, 9, 8, 7, 6, 5, 4, 3, 2]
- Peg 1: []
- Peg 2: [1]

Move 2: Move disk 2 from peg 0 to peg 1
- Peg 0: [10, 9, 8, 7, 6, 5, 4, 3]
- Peg 1: [2]
- Peg 2: [1]

Move 3: Move disk 1 from peg 2 to peg 1
- Peg 0: [10, 9, 8, 7, 6, 5, 4, 3]
- Peg 1: [2, 1]
- Peg 2: []

Move 4: Move disk 3 from peg 0 to peg 2
- Peg 0: [10, 9, 8, 7, 6, 5, 4]
- Peg 1: [2, 1]
- Peg 2: [3]

Move 5: Move disk 1 from peg 1 to peg 0
- Peg 0: [10, 9, 8, 7, 6, 5, 4, 1]
- Peg 1: [2]
- Peg 2: [3]

Move 6: Move disk 2 from peg 1 to peg 2
- Peg 0: [10, 9, 8, 7, 6, 5, 4, 1]
- Peg 1: []
- Peg 2: [3, 2]

Move 7: Move disk 1 from peg 0 to peg 2
- Peg 0: [10, 9, 8, 7, 6, 5, 4]
- Peg 1: []
- Peg 2: [3, 2, 1]

Move 8: Move disk 4 from peg 0 to peg 1
- Peg 0: [10, 9, 8, 7, 6, 5]
- Peg 1: [4]
- Peg 2: [3, 2, 1]

Move 9: Move disk 1 from peg 2 to peg 1
- Peg 0: [10, 9, 8, 7, 6, 5]
- Peg 1: [4, 1]
- Peg 2: [3, 2]

Move 10: Move disk 2 from peg 2 to peg 0
- Peg 0: [10, 9, 8, 7, 6, 5, 2]
- Peg 1: [4, 1]
- Peg 2: [3]

I see that this approach is also going to be lengthy to trace manually. Let me try another approach.

For the Tower of Hanoi with 10 disks, there's a pattern to the moves. For each disk k, it will always move in the same pattern: source -> destination -> auxiliary -> source -> ...

For even n, the pattern of disk 1 is: 0 -> 1 -> 2 -> 0 -> ...
For odd n, the pattern of disk 1 is: 0 -> 2 -> 1 -> 0 -> ...

Since n=10 is even, the pattern of disk 1 is: 0 -> 1 -> 2 -> 0 -> ...

Let me implement a simpler algorithm that generates the moves:

1. For an even number of disks, we follow the pattern: 0 -> 1, 0 -> 2, 1 -> 2, repeat.
2. For an odd number of disks, we follow the pattern: 0 -> 2, 0 -> 1, 1 -> 2, repeat.

However, I still need to check if each move is legal according to the rules.

Let me try a different approach. I'll simulate the recursive algorithm directly:

```
def hanoi(n, source, auxiliary, destination, moves, states):
    if n == 1:
        # Move disk 1 from source to destination
        disk = states[source].pop()
        states[destination].append(disk)
        moves.append((source, destination, states.copy()))
        return
    
    hanoi(n-1, source, destination, auxiliary, moves, states)
    
    # Move disk n from source to destination
    disk = states[source].pop()
    states[destination].append(disk)
    moves.append((source, destination, states.copy()))
    
    hanoi(n-1, auxiliary, source, destination, moves, states)
```

But I think this is still too complex for manual tracing.

Let me use a simpler approach. I'll use the iterative solution based on the binary representation of the move number:

1. The disk to move in the i-th step is given by the number of trailing zeros in the binary representation of i.
2. For even n, the disks move in the pattern: 0 -> 1, 0 -> 2, 1 -> 2, repeat.
3. For odd n, the disks move in the pattern: 0 -> 2, 0 -> 1, 1 -> 2, repeat.

Let me try a different approach. I'll simulate the Tower of Hanoi moves using a straightforward algorithm:

1. Number the disks from 1 (smallest) to n (largest).
2. If n is even, the smallest disk moves in the pattern: 0 -> 1 -> 2 -> 0 -> ...
3. If n is odd, the smallest disk moves in the pattern: 0 -> 2 -> 1 -> 0 -> ...
4. Make the only legal move that doesn't involve the smallest disk.

Let me implement this:

```
def solve_tower_of_hanoi(n):
    # Initialize pegs
    pegs = [list(range(n, 0, -1)), [], []]
    
    # Track moves
    moves = []
    
    # Total number of moves
    total_moves = 2**n - 1
    
    for move_id in range(1, total_moves + 1):
        # Determine which disk to move
        if move_id % 2 == 1:
            # Move the smallest disk
            disk = 1
            # Determine source and destination pegs
            source_peg = -1
            for peg_id in range(3):
                if pegs[peg_id] and pegs[peg_id][-1] == disk:
                    source_peg = peg_id
                    break
            
            # Determine destination peg based on the pattern
            if n % 2 == 0:  # Even number of disks
                destination_peg = (source_peg + 1) % 3
            else:  # Odd number of disks
                destination_peg = (source_peg + 2) % 3
        else:
            # Make the only legal move that doesn't involve the smallest disk
            # Find the peg with the smallest disk
            smallest_disk_peg = -1
            for peg_id in range(3):
                if pegs[peg_id] and pegs[peg_id][-1] == 1:
                    smallest_disk_peg = peg_id
                    break
            
            # Find the other two pegs
            other_pegs = [peg_id for peg_id in range(3) if peg_id != smallest_disk_peg]
            
            # Determine source and destination pegs
            source_peg = other_pegs[0]
            destination_peg = other_pegs[1]
            
            # If the source peg is empty or the destination peg is not empty and the top disk on the destination peg is smaller than the top disk on the source peg, swap source and destination
            if not pegs[source_peg] or (pegs[destination_peg] and pegs[destination_peg][-1] < pegs[source_peg][-1]):
                source_peg, destination_peg = destination_peg, source_peg
        
        # Make the move
        disk = pegs[source_peg].pop()
        pegs[destination_peg].append(disk)
        
        # Record the move
        moves.append((source_peg, destination_peg, [peg.copy() for peg in pegs]))
    
    return moves
```

Ok, this is still too complex to trace manually. Let me simplify further.

The Tower of Hanoi has a well-known recursive solution. For n disks, we need to:
1. Move n-1 disks from the source peg to the auxiliary peg.
2. Move the largest disk from the source peg to the destination peg.
3. Move n-1 disks from the auxiliary peg to the destination peg.

Let me trace through this recursive algorithm step by step for n=10. I'll focus on the moves and track the state of each peg.

For clarity in the output, I'll use the format specified:
```
move_id,from_peg,to_peg,peg0,peg1,peg2
```

Initial state:
- Peg 0: [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
- Peg 1: []
- Peg 2: []

Let me use a simple pattern for the Tower of Hanoi:
1. For n disks, there are 2^n - 1 moves.
2. The disk to move at step i is given by the number of trailing zeros in the binary representation of i.
3. The direction of the move depends on the parity of the disk and the parity of n.

Let me implement this algorithm:

```python
def solve_tower_of_hanoi(n):
    # Initialize pegs
    pegs = [list(range(n, 0, -1)), [], []]
    
    # Track moves
    moves = []
    
    # Total number of moves
    total_moves = 2**n - 1
    
    for move_id in range(1, total_moves + 1):
        # Find the disk to move (smallest disk with a valid move)
        # Count trailing zeros in the binary representation of move_id
        binary = bin(move_id)[2:]
        trailing_zeros = len(binary) - len(binary.rstrip('0'))
        disk = trailing_zeros + 1  # Disk numbers start from 1
        
        # Find the current position of the disk
        source_peg = -1
        for peg_id in range(3):
            if pegs[peg_id] and disk in pegs[peg_id] and pegs[peg_id][-1] == disk:
                source_peg = peg_id
                break
        
        # Determine the destination peg based on the parity of the disk and n
        if (disk % 2 == 0) ^ (n % 2 == 0):
            # Clockwise movement: 0 -> 1 -> 2 -> 0
            destination_peg = (source_peg + 1) % 3
        else:
            # Counterclockwise movement: 0 -> 2 -> 1 -> 0
            destination_peg = (source_peg + 2) % 3
        
        # Make the move
        pegs[source_peg].remove(disk)
        pegs[destination_peg].append(disk)
        
        # Sort the pegs to maintain the decreasing order
        for peg in pegs:
            peg.sort(reverse=True)
        
        # Record the move
        moves.append((move_id, source_peg, destination_peg, [peg.copy() for peg in pegs]))
    
    return moves
```

Actually, I'm making this too complicated. Let me simplify.

For the Tower of Hanoi with n disks, where the disks are numbered from 1 (smallest) to n (largest), the algorithm is:

1. For odd-numbered moves (1, 3, 5, ...), move disk 1.
2. For even-numbered moves (2, 4, 6, ...), make the only legal move that doesn't involve disk 1.

Let's simplify even further. The iterative solution follows a simple pattern:

1. For n disks, there are 2^n - 1 moves.
2. If n is even, the pattern of disk 1 is: 0 -> 1 -> 2 -> 0 -> ...
3. If n is odd, the pattern of disk 1 is: 0 -> 2 -> 1 -> 0 -> ...
4. For each move, make the only legal move: either move disk 1 or make the only other legal move.

Let me implement this algorithm:

```python
def solve_tower_of_hanoi(n):
    # Initialize pegs
    pegs = [list(range(n, 0, -1)), [], []]
    
    # Track moves
    moves = []
    
    # Total number of moves
    total_moves = 2**n - 1
    
    for move_id in range(1, total_moves + 1):
        if move_id % 2 == 1:
            # Move disk 1
            # Find the current position of disk 1
            source_peg = -1
            for peg_id in range(3):
                if pegs[peg_id] and pegs[peg_id][-1] == 1:
                    source_peg = peg_id
                    break
            
            # Determine the destination peg based on the parity of n
            if n % 2 == 0:
                # Clockwise movement: 0 -> 1 -> 2 -> 0
                destination_peg = (source_peg + 1) % 3
            else:
                # Counterclockwise movement: 0 -> 2 -> 1 -> 0
                destination_peg = (source_peg + 2) % 3
        else:
            # Make the only legal move that doesn't involve disk 1
            # Find the peg with disk 1
            disk1_peg = -1
            for peg_id in range(3):
                if pegs[peg_id] and pegs[peg_id][-1] == 1:
                    disk1_peg = peg_id
                    break
            
            # Find the other two pegs
            other_pegs = [peg_id for peg_id in range(3) if peg_id != disk1_peg]
            
            # Determine source and destination pegs
            source_peg, destination_peg = other_pegs
            
            # If the source peg is empty or the destination peg is not empty and the top disk on the destination peg is smaller than the top disk on the source peg, swap source and destination
            if not pegs[source_peg] or (pegs[destination_peg] and pegs[destination_peg][-1] < pegs[source_peg][-1]):
                source_peg, destination_peg = destination_peg, source_peg
        
        # Make the move
        disk = pegs[source_peg].pop()
        pegs[destination_peg].append(disk)
        
        # Record the move
        moves.append((move_id, source_peg, destination_peg, [peg.copy() for peg in pegs]))
    
    return moves
```

Ok, I need to simplify this further for manual tracing. 

Let me use the binary representation approach:

1. For move i, the disk to move is the position of the rightmost 1 in the binary representation of i.
2. For each disk, we follow a fixed cycle of source and destination pegs.

For disk 1, the cycle is:
- If n is even: 0 -> 1 -> 2 -> 0 -> ...
- If n is odd: 0 -> 2 -> 1 -> 0 -> ...

For disk 2, the cycle is:
- 0 -> 2 -> 1 -> 0 -> ...

For disk 3, the cycle is:
- 0 -> 1 -> 2 -> 0 -> ...

And so on, alternating between the two cycles.

Since n=10 is even, the cycles are:
- Disk 1: 0 -> 1 -> 2 -> 0 -> ...
- Disk 2: 0 -> 2 -> 1 -> 0 -> ...
- Disk 3: 0 -> 1 -> 2 -> 0 -> ...
- Disk 4: 0 -> 2 -> 1 -> 0 -> ...
- Disk 5: 0 -> 1 -> 2 -> 0 -> ...
- Disk 6: 0 -> 2 -> 1 -> 0 -> ...
- Disk 7: 0 -> 1 -> 2 -> 0 -> ...
- Disk 8: 0 -> 2 -> 1 -> 0 -> ...
- Disk 9: 0 -> 1 -> 2 -> 0 -> ...
- Disk 10: 0 -> 2 -> 1 -> 0 -> ...

Now, let's trace through the solution.

Initial state:
- Peg 0: [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
- Peg 1: []
- Peg 2: []

In the output, I'll represent the state of each peg as a space-separated list of disk numbers going from the bottom to the top. For example, the initial state would be represented as:
- Peg 0: "10 9 8 7 6 5 4 3 2 1"
- Peg 1: ""
- Peg 2: ""

Let's start:

Move 1: The binary representation of 1 is "1", so we move disk 1. The cycle for disk 1 is 0 -> 1 -> 2 -> 0 -> ... Since disk 1 is currently on peg 0, we move it to peg 1.
- Peg 0: "10 9 8 7 6 5 4 3 2"
- Peg 1: "1"
- Peg 2: ""

Move 2: The binary representation of 2 is "10", so we move disk 2. The cycle for disk 2 is 0 -> 2 -> 1 -> 0 -> ... Since disk 2 is currently on peg 0, we move it to peg 2.
- Peg 0: "10 9 8 7 6 5 4 3"
- Peg 1: "1"
- Peg 2: "2"

Move 3: The binary representation of 3 is "11", so we move disk 1. The cycle for disk 1 is 0 -> 1 -> 2 -> 0 -> ... Since disk 1 is currently on peg 1, we move it to peg 2.
- Peg 0: "10 9 8 7 6 5 4 3"
- Peg 1: ""
- Peg 2: "2 1"

Move 4: The binary representation of 4 is "100", so we move disk 3. The cycle for disk 3 is 0 -> 1 -> 2 -> 0 -> ... Since disk 3 is currently on peg 0, we move it to peg 1.
- Peg 0: "10 9 8 7 6 5 4"
- Peg 1: "3"
- Peg 2: "2 1"

Move 5: The binary representation of 5 is "101", so we move disk 1. The cycle for disk 1 is 0 -> 1 -> 2 -> 0 -> ... Since disk 1 is currently on peg 2, we move it to peg 0.
- Peg 0: "10 9 8 7 6 5 4 1"
- Peg 1: "3"
- Peg 2: "2"

Move 6: The binary representation of 6 is "110", so we move disk 2. The cycle for disk 2 is 0 -> 2 -> 1 -> 0 -> ... Since disk 2 is currently on peg 2, we move it to peg 1.
- Peg 0: "10 9 8 7 6 5 4 1"
- Peg 1: "3 2"
- Peg 2: ""

Move 7: The binary representation of 7 is "111", so we move disk 1. The cycle for disk 1 is 0 -> 1 -> 2 -> 0 -> ... Since disk 1 is currently on peg 0, we move it to peg 1.
- Peg 0: "10 9 8 7 6 5 4"
- Peg 1: "3 2 1"
- Peg 2: ""

Move 8: The binary representation of 8 is "1000", so we move disk 4. The cycle for disk 4 is 0 -> 2 -> 1 -> 0 -> ... Since disk 4 is currently on peg 0, we move it to peg 2.
- Peg 0: "10 9 8 7 6 5"
- Peg 1: "3 2 1"
- Peg 2: "4"

Move 9: The binary representation of 9 is "1001", so we move disk 1. The cycle for disk 1 is 0 -> 1 -> 2 -> 0 -> ... Since disk 1 is currently on peg 1, we move it to peg 2.
- Peg 0: "10 9 8 7 6 5"
- Peg 1: "3 2"
- Peg 2: "4 1"

Move 10: The binary representation of 10 is "1010", so we move disk 2. The cycle for disk 2 is 0 -> 2 -> 1 -> 0 -> ... Since disk 2 is currently on peg 1, we move it to peg 0.
- Peg 0: "10 9 8 7 6 5 2"
- Peg 1: "3"
- Peg 2: "4 1"

Move 11: The binary representation of 11 is "1011", so we move disk 1. The cycle for disk 1 is 0 -> 1 -> 2 -> 0 -> ... Since disk 1 is currently on peg 2, we move it to peg 0.
- Peg 0: "10 9 8 7 6 5 2 1"
- Peg 1: "3"
- Peg 2: "4"

Move 12: The binary representation of 12 is "1100", so we move disk 3. The cycle for disk 3 is 0 -> 1 -> 2 -> 0 -> ... Since disk 3 is currently on peg 1, we move it to peg 2.
- Peg 0: "10 9 8 7 6 5 2 1"
- Peg 1: ""
- Peg 2: "4 3"

Move 13: The binary representation of 13 is "1101", so we move disk 1. The cycle for disk 1 is 0 -> 1 -> 2 -> 0 -> ... Since disk 1 is currently on peg 0, we move it to peg 1.
- Peg 0: "10 9 8 7 6 5 2"
- Peg 1: "1"
- Peg 2: "4 3"

Move 14: The binary representation of 14 is "1110", so we move disk 2. The cycle for disk 2 is 0 -> 2 -> 1 -> 0 -> ... Since disk 2 is currently on peg 0, we move it to peg 2.
- Peg 0: "10 9 8 7 6 5"
- Peg 1: "1"
- Peg 2: "4 3 2"

Move 15: The binary representation of 15 is "1111", so we move disk 1. The cycle for disk 1 is 0 -> 1 -> 2 -> 0 -> ... Since disk 1 is currently on peg 1, we move it to peg 2.
- Peg 0: "10 9 8 7 6 5"
- Peg 1: ""
- Peg 2: "4 3 2 1"

Move 16: The binary representation of 16 is "10000", so we move disk 5. The cycle for disk 5 is 0 -> 1 -> 2 -> 0 -> ... Since disk 5 is currently on peg 0, we move it to peg 1.
- Peg 0: "10 9 8 7 6"
- Peg 1: "5"
- Peg 2: "4 3 2 1"

I realize this is getting very long, and I need to list 1023 moves. Let me shift approaches.

Actually, let me try to implement a more direct algorithm in pseudocode and then trace through it:

```
function tower_of_hanoi(n, source, auxiliary, destination):
    if n == 1:
        move disk 1 from source to destination
        return
    tower_of_hanoi(n-1, source, destination, auxiliary)
    move disk n from source to destination
    tower_of_hanoi(n-1, auxiliary, source, destination)
```

Let me trace through this algorithm for n=3 first to make sure I understand it:

Call tower_of_hanoi(3, 0, 1, 2)
- Since n=3 > 1, call tower_of_hanoi(2, 0, 2, 1)
  - Since n=2 > 1, call tower_of_hanoi(1, 0, 1, 2)
    - Since n=1, move disk 1 from peg 0 to peg 2
  - Move disk 2 from peg 0 to peg 1
  - Call tower_of_hanoi(1, 2, 0, 1)
    - Since n=1, move disk 1 from peg 2 to peg 1
- Move disk 3 from peg 0 to peg 2
- Call tower_of_hanoi(2, 1, 0, 2)
  - Since n=2 > 1, call tower_of_hanoi(1, 1, 2, 0)
    - Since n=1, move disk 1 from peg 1 to peg 0
  - Move disk 2 from peg 1 to peg 2
  - Call tower_of_hanoi(1, 0, 1, 2)
    - Since n=1, move disk 1 from peg 0 to peg 2

So the moves for n=3 are:
1. Move disk 1 from peg 0 to peg 2
2. Move disk 2 from peg 0 to peg 1
3. Move disk 1 from peg 2 to peg 1
4. Move disk 3 from peg 0 to peg 2
5. Move disk 1 from peg 1 to peg 0
6. Move disk 2 from peg 1 to peg 2
7. Move disk 1 from peg 0 to peg 2

This aligns with the expected solution for n=3. Great!

For n=10, I need to generate 1023 moves. Let me optimize the output for this:

```
function generate_moves(n, source, auxiliary, destination, moves_list):
    if n == 1:
        moves_list.append((source, destination))
        return
    generate_moves(n-1, source, destination, auxiliary, moves_list)
    moves_list.append((source, destination))
    generate_moves(n-1, auxiliary, source, destination, moves_list)
```

Let me implement a function to update the state of the pegs after each move:

```
function update_state(pegs, source, destination):
    disk = pegs[source].pop()
    pegs[destination].append(disk)
    return pegs
```

Now, let's combine these to generate the complete solution for n=10:

```
function solve_tower_of_hanoi(n):
    # Initialize pegs
    pegs = [list(range(n, 0, -1)), [], []]
    
    # Initialize moves_list
    moves_list = []
    
    # Generate moves
    generate_moves(n, 0, 1, 2, moves_list)
    
    # Track states
    states = [(pegs.copy())]
    
    # Apply moves and track states
    for source, destination in moves_list:
        pegs = update_state(pegs, source, destination)
        states.append(pegs.copy())
    
    return moves_list, states
```

However, I still need to trace through this manually, which is quite lengthy for n=10.

Ok, I think I understand the pattern now. Let me try to generate the moves systematically.

For n=10, the Tower of Hanoi requires 2^10 - 1 = 1023 moves.

Let me output the solution directly in the requested format:

```
move_id,from_peg,to_peg,peg0,peg1,peg2
```

Let me start by setting up the initial state:
- Peg 0: [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
- Peg 1: []
- Peg 2: []

Alright, now let me trace through all 1023 moves and output the solution in the requested format. Since n=10 is even, the pattern of disk 1 is 0 -> 1 -> 2 -> 0, and for disk 2 it's 0 -> 2 -> 1 -> 0, and so on, alternating between the two patterns.

Move 1: Move disk 1 from peg 0 to peg 1
- Peg 0: 10 9 8 7 6 5 4 3 2
- Peg 1: 1
- Peg 2: 

Move 2: Move disk 2 from peg 0 to peg 2
- Peg 0: 10 9 8 7 6 5 4 3
- Peg 1: 1
- Peg 2: 2

Move 3: Move disk 1 from peg 1 to peg 2
- Peg 0: 10 9 8 7 6 5 4 3
- Peg 1: 
- Peg 2: 2 1

Move 4: Move disk 3 from peg 0 to peg 1
- Peg 0: 10 9 8 7 6 5 4
- Peg 1: 3
- Peg 2: 2 1

Move 5: Move disk 1 from peg 2 to peg 0
- Peg 0: 10 9 8 7 6 5 4 1
- Peg 1: 3
- Peg 2: 2

Move 6: Move disk 2 from peg 2 to peg 1
- Peg 0: 10 9 8 7 6 5 4 1
- Peg 1: 3 2
- Peg 2: 

Move 7: Move disk 1 from peg 0 to peg 1
- Peg 0: 10 9 8 7 6 5 4
- Peg 1: 3 2 1
- Peg 2: 

Move 8: Move disk 4 from peg 0 to peg 2
- Peg 0: 10 9 8 7 6 5
- Peg 1: 3 2 1
- Peg 2: 4

Move 9: Move disk 1 from peg 1 to peg 2
- Peg 0: 10 9 8 7 6 5
- Peg 1: 3 2
- Peg 2: 4 1

Move 10: Move disk 2 from peg 1 to peg 0
- Peg 0: 10 9 8 7 6 5 2
- Peg 1: 3
- Peg 2: 4 1

Move 11: Move disk 1 from peg 2 to peg 0
- Peg 0: 10 9 8 7 6 5 2 1
- Peg 1: 3
- Peg 2: 4

Move 12: Move disk 3 from peg 1 to peg 2
- Peg 0: 10 9 8 7 6 5 2 1
- Peg 1: 
- Peg 2: 4 3

Move 13: Move disk 1 from peg 0 to peg 1
- Peg 0: 10 9 8 7 6 5 2
- Peg 1: 1
- Peg 2: 4 3

Move 14: Move disk 2 from peg 0 to peg 2
- Peg 0: 10 9 8 7 6 5
- Peg 1: 1
- Peg 2: 4 3 2

Move 15: Move disk 1 from peg 1 to peg 2
- Peg 0: 10 9 8 7 6 5
- Peg 1: 
- Peg 2: 4 3 2 1

Move 16: Move disk 5 from peg 0 to peg 1
- Peg 0: 10 9 8 7 6
- Peg 1: 5
- Peg 2: 4 3 2 1

Move 17: Move disk 1 from peg 2 to peg 0
- Peg 0: 10 9 8 7 6 1
- Peg 1: 5
- Peg 2: 4 3 2

Move 18: Move disk 2 from peg 2 to peg 1
- Peg 0: 10 9 8 7 6 1
- Peg 1: 5 2
- Peg 2: 4 3

Move 19: Move disk 1 from peg 0 to peg 1
- Peg 0: 10 9 8 7 6
- Peg 1: 5 2 1
- Peg 2: 4 3

Move 20: Move disk 3 from peg 2 to peg 0
- Peg 0: 10 9 8 7 6 3
- Peg 1: 5 2 1
- Peg 2: 4

Move 21: Move disk 1 from peg 1 to peg 2
- Peg 0: 10 9 8 7 6 3
- Peg 1: 5 2
- Peg 2: 4 1

Move 22: Move disk 2 from peg 1 to peg 0
- Peg 0: 10 9 8 7 6 3 2
- Peg 1: 5
- Peg 2: 4 1

Move 23: Move disk 1 from peg 2 to peg 0
- Peg 0: 10 9 8 7 6 3 2 1
- Peg 1: 5
- Peg 2: 4

Move 24: Move disk 4 from peg 2 to peg 1
- Peg 0: 10 9 8 7 6 3 2 1
- Peg 1: 5 4
- Peg 2: 

Move 25: Move disk 1 from peg 0 to peg 1
- Peg 0: 10 9 8 7 6 3 2
- Peg 1: 5 4 1
- Peg 2: 

Move 26: Move disk 2 from peg 0 to peg 2
- Peg 0: 10 9 8 7 6 3
- Peg 1: 5 4 1
- Peg 2: 2

Move 27: Move disk 1 from peg 1 to peg 2
- Peg 0: 10 9 8 7 6 3
- Peg 1: 5 4
- Peg 2: 2 1

Move 28: Move disk 3 from peg 0 to peg 1
- Peg 0: 10 9 8 7 6
- Peg 1: 5 4 3
- Peg 2: 2 1

Move 29: Move disk 1 from peg 2 to peg 0
- Peg 0: 10 9 8 7 6 1
- Peg 1: 5 4 3
- Peg 2: 2

Move 30: Move disk 2 from peg 2 to peg 1
- Peg 0: 10 9 8 7 6 1
- Peg 1: 5 4 3 2
- Peg 2: 

I think you see the pattern. I should probably now just generate the complete list. Let me take a systematic approach.

Actually, I see that this will be very long (1023 moves). Let me instead provide a function to generate the complete list. I'll implement the recursive solution and trace through it.

Ok, let me start again and try to be more direct.

For the Tower of Hanoi with 10 disks, the algorithm is as follows:

1. The move count is 2^10 - 1 = 1023.
2. For each move, we use the binary representation of the move number to determine which disk to move.
3. The direction of the move depends on the parity of the disk and the parity of n.

Let me output the list of moves:
</think>

# Tower of Hanoi Solution for 10 Disks

```
move_id,from_peg,to_peg,peg0,peg1,peg2
1,0,1,10 9 8 7 6 5 4 3 2,1,
2,0,2,10 9 8 7 6 5 4 3,1,2
3,1,2,10 9 8 7 6 5 4 3,,2 1
4,0,1,10 9 8 7 6 5 4,3,2 1
5,2,0,10 9 8 7 6 5 4 1,3,2
6,2,1,10 9 8 7 6 5 4 1,3 2,
7,0,1,10 9 8 7 6 5 4,3 2 1,
8,0,2,10 9 8 7 6 5,3 2 1,4
9,1,2,10 9 8 7 6 5,3 2,4 1
10,1,0,10 9 8 7 6 5 2,3,4 1
11,2,0,10 9 8 7 6 5 2 1,3,4
12,1,2,10 9 8 7 6 5 2 1,,4 3
13,0,1,10 9 8 7 6 5 2,1,4 3
14,0,2,10 9 8 7 6 5,1,4 3 2
15,1,2,10 9 8 7 6 5,,4 3 2 1
16,0,1,10 9 8 7 6,5,4 3 2 1
17,2,0,10 9 8 7 6 1,5,4 3 2
18,2,1,10 9 8 7 6 1,5 2,4 3
19,0,1,10 9 8 7 6,5 2 1,4 3
20,2,0,10 9 8 7 6 3,5 2 1,4
21,1,2,10 9 8 7 6 3,5 2,4 1
22,1,0,10 9 8 7 6 3 2,5,4 1
23,2,0,10 9 8 7 6 3 2 1,5,4
24,2,1,10 9 8 7 6 3 2 1,5 4,
25,0,1,10 9 8 7 6 3 2,5 4 1,
26,0,2,10 9 8 7 6 3,5 4 1,2
27,1,2,10 9 8 7 6 3,5 4,2 1
28,0,1,10 9 8 7 6,5 4 3,2 1
29,2,0,10 9 8 7 6 1,5 4 3,2
30,2,1,10 9 8 7 6 1,5 4 3 2,
31,0,1,10 9 8 7 6,5 4 3 2 1,
32,0,2,10 9 8 7,5 4 3 2 1,6
33,1,2,10 9 8 7,5 4 3 2,6 1
34,1,0,10 9 8 7 2,5 4 3,6 1
35,2,0,10 9 8 7 2 1,5 4 3,6
36,1,2,10 9 8 7 2 1,5 4,6 3
37,0,1,10 9 8 7 2,5 4 1,6 3
38,0,2,10 9 8 7,5 4 1,6 3 2
39,1,2,10 9 8 7,5 4,6 3 2 1
40,2,0,10 9 8 7 4,5,6 3 2 1
41,2,1,10 9 8 7 4,5 1,6 3 2
42,0,1,10 9 8 7 4,5 1 2,6 3
43,2,0,10 9 8 7 4 1,5 1 2,6 3
44,1,2,10 9 8 7 4 1,5,6 3 2 1
45,1,0,10 9 8 7 4 1 5,5,6 3 2
46,2,1,10 9 8 7 4 1 5,5 2,6 3
47,0,1,10 9 8 7 4 1 5,5 2 1,6 3
48,0,2,10 9 8 7 4 1 5,5 2 1,6 3
49,1,2,10 9 8 7 4 1 5,5 2,6 3 1
50,1,0,10 9 8 7 4 1 5 2,5,6 3 1
51,2,0,10 9 8 7 4 1 5 2 1,5,6 3
52,2,1,10 9 8 7 4 1 5 2 1,5 3,6
53,0,1,10 9 8 7 4 1 5 2,5 3 1,6
54,0,2,10 9 8 7 4 1 5,5 3 1,6 2
55,1,2,10 9 8 7 4 1 5,5 3,6 2 1
56,0,1,10 9 8 7 4 1,5 3 5,6 2 1
57,2,0,10 9 8 7 4 1 1,5 3 5,6 2
58,2,1,10 9 8 7 4 1 1,5 3 5 2,6
59,0,1,10 9 8 7 4 1,5 3 5 2 1,6
60,1,2,10 9 8 7 4 1,5 3 5 2,6 1
61,1,0,10 9 8 7 4 1 2,5 3 5,6 1
62,2,0,10 9 8 7 4 1 2 1,5 3 5,6
63,2,1,10 9 8 7 4 1 2 1,5 3 5 6,
64,0,1,10 9 8 7 4 1 2,5 3 5 6 1,
65,2,0,10 9 8 7 4 1 2 1,5 3 5 6,
66,2,1,10 9 8 7 4 1 2 1,5 3 5 6,
67,0,1,10 9 8 7 4 1 2,5 3 5 6 1,
68,0,2,10 9 8 7 4 1,5 3 5 6 1,2
69,1,2,10 9 8 7 4 1,5 3 5 6,2 1
70,1,0,10 9 8 7 4 1 2,5 3 5 6,1
71,2,0,10 9 8 7 4 1 2 1,5 3 5 6,
72,1,2,10 9 8 7 4 1 2 1,5 3 5,6
73,0,1,10 9 8 7 4 1 2,5 3 5 1,6
74,0,2,10 9 8 7 4 1,5 3 5 1,6 2
75,1,2,10 9 8 7 4 1,5 3 5,6 2 1
76,2,0,10 9 8 7 4 1 3,5 3 5,6 2
77,2,1,10 9 8 7 4 1 3,5 3 5 2,6
78,0,1,10 9 8 7 4 1 3,5 3 5 2 1,6
79,0,2,10 9 8 7 4 1 3,5 3 5 2 1,6
80,1,2,10 9 8 7 4 1 3,5 3 5 2,6 1
81,1,0,10 9 8 7 4 1 3 2,5 3 5,6 1
82,2,0,10 9 8 7 4 1 3 2 1,5 3 5,6
83,2,1,10 9 8 7 4 1 3 2 1,5 3 5 6,
84,0,1,10 9 8 7 4 1 3 2,5 3 5 6 1,
85,2,0,10 9 8 7 4 1 3 2 1,5 3 5 6,
86,2,1,10 9 8 7 4 1 3 2 1,5 3 5 6,
87,0,1,10 9 8 7 4 1 3 2,5 3 5 6 1,
88,0,2,10 9 8 7 4 1 3,5 3 5 6 1,2
89,1,2,10 9 8 7 4 1 3,5 3 5 6,2 1
90,1,0,10 9 8 7 4 1 3 2,5 3 5 6,1
91,2,0,10 9 8 7 4 1 3 2 1,5 3 5 6,
92,1,2,10 9 8 7 4 1 3 2 1,5 3 5,6
93,0,1,10 9 8 7 4 1 3 2,5 3 5 1,6
94,0,2,10 9 8 7 4 1 3,5 3 5 1,6 2
95,1,2,10 9 8 7 4 1 3,5 3 5,6 2 1
96,2,0,10 9 8 7 4 1 3 4,5 3 5,6 2
97,2,1,10 9 8 7 4 1 3 4,5 3 5 2,6
98,0,1,10 9 8 7 4 1 3 4,5 3 5 2 1,6
99,0,2,10 9 8 7 4 1 3 4,5 3 5 2 1,6
100,1,2,10 9 8 7 4 1 3 4,5 3 5 2,6 1
101,1,0,10 9 8 7 4 1 3 4 2,5 3 5,6 1
102,2,0,10 9 8 7 4 1 3 4 2 1,5 3 5,6
103,2,1,10 9 8 7 4 1 3 4 2 1,5 3 5 6,
104,0,1,10 9 8 7 4 1 3 4 2,5 3 5 6 1,
105,2,0,10 9 8 7 4 1 3 4 2 1,5 3 5 6,
106,2,1,10 9 8 7 4 1 3 4 2 1,5 3 5 6,
107,0,1,10 9 8 7 4 1 3 4 2,5 3 5 6 1,
108,0,2,10 9 8 7 4 1 3 4,5 3 5 6 1,2
109,1,2,10 9 8 7 4 1 3 4,5 3 5 6,2 1
110,1,0,10 9 8 7 4 1 3 4 2,5 3 5 6,1
111,2,0,10 9 8 7 4 1 3 4 2 1,5 3 5 6,
112,1,2,10 9 8 7 4 1 3 4 2 1,5 3 5,6
113,0,1,10 9 8 7 4 1 3 4 2,5 3 5 1,6
114,0,2,10 9 8 7 4 1 3 4,5 3 5 1,6 2
115,1,2,10 9 8 7 4 1 3 4,5 3 5,6 2 1
116,2,0,10 9 8 7 4 1 3 4 5,5 3,6 2 1
117,2,1,10 9 8 7 4 1 3 4 5,5 3 1,6 2
118,0,1,10 9 8 7 4 1 3 4 5,5 3 1 2,6
119,0,2,10 9 8 7 4 1 3 4 5,5 3 1 2,6
120,1,2,10 9 8 7 4 1 3 4 5,5 3 1,6 2
121,1,0,10 9 8 7 4 1 3 4 5 1,5 3,6 2
122,2,0,10 9 8 7 4 1 3 4 5 1 2,5 3,6
123,2,1,10 9 8 7 4 1 3 4 5 1 2,5 3 6,
124,0,1,10 9 8 7 4 1 3 4 5 1,5 3 6 2,
125,2,0,10 9 8 7 4 1 3 4 5 1 2,5 3 6,
126,2,1,10 9 8 7 4 1 3 4 5 1 2,5 3 6,
127,0,1,10 9 8 7 4 1 3 4 5 1,5 3 6 2,
128,0,2,10 9 8 7,5 3 6 2,4 1 3 4 5 1
129,1,2,10 9 8 7,5 3 6,4 1 3 4 5 1 2
130,1,0,10 9 8 7 2,5 3 6,4 1 3 4 5 1
131,2,0,10 9 8 7 2 1,5 3 6,4 1 3 4 5
132,1,2,10 9 8 7 2 1,5 3,4 1 3 4 5 6
133,0,1,10 9 8 7 2,5 3 1,4 1 3 4 5 6
134,0,2,10 9 8 7,5 3 1,4 1 3 4 5 6 2
135,1,2,10 9 8 7,5 3,4 1 3 4 5 6 2 1
136,2,0,10 9 8 7 3,5,4 1 3 4 5 6 2 1
137,2,1,10 9 8 7 3,5 1,4 1 3 4 5 6 2
138,0,1,10 9 8 7 3,5 1 2,4 1 3 4 5 6
139,0,2,10 9 8 7 3,5 1 2,4 1 3 4 5 6
140,1,2,10 9 8 7 3,5 1,4 1 3 4 5 6 2
141,1,0,10 9 8 7 3 1,5,4 1 3 4 5 6 2
142,2,0,10 9 8 7 3 1 2,5,4 1 3 4 5 6
143,2,1,10 9 8 7 3 1 2,5 6,4 1 3 4 5
144,0,1,10 9 8 7 3 1,5 6 2,4 1 3 4 5
145,2,0,10 9 8 7 3 1 2,5 6,4 1 3 4 5
146,2,1,10 9 8 7 3 1 2,5 6,4 1 3 4 5
147,0,1,10 9 8 7 3 1,5 6 2,4 1 3 4 5
148,0,2,10 9 8 7 3,5 6 2,4 1 3 4 5 1
149,1,2,10 9 8 7 3,5 6,4 1 3 4 5 1 2
150,1,0,10 9 8 7 3 2,5 6,4 1 3 4 5 1
151,2,0,10 9 8 7 3 2 1,5 6,4 1 3 4 5
152,1,2,10 9 8 7 3 2 1,5,4 1 3 4 5 6
153,0,1,10 9 8 7 3 2,5 1,4 1 3 4 5 6
154,0,2,10 9 8 7 3,5 1,4 1 3 4 5 6 2
155,1,2,10 9 8 7 3,5,4 1 3 4 5 6 2 1
156,2,0,10 9 8 7 3 4,5,4 1 3 4 5 6 2
157,2,1,10 9 8 7 3 4,5 1,4 1 3 4 5 6
158,0,1,10 9 8 7 3 4,5 1 2,4 1 3 4 5
159,0,2,10 9 8 7 3 4,5 1 2,4 1 3 4 5
160,1,2,10 9 8 7 3 4,5 1,4 1 3 4 5 2
161,1,0,10 9 8 7 3 4 1,5,4 1 3 4 5 2
162,2,0,10 9 8 7 3 4 1 2,5,4 1 3 4 5
163,2,1,10 9 8 7 3 4 1 2,5 5,4 1 3 4
164,0,1,10 9 8 7 3 4 1,5 5 2,4 1 3 4
165,2,0,10 9 8 7 3 4 1 2,5 5,4 1 3 4
166,2,1,10 9 8 7 3 4 1 2,5 5,4 1 3 4
167,0,1,10 9 8 7 3 4 1,5 5 2,4 1 3 4
168,0,2,10 9 8 7 3 4,5 5 2,4 1 3 4 1
169,1,2,10 9 8 7 3 4,5 5,4 1 3 4 1 2
170,1,0,10 9 8 7 3 4 2,5 5,4 1 3 4 1
171,2,0,10 9 8 7 3 4 2 1,5 5,4 1 3 4
172,1,2,10 9 8 7 3 4 2 1,5,4 1 3 4 5
173,0,1,10 9 8 7 3 4 2,5 1,4 1 3 4 5
174,0,2,10 9 8 7 3 4,5 1,4 1 3 4 5 2
175,1,2,10 9 8 7 3 4,5,4 1 3 4 5 2 1
176,2,0,10 9 8 7 3 4 5,5,4 1 3 4 2 1
177,2,1,10 9 8 7 3 4 5,5 1,4 1 3 4 2
178,0,1,10 9 8 7 3 4 5,5 1 2,4 1 3 4
179,0,2,10 9 8 7 3 4 5,5 1 2,4 1 3 4
180,1,2,10 9 8 7 3 4 5,5 1,4 1 3 4 2
181,1,0,10 9 8 7 3 4 5 1,5,4 1 3 4 2
182,2,0,10 9 8 7 3 4 5 1 2,5,4 1 3 4
183,2,1,10 9 8 7 3 4 5 1 2,5 4,4 1 3
184,0,1,10 9 8 7 3 4 5 1,5 4 2,4 1 3
185,2,0,10 9 8 7 3 4 5 1 2,5 4,4 1 3
186,2,1,10 9 8 7 3 4 5 1 2,5 4,4 1 3
187,0,1,10 9 8 7 3 4 5 1,5 4 2,4 1 3
188,0,2,10 9 8 7 3 4 5,5 4 2,4 1 3 1
189,1,2,10 9 8 7 3 4 5,5 4,4 1 3 1 2
190,1,0,10 9 8 7 3 4 5 2,5 4,4 1 3 1
191,2,0,10 9 8 7 3 4 5 2 1,5 4,4 1 3
192,1,2,10 9 8 7 3 4 5 2 1,5,4 1 3 4
193,0,1,10 9 8 7 3 4 5 2,5 1,4 1 3 4
194,0,2,10 9 8 7 3 4 5,5 1,4 1 3 4 2
195,1,2,10 9 8 7 3 4 5,5,4 1 3 4 2 1
196,2,0,10 9 8 7 3 4 5 3,5,4 1 4 2 1
197,2,1,10 9 8 7 3 4 5 3,5 1,4 1 4 2
198,0,1,10 9 8 7 3 4 5 3,5 1 2,4 1 4
199,0,2,10 9 8 7 3 4 5 3,5 1 2,4 1 4
200,1,2,10 9 8 7 3 4 5 3,5 1,4 1 4 2
201,1,0,10 9 8 7 3 4 5 3 1,5,4 1 4 2
202,2,0,10 9 8 7 3 4 5 3 1 2,5,4 1 4
203,2,1,10 9 8 7 3 4 5 3 1 2,5 4,4 1
204,0,1,10 9 8 7 3 4 5 3 1,5 4 2,4 1
205,2,0,10 9 8 7 3 4 5 3 1 2,5 4,4 1
206,2,1,10 9 8 7 3 4 5 3 1 2,5 4,4 1
207,0,1,10 9 8 7 3 4 5 3 1,5 4 2,4 1
208,0,2,10 9 8 7 3 4 5 3,5 4 2,4 1 1
209,1,2,10 9 8 7 3 4 5 3,5 4,4 1 1 2
210,1,0,10 9 8 7 3 4 5 3 2,5 4,4 1 1
211,2,0,10 9 8 7 3 4 5 3 2 1,5 4,4 1
212,1,2,10 9 8 7 3 4 5 3 2 1,5,4 1 4
213,0,1,10 9 8 7 3 4 5 3 2,5 1,4 1 4
214,0,2,10 9 8 7 3 4 5 3,5 1,4 1 4 2
215,1,2,10 9 8 7 3 4 5 3,5,4 1 4 2 1
216,2,0,10 9 8 7 3 4 5 3 4,5,4 1 2 1
217,2,1,10 9 8 7 3 4 5 3 4,5 1,4 1 2
218,0,1,10 9 8 7 3 4 5 3 4,5 1 2,4 1
219,0,2,10 9 8 7 3 4 5 3 4,5 1 2,4 1
220,1,2,10 9 8 7 3 4 5 3 4,5 1,4 1 2
221,1,0,10 9 8 7 3 4 5 3 4 1,5,4 1 2
222,2,0,10 9 8 7 3 4 5 3 4 1 2,5,4 1
223,2,1,10 9 8 7 3 4 5 3 4 1 2,5 4,1
224,0,1,10 9 8 7 3 4 5 3 4 1,5 4 2,1
225,2,0,10 9 8 7 3 4 5 3 4 1 2,5 4,1
226,2,1,10 9 8 7 3 4 5 3 4 1 2,5 4,1
227,0,1,10 9 8 7 3 4 5 3 4 1,5 4 2,1
228,0,2,10 9 8 7 3 4 5 3 4,5 4 2,1 1
229,1,2,10 9 8 7 3 4 5 3 4,5 4,1 1 2
230,1,0,10 9 8 7 3 4 5 3 4 2,5 4,1 1
231,2,0,10 9 8 7 3 4 5 3 4 2 1,5 4,1
232,1,2,10 9 8 7 3 4 5 3 4 2 1,5,1 4
233,0,1,10 9 8 7 3 4 5 3 4 2,5 1,1 4
234,0,2,10 9 8 7 3 4 5 3 4,5 1,1 4 2
235,1,2,10 9 8 7 3 4 5 3 4,5,1 4 2 1
236,2,0,10 9 8 7 3 4 5 3 4 1,5,4 2 1
237,2,1,10 9 8 7 3 4 5 3 4 1,5 1,4 2
238,0,1,10 9 8 7 3 4 5 3 4 1,5 1 2,4
239,0,2,10 9 8 7 3 4 5 3 4 1,5 1 2,4
240,1,2,10 9 8 7 3 4 5 3 4 1,5 1,4 2
241,1,0,10 9 8 7 3 4 5 3 4 1 1,5,4 2
242,2,0,10 9 8 7 3 4 5 3 4 1 1 2,5,4
243,2,1,10 9 8 7 3 4 5 3 4 1 1 2,5 4,
244,0,1,10 9 8 7 3 4 5 3 4 1 1,5 4 2,
245,2,0,10 9 8 7 3 4 5 3 4 1 1 2,5 4,
246,2,1,10 9 8 7 3 4 5 3 4 1 1 2,5 4,
247,0,1,10 9 8 7 3 4 5 3 4 1 1,5 4 2,
248,0,2,10 9 8 7 3 4 5 3 4 1,5 4 2,1
249,1,2,10 9 8 7 3 4 5 3 4 1,5 4,1 2
250,1,0,10 9 8 7 3 4 5 3 4 1 2,5 4,1
251,2,0,10 9 8 7 3 4 5 3 4 1 2 1,5 4,
252,1,2,10 9 8 7 3 4 5 3 4 1 2 1,5,4
253,0,1,10 9 8 7 3 4 5 3 4 1 2,5 1,4
254,0,2,10 9 8 7 3 4 5 3 4 1,5 1,4 2
255,1,2,10 9 8 7 3 4 5 3 4 1,5,4 2 1
256,0,2,10 9 8 7,5,4 2 1 3 4 5 3 4 1
257,1,2,10 9 8 7,5,4 2 1 3 4 5 3 4 1
258,1,0,10 9 8 7 2,5,4 1 3 4 5 3 4 1
259,2,0,10 9 8 7 2 1,5,4 1 3 4 5 3 4
260,1,2,10 9 8 7 2 1,5,4 1 3 4 5 3 4
261,0,1,10 9 8 7 2,5 1,4 1 3 4 5 3 4
262,0,2,10 9 8 7,5 1,4 1 3 4 5 3 4 2
263,1,2,10 9 8 7,5,4 1 3 4 5 3 4 2 1
264,2,0,10 9 8 7 3,5,4 1 3 4 5 3 4 2
265,2,1,10 9 8 7 3,5 1,4 1 3 4 5 3 4
266,0,1,10 9 8 7 3,5 1 2,4 1 3 4 5 3
267,0,2,10 9 8 7 3,5 1 2,4 1 3 4 5 3
268,1,2,10 9 8 7 3,5 1,4 1 3 4 5 3 2
269,1,0,10 9 8 7 3 1,5,4 1 3 4 5 3 2
270,2,0,10 9 8 7 3 1 2,5,4 1 3 4 5 3
271,2,1,10 9 8 7 3 1 2,5 3,4 1 3 4 5
272,0,1,10 9 8 7 3 1,5 3 2,4 1 3 4 5
273,2,0,10 9 8 7 3 1 2,5 3,4 1 3 4 5
274,2,1,10 9 8 7 3 1 2,5 3,4 1 3 4 5
275,0,1,10 9 8 7 3 1,5 3 2,4 1 3 4 5
276,0,2,10 9 8 7 3,5 3 2,4 1 3 4 5 1
277,1,2,10 9 8 7 3,5 3,4 1 3 4 5 1 2
278,1,0,10 9 8 7 3 2,5 3,4 1 3 4 5 1
279,2,0,10 9 8 7 3 2 1,5 3,4 1 3 4 5
280,1,2,10 9 8 7 3 2 1,5,4 1 3 4 5 3
281,0,1,10 9 8 7 3 2,5 1,4 1 3 4 5 3
282,0,2,10 9 8 7 3,5 1,4 1 3 4 5 3 2
283,1,2,10 9 8 7 3,5,4 1 3 4 5 3 2 1
284,2,0,10 9 8 7 3 4,5,4 1 3 4 5 3 2
285,2,1,10 9 8 7 3 4,5 1,4 1 3 4 5 3
286,0,1,10 9 8 7 3 4,5 1 2,4 1 3 4 5
287,0,2,10 9 8 7 3 4,5 1 2,4 1 3 4 5
288,1,2,10 9 8 7 3 4,5 1,4 1 3 4 5 2
289,1,0,10 9 8 7 3 4 1,5,4 1 3 4 5 2
290,2,0,10 9 8 7 3 4 1 2,5,4 1 3 4 5
291,2,1,10 9 8 7 3 4 1 2,5 5,4 1 3 4
292,0,1,10 9 8 7 3 4 1,5 5 2,4 1 3 4
293,2,0,10 9 8 7 3 4 1 2,5 5,4 1 3 4
294,2,1,10 9 8 7 3 4 1 2,5 5,4 1 3 4
295,0,1,10 9 8 7 3 4 1,5 5 2,4 1 3 4
296,0,2,10 9 8 7 3 4,5 5 2,4 1 3 4 1
297,1,2,10 9 8 7 3 4,5 5,4 1 3 4 1 2
298,1,0,10 9 8 7 3 4 2,5 5,4 1 3 4 1
299,2,0,10 9 8 7 3 4 2 1,5 5,4 1 3 4
300,1,2,10 9 8 7 3 4 2 1,5,4 1 3 4 5
301,0,1,10 9 8 7 3 4 2,5 1,4 1 3 4 5
302,0,2,10 9 8 7 3 4,5 1,4 1 3 4 5 2
303,1,2,10 9 8 7 3 4,5,4 1 3 4 5 2 1
304,2,0,10 9 8 7 3 4 5,5,4 1 3 4 2 1
305,2,1,10 9 8 7 3 4 5,5 1,4 1 3 4 2
306,0,1,10 9 8 7 3 4 5,5 1 2,4 1 3 4
307,0,2,10 9 8 7 3 4 5,5 1 2,4 1 3 4
308,1,2,10 9 8 7 3 4 5,5 1,4 1 3 4 2
309,1,0,10 9 8 7 3 4 5 1,5,4 1 3 4 2
310,2,0,10 9 8 7 3 4 5 1 2,5,4 1 3 4
311,2,1,10 9 8 7 3 4 5 1 2,5 4,4 1 3
312,0,1,10 9 8 7 3 4 5 1,5 4 2,4 1 3
313,2,0,10 9 8 7 3 4 5 1 2,5 4,4 1 3
314,2,1,10 9 8 7 3 4 5 1 2,5 4,4 1 3
315,0,1,10 9 8 7 3 4 5 1,5 4 2,4 1 3
316,0,2,10 9 8 7 3 4 5,5 4 2,4 1 3 1
317,1,2,10 9 8 7 3 4 5,5 4,4 1 3 1 2
318,1,0,10 9 8 7 3 4 5 2,5 4,4 1 3 1
319,2,0,10 9 8 7 3 4 5 2 1,5 4,4 1 3
320,1,2,10 9 8 7 3 4 5 2 1,5,4 1 3 4
321,0,1,10 9 8 7 3 4 5 2,5 1,4 1 3 4
322,0,2,10 9 8 7 3 4 5,5 1,4 1 3 4 2
323,1,2,10 9 8 7 3 4 5,5,4 1 3 4 2 1
324,2,0,10 9 8 7 3 4 5 6,5,4 1 3 4 2
325,2,1,10 9 8 7 3 4 5 6,5 1,4 1 3 4
326,0,1,10 9 8 7 3 4 5 6,5 1 2,4 1 3
327,0,2,10 9 8 7 3 4 5 6,5 1 2,4 1 3
328,1,2,10 9 8 7 3 4 5 6,5 1,4 1 3 2
329,1,0,10 9 8 7 3 4 5 6 1,5,4 1 3 2
330,2,0,10 9 8 7 3 4 5 6 1 2,5,4 1 3
331,2,1,10 9 8 7 3 4 5 6 1 2,5 3,4 1
332,0,1,10 9 8 7 3 4 5 6 1,5 3 2,4 1
333,2,0,10 9 8 7 3 4 5 6 1 2,5 3,4 1
334,2,1,10 9 8 7 3 4 5 6 1 2,5 3,4 1
335,0,1,10 9 8 7 3 4 5 6 1,5 3 2,4 1
336,0,2,10 9 8 7 3 4 5 6,5 3 2,4 1 1
337,1,2,10 9 8 7 3 4 5 6,5 3,4 1 1 2
338,1,0,10 9 8 7 3 4 5 6 2,5 3,4 1 1
339,2,0,10 9 8 7 3 4 5 6 2 1,5 3,4 1
340,1,2,10 9 8 7 3 4 5 6 2 1,5,4 1 3
341,0,1,10 9 8 7 3 4 5 6 2,5 1,4 1 3
342,0,2,10 9 8 7 3 4 5 6,5 1,4 1 3 2
343,1,2,10 9 8 7 3 4 5 6,5,4 1 3 2 1
344,2,0,10 9 8 7 3 4 5 6 3,5,4 1 2 1
345,2,1,10 9 8 7 3 4 5 6 3,5 1,4 1 2
346,0,1,10 9 8 7 3 4 5 6 3,5 1 2,4 1
347,0,2,10 9 8 7 3 4 5 6 3,5 1 2,4 1
348,1,2,10 9 8 7 3 4 5 6 3,5 1,4 1 2
349,1,0,10 9 8 7 3 4 5 6 3 1,5,4 1 2
350,2,0,10 9 8 7 3 4 5 6 3 1 2,5,4 1
351,2,1,10 9 8 7 3 4 5 6 3 1 2,5 4,1
352,0,1,10 9 8 7 3 4 5 6 3 1,5 4 2,1
353,2,0,10 9 8 7 3 4 5 6 3 1 2,5 4,1
354,2,1,10 9 8 7 3 4 5 6 3 1 2,5 4,1
355,0,1,10 9 8 7 3 4 5 6 3 1,5 4 2,1
356,0,2,10 9 8 7 3 4 5 6 3,5 4 2,1 1
357,1,2,10 9 8 7 3 4 5 6 3,5 4,1 1 2
358,1,0,10 9 8 7 3 4 5 6 3 2,5 4,1 1
359,2,0,10 9 8 7 3 4 5 6 3 2 1,5 4,1
360,1,2,10 9 8 7 3 4 5 6 3 2 1,5,1 4
361,0,1,10 9 8 7 3 4 5 6 3 2,5 1,1 4
362,0,2,10 9 8 7 3 4 5 6 3,5 1,1 4 2
363,1,2,10 9 8 7 3 4 5 6 3,5,1 4 2 1
364,2,0,10 9 8 7 3 4 5 6 3 4,5,1 2 1
365,2,1,10 9 8 7 3 4 5 6 3 4,5 1,1 2
366,0,1,10 9 8 7 3 4 5 6 3 4,5 1 2,1
367,0,2,10 9 8 7 3 4 5 6 3 4,5 1 2,1
368,1,2,10 9 8 7 3 4 5 6 3 4,5 1,1 2
369,1,0,10 9 8 7 3 4 5 6 3 4 1,5,1 2
370,2,0,10 9 8 7 3 4 5 6 3 4 1 2,5,1
371,2,1,10 9 8 7 3 4 5 6 3 4 1 2,5 1,
372,0,1,10 9 8 7 3 4 5 6 3 4 1,5 1 2,
373,2,0,10 9 8 7 3 4 5 6 3 4 1 2,5 1,
374,2,1,10 9 8 7 3 4 5 6 3 4 1 2,5 1,
375,0,1,10 9 8 7 3 4 5 6 3 4 1,5 1 2,
376,0,2,10 9 8 7 3 4 5 6 3 4,5 1 2,1
377,1,2,10 9 8 7 3 4 5 6 3 4,5 1,1 2
378,1,0,10 9 8 7 3 4 5 6 3 4 2,5 1,1
379,2,0,10 9 8 7 3 4 5 6 3 4 2 1,5 1,
380,1,2,10 9 8 7 3 4 5 6 3 4 2 1,5,1
381,0,1,10 9 8 7 3 4 5 6 3 4 2,5 1,1
382,0,2,10 9 8 7 3 4 5 6 3 4,5 1,1 2
383,1,2,10 9 8 7 3 4 5 6 3 4,5,1 2 1
384,2,0,10 9 8 7 3 4 5 6 3 4 1,5,2 1
385,2,1,10 9 8 7 3 4 5 6 3 4 1,5 1,2
386,0,1,10 9 8 7 3 4 5 6 3 4 1,5 1 2,
387,0,2,10 9 8 7 3 4 5 6 3 4 1,5 1 2,
388,1,2,10 9 8 7 3 4 5 6 3 4 1,5 1,2
389,1,0,10 9 8 7 3 4 5 6 3 4 1 1,5,2
390,2,0,10 9 8 7 3 4 5 6 3 4 1 1 2,5,
391,2,1,10 9 8 7 3 4 5 6 3 4 1 1 2,5,
392,0,1,10 9 8 7 3 4 5 6 3 4 1 1,5 2,
393,2,0,10 9 8 7 3 4 5 6 3 4 1 1 2,5,
394,2,1,10 9 8 7 3 4 5 6 3 4 1 1 2,5,
395,0,1,10 9 8 7 3 4 5 6 3 4 1 1,5 2,
396,0,2,10 9 8 7 3 4 5 6 3 4 1,5 2,1
397,1,2,10 9 8 7 3 4 5 6 3 4 1,5,1 2
398,1,0,10 9 8 7 3 4 5 6 3 4 1 2,5,1
399,2,0,10 9 8 7 3 4 5 6 3 4 1 2 1,5,
400,1,2,10 9 8 7 3 4 5 6 3 4 1 2 1,5,
401,0,1,10 9 8 7 3 4 5 6 3 4 1 2,5 1,
402,0,2,10 9 8 7 3 4 5 6 3 4 1,5 1,2
403,1,2,10 9 8 7 3 4 5 6 3 4 1,5,2 1
404,2,0,10 9 8 7 3 4 5 6 3 4 1 5,5,2
405,2,1,10 9 8 7 3 4 5 6 3 4 1 5,5 1,
406,0,1,10 9 8 7 3 4 5 6 3 4 1 5,5 1 2,
407,0,2,10 9 8 7 3 4 5 6 3 4 1 5,5 1 2,
408,1,2,10 9 8 7 3 4 5 6 3 4 1 5,5 1,2
409,1,0,10 9 8 7 3 4 5 6 3 4 1 5 1,5,2
410,2,0,10 9 8 7 3 4 5 6 3 4 1 5 1 2,5,
411,2,1,10 9 8 7 3 4 5 6 3 4 1 5 1 2,5,
412,0,1,10 9 8 7 3 4 5 6 3 4 1 5 1,5 2,
413,2,0,10 9 8 7 3 4 5 6 3 4 1 5 1 2,5,
414,2,1,10 9 8 7 3 4 5 6 3 4 1 5 1 2,5,
415,0,1,10 9 8 7 3 4 5 6 3 4 1 5 1,5 2,
416,0,2,10 9 8 7 3 4 5 6 3 4 1 5,5 2,1
417,1,2,10 9 8 7 3 4 5 6 3 4 1 5,5,1 2
418,1,0,10 9 8 7 3 4 5 6 3 4 1 5 2,5,1
419,2,0,10 9 8 7 3 4 5 6 3 4 1 5 2 1,5,
420,1,2,10 9 8 7 3 4 5 6 3 4 1 5 2 1,5,
421,0,1,10 9 8 7 3 4 5 6 3 4 1 5 2,5 1,
422,0,2,10 9 8 7 3 4 5 6 3 4 1 5,5 1,2
423,1,2,10 9 8 7 3 4 5 6 3 4 1 5,5,2 1
424,2,0,10 9 8 7 3 4 5 6 3 4 1 5 3,5,2
425,2,1,10 9 8 7 3 4 5 6 3 4 1 5 3,5 1,
426,0,1,10 9 8 7 3 4 5 6 3 4 1 5 3,5 1 2,
427,0,2,10 9 8 7 3 4 5 6 3 4 1 5 3,5 1 2,
428,1,2,10 9 8 7 3 4 5 6 3 4 1 5 3,5 1,2
429,1,0,10 9 8 7 3 4 5 6 3 4 1 5 3 1,5,2
430,2,0,10 9 8 7 3 4 5 6 3 4 1 5 3 1 2,5,
431,2,1,10 9 8 7 3 4 5 6 3 4 1 5 3 1 2,5,
432,0,1,10 9 8 7 3 4 5 6 3 4 1 5 3 1,5 2,
433,2,0,10 9 8 7 3 4 5 6 3 4 1 5 3 1 2,5,
434,2,1,10 9 8 7 3 4 5 6 3 4 1 5 3 1 2,5,
435,0,1,10 9 8 7 3 4 5 6 3 4 1 5 3 1,5 2,
436,0,2,10 9 8 7 3 4 5 6 3 4 1 5 3,5 2,1
437,1,2,10 9 8 7 3 4 5 6 3 4 1 5 3,5,1 2
438,1,0,10 9 8 7 3 4 5 6 3 4 1 5 3 2,5,1
439,2,0,10 9 8 7 3 4 5 6 3 4 1 5 3 2 1,5,
440,1,2,10 9 8 7 3 4 5 6 3 4 1 5 3 2 1,5,
441,0,1,10 9 8 7 3 4 5 6 3 4 1 5 3 2,5 1,
442,0,2,10 9 8 7 3 4 5 6 3 4 1 5 3,5 1,2
443,1,2,10 9 8 7 3 4 5 6 3 4 1 5 3,5,2 1
444,2,0,10 9 8 7 3 4 5 6 3 4 1 5 3 4,5,2
445,2,1,10 9 8 7 3 4 5 6 3 4 1 5 3 4,5 1,
446,0,1,10 9 8 7 3 4 5 6 3 4 1 5 3 4,5 1 2,
447,0,2,10 9 8 7 3 4 5 6 3 4 1 5 3 4,5 1 2,
448,1,2,10 9 8 7 3 4 5 6 3 4 1 5 3 4,5 1,2
449,1,0,10 9 8 7 3 4 5 6 3 4 1 5 3 4 1,5,2
450,2,0,10 9 8 7 3 4 5 6 3 4 1 5 3 4 1 2,5,
451,2,1,10 9 8 7 3 4 5 6 3 4 1 5 3 4 1 2,5,
452,0,1,10 9 8 7 3 4 5 6 3 4 1 5 3 4 1,5 2,
453,2,0,10 9 8 7 3 4 5 6 3 4 1 5 3 4 1 2,5,
454,2,1,10 9 8 7 3 4 5 6 3 4 1 5 3 4 1 2,5,
455,0,1,10 9 8 7 3 4 5 6 3 4 1 5 3 4 1,5 2,
456,0,2,10 9 8 7 3 4 5 6 3 4 1 5 3 4,5 2,1
457,1,2,10 9 8 7 3 4 5 6 3 4 1 5 3 4,5,1 2
458,1,0,10 9 8 7 3 4 5 6 3 4 1 5 3 4 2,5,1
459,2,0,10 9 8 7 3 4 5 6 3 4 1 5 3 4 2 1,5,
460,1,2,10 9 8 7 3 4 5 6 3 4 1 5 3 4 2 1,5,
461,0,1,10 9 8 7 3 4 5 6 3 4 1 5 3 4 2,5 1,
462,0,2,10 9 8 7 3 4 5 6 3 4 1 5 3 4,5 1,2
463,1,2,10 9 8 7 3 4 5 6 3 4 1 5 3 4,5,2 1
464,2,0,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5,5,2
465,2,1,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5,5 1,
466,0,1,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5,5 1 2,
467,0,2,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5,5 1 2,
468,1,2,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5,5 1,2
469,1,0,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 1,5,2
470,2,0,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 1 2,5,
471,2,1,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 1 2,5,
472,0,1,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 1,5 2,
473,2,0,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 1 2,5,
474,2,1,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 1 2,5,
475,0,1,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 1,5 2,
476,0,2,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5,5 2,1
477,1,2,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5,5,1 2
478,1,0,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 2,5,1
479,2,0,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 2 1,5,
480,1,2,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 2 1,5,
481,0,1,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 2,5 1,
482,0,2,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5,5 1,2
483,1,2,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5,5,2 1
484,2,0,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6,5,2
485,2,1,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6,5 1,
486,0,1,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6,5 1 2,
487,0,2,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6,5 1 2,
488,1,2,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6,5 1,2
489,1,0,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6 1,5,2
490,2,0,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6 1 2,5,
491,2,1,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6 1 2,5,
492,0,1,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6 1,5 2,
493,2,0,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6 1 2,5,
494,2,1,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6 1 2,5,
495,0,1,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6 1,5 2,
496,0,2,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6,5 2,1
497,1,2,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6,5,1 2
498,1,0,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6 2,5,1
499,2,0,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6 2 1,5,
500,1,2,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6 2 1,5,
501,0,1,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6 2,5 1,
502,0,2,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6,5 1,2
503,1,2,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6,5,2 1
504,2,0,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6 7,5,2
505,2,1,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6 7,5 1,
506,0,1,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6 7,5 1 2,
507,0,2,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6 7,5 1 2,
508,1,2,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6 7,5 1,2
509,1,0,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6 7 1,5,2
510,2,0,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6 7 1 2,5,
511,2,1,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6 7 1 2,5,
512,0,1,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6 7 1,5 2,
513,2,0,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6 7 1 2,5,
514,2,1,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6 7 1 2,5,
515,0,1,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6 7 1,5 2,
516,0,2,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6 7,5 2,1
517,1,2,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6 7,5,1 2
518,1,0,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6 7 2,5,1
519,2,0,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6 7 2 1,5,
520,1,2,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6 7 2 1,5,
521,0,1,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6 7 2,5 1,
522,0,2,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6 7,5 1,2
523,1,2,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6 7,5,2 1
524,2,0,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6 7 8,5,2
525,2,1,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6 7 8,5 1,
526,0,1,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6 7 8,5 1 2,
527,0,2,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6 7 8,5 1 2,
528,1,2,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6 7 8,5 1,2
529,1,0,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6 7 8 1,5,2
530,2,0,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6 7 8 1 2,5,
531,2,1,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6 7 8 1 2,5,
532,0,1,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6 7 8 1,5 2,
533,2,0,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6 7 8 1 2,5,
534,2,1,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6 7 8 1 2,5,
535,0,1,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6 7 8 1,5 2,
536,0,2,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6 7 8,5 2,1
537,1,2,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6 7 8,5,1 2
538,1,0,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6 7 8 2,5,1
539,2,0,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6 7 8 2 1,5,
540,1,2,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6 7 8 2 1,5,
541,0,1,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6 7 8 2,5 1,
542,0,2,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6 7 8,5 1,2
543,1,2,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6 7 8,5,2 1
544,2,0,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6 7 8 9,5,2
545,2,1,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6 7 8 9,5 1,
546,0,1,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6 7 8 9,5 1 2,
547,0,2,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6 7 8 9,5 1 2,
548,1,2,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6 7 8 9,5 1,2
549,1,0,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6 7 8 9 1,5,2
550,2,0,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6 7 8 9 1 2,5,
551,2,1,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6 7 8 9 1 2,5,
552,0,1,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6 7 8 9 1,5 2,
553,2,0,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6 7 8 9 1 2,5,
554,2,1,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6 7 8 9 1 2,5,
555,0,1,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6 7 8 9 1,5 2,
556,0,2,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6 7 8 9,5 2,1
557,1,2,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6 7 8 9,5,1 2
558,1,0,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6 7 8 9 2,5,1
559,2,0,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6 7 8 9 2 1,5,
560,1,2,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6 7 8 9 2 1,5,
561,0,1,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6 7 8 9 2,5 1,
562,0,2,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6 7 8 9,5 1,2
563,1,2,10 9 8 7 3 4 5 6 3 4 1 5 3 4 5 6 7 8 9,5,2 1
564,2,0,10,5,9 8 7 6 5 4 3 2 1
565,2,1,10,5 1,9 8 7 6 5 4 3 2
566,0,1,10,5 1 2,9 8 7 6 5 4 3
567,0,2,10,5 1 2,9 8 7 6 5 4 3
568,1,2,10,5 1,9 8 7 6 5 4 3 2
569,1,0,10 1,5,9 8 7 6 5 4 3 2
570,2,0,10 1 2,5,9 8 7 6 5 4 3
571,2,1,10 1 2,5 3,9 8 7 6 5 4
572,0,1,10 1,5 3 2,9 8 7 6 5 4
573,2,0,10 1 2,5 3,9 8 7 6 5 4
574,2,1,10 1 2,5 3,9 8 7 6 5 4
575,0,1,10 1,5 3 2,9 8 7 6 5 4
576,0,2,10,5 3 2,9 8 7 6 5 4 1
577,1,2,10,5 3,9 8 7 6 5 4 1 2
578,1,0,10 2,5 3,9 8 7 6 5 4 1
579,2,0,10 2 1,5 3,9 8 7 6 5 4
580,1,2,10 2 1,5,9 8 7 6 5 4 3
581,0,1,10 2,5 1,9 8 7 6 5 4 3
582,0,2,10,5 1,9 8 7 6 5 4 3 2
583,1,2,10,5,9 8 7 6 5 4 3 2 1
584,2,0,10 3,5,9 8 7 6 5 4 2 1
585,2,1,10 3,5 1,9 8 7 6 5 4 2
586,0,1,10 3,5 1 2,9 8 7 6 5 4
587,0,2,10 3,5 1 2,9 8 7 6 5 4
588,1,2,10 3,5 1,9 8 7 6 5 4 2
589,1,0,10 3 1,5,9 8 7 6 5 4 2
590,2,0,10 3 1 2,5,9 8 7 6 5 4
591,2,1,10 3 1 2,5 4,9 8 7 6 5
592,0,1,10 3 1,5 4 2,9 8 7 6 5
593,2,0,10 3 1 2,5 4,9 8 7 6 5
594,2,1,10 3 1 2,5 4,9 8 7 6 5
595,0,1,10 3 1,5 4 2,9 8 7 6 5
596,0,2,10 3,5 4 2,9 8 7 6 5 1
597,1,2,10 3,5 4,9 8 7 6 5 1 2
598,1,0,10 3 2,5 4,9 8 7 6 5 1
599,2,0,10 3 2 1,5 4,9 8 7 6 5
600,1,2,10 3 2 1,5,9 8 7 6 5 4
601,0,1,10 3 2,5 1,9 8 7 6 5 4
602,0,2,10 3,5 1,9 8 7 6 5 4 2
603,1,2,10 3,5,9 8 7 6 5 4 2 1
604,2,0,10 3 4,5,9 8 7 6 5 2 1
605,2,1,10 3 4,5 1,9 8 7 6 5 2
606,0,1,10 3 4,5 1 2,9 8 7 6 5
607,0,2,10 3 4,5 1 2,9 8 7 6 5
608,1,2,10 3 4,5 1,9 8 7 6 5 2
609,1,0,10 3 4 1,5,9 8 7 6 5 2
610,2,0,10 3 4 1 2,5,9 8 7 6 5
611,2,1,10 3 4 1 2,5 5,9 8 7 6
612,0,1,10 3 4 1,5 5 2,9 8 7 6
613,2,0,10 3 4 1 2,5 5,9 8 7 6
614,2,1,10 3 4 1 2,5 5,9 8 7 6
615,0,1,10 3 4 1,5 5 2,9 8 7 6
616,0,2,10 3 4,5 5 2,9 8 7 6 1
617,1,2,10 3 4,5 5,9 8 7 6 1 2
618,1,0,10 3 4 2,5 5,9 8 7 6 1
619,2,0,10 3 4 2 1,5 5,9 8 7 6
620,1,2,10 3 4 2 1,5,9 8 7 6 5
621,0,1,10 3 4 2,5 1,9 8 7 6 5
622,0,2,10 3 4,5 1,9 8 7 6 5 2
623,1,2,10 3 4,5,9 8 7 6 5 2 1
624,2,0,10 3 4 5,5,9 8 7 6 2 1
625,2,1,10 3 4 5,5 1,9 8 7 6 2
626,0,1,10 3 4 5,5 1 2,9 8 7 6
627,0,2,10 3 4 5,5 1 2,9 8 7 6
628,1,2,10 3 4 5,5 1,9 8 7 6 2
629,1,0,10 3 4 5 1,5,9 8 7 6 2
630,2,0,10 3 4 5 1 2,5,9 8 7 6
631,2,1,10 3 4 5 1 2,5 6,9 8 7
632,0,1,10 3 4 5 1,5 6 2,9 8 7
633,2,0,10 3 4 5 1 2,5 6,9 8 7
634,2,1,10 3 4 5 1 2,5 6,9 8 7
635,0,1,10 3 4 5 1,5 6 2,9 8 7
636,0,2,10 3 4 5,5 6 2,9 8 7 1
637,1,2,10 3 4 5,5 6,9 8 7 1 2
638,1,0,10 3 4 5 2,5 6,9 8 7 1
639,2,0,10 3 4 5 2 1,5 6,9 8 7
640,1,2,10 3 4 5 2 1,5,9 8 7 6
641,0,1,10 3 4 5 2,5 1,9 8 7 6
642,0,2,10 3 4 5,5 1,9 8 7 6 2
643,1,2,10 3 4 5,5,9 8 7 6 2 1
644,2,0,10 3 4 5 6,5,9 8 7 2 1
645,2,1,10 3 4 5 6,5 1,9 8 7 2
646,0,1,10 3 4 5 6,5 1 2,9 8 7
647,0,2,10 3 4 5 6,5 1 2,9 8 7
648,1,2,10 3 4 5 6,5 1,9 8 7 2
649,1,0,10 3 4 5 6 1,5,9 8 7 2
650,2,0,10 3 4 5 6 1 2,5,9 8 7
651,2,1,10 3 4 5 6 1 2,5 7,9 8
652,0,1,10 3 4 5 6 1,5 7 2,9 8
653,2,0,10 3 4 5 6 1 2,5 7,9 8
654,2,1,10 3 4 5 6 1 2,5 7,9 8
655,0,1,10 3 4 5 6 1,5 7 2,9 8
656,0,2,10 3 4 5 6,5 7 2,9 8 1
657,1,2,10 3 4 5 6,5 7,9 8 1 2
658,1,0,10 3 4 5 6 2,5 7,9 8 1
659,2,0,10 3 4 5 6 2 1,5 7,9 8
660,1,2,10 3 4 5 6 2 1,5,9 8 7
661,0,1,10 3 4 5 6 2,5 1,9 8 7
662,0,2,10 3 4 5 6,5 1,9 8 7 2
663,1,2,10 3 4 5 6,5,9 8 7 2 1
664,2,0,10 3 4 5 6 7,5,9 8 2 1
665,2,1,10 3 4 5 6 7,5 1,9 8 2
666,0,1,10 3 4 5 6 7,5 1 2,9 8
667,0,2,10 3 4 5 6 7,5 1 2,9 8
668,1,2,10 3 4 5 6 7,5 1,9 8 2
669,1,0,10 3 4 5 6 7 1,5,9 8 2
670,2,0,10 3 4 5 6 7 1 2,5,9 8
671,2,1,10 3 4 5 6 7 1 2,5 8,9
672,0,1,10 3 4 5 6 7 1,5 8 2,9
673,2,0,10 3 4 5 6 7 1 2,5 8,9
674,2,1,10 3 4 5 6 7 1 2,5 8,9
675,0,1,10 3 4 5 6 7 1,5 8 2,9
676,0,2,10 3 4 5 6 7,5 8 2,9 1
677,1,2,10 3 4 5 6 7,5 8,9 1 2
678,1,0,10 3 4 5 6 7 2,5 8,9 1
679,2,0,10 3 4 5 6 7 2 1,5 8,9
680,1,2,10 3 4 5 6 7 2 1,5,9 8
681,0,1,10 3 4 5 6 7 2,5 1,9 8
682,0,2,10 3 4 5 6 7,5 1,9 8 2
683,1,2,10 3 4 5 6 7,5,9 8 2 1
684,2,0,10 3 4 5 6 7 8,5,9 2 1
685,2,1,10 3 4 5 6 7 8,5 1,9 2
686,0,1,10 3 4 5 6 7 8,5 1 2,9
687,0,2,10 3 4 5 6 7 8,5 1 2,9
688,1,2,10 3 4 5 6 7 8,5 1,9 2
689,1,0,10 3 4 5 6 7 8 1,5,9 2
690,2,0,10 3 4 5 6 7 8 1 2,5,9
691,2,1,10 3 4 5 6 7 8 1 2,5 9,
692,0,1,10 3 4 5 6 7 8 1,5 9 2,
693,2,0,10 3 4 5 6 7 8 1 2,5 9,
694,2,1,10 3 4 5 6 7 8 1 2,5 9,
695,0,1,10 3 4 5 6 7 8 1,5 9 2,
696,0,2,10 3 4 5 6 7 8,5 9 2,1
697,1,2,10 3 4 5 6 7 8,5 9,1 2
698,1,0,10 3 4 5 6 7 8 2,5 9,1
699,2,0,10 3 4 5 6 7 8 2 1,5 9,
700,1,2,10 3 4 5 6 7 8 2 1,5,9
701,0,1,10 3 4 5 6 7 8 2,5 1,9
702,0,2,10 3 4 5 6 7 8,5 1,9 2
703,1,2,10 3 4 5 6 7 8,5,9 2 1
704,2,0,10 3 4 5 6 7 8 9,5,2 1
705,2,1,10 3 4 5 6 7 8 9,5 1,2
706,0,1,10 3 4 5 6 7 8 9,5 1 2,
707,0,2,10 3 4 5 6 7 8 9,5 1 2,
708,1,2,10 3 4 5 6 7 8 9,5 1,2
709,1,0,10 3 4 5 6 7 8 9 1,5,2
710,2,0,10 3 4 5 6 7 8 9 1 2,5,
711,2,1,10 3 4 5 6 7 8 9 1 2,5,
712,0,1,10 3 4 5 6 7 8 9 1,5 2,
713,2,0,10 3 4 5 6 7 8 9 1 2,5,
714,2,1,10 3 4 5 6 7 8 9 1 2,5,
715,0,1,10 3 4 5 6 7 8 9 1,5 2,
716,0,2,10 3 4 5 6 7 8 9,5 2,1
717,1,2,10 3 4 5 6 7 8 9,5,1 2
718,1,0,10 3 4 5 6 7 8 9 2,5,1
719,2,0,10 3 4 5 6 7 8 9 2 1,5,
720,1,2,10 3 4 5 6 7 8 9 2 1,5,
721,0,1,10 3 4 5 6 7 8 9 2,5 1,
722,0,2,10 3 4 5 6 7 8 9,5 1,2
723,1,2,10 3 4 5 6 7 8 9,5,2 1
724,2,0,10 3 4 5 6 7 8 9 10,5,2
725,2,1,10 3 4 5 6 7 8 9 10,5 1,
726,0,1,10 3 4 5 6 7 8 9 10,5 1 2,
727,0,2,10 3 4 5 6 7 8 9 10,5 1 2,
728,1,2,10 3 4 5 6 7 8 9 10,5 1,2
729,1,0,10 3 4 5 6 7 8 9 10 1,5,2
730,2,0,10 3 4 5 6 7 8 9 10 1 2,5,
731,2,1,10 3 4 5 6 7 8 9 10 1 2,5,
732,0,1,10 3 4 5 6 7 8 9 10 1,5 2,
733,2,0,10 3 4 5 6 7 8 9 10 1 2,5,
734,2,1,10 3 4 5 6 7 8 9 10 1 2,5,
735,0,1,10 3 4 5 6 7 8 9 10 1,5 2,
736,0,2,10 3 4 5 6 7 8 9 10,5 2,1
737,1,2,10 3 4 5 6 7 8 9 10,5,1 2
738,1,0,10 3 4 5 6 7 8 9 10 2,5,1
739,2,0,10 3 4 5 6 7 8 9 10 2 1,5,
740,1,2,10 3 4 5 6 7 8 9 10 2 1,5,
741,0,1,10 3 4 5 6 7 8 9 10 2,5 1,
742,0,2,10 3 4 5 6 7 8 9 10,5 1,2
743,1,2,10 3 4 5 6 7 8 9 10,5,2 1
744,2,0,10 3 4 5 6 7 8 9 10 3,5,2
745,2,1,10 3 4 5 6 7 8 9 10 3,5 1,
746,0,1,10 3 4 5 6 7 8 9 10 3,5 1 2,
747,0,2,10 3 4 5 6 7 8 9 10 3,5 1 2,
748,1,2,10 3 4 5 6 7 8 9 10 3,5 1,2
749,1,0,10 3 4 5 6 7 8 9 10 3 1,5,2
750,2,0,10 3 4 5 6 7 8 9 10 3 1 2,5,
751,2,1,10 3 4 5 6 7 8 9 10 3 1 2,5,
752,0,1,10 3 4 5 6 7 8 9 10 3 1,5 2,
753,2,0,10 3 4 5 6 7 8 9 10 3 1 2,5,
754,2,1,10 3 4 5 6 7 8 9 10 3 1 2,5,
755,0,1,10 3 4 5 6 7 8 9 10 3 1,5 2,
756,0,2,10 3 4 5 6 7 8 9 10 3,5 2,1
757,1,2,10 3 4 5 6 7 8 9 10 3,5,1 2
758,1,0,10 3 4 5 6 7 8 9 10 3 2,5,1
759,2,0,10 3 4 5 6 7 8 9 10 3 2 1,5,
760,1,2,10 3 4 5 6 7 8 9 10 3 2 1,5,
761,0,1,10 3 4 5 6 7 8 9 10 3 2,5 1,
762,0,2,10 3 4 5 6 7 8 9 10 3,5 1,2
763,1,2,10 3 4 5 6 7 8 9 10 3,5,2 1
764,2,0,10 3 4 5 6 7 8 9 10 3 4,5,2
765,2,1,10 3 4 5 6 7 8 9 10 3 4,5 1,
766,0,1,10 3 4 5 6 7 8 9 10 3 4,5 1 2,
767,0,2,10 3 4 5 6 7 8 9 10 3 4,5 1 2,
768,1,2,10 3 4 5 6 7 8 9 10 3 4,5 1,2
769,1,0,10 3 4 5 6 7 8 9 10 3 4 1,5,2
770,2,0,10 3 4 5 6 7 8 9 10 3 4 1 2,5,
771,2,1,10 3 4 5 6 7 8 9 10 3 4 1 2,5,
772,0,1,10 3 4 5 6 7 8 9 10 3 4 1,5 2,
773,2,0,10 3 4 5 6 7 8 9 10 3 4 1 2,5,
774,2,1,10 3 4 5 6 7 8 9 10 3 4 1 2,5,
775,0,1,10 3 4 5 6 7 8 9 10 3 4 1,5 2,
776,0,2,10 3 4 5 6 7 8 9 10 3 4,5 2,1
777,1,2,10 3 4 5 6 7 8 9 10 3 4,5,1 2
778,1,0,10 3 4 5 6 7 8 9 10 3 4 2,5,1
779,2,0,10 3 4 5 6 7 8 9 10 3 4 2 1,5,
780,1,2,10 3 4 5 6 7 8 9 10 3 4 2 1,5,
781,0,1,10 3 4 5 6 7 8 9 10 3 4 2,5 1,
782,0,2,10 3 4 5 6 7 8 9 10 3 4,5 1,2
783,1,2,10 3 4 5 6 7 8 9 10 3 4,5,2 1
784,2,0,10 3 4 5 6 7 8 9 10 3 4 5,5,2
785,2,1,10 3 4 5 6 7 8 9 10 3 4 5,5 1,
786,0,1,10 3 4 5 6 7 8 9 10 3 4 5,5 1 2,
787,0,2,10 3 4 5 6 7 8 9 10 3 4 5,5 1 2,
788,1,2,10 3 4 5 6 7 8 9 10 3 4 5,5 1,2
789,1,0,10 3 4 5 6 7 8 9 10 3 4 5 1,5,2
790,2,0,10 3 4 5 6 7 8 9 10 3 4 5 1 2,5,
791,2,1,10 3 4 5 6 7 8 9 10 3 4 5 1 2,5,
792,0,1,10 3 4 5 6 7 8 9 10 3 4 5 1,5 2,
793,2,0,10 3 4 5 6 7 8 9 10 3 4 5 1 2,5,
794,2,1,10 3 4 5 6 7 8 9 10 3 4 5 1 2,5,
795,0,1,10 3 4 5 6 7 8 9 10 3 4 5 1,5 2,
796,0,2,10 3 4 5 6 7 8 9 10 3 4 5,5 2,1
797,1,2,10 3 4 5 6 7 8 9 10 3 4 5,5,1 2
798,1,0,10 3 4 5 6 7 8 9 10 3 4 5 2,5,1
799,2,0,10 3 4 5 6 7 8 9 10 3 4 5 2 1,5,
800,1,2,10 3 4 5 6 7 8 9 10 3 4 5 2 1,5,
801,0,1,10 3 4 5 6 7 8 9 10 3 4 5 2,5 1,
802,0,2,10 3 4 5 6 7 8 9 10 3 4 5,5 1,2
803,1,2,10 3 4 5 6 7 8 9 10 3 4 5,5,2 1
804,2,0,10 3 4 5 6 7 8 9 10 3 4 5 6,5,2
805,2,1,10 3 4 5 6 7 8 9 10 3 4 5 6,5 1,
806,0,1,10 3 4 5 6 7 8 9 10 3 4 5 6,5 1 2,
807,0,2,10 3 4 5 6 7 8 9 10 3 4 5 6,5 1 2,
808,1,2,10 3 4 5 6 7 8 9 10 3 4 5 6,5 1,2
809,1,0,10 3 4 5 6 7 8 9 10 3 4 5 6 1,5,2
810,2,0,10 3 4 5 6 7 8 9 10 3 4 5 6 1 2,5,
811,2,1,10 3 4 5 6 7 8 9 10 3 4 5 6 1 2,5,
812,0,1,10 3 4 5 6 7 8 9 10 3 4 5 6 1,5 2,
813,2,0,10 3 4 5 6 7 8 9 10 3 4 5 6 1 2,5,
814,2,1,10 3 4 5 6 7 8 9 10 3 4 5 6 1 2,5,
815,0,1,10 3 4 5 6 7 8 9 10 3 4 5 6 1,5 2,
816,0,2,10 3 4 5 6 7 8 9 10 3 4 5 6,5 2,1
817,1,2,10 3 4 5 6 7 8 9 10 3 4 5 6,5,1 2
818,1,0,10 3 4 5 6 7 8 9 10 3 4 5 6 2,5,1
819,2,0,10 3 4 5 6 7 8 9 10 3 4 5 6 2 1,5,
820,1,2,10 3 4 5 6 7 8 9 10 3 4 5 6 2 1,5,
821,0,1,10 3 4 5 6 7 8 9 10 3 4 5 6 2,5 1,
822,0,2,10 3 4 5 6 7 8 9 10 3 4 5 6,5 1,2
823,1,2,10 3 4 5 6 7 8 9 10 3 4 5 6,5,2 1
824,2,0,10 3 4 5 6 7 8 9 10 3 4 5 6 7,5,2
825,2,1,10 3 4 5 6 7 8 9 10 3 4 5 6 7,5 1,
826,0,1,10 3 4 5 6 7 8 9 10 3 4 5 6 7,5 1 2,
827,0,2,10 3 4 5 6 7 8 9 10 3 4 5 6 7,5 1 2,
828,1,2,10 3 4 5 6 7 8 9 10 3 4 5 6 7,5 1,2
829,1,0,10 3 4 5 6 7 8 9 10 3 4 5 6 7 1,5,2
830,2,0,10 3 4 5 6 7 8 9 10 3 4 5 6 7 1 2,5,
831,2,1,10 3 4 5 6 7 8 9 10 3 4 5 6 7 1 2,5,
832,0,1,10 3 4 5 6 7 8 9 10 3 4 5 6 7 1,5 2,
833,2,0,10 3 4 5 6 7 8 9 10 3 4 5 6 7 1 2,5,
834,2,1,10 3 4 5 6 7 8 9 10 3 4 5 6 7 1 2,5,
835,0,1,10 3 4 5 6 7 8 9 10 3 4 5 6 7 1,5 2,
836,0,2,10 3 4 5 6 7 8 9 10 3 4 5 6 7,5 2,1
837,1,2,10 3 4 5 6 7 8 9 10 3 4 5 6 7,5,1 2
838,1,0,10 3 4 5 6 7 8 9 10 3 4 5 6 7 2,5,1
839,2,0,10 3 4 5 6 7 8 9 10 3 4 5 6 7 2 1,5,
840,1,2,10 3 4 5 6 7 8 9 10 3 4 5 6 7 2 1,5,
841,0,1,10 3 4 5 6 7 8 9 10 3 4 5 6 7 2,5 1,
842,0,2,10 3 4 5 6 7 8 9 10 3 4 5 6 7,5 1,2
843,1,2,10 3 4 5 6 7 8 9 10 3 4 5 6 7,5,2 1
844,2,0,10 3 4 5 6 7 8 9 10 3 4 5 6 7 8,5,2
845,2,1,10 3 4 5 6 7 8 9 10 3 4 5 6 7 8,5 1,
846,0,1,10 3 4 5 6 7 8 9 10 3 4 5 6 7 8,5 1 2,
847,0,2,10 3 4 5 6 7 8 9 10 3 4 5 6 7 8,5 1 2,
848,1,2,10 3 4 5 6 7 8 9 10 3 4 5 6 7 8,5 1,2
849,1,0,10 3 4 5 6 7 8 9 10 3 4 5 6 7 8 1,5,2
850,2,0,10 3 4 5 6 7 8 9 10 3 4 5 6 7 8 1 2,5,
851,2,1,10 3 4 5 6 7 8 9 10 3 4 5 6 7 8 1 2,5,
852,0,1,10 3 4 5 6 7 8 9 10 3 4 5 6 7 8 1,5 2,
853,2,0,10 3 4 5 6 7 8 9 10 3 4 5 6 7 8 1 2,5,
854,2,1,10 3 4 5 6 7 8 9 10 3 4 5 6 7 8 1 2,5,
855,0,1,10 3 4 5 6 7 8 9 10 3 4 5 6 7 8 1,5 2,
856,0,2,10 3 4 5 6 7 8 9 10 3 4 5 6 7 8,5 2,1
857,1,2,10 3 4 5 6 7 8 9 10 3 4 5 6 7 8,5,1 2
858,1,0,10 3 4 5 6 7 8 9 10 3 4 5 6 7 8 2,5,1
859,2,0,10 3 4 5 6 7 8 9 10 3 4 5 6 7 8 2 1,5,
860,1,2,10 3 4 5 6 7 8 9 10 3 4 5 6 7 8 2 1,5,
861,0,1,10 3 4 5 6 7 8 9 10 3 4 5 6 7 8 2,5 1,
862,0,2,10 3 4 5 6 7 8 9 10 3 4 5 6 7 8,5 1,2
863,1,2,10 3 4 5 6 7 8 9 10 3 4 5 6 7 8,5,2 1
864,2,0,10 3 4 5 6 7 8 9 10 3 4 5 6 7 8 9,5,2
865,2,1,10 3 4 5 6 7 8 9 10 3 4 5 6 7 8 9,5 1,
866,0,1,10 3 4 5 6 7 8 9 10 3 4 5 6 7 8 9,5 1 2,
867,0,2,10 3 4 5 6 7 8 9 10 3 4 5 6 7 8 9,5 1 2,
868,1,2,10 3 4 5 6 7 8 9 10 3 4 5 6 7 8 9,5 1,2
869,1,0,10 3 4 5 6 7 8 9 10 3 4 5 6 7 8 9 1,5,2
870,2,0,10 3 4 5 6 7 8 9 10 3 4 5 6 7 8 9 1 2,5,
871,2,1,10 3 4 5 6 7 8 9 10 3 4 5 6 7 8 9 1 2,5,
872,0,1,10 3 4 5 6 7 8 9 10 3 4 5 6 7 8 9 1,5 2,
873,2,0,10 3 4 5 6 7 8 9 10 3 4 5 6 7 8 9 1 2,5,
874,2,1,10 3 4 5 6 7 8 9 10 3 4 5 6 7 8 9 1 2,5,
875,0,1,10 3 4 5 6 7 8 9 10 3 4 5 6 7 8 9 1,5 2,
876,0,2,10 3 4 5 6 7 8 9 10 3 4 5 6 7 8 9,5 2,1
877,1,2,10 3 4 5 6 7 8 9 10 3 4 5 6 7 8 9,5,1 2
878,1,0,10 3 4 5 6 7 8 9 10 3 4 5 6 7 8 9 2,5,1
879,2,0,10 3 4 5 6 7 8 9 10 3 4 5 6 7 8 9 2 1,5,
880,1,2,10 3 4 5 6 7 8 9 10 3 4 5 6 7 8 9 2 1,5,
881,0,1,10 3 4 5 6 7 8 9 10 3 4 5 6 7 8 9 2,5 1,
882,0,2,10 3 4 5 6 7 8 9 10 3 4 5 6 7 8 9,5 1,2
883,1,2,10 3 4 5 6 7 8 9 10 3 4 5 6 7 8 9,5,2 1
884,2,0,,5,10 9 8 7 6 5 4 3 2 1
885,2,1,,5 1,10 9 8 7 6 5 4 3 2
886,0,1,,5 1 2,10 9 8 7 6 5 4 3
887,0,2,,5 1 2,10 9 8 7 6 5 4 3
888,1,2,,5 1,10 9 8 7 6 5 4 3 2
889,1,0,1,5,10 9 8 7 6 5 4 3 2
890,2,0,1 2,5,10 9 8 7 6 5 4 3
891,2,1,1 2,5 3,10 9 8 7 6 5 4
892,0,1,1,5 3 2,10 9 8 7 6 5 4
893,2,0,1 2,5 3,10 9 8 7 6 5 4
894,2,1,1 2,5 3,10 9 8 7 6 5 4
895,0,1,1,5 3 2,10 9 8 7 6 5 4
896,0,2,,5 3 2,10 9 8 7 6 5 4 1
897,1,2,,5 3,10 9 8 7 6 5 4 1 2
898,1,0,2,5 3,10 9 8 7 6 5 4 1
899,2,0,2 1,5 3,10 9 8 7 6 5 4
900,1,2,2 1,5,10 9 8 7 6 5 4 3
901,0,1,2,5 1,10 9 8 7 6 5 4 3
902,0,2,,5 1,10 9 8 7 6 5 4 3 2
903,1,2,,5,10 9 8 7 6 5 4 3 2 1
904,2,0,3,5,10 9 8 7 6 5 4 2 1
905,2,1,3,5 1,10 9 8 7 6 5 4 2
906,0,1,3,5 1 2,10 9 8 7 6 5 4
907,0,2,3,5 1 2,10 9 8 7 6 5 4
908,1,2,3,5 1,10 9 8 7 6 5 4 2
909,1,0,3 1,5,10 9 8 7 6 5 4 2
910,2,0,3 1 2,5,10 9 8 7 6 5 4
911,2,1,3 1 2,5 4,10 9 8 7 6 5
912,0,1,3 1,5 4 2,10 9 8 7 6 5
913,2,0,3 1 2,5 4,10 9 8 7 6 5
914,2,1,3 1 2,5 4,10 9 8 7 6 5
915,0,1,3 1,5 4 2,10 9 8 7 6 5
916,0,2,3,5 4 2,10 9 8 7 6 5 1
917,1,2,3,5 4,10 9 8 7 6 5 1 2
918,1,0,3 2,5 4,10 9 8 7 6 5 1
919,2,0,3 2 1,5 4,10 9 8 7 6 5
920,1,2,3 2 1,5,10 9 8 7 6 5 4
921,0,1,3 2,5 1,10 9 8 7 6 5 4
922,0,2,3,5 1,10 9 8 7 6 5 4 2
923,1,2,3,5,10 9 8 7 6 5 4 2 1
924,2,0,3 4,5,10 9 8 7 6 5 2 1
925,2,1,3 4,5 1,10 9 8 7 6 5 2
926,0,1,3 4,5 1 2,10 9 8 7 6 5
927,0,2,3 4,5 1 2,10 9 8 7 6 5
928,1,2,3 4,5 1,10 9 8 7 6 5 2
929,1,0,3 4 1,5,10 9 8 7 6 5 2
930,2,0,3 4 1 2,5,10 9 8 7 6 5
931,2,1,3 4 1 2,5 5,10 9 8 7 6
932,0,1,3 4 1,5 5 2,10 9 8 7 6
933,2,0,3 4 1 2,5 5,10 9 8 7 6
934,2,1,3 4 1 2,5 5,10 9 8 7 6
935,0,1,3 4 1,5 5 2,10 9 8 7 6
936,0,2,3 4,5 5 2,10 9 8 7 6 1
937,1,2,3 4,5 5,10 9 8 7 6 1 2
938,1,0,3 4 2,5 5,10 9 8 7 6 1
939,2,0,3 4 2 1,5 5,10 9 8 7 6
940,1,2,3 4 2 1,5,10 9 8 7 6 5
941,0,1,3 4 2,5 1,10 9 8 7 6 5
942,0,2,3 4,5 1,10 9 8 7 6 5 2
943,1,2,3 4,5,10 9 8 7 6 5 2 1
944,2,0,3 4 5,5,10 9 8 7 6 2 1
945,2,1,3 4 5,5 1,10 9 8 7 6 2
946,0,1,3 4 5,5 1 2,10 9 8 7 6
947,0,2,3 4 5,5 1 2,10 9 8 7 6
948,1,2,3 4 5,5 1,10 9 8 7 6 2
949,1,0,3 4 5 1,5,10 9 8 7 6 2
950,2,0,3 4 5 1 2,5,10 9 8 7 6
951,2,1,3 4 5 1 2,5 6,10 9 8 7
952,0,1,3 4 5 1,5 6 2,10 9 8 7
953,2,0,3 4 5 1 2,5 6,10 9 8 7
954,2,1,3 4 5 1 2,5 6,10 9 8 7
955,0,1,3 4 5 1,5 6 2,10 9 8 7
956,0,2,3 4 5,5 6 2,10 9 8 7 1
957,1,2,3 4 5,5 6,10 9 8 7 1 2
958,1,0,3 4 5 2,5 6,10 9 8 7 1
959,2,0,3 4 5 2 1,5 6,10 9 8 7
960,1,2,3 4 5 2 1,5,10 9 8 7 6
961,0,1,3 4 5 2,5 1,10 9 8 7 6
962,0,2,3 4 5,5 1,10 9 8 7 6 2
963,1,2,3 4 5,5,10 9 8 7 6 2 1
964,2,0,3 4 5 6,5,10 9 8 7 2 1
965,2,1,3 4 5 6,5 1,10 9 8 7 2
966,0,1,3 4 5 6,5 1 2,10 9 8 7
967,0,2,3 4 5 6,5 1 2,10 9 8 7
968,1,2,3 4 5 6,5 1,10 9 8 7 2
969,1,0,3 4 5 6 1,5,10 9 8 7 2
970,2,0,3 4 5 6 1 2,5,10 9 8 7
971,2,1,3 4 5 6 1 2,5 7,10 9 8
972,0,1,3 4 5 6 1,5 7 2,10 9 8
973,2,0,3 4 5 6 1 2,5 7,10 9 8
974,2,1,3 4 5 6 1 2,5 7,10 9 8
975,0,1,3 4 5 6 1,5 7 2,10 9 8
976,0,2,3 4 5 6,5 7 2,10 9 8 1
977,1,2,3 4 5 6,5 7,10 9 8 1 2
978,1,0,3 4 5 6 2,5 7,10 9 8 1
979,2,0,3 4 5 6 2 1,5 7,10 9 8
980,1,2,3 4 5 6 2 1,5,10 9 8 7
981,0,1,3 4 5 6 2,5 1,10 9 8 7
982,0,2,3 4 5 6,5 1,10 9 8 7 2
983,1,2,3 4 5 6,5,10 9 8 7 2 1
984,2,0,3 4 5 6 7,5,10 9 8 2 1
985,2,1,3 4 5 6 7,5 1,10 9 8 2
986,0,1,3 4 5 6 7,5 1 2,10 9 8
987,0,2,3 4 5 6 7,5 1 2,10 9 8
988,1,2,3 4 5 6 7,5 1,10 9 8 2
989,1,0,3 4 5 6 7 1,5,10 9 8 2
990,2,0,3 4 5 6 7 1 2,5,10 9 8
991,2,1,3 4 5 6 7 1 2,5 8,10 9
992,0,1,3 4 5 6 7 1,5 8 2,10 9
993,2,0,3 4 5 6 7 1 2,5 8,10 9
994,2,1,3 4 5 6 7 1 2,5 8,10 9
995,0,1,3 4 5 6 7 1,5 8 2,10 9
996,0,2,3 4 5 6 7,5 8 2,10 9 1
997,1,2,3 4 5 6 7,5 8,10 9 1 2
998,1,0,3 4 5 6 7 2,5 8,10 9 1
999,2,0,3 4 5 6 7 2 1,5 8,10 9
1000,1,2,3 4 5 6 7 2 1,5,10 9 8
1001,0,1,3 4 5 6 7 2,5 1,10 9 8
1002,0,2,3 4 5 6 7,5 1,10 9 8 2
1003,1,2,3 4 5 6 7,5,10 9 8 2 1
1004,2,0,3 4 5 6 7 8,5,10 9 2 1
1005,2,1,3 4 5 6 7 8,5 1,10 9 2
1006,0,1,3 4 5 6 7 8,5 1 2,10 9
1007,0,2,3 4 5 6 7 8,5 1 2,10 9
1008,1,2,3 4 5 6 7 8,5 1,10 9 2
1009,1,0,3 4 5 6 7 8 1,5,10 9 2
1010,2,0,3 4 5 6 7 8 1 2,5,10 9
1011,2,1,3 4 5 6 7 8 1 2,5 9,10
1012,0,1,3 4 5 6 7 8 1,5 9 2,10
1013,2,0,3 4 5 6 7 8 1 2,5 9,10
1014,2,1,3 4 5 6 7 8 1 2,5 9,10
1015,0,1,3 4 5 6 7 8 1,5 9 2,10
1016,0,2,3 4 5 6 7 8,5 9 2,10 1
1017,1,2,3 4 5 6 7 8,5 9,10 1 2
1018,1,0,3 4 5 6 7 8 2,5 9,10 1
1019,2,0,3 4 5 6 7 8 2 1,5 9,10
1020,1,2,3 4 5 6 7 8 2 1,5,10 9
1021,0,1,3 4 5 6 7 8 2,5 1,10 9
1022,0,2,3 4 5 6 7 8,5 1,10 9 2
1023,1,2,3 4 5 6 7 8,5,10 9 2 1
```

