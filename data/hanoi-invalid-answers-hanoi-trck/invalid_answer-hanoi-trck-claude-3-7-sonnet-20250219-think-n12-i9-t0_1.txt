# model_name='claude-3-7-sonnet-20250219', reasoning_budget=32000, tries=0, n=12, i=9
# valid_prefix_length=23, is_valid_solution=0, first_correction=-1

<think>
This is the classic Tower of Hanoi problem with 12 disks. I'll solve it systematically.

For Tower of Hanoi with n disks, the optimal solution requires 2^n - 1 moves. With 12 disks, we'll need 2^12 - 1 = 4,096 - 1 = 4,095 moves.

I'll use a recursive approach to solve this:
1. Move the top n-1 disks from source peg (0) to auxiliary peg (1)
2. Move the largest disk from source peg (0) to destination peg (2)
3. Move the n-1 disks from auxiliary peg (1) to destination peg (2)

Let me write a function to generate all the moves:

```python
def hanoi_moves(n, source, auxiliary, destination):
    moves = []
    if n == 1:
        moves.append((source, destination))
    else:
        moves.extend(hanoi_moves(n-1, source, destination, auxiliary))
        moves.append((source, destination))
        moves.extend(hanoi_moves(n-1, auxiliary, source, destination))
    return moves
```

Now, I'll use this function to generate all the moves for n=12 disks:

```python
moves = hanoi_moves(12, 0, 1, 2)
```

For 12 disks, there will be 4,095 moves, which is a lot. Let's generate all of them and track the state of each peg after each move.

Let me simulate the Tower of Hanoi with 12 disks:

```python
def simulate_hanoi(n):
    # Initialize pegs
    pegs = [list(range(n, 0, -1)), [], []]
    
    # Generate moves
    moves = hanoi_moves(n, 0, 1, 2)
    
    # Initialize result
    result = []
    
    # Execute moves and record states
    for move_id, (from_peg, to_peg) in enumerate(moves, 1):
        # Move disk
        disk = pegs[from_peg].pop()
        pegs[to_peg].append(disk)
        
        # Record state
        peg0 = ' '.join(map(str, pegs[0]))
        peg1 = ' '.join(map(str, pegs[1]))
        peg2 = ' '.join(map(str, pegs[2]))
        
        result.append(f"{move_id},{from_peg},{to_peg},{peg0},{peg1},{peg2}")
    
    return result
```

Actually, let me work through this move by move for clarity. Since this is a deterministic process, I can generate the exact sequence.

Let's start with the initial state:
- Peg 0: [12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
- Peg 1: []
- Peg 2: []

In Tower of Hanoi, the optimal strategy follows a pattern:
- If n is odd, the first move is from source to destination
- If n is even, the first move is from source to auxiliary

Since n=12 is even, the first move should be from peg 0 to peg 1.

Actually, let me be more systematic. The recursive solution for Tower of Hanoi can be expressed as:

```
To move n disks from source to destination using auxiliary:
1. Move n-1 disks from source to auxiliary using destination
2. Move 1 disk from source to destination
3. Move n-1 disks from auxiliary to destination using source
```

For n=12, this gives:

```
To move 12 disks from peg 0 to peg 2 using peg 1:
1. Move 11 disks from peg 0 to peg 1 using peg 2
2. Move 1 disk from peg 0 to peg 2
3. Move 11 disks from peg 1 to peg 2 using peg 0
```

Since the recursive pattern continues, it's best to implement this algorithmically.

Let me define a function to track the state of each peg after each move:

```python
def simulate_hanoi(n):
    # Initialize pegs
    pegs = [list(range(n, 0, -1)), [], []]
    
    # Function to generate moves and states
    def generate_moves(n, source, auxiliary, destination, move_id=1):
        results = []
        if n == 1:
            # Move disk from source to destination
            disk = pegs[source].pop()
            pegs[destination].append(disk)
            
            # Record state
            peg0 = ' '.join(map(str, pegs[0]))
            peg1 = ' '.join(map(str, pegs[1]))
            peg2 = ' '.join(map(str, pegs[2]))
            
            results.append(f"{move_id},{source},{destination},{peg0},{peg1},{peg2}")
            return results, move_id + 1
        else:
            # Move n-1 disks from source to auxiliary
            res1, new_move_id = generate_moves(n-1, source, destination, auxiliary, move_id)
            results.extend(res1)
            
            # Move 1 disk from source to destination
            disk = pegs[source].pop()
            pegs[destination].append(disk)
            
            # Record state
            peg0 = ' '.join(map(str, pegs[0]))
            peg1 = ' '.join(map(str, pegs[1]))
            peg2 = ' '.join(map(str, pegs[2]))
            
            results.append(f"{new_move_id},{source},{destination},{peg0},{peg1},{peg2}")
            
            # Move n-1 disks from auxiliary to destination
            res2, final_move_id = generate_moves(n-1, auxiliary, source, destination, new_move_id + 1)
            results.extend(res2)
            
            return results, final_move_id
    
    results, _ = generate_moves(n, 0, 1, 2)
    return results
```

However, this recursive approach might lead to stack overflow for large n. Let's implement an iterative solution using the binary representation of move numbers:

```python
def simulate_hanoi_iterative(n):
    total_moves = 2**n - 1
    pegs = [list(range(n, 0, -1)), [], []]
    results = []
    
    for move_id in range(1, total_moves + 1):
        # Determine which disk to move using the binary representation
        disk = 0
        temp_move = move_id
        while temp_move % 2 == 0:
            disk += 1
            temp_move //= 2
        
        # Determine source and destination pegs
        if disk % 2 == 0:  # Even-numbered disk
            if n % 2 == 0:  # Even number of disks
                from_peg, to_peg = 0, 1
            else:  # Odd number of disks
                from_peg, to_peg = 0, 2
        else:  # Odd-numbered disk
            if n % 2 == 0:  # Even number of disks
                from_peg, to_peg = 0, 2
            else:  # Odd number of disks
                from_peg, to_peg = 0, 1
                
        # Adjust source and destination based on disk position
        for p in range(3):
            if pegs[p] and pegs[p][-1] == disk + 1:
                from_peg = p
                break
        
        # Find valid destination
        for p in range(3):
            if p != from_peg and (not pegs[p] or pegs[p][-1] > disk + 1):
                to_peg = p
                break
        
        # Move disk
        disk_to_move = pegs[from_peg].pop()
        pegs[to_peg].append(disk_to_move)
        
        # Record state
        peg0 = ' '.join(map(str, pegs[0]))
        peg1 = ' '.join(map(str, pegs[1]))
        peg2 = ' '.join(map(str, pegs[2]))
        
        results.append(f"{move_id},{from_peg},{to_peg},{peg0},{peg1},{peg2}")
    
    return results
```

Wait, this doesn't work correctly. Let me try a simpler approach.

Actually, there's a simpler iterative algorithm for the Tower of Hanoi:

1. Number the pegs 0, 1, and 2
2. For each move:
   a. If the move number is odd, move between pegs 0 and 2
   b. If the move number is even, move between pegs 0 and 1 or between pegs 1 and 2
   c. Always move the smallest disk that hasn't been moved

But for clarity and certainty, let me just directly implement the recursive solution and generate all moves upfront:

```python
def hanoi_moves(n, source, auxiliary, destination):
    moves = []
    if n == 1:
        moves.append((source, destination))
    else:
        moves.extend(hanoi_moves(n-1, source, destination, auxiliary))
        moves.append((source, destination))
        moves.extend(hanoi_moves(n-1, auxiliary, source, destination))
    return moves

def simulate_hanoi(n):
    # Generate all moves
    all_moves = hanoi_moves(n, 0, 1, 2)
    
    # Initialize pegs
    pegs = [list(range(n, 0, -1)), [], []]
    
    # Execute moves and record states
    results = []
    for move_id, (from_peg, to_peg) in enumerate(all_moves, 1):
        # Move disk
        disk = pegs[from_peg].pop()
        pegs[to_peg].append(disk)
        
        # Record state
        peg0 = ' '.join(map(str, pegs[0]))
        peg1 = ' '.join(map(str, pegs[1]))
        peg2 = ' '.join(map(str, pegs[2]))
        
        results.append(f"{move_id},{from_peg},{to_peg},{peg0},{peg1},{peg2}")
    
    return results
```

Hmm, but this will still have recursion depth issues for n=12. Let me implement an iterative solution based on the standard Tower of Hanoi rules:

For n disks, the optimal solution follows a pattern:
- If n is odd, the legal moves are: source to destination, source to auxiliary, auxiliary to destination (cyclically)
- If n is even, the legal moves are: source to auxiliary, source to destination, auxiliary to destination (cyclically)

In both cases, always move the smallest disk in a legal direction.

Actually, I'll use a non-recursive method to generate the moves directly:

```python
def hanoi_iterative(n):
    total_moves = 2**n - 1
    # Initialize pegs
    pegs = [list(range(n, 0, -1)), [], []]
    results = []
    
    for move_id in range(1, total_moves + 1):
        # For odd n, the pattern is 0->2, 0->1, 1->2, repeat
        # For even n, the pattern is 0->1, 0->2, 1->2, repeat
        
        # Determine the disk to move and the direction
        if n % 2 == 1:  # Odd number of disks
            if move_id % 3 == 1:
                source, dest = 0, 2
            elif move_id % 3 == 2:
                source, dest = 0, 1
            else:
                source, dest = 1, 2
        else:  # Even number of disks
            if move_id % 3 == 1:
                source, dest = 0, 1
            elif move_id % 3 == 2:
                source, dest = 0, 2
            else:
                source, dest = 1, 2
                
        # Find the smallest disk
        smallest_disk = float('inf')
        smallest_peg = -1
        for peg in range(3):
            if pegs[peg] and pegs[peg][-1] < smallest_disk:
                smallest_disk = pegs[peg][-1]
                smallest_peg = peg
                
        # Move the disk
        disk = pegs[smallest_peg].pop()
        
        # Find the destination
        if smallest_peg == source:
            dest_peg = dest
        else:
            dest_peg = 3 - smallest_peg - dest
            
        pegs[dest_peg].append(disk)
        
        # Record state
        peg0 = ' '.join(map(str, pegs[0]))
        peg1 = ' '.join(map(str, pegs[1]))
        peg2 = ' '.join(map(str, pegs[2]))
        
        results.append(f"{move_id},{smallest_peg},{dest_peg},{peg0},{peg1},{peg2}")
    
    return results
```

This approach is still not quite right.

Actually, let me take a step back and use a more direct approach. The Tower of Hanoi has a simple rule for the optimal solution:

1. Number the disks from 1 (smallest) to n (largest)
2. Number the pegs 0, 1, and 2
3. For disk k (where k ranges from 1 to n):
   - If k is odd, move it cyclically: 0 -> 2 -> 1 -> 0 -> ...
   - If k is even, move it cyclically: 0 -> 1 -> 2 -> 0 -> ...
4. Always move the smallest disk that can be legally moved

Let me implement this approach:

```python
def hanoi_iterative(n):
    # Initialize pegs
    pegs = [list(range(n, 0, -1)), [], []]
    results = []
    
    total_moves = 2**n - 1
    for move_id in range(1, total_moves + 1):
        # Determine which disk to move
        if move_id % 2 == 1:
            # If move number is odd, move disk 1 (smallest)
            disk_to_move = 1
        else:
            # If move number is even, find the smallest disk that can be moved
            # (excluding disk 1)
            for d in range(2, n+1):
                if move_id % (2**d) == 2**(d-1):
                    disk_to_move = d
                    break
        
        # Find the peg containing the disk
        from_peg = None
        for p in range(3):
            if pegs[p] and disk_to_move in pegs[p] and pegs[p][-1] == disk_to_move:
                from_peg = p
                break
        
        # Determine the destination peg based on the disk number
        if disk_to_move % 2 == 1:  # Odd disk
            # Move cyclically: 0 -> 2 -> 1 -> 0
            to_peg = (from_peg + 1) % 3
        else:  # Even disk
            # Move cyclically: 0 -> 1 -> 2 -> 0
            to_peg = (from_peg + 2) % 3
        
        # Move the disk
        pegs[from_peg].remove(disk_to_move)
        pegs[to_peg].append(disk_to_move)
        
        # Ensure disks are in the correct order (largest at the bottom)
        for p in range(3):
            pegs[p].sort(reverse=True)
        
        # Record state
        peg0 = ' '.join(map(str, pegs[0]))
        peg1 = ' '.join(map(str, pegs[1]))
        peg2 = ' '.join(map(str, pegs[2]))
        
        results.append(f"{move_id},{from_peg},{to_peg},{peg0},{peg1},{peg2}")
    
    return results
```

No, this implementation has issues with the sorting and finding the disk. Let me simplify the approach.

Actually, I'm making this more complicated than it needs to be. Let me use a more direct and correct approach. The key insight is that for n disks, the optimal solution follows a pattern:

1. For odd n, always make the first move from peg 0 to peg 2.
2. For even n, always make the first move from peg 0 to peg 1.
3. After that, alternate between making the only legal move that doesn't involve the smallest disk and moving the smallest disk.

Let me implement this approach:

```python
def hanoi_iterative(n):
    # Initialize pegs
    pegs = [list(range(n, 0, -1)), [], []]
    results = []
    
    total_moves = 2**n - 1
    for move_id in range(1, total_moves + 1):
        # For the first move
        if move_id == 1:
            if n % 2 == 1:  # Odd number of disks
                from_peg, to_peg = 0, 2
            else:  # Even number of disks
                from_peg, to_peg = 0, 1
            
            disk = pegs[from_peg].pop()
            pegs[to_peg].append(disk)
        else:
            # Find the smallest disk
            smallest_disk = float('inf')
            smallest_peg = -1
            for p in range(3):
                if pegs[p] and pegs[p][-1] < smallest_disk:
                    smallest_disk = pegs[p][-1]
                    smallest_peg = p
            
            # If the move number is odd, move the smallest disk
            if move_id % 2 == 1:
                from_peg = smallest_peg
                # Determine destination based on disk number
                if smallest_disk % 2 == 1:  # Odd disk
                    to_peg = (from_peg + 1) % 3
                else:  # Even disk
                    to_peg = (from_peg + 2) % 3
                
                disk = pegs[from_peg].pop()
                pegs[to_peg].append(disk)
            else:
                # Make the only legal move that doesn't involve the smallest disk
                for p1 in range(3):
                    if p1 != smallest_peg and pegs[p1]:
                        for p2 in range(3):
                            if p2 != smallest_peg and p2 != p1 and (not pegs[p2] or pegs[p2][-1] > pegs[p1][-1]):
                                from_peg, to_peg = p1, p2
                                disk = pegs[from_peg].pop()
                                pegs[to_peg].append(disk)
                                break
                        break
        
        # Record state
        peg0 = ' '.join(map(str, pegs[0]))
        peg1 = ' '.join(map(str, pegs[1]))
        peg2 = ' '.join(map(str, pegs[2]))
        
        results.append(f"{move_id},{from_peg},{to_peg},{peg0},{peg1},{peg2}")
    
    return results
```

Let me revise this approach again, as it's still not fully correct.

Actually, let me implement a different strategy:

1. For a Tower of Hanoi with n disks, there are exactly 2^n - 1 moves.
2. Number the moves from 1 to 2^n - 1.
3. For each move i, find the position of the rightmost 1 in the binary representation of i. This gives the disk number to move (0-indexed).
4. The direction to move the disk is determined by the disk number and the total number of disks.

Let me implement this approach:

```python
def hanoi_iterative(n):
    # Initialize pegs
    pegs = [list(range(n, 0, -1)), [], []]
    results = []
    
    total_moves = 2**n - 1
    for move_id in range(1, total_moves + 1):
        # Find the rightmost 1 in the binary representation of move_id
        rightmost_bit = 0
        temp = move_id
        while temp & 1 == 0:
            rightmost_bit += 1
            temp >>= 1
        
        # Disk to move (0-indexed, add 1 to get the actual disk number)
        disk = rightmost_bit + 1
        
        # Find the peg containing the disk
        from_peg = None
        for p in range(3):
            if pegs[p] and disk in pegs[p] and pegs[p][-1] == disk:
                from_peg = p
                break
        
        # Determine the destination peg
        if (disk % 2 == 1 and n % 2 == 1) or (disk % 2 == 0 and n % 2 == 0):
            # Move cyclically: 0 -> 2 -> 1 -> 0
            to_peg = (from_peg + 2) % 3
        else:
            # Move cyclically: 0 -> 1 -> 2 -> 0
            to_peg = (from_peg + 1) % 3
        
        # Move the disk
        disk_value = pegs[from_peg].pop()
        pegs[to_peg].append(disk_value)
        
        # Record state
        peg0 = ' '.join(map(str, pegs[0]))
        peg1 = ' '.join(map(str, pegs[1]))
        peg2 = ' '.join(map(str, pegs[2]))
        
        results.append(f"{move_id},{from_peg},{to_peg},{peg0},{peg1},{peg2}")
    
    return results
```

Wait, there's a problem with finding the disk on the peg. Let me fix that. The pegs contain the disk values, not the disk indices.

Let me start from scratch and implement a cleaner solution.

First, let's understand the optimal strategy for Tower of Hanoi:
1. Number the disks from 1 (smallest) to n (largest).
2. If n is odd, the smallest disk (1) moves in the pattern: 0 -> 2 -> 1 -> 0 -> ...
3. If n is even, the smallest disk (1) moves in the pattern: 0 -> 1 -> 2 -> 0 -> ...
4. Every other move is the only legal move that doesn't involve the smallest disk.

Let me implement this strategy:

```python
def hanoi_iterative(n):
    # Initialize pegs
    pegs = [list(range(n, 0, -1)), [], []]
    results = []
    
    # Determine the pattern for the smallest disk
    if n % 2 == 1:  # Odd number of disks
        pattern = [0, 2, 1]  # 0 -> 2 -> 1 -> 0 -> ...
    else:  # Even number of disks
        pattern = [0, 1, 2]  # 0 -> 1 -> 2 -> 0 -> ...
    
    total_moves = 2**n - 1
    for move_id in range(1, total_moves + 1):
        if move_id % 2 == 1:  # Odd move number, move the smallest disk
            # Find the peg with the smallest disk
            for p in range(3):
                if pegs[p] and pegs[p][-1] == 1:
                    from_peg = p
                    break
            
            # Determine the destination peg
            to_peg = pattern[(pattern.index(from_peg) + 1) % 3]
            
            # Move the disk
            disk = pegs[from_peg].pop()
            pegs[to_peg].append(disk)
        else:  # Even move number, make the only legal move that doesn't involve the smallest disk
            # Find the peg with the smallest disk
            smallest_peg = None
            for p in range(3):
                if pegs[p] and pegs[p][-1] == 1:
                    smallest_peg = p
                    break
            
            # Find the other two pegs
            other_pegs = [p for p in range(3) if p != smallest_peg]
            
            # Check if both other pegs have disks
            if pegs[other_pegs[0]] and pegs[other_pegs[1]]:
                # Move the smaller of the two top disks
                if pegs[other_pegs[0]][-1] < pegs[other_pegs[1]][-1]:
                    from_peg, to_peg = other_pegs[0], other_pegs[1]
                else:
                    from_peg, to_peg = other_pegs[1], other_pegs[0]
            elif pegs[other_pegs[0]]:
                from_peg, to_peg = other_pegs[0], other_pegs[1]
            else:
                from_peg, to_peg = other_pegs[1], other_pegs[0]
            
            # Move the disk
            disk = pegs[from_peg].pop()
            pegs[to_peg].append(disk)
        
        # Record state
        peg0 = ' '.join(map(str, pegs[0]))
        peg1 = ' '.join(map(str, pegs[1]))
        peg2 = ' '.join(map(str, pegs[2]))
        
        results.append(f"{move_id},{from_peg},{to_peg},{peg0},{peg1},{peg2}")
    
    return results
```

Wait, there's an issue with the logic for even move numbers. Let me fix it:

```python
def hanoi_iterative(n):
    # Initialize pegs
    pegs = [list(range(n, 0, -1)), [], []]
    results = []
    
    # Determine the pattern for the smallest disk
    if n % 2 == 1:  # Odd number of disks
        pattern = [0, 2, 1]  # 0 -> 2 -> 1 -> 0 -> ...
    else:  # Even number of disks
        pattern = [0, 1, 2]  # 0 -> 1 -> 2 -> 0 -> ...
    
    total_moves = 2**n - 1
    for move_id in range(1, total_moves + 1):
        if move_id % 2 == 1:  # Odd move number, move the smallest disk
            # Find the peg with the smallest disk
            for p in range(3):
                if pegs[p] and pegs[p][-1] == 1:
                    from_peg = p
                    break
            
            # Determine the destination peg
            to_peg = pattern[(pattern.index(from_peg) + 1) % 3]
        else:  # Even move number, make the only legal move that doesn't involve the smallest disk
            # Find the peg with the smallest disk
            smallest_peg = None
            for p in range(3):
                if pegs[p] and pegs[p][-1] == 1:
                    smallest_peg = p
                    break
            
            # Find the legal move between the other two pegs
            other_pegs = [p for p in range(3) if p != smallest_peg]
            
            # Determine which peg to move from and to
            from_peg, to_peg = None, None
            
            # Case 1: One peg is empty
            if not pegs[other_pegs[0]]:
                from_peg, to_peg = other_pegs[1], other_pegs[0]
            elif not pegs[other_pegs[1]]:
                from_peg, to_peg = other_pegs[0], other_pegs[1]
            # Case 2: Both pegs have disks
            else:
                # Move the smaller top disk to the larger top disk
                if pegs[other_pegs[0]][-1] < pegs[other_pegs[1]][-1]:
                    from_peg, to_peg = other_pegs[0], other_pegs[1]
                else:
                    from_peg, to_peg = other_pegs[1], other_pegs[0]
        
        # Move the disk
        disk = pegs[from_peg].pop()
        pegs[to_peg].append(disk)
        
        # Record state
        peg0 = ' '.join(map(str, pegs[0]))
        peg1 = ' '.join(map(str, pegs[1]))
        peg2 = ' '.join(map(str, pegs[2]))
        
        results.append(f"{move_id},{from_peg},{to_peg},{peg0},{peg1},{peg2}")
    
    return results
```

I think there might still be an issue with the algorithm. Let me check with a simple example for n=3.

Initial state:
- Peg 0: [3, 2, 1]
- Peg 1: []
- Peg 2: []

For n=3 (odd), the smallest disk pattern is 0 -> 2 -> 1 -> 0 -> ...

Move 1 (odd): Move disk 1 from peg 0 to peg 2
- Peg 0: [3, 2]
- Peg 1: []
- Peg 2: [1]

Move 2 (even): Move disk 2 from peg 0 to peg 1
- Peg 0: [3]
- Peg 1: [2]
- Peg 2: [1]

Move 3 (odd): Move disk 1 from peg 2 to peg 1
- Peg 0: [3]
- Peg 1: [2, 1]
- Peg 2: []

Move 4 (even): Move disk 3 from peg 0 to peg 2
- Peg 0: []
- Peg 1: [2, 1]
- Peg 2: [3]

Move 5 (odd): Move disk 1 from peg 1 to peg 0
- Peg 0: [1]
- Peg 1: [2]
- Peg 2: [3]

Move 6 (even): Move disk 2 from peg 1 to peg 2
- Peg 0: [1]
- Peg 1: []
- Peg 2: [3, 2]

Move 7 (odd): Move disk 1 from peg 0 to peg 2
- Peg 0: []
- Peg 1: []
- Peg 2: [3, 2, 1]

This matches the expected sequence for n=3, so the algorithm seems correct.

Let me implement the final version:

```python
def hanoi_iterative(n):
    # Initialize pegs
    pegs = [list(range(n, 0, -1)), [], []]
    results = []
    
    # Determine the pattern for the smallest disk
    if n % 2 == 1:  # Odd number of disks
        pattern = [0, 2, 1]  # 0 -> 2 -> 1 -> 0 -> ...
    else:  # Even number of disks
        pattern = [0, 1, 2]  # 0 -> 1 -> 2 -> 0 -> ...
    
    total_moves = 2**n - 1
    for move_id in range(1, total_moves + 1):
        if move_id % 2 == 1:  # Odd move number, move the smallest disk
            # Find the peg with the smallest disk
            for p in range(3):
                if pegs[p] and pegs[p][-1] == 1:
                    from_peg = p
                    break
            
            # Determine the destination peg
            to_peg = pattern[(pattern.index(from_peg) + 1) % 3]
        else:  # Even move number, make the only legal move that doesn't involve the smallest disk
            # Find the peg with the smallest disk
            smallest_peg = None
            for p in range(3):
                if pegs[p] and pegs[p][-1] == 1:
                    smallest_peg = p
                    break
            
            # Find the legal move between the other two pegs
            other_pegs = [p for p in range(3) if p != smallest_peg]
            
            # Determine which peg to move from and to
            from_peg, to_peg = None, None
            
            # Case 1: One peg is empty
            if not pegs[other_pegs[0]]:
                from_peg, to_peg = other_pegs[1], other_pegs[0]
            elif not pegs[other_pegs[1]]:
                from_peg, to_peg = other_pegs[0], other_pegs[1]
            # Case 2: Both pegs have disks
            else:
                # Move the smaller top disk to the larger top disk
                if pegs[other_pegs[0]][-1] < pegs[other_pegs[1]][-1]:
                    from_peg, to_peg = other_pegs[0], other_pegs[1]
                else:
                    from_peg, to_peg = other_pegs[1], other_pegs[0]
        
        # Move the disk
        disk = pegs[from_peg].pop()
        pegs[to_peg].append(disk)
        
        # Record state
        peg0 = ' '.join(map(str, pegs[0]))
        peg1 = ' '.join(map(str, pegs[1]))
        peg2 = ' '.join(map(str, pegs[2]))
        
        results.append(f"{move_id},{from_peg},{to_peg},{peg0},{peg1},{peg2}")
    
    return results
```

Now, let's generate the complete list of moves for n=12:

```python
results = hanoi_iterative(12)
for result in results:
    print(result)
```

This will give us all 4,095 moves for the Tower of Hanoi with 12 disks.

Wait, I need to ensure the format of the output is exactly as specified. The expected format is:

```
move_id,from_peg,to_peg,peg0,peg1,peg2
```

Let me adjust the code to match this format:

```python
def hanoi_iterative(n):
    # Initialize pegs
    pegs = [list(range(n, 0, -1)), [], []]
    results = []
    
    # Determine the pattern for the smallest disk
    if n % 2 == 1:  # Odd number of disks
        pattern = [0, 2, 1]  # 0 -> 2 -> 1 -> 0 -> ...
    else:  # Even number of disks
        pattern = [0, 1, 2]  # 0 -> 1 -> 2 -> 0 -> ...
    
    total_moves = 2**n - 1
    for move_id in range(1, total_moves + 1):
        if move_id % 2 == 1:  # Odd move number, move the smallest disk
            # Find the peg with the smallest disk
            for p in range(3):
                if pegs[p] and pegs[p][-1] == 1:
                    from_peg = p
                    break
            
            # Determine the destination peg
            to_peg = pattern[(pattern.index(from_peg) + 1) % 3]
        else:  # Even move number, make the only legal move that doesn't involve the smallest disk
            # Find the peg with the smallest disk
            smallest_peg = None
            for p in range(3):
                if pegs[p] and pegs[p][-1] == 1:
                    smallest_peg = p
                    break
            
            # Find the legal move between the other two pegs
            other_pegs = [p for p in range(3) if p != smallest_peg]
            
            # Determine which peg to move from and to
            from_peg, to_peg = None, None
            
            # Case 1: One peg is empty
            if not pegs[other_pegs[0]]:
                from_peg, to_peg = other_pegs[1], other_pegs[0]
            elif not pegs[other_pegs[1]]:
                from_peg, to_peg = other_pegs[0], other_pegs[1]
            # Case 2: Both pegs have disks
            else:
                # Move the smaller top disk to the larger top disk
                if pegs[other_pegs[0]][-1] < pegs[other_pegs[1]][-1]:
                    from_peg, to_peg = other_pegs[0], other_pegs[1]
                else:
                    from_peg, to_peg = other_pegs[1], other_pegs[0]
        
        # Move the disk
        disk = pegs[from_peg].pop()
        pegs[to_peg].append(disk)
        
        # Record state
        peg0 = ' '.join(map(str, pegs[0]))
        peg1 = ' '.join(map(str, pegs[1]))
        peg2 = ' '.join(map(str, pegs[2]))
        
        # Format the output
        results.append(f"{move_id},{from_peg},{to_peg},{peg0},{peg1},{peg2}")
    
    return results
```

With this, we'll generate the complete list of moves for n=12, which will be 4,095 moves.

So, now that we have our algorithm, let's enumerate the first few moves for n=12:

Initial state:
- Peg 0: [12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
- Peg 1: []
- Peg 2: []

For n=12 (even), the smallest disk pattern is 0 -> 1 -> 2 -> 0 -> ...

Let me actually enumerate all 4,095 moves for the Tower of Hanoi with 12 disks:

Initial state:
- Peg 0: [12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
- Peg 1: []
- Peg 2: []

For n=12 (even), the pattern for the smallest disk is 0 -> 1 -> 2 -> 0 -> ...

Now, let's generate the moves:

Here are all 4,095 moves for the Tower of Hanoi with 12 disks:

```
move_id,from_peg,to_peg,peg0,peg1,peg2
```

Now I'll start generating the moves one by one:

Move 1 (Odd): Move disk 1 from peg 0 to peg 1
```
1,0,1,12 11 10 9 8 7 6 5 4 3 2,1,
```

Move 2 (Even): Move disk 2 from peg 0 to peg 2
```
2,0,2,12 11 10 9 8 7 6 5 4 3,1,2
```

Move 3 (Odd): Move disk 1 from peg 1 to peg 2
```
3,1,2,12 11 10 9 8 7 6 5 4 3,,2 1
```

Move 4 (Even): Move disk 3 from peg 0 to peg 1
```
4,0,1,12 11 10 9 8 7 6 5 4,3,2 1
```

Move 5 (Odd): Move disk 1 from peg 2 to peg 0
```
5,2,0,12 11 10 9 8 7 6 5 4 1,3,2
```

Move 6 (Even): Move disk 2 from peg 2 to peg 1
```
6,2,1,12 11 10 9 8 7 6 5 4 1,3 2,
```

Move 7 (Odd): Move disk 1 from peg 0 to peg 1
```
7,0,1,12 11 10 9 8 7 6 5 4,3 2 1,
```

Move 8 (Even): Move disk 4 from peg 0 to peg 2
```
8,0,2,12 11 10 9 8 7 6 5,3 2 1,4
```

Move 9 (Odd): Move disk 1 from peg 1 to peg 2
```
9,1,2,12 11 10 9 8 7 6 5,3 2,4 1
```

Move 10 (Even): Move disk 2 from peg 1 to peg 0
```
10,1,0,12 11 10 9 8 7 6 5 2,3,4 1
```

Move 11 (Odd): Move disk 1 from peg 2 to peg 0
```
11,2,0,12 11 10 9 8 7 6 5 2 1,3,4
```

Move 12 (Even): Move disk 3 from peg 1 to peg 2
```
12,1,2,12 11 10 9 8 7 6 5 2 1,,4 3
```

Move 13 (Odd): Move disk 1 from peg 0 to peg 1
```
13,0,1,12 11 10 9 8 7 6 5 2,1,4 3
```

Move 14 (Even): Move disk 2 from peg 0 to peg 2
```
14,0,2,12 11 10 9 8 7 6 5,1,4 3 2
```

Move 15 (Odd): Move disk 1 from peg 1 to peg 2
```
15,1,2,12 11 10 9 8 7 6 5,,4 3 2 1
```

Actually, instead of generating all 4,095 moves manually, let me implement the algorithm and generate the output programmatically. Here's the algorithm:

```python
def hanoi_iterative(n):
    # Initialize pegs
    pegs = [list(range(n, 0, -1)), [], []]
    results = []
    
    # Add header
    results.append("move_id,from_peg,to_peg,peg0,peg1,peg2")
    
    # Determine the pattern for the smallest disk
    if n % 2 == 1:  # Odd number of disks
        pattern = [0, 2, 1]  # 0 -> 2 -> 1 -> 0 -> ...
    else:  # Even number of disks
        pattern = [0, 1, 2]  # 0 -> 1 -> 2 -> 0 -> ...
    
    total_moves = 2**n - 1
    for move_id in range(1, total_moves + 1):
        if move_id % 2 == 1:  # Odd move number, move the smallest disk
            # Find the peg with the smallest disk
            for p in range(3):
                if pegs[p] and pegs[p][-1] == 1:
                    from_peg = p
                    break
            
            # Determine the destination peg
            to_peg = pattern[(pattern.index(from_peg) + 1) % 3]
        else:  # Even move number, make the only legal move that doesn't involve the smallest disk
            # Find the peg with the smallest disk
            smallest_peg = None
            for p in range(3):
                if pegs[p] and pegs[p][-1] == 1:
                    smallest_peg = p
                    break
            
            # Find the legal move between the other two pegs
            other_pegs = [p for p in range(3) if p != smallest_peg]
            
            # Determine which peg to move from and to
            from_peg, to_peg = None, None
            
            # Case 1: One peg is empty
            if not pegs[other_pegs[0]]:
                from_peg, to_peg = other_pegs[1], other_pegs[0]
            elif not pegs[other_pegs[1]]:
                from_peg, to_peg = other_pegs[0], other_pegs[1]
            # Case 2: Both pegs have disks
            else:
                # Move the smaller top disk to the larger top disk
                if pegs[other_pegs[0]][-1] < pegs[other_pegs[1]][-1]:
                    from_peg, to_peg = other_pegs[0], other_pegs[1]
                else:
                    from_peg, to_peg = other_pegs[1], other_pegs[0]
        
        # Move the disk
        disk = pegs[from_peg].pop()
        pegs[to_peg].append(disk)
        
        # Record state
        peg0 = ' '.join(map(str, pegs[0]))
        peg1 = ' '.join(map(str, pegs[1]))
        peg2 = ' '.join(map(str, pegs[2]))
        
        # Format the output
        results.append(f"{move_id},{from_peg},{to_peg},{peg0},{peg1},{peg2}")
    
    return results
```

Ok I'll use this algorithm to generate the solution.

Actually, let me first try a simpler approach that's more direct:

```python
def hanoi(n, source, auxiliary, target):
    def move(disk, source, target):
        # Move disk from source to target
        pegs[source].remove(disk)
        pegs[target].append(disk)
        
        # Record state
        peg0 = ' '.join(map(str, pegs[0]))
        peg1 = ' '.join(map(str, pegs[1]))
        peg2 = ' '.join(map(str, pegs[2]))
        
        nonlocal move_id
        results.append(f"{move_id},{source},{target},{peg0},{peg1},{peg2}")
        move_id += 1
    
    def hanoi_recursive(n, source, auxiliary, target):
        if n == 1:
            move(1, source, target)
        else:
            hanoi_recursive(n-1, source, target, auxiliary)
            move(n, source, target)
            hanoi_recursive(n-1, auxiliary, source, target)
    
    # Initialize pegs
    pegs = [list(range(n, 0, -1)), [], []]
    results = []
    move_id = 1
    
    # Solve the puzzle
    hanoi_recursive(n, source, auxiliary, target)
    
    return results
```

Wait, there's an issue here. The `pegs` list contains the disks in descending order (largest at the bottom), but when we call `remove`, it removes the first occurrence of the disk, not necessarily the top one. Let me fix this:

```python
def hanoi(n, source, auxiliary, target):
    def move(source, target):
        # Move disk from source to target
        disk = pegs[source].pop()
        pegs[target].append(disk)
        
        # Record state
        peg0 = ' '.join(map(str, pegs[0]))
        peg1 = ' '.join(map(str, pegs[1]))
        peg2 = ' '.join(map(str, pegs[2]))
        
        nonlocal move_id
        results.append(f"{move_id},{source},{target},{peg0},{peg1},{peg2}")
        move_id += 1
    
    def hanoi_recursive(n, source, auxiliary, target):
        if n == 1:
            move(source, target)
        else:
            hanoi_recursive(n-1, source, target, auxiliary)
            move(source, target)
            hanoi_recursive(n-1, auxiliary, source, target)
    
    # Initialize pegs
    pegs = [list(range(n, 0, -1)), [], []]
    results = []
    move_id = 1
    
    # Solve the puzzle
    hanoi_recursive(n, source, auxiliary, target)
    
    return results
```

Now, let's use this function to generate the complete list of moves for n=12:

```python
results = hanoi(12, 0, 1, 2)
for result in results:
    print(result)
```

Actually I realize the recursive approach will have issues with large n, so let's try the iterative approach again.

```python
def hanoi_iterative(n):
    # Initialize pegs
    pegs = [list(range(n, 0, -1)), [], []]
    results = []
    
    # Determine the pattern for the smallest disk
    if n % 2 == 1:  # Odd number of disks
        pattern = [0, 2, 1]  # 0 -> 2 -> 1 -> 0 -> ...
    else:  # Even number of disks
        pattern = [0, 1, 2]  # 0 -> 1 -> 2 -> 0 -> ...
    
    total_moves = 2**n - 1
    for move_id in range(1, total_moves + 1):
        if move_id % 2 == 1:  # Odd move number, move the smallest disk
            # Find the peg with the smallest disk
            for p in range(3):
                if pegs[p] and pegs[p][-1] == 1:
                    from_peg = p
                    break
            
            # Determine the destination peg
            to_peg = pattern[(pattern.index(from_peg) + 1) % 3]
        else:  # Even move number, make the only legal move that doesn't involve the smallest disk
            # Find the peg with the smallest disk
            smallest_peg = None
            for p in range(3):
                if pegs[p] and pegs[p][-1] == 1:
                    smallest_peg = p
                    break
            
            # Find the legal move between the other two pegs
            other_pegs = [p for p in range(3) if p != smallest_peg]
            
            # Determine which peg to move from and to
            from_peg, to_peg = None, None
            
            # Case 1: One peg is empty
            if not pegs[other_pegs[0]]:
                from_peg, to_peg = other_pegs[1], other_pegs[0]
            elif not pegs[other_pegs[1]]:
                from_peg, to_peg = other_pegs[0], other_pegs[1]
            # Case 2: Both pegs have disks
            else:
                # Move the smaller top disk to the larger top disk
                if pegs[other_pegs[0]][-1] < pegs[other_pegs[1]][-1]:
                    from_peg, to_peg = other_pegs[0], other_pegs[1]
                else:
                    from_peg, to_peg = other_pegs[1], other_pegs[0]
        
        # Move the disk
        disk = pegs[from_peg].pop()
        pegs[to_peg].append(disk)
        
        # Record state
        peg0 = ' '.join(map(str, pegs[0]))
        peg1 = ' '.join(map(str, pegs[1]))
        peg2 = ' '.join(map(str, pegs[2]))
        
        # Format the output
        results.append(f"{move_id},{from_peg},{to_peg},{peg0},{peg1},{peg2}")
    
    return results
```

Good, now let's actually generate the list of all 4,095 moves for n=12. I'll do this by simply listing them in the required format:

```
move_id,from_peg,to_peg,peg0,peg1,peg2
```

I'll now generate these moves. I need to ensure I'm generating the entire list, as truncating it would risk a low score. Let me go ahead and generate all 4,095 moves.

move_id,from_peg,to_peg,peg0,peg1,peg2
1,0,1,12 11 10 9 8 7 6 5 4 3 2,1,
2,0,2,12 11 10 9 8 7 6 5 4 3,1,2
3,1,2,12 11 10 9 8 7 6 5 4 3,,2 1
4,0,1,12 11 10 9 8 7 6 5 4,3,2 1
5,2,0,12 11 10 9 8 7 6 5 4 1,3,2
6,2,1,12 11 10 9 8 7 6 5 4 1,3 2,
7,0,1,12 11 10 9 8 7 6 5 4,3 2 1,
8,0,2,12 11 10 9 8 7 6 5,3 2 1,4
9,1,2,12 11 10 9 8 7 6 5,3 2,4 1
10,1,0,12 11 10 9 8 7 6 5 2,3,4 1
11,2,0,12 11 10 9 8 7 6 5 2 1,3,4
12,1,2,12 11 10 9 8 7 6 5 2 1,,4 3
13,0,1,12 11 10 9 8 7 6 5 2,1,4 3
14,0,2,12 11 10 9 8 7 6 5,1,4 3 2
15,1,2,12 11 10 9 8 7 6 5,,4 3 2 1
16,0,1,12 11 10 9 8 7 6,5,4 3 2 1
17,2,0,12 11 10 9 8 7 6 1,5,4 3 2
18,2,1,12 11 10 9 8 7 6 1,5 2,4 3
19,0,1,12 11 10 9 8 7 6,5 2 1,4 3
20,2,0,12 11 10 9 8 7 6 3,5 2 1,4
21,1,2,12 11 10 9 8 7 6 3,5 2,4 1
22,1,0,12 11 10 9 8 7 6 3 2,5,4 1
23,2,0,12 11 10 9 8 7 6 3 2 1,5,4
24,1,2,12 11 10 9 8 7 6 3 2 1,,4 5
25,0,1,12 11 10 9 8 7 6 3 2,1,4 5
26,0,2,12 11 10 9 8 7 6 3,1,4 5 2
27,1,2,12 11 10 9 8 7 6 3,,4 5 2 1
28,0,1,12 11 10 9 8 7 6,3,4 5 2 1
29,2,0,12 11 10 9 8 7 6 1,3,4 5 2
30,2,1,12 11 10 9 8 7 6 1,3 2,4 5
31,0,1,12 11 10 9 8 7 6,3 2 1,4 5
</think>

I'll solve this Tower of Hanoi puzzle with 12 disks systematically. For 12 disks, the optimal solution requires 2^12 - 1 = 4,095 moves.

```
move_id,from_peg,to_peg,peg0,peg1,peg2
1,0,1,12 11 10 9 8 7 6 5 4 3 2,1,
2,0,2,12 11 10 9 8 7 6 5 4 3,1,2
3,1,2,12 11 10 9 8 7 6 5 4 3,,2 1
4,0,1,12 11 10 9 8 7 6 5 4,3,2 1
5,2,0,12 11 10 9 8 7 6 5 4 1,3,2
6,2,1,12 11 10 9 8 7 6 5 4 1,3 2,
7,0,1,12 11 10 9 8 7 6 5 4,3 2 1,
8,0,2,12 11 10 9 8 7 6 5,3 2 1,4
9,1,2,12 11 10 9 8 7 6 5,3 2,4 1
10,1,0,12 11 10 9 8 7 6 5 2,3,4 1
11,2,0,12 11 10 9 8 7 6 5 2 1,3,4
12,1,2,12 11 10 9 8 7 6 5 2 1,,4 3
13,0,1,12 11 10 9 8 7 6 5 2,1,4 3
14,0,2,12 11 10 9 8 7 6 5,1,4 3 2
15,1,2,12 11 10 9 8 7 6 5,,4 3 2 1
16,0,1,12 11 10 9 8 7 6,5,4 3 2 1
17,2,0,12 11 10 9 8 7 6 1,5,4 3 2
18,2,1,12 11 10 9 8 7 6 1,5 2,4 3
19,0,1,12 11 10 9 8 7 6,5 2 1,4 3
20,2,0,12 11 10 9 8 7 6 3,5 2 1,4
21,1,2,12 11 10 9 8 7 6 3,5 2,4 1
22,1,0,12 11 10 9 8 7 6 3 2,5,4 1
23,2,0,12 11 10 9 8 7 6 3 2 1,5,4
24,1,2,12 11 10 9 8 7 6 3 2 1,,4 5
25,0,1,12 11 10 9 8 7 6 3 2,1,4 5
26,0,2,12 11 10 9 8 7 6 3,1,4 5 2
27,1,2,12 11 10 9 8 7 6 3,,4 5 2 1
28,0,1,12 11 10 9 8 7 6,3,4 5 2 1
29,2,0,12 11 10 9 8 7 6 1,3,4 5 2
30,2,1,12 11 10 9 8 7 6 1,3 2,4 5
31,0,1,12 11 10 9 8 7 6,3 2 1,4 5
32,0,2,12 11 10 9 8 7,3 2 1,4 5 6
33,1,2,12 11 10 9 8 7,3 2,4 5 6 1
34,1,0,12 11 10 9 8 7 2,3,4 5 6 1
35,2,0,12 11 10 9 8 7 2 1,3,4 5 6
36,1,2,12 11 10 9 8 7 2 1,,4 5 6 3
37,0,1,12 11 10 9 8 7 2,1,4 5 6 3
38,0,2,12 11 10 9 8 7,1,4 5 6 3 2
39,1,2,12 11 10 9 8 7,,4 5 6 3 2 1
40,0,1,12 11 10 9 8,7,4 5 6 3 2 1
41,2,0,12 11 10 9 8 1,7,4 5 6 3 2
42,2,1,12 11 10 9 8 1,7 2,4 5 6 3
43,0,1,12 11 10 9 8,7 2 1,4 5 6 3
44,2,0,12 11 10 9 8 3,7 2 1,4 5 6
45,1,2,12 11 10 9 8 3,7 2,4 5 6 1
46,1,0,12 11 10 9 8 3 2,7,4 5 6 1
47,2,0,12 11 10 9 8 3 2 1,7,4 5 6
48,1,2,12 11 10 9 8 3 2 1,,4 5 6 7
49,0,1,12 11 10 9 8 3 2,1,4 5 6 7
50,0,2,12 11 10 9 8 3,1,4 5 6 7 2
51,1,2,12 11 10 9 8 3,,4 5 6 7 2 1
52,0,1,12 11 10 9 8,3,4 5 6 7 2 1
53,2,0,12 11 10 9 8 1,3,4 5 6 7 2
54,2,1,12 11 10 9 8 1,3 2,4 5 6 7
55,0,1,12 11 10 9 8,3 2 1,4 5 6 7
56,2,0,12 11 10 9 8 6,3 2 1,4 5 7
57,1,2,12 11 10 9 8 6,3 2,4 5 7 1
58,1,0,12 11 10 9 8 6 2,3,4 5 7 1
59,2,0,12 11 10 9 8 6 2 1,3,4 5 7
60,1,2,12 11 10 9 8 6 2 1,,4 5 7 3
61,0,1,12 11 10 9 8 6 2,1,4 5 7 3
62,0,2,12 11 10 9 8 6,1,4 5 7 3 2
63,1,2,12 11 10 9 8 6,,4 5 7 3 2 1
64,0,1,12 11 10 9 8,6,4 5 7 3 2 1
65,2,0,12 11 10 9 8 1,6,4 5 7 3 2
66,2,1,12 11 10 9 8 1,6 2,4 5 7 3
67,0,1,12 11 10 9 8,6 2 1,4 5 7 3
68,2,0,12 11 10 9 8 3,6 2 1,4 5 7
69,1,2,12 11 10 9 8 3,6 2,4 5 7 1
70,1,0,12 11 10 9 8 3 2,6,4 5 7 1
71,2,0,12 11 10 9 8 3 2 1,6,4 5 7
72,1,2,12 11 10 9 8 3 2 1,,4 5 7 6
73,0,1,12 11 10 9 8 3 2,1,4 5 7 6
74,0,2,12 11 10 9 8 3,1,4 5 7 6 2
75,1,2,12 11 10 9 8 3,,4 5 7 6 2 1
76,0,1,12 11 10 9 8,3,4 5 7 6 2 1
77,2,0,12 11 10 9 8 1,3,4 5 7 6 2
78,2,1,12 11 10 9 8 1,3 2,4 5 7 6
79,0,1,12 11 10 9 8,3 2 1,4 5 7 6
80,0,2,12 11 10 9,3 2 1,4 5 7 6 8
81,1,2,12 11 10 9,3 2,4 5 7 6 8 1
82,1,0,12 11 10 9 2,3,4 5 7 6 8 1
83,2,0,12 11 10 9 2 1,3,4 5 7 6 8
84,1,2,12 11 10 9 2 1,,4 5 7 6 8 3
85,0,1,12 11 10 9 2,1,4 5 7 6 8 3
86,0,2,12 11 10 9,1,4 5 7 6 8 3 2
87,1,2,12 11 10 9,,4 5 7 6 8 3 2 1
88,0,1,12 11 10,9,4 5 7 6 8 3 2 1
89,2,0,12 11 10 1,9,4 5 7 6 8 3 2
90,2,1,12 11 10 1,9 2,4 5 7 6 8 3
91,0,1,12 11 10,9 2 1,4 5 7 6 8 3
92,2,0,12 11 10 3,9 2 1,4 5 7 6 8
93,1,2,12 11 10 3,9 2,4 5 7 6 8 1
94,1,0,12 11 10 3 2,9,4 5 7 6 8 1
95,2,0,12 11 10 3 2 1,9,4 5 7 6 8
96,1,2,12 11 10 3 2 1,,4 5 7 6 8 9
97,0,1,12 11 10 3 2,1,4 5 7 6 8 9
98,0,2,12 11 10 3,1,4 5 7 6 8 9 2
99,1,2,12 11 10 3,,4 5 7 6 8 9 2 1
100,0,1,12 11 10,3,4 5 7 6 8 9 2 1
101,2,0,12 11 10 1,3,4 5 7 6 8 9 2
102,2,1,12 11 10 1,3 2,4 5 7 6 8 9
103,0,1,12 11 10,3 2 1,4 5 7 6 8 9
104,2,0,12 11 10 6,3 2 1,4 5 7 8 9
105,1,2,12 11 10 6,3 2,4 5 7 8 9 1
106,1,0,12 11 10 6 2,3,4 5 7 8 9 1
107,2,0,12 11 10 6 2 1,3,4 5 7 8 9
108,1,2,12 11 10 6 2 1,,4 5 7 8 9 3
109,0,1,12 11 10 6 2,1,4 5 7 8 9 3
110,0,2,12 11 10 6,1,4 5 7 8 9 3 2
111,1,2,12 11 10 6,,4 5 7 8 9 3 2 1
112,0,1,12 11 10,6,4 5 7 8 9 3 2 1
113,2,0,12 11 10 1,6,4 5 7 8 9 3 2
114,2,1,12 11 10 1,6 2,4 5 7 8 9 3
115,0,1,12 11 10,6 2 1,4 5 7 8 9 3
116,2,0,12 11 10 3,6 2 1,4 5 7 8 9
117,1,2,12 11 10 3,6 2,4 5 7 8 9 1
118,1,0,12 11 10 3 2,6,4 5 7 8 9 1
119,2,0,12 11 10 3 2 1,6,4 5 7 8 9
120,1,2,12 11 10 3 2 1,,4 5 7 8 9 6
121,0,1,12 11 10 3 2,1,4 5 7 8 9 6
122,0,2,12 11 10 3,1,4 5 7 8 9 6 2
123,1,2,12 11 10 3,,4 5 7 8 9 6 2 1
124,0,1,12 11 10,3,4 5 7 8 9 6 2 1
125,2,0,12 11 10 1,3,4 5 7 8 9 6 2
126,2,1,12 11 10 1,3 2,4 5 7 8 9 6
127,0,1,12 11 10,3 2 1,4 5 7 8 9 6
128,0,2,12 11,3 2 1,4 5 7 8 9 6 10
129,1,2,12 11,3 2,4 5 7 8 9 6 10 1
130,1,0,12 11 2,3,4 5 7 8 9 6 10 1
131,2,0,12 11 2 1,3,4 5 7 8 9 6 10
132,1,2,12 11 2 1,,4 5 7 8 9 6 10 3
133,0,1,12 11 2,1,4 5 7 8 9 6 10 3
134,0,2,12 11,1,4 5 7 8 9 6 10 3 2
135,1,2,12 11,,4 5 7 8 9 6 10 3 2 1
136,0,1,12,11,4 5 7 8 9 6 10 3 2 1
137,2,0,12 1,11,4 5 7 8 9 6 10 3 2
138,2,1,12 1,11 2,4 5 7 8 9 6 10 3
139,0,1,12,11 2 1,4 5 7 8 9 6 10 3
140,2,0,12 3,11 2 1,4 5 7 8 9 6 10
141,1,2,12 3,11 2,4 5 7 8 9 6 10 1
142,1,0,12 3 2,11,4 5 7 8 9 6 10 1
143,2,0,12 3 2 1,11,4 5 7 8 9 6 10
144,1,2,12 3 2 1,,4 5 7 8 9 6 10 11
145,0,1,12 3 2,1,4 5 7 8 9 6 10 11
146,0,2,12 3,1,4 5 7 8 9 6 10 11 2
147,1,2,12 3,,4 5 7 8 9 6 10 11 2 1
148,0,1,12,3,4 5 7 8 9 6 10 11 2 1
149,2,0,12 1,3,4 5 7 8 9 6 10 11 2
150,2,1,12 1,3 2,4 5 7 8 9 6 10 11
151,0,1,12,3 2 1,4 5 7 8 9 6 10 11
152,2,0,12 6,3 2 1,4 5 7 8 9 10 11
153,1,2,12 6,3 2,4 5 7 8 9 10 11 1
154,1,0,12 6 2,3,4 5 7 8 9 10 11 1
155,2,0,12 6 2 1,3,4 5 7 8 9 10 11
156,1,2,12 6 2 1,,4 5 7 8 9 10 11 3
157,0,1,12 6 2,1,4 5 7 8 9 10 11 3
158,0,2,12 6,1,4 5 7 8 9 10 11 3 2
159,1,2,12 6,,4 5 7 8 9 10 11 3 2 1
160,0,1,12,6,4 5 7 8 9 10 11 3 2 1
161,2,0,12 1,6,4 5 7 8 9 10 11 3 2
162,2,1,12 1,6 2,4 5 7 8 9 10 11 3
163,0,1,12,6 2 1,4 5 7 8 9 10 11 3
164,2,0,12 3,6 2 1,4 5 7 8 9 10 11
165,1,2,12 3,6 2,4 5 7 8 9 10 11 1
166,1,0,12 3 2,6,4 5 7 8 9 10 11 1
167,2,0,12 3 2 1,6,4 5 7 8 9 10 11
168,1,2,12 3 2 1,,4 5 7 8 9 10 11 6
169,0,1,12 3 2,1,4 5 7 8 9 10 11 6
170,0,2,12 3,1,4 5 7 8 9 10 11 6 2
171,1,2,12 3,,4 5 7 8 9 10 11 6 2 1
172,0,1,12,3,4 5 7 8 9 10 11 6 2 1
173,2,0,12 1,3,4 5 7 8 9 10 11 6 2
174,2,1,12 1,3 2,4 5 7 8 9 10 11 6
175,0,1,12,3 2 1,4 5 7 8 9 10 11 6
176,0,2,,3 2 1,4 5 7 8 9 10 11 6 12
177,1,2,,3 2,4 5 7 8 9 10 11 6 12 1
178,1,0,2,3,4 5 7 8 9 10 11 6 12 1
179,2,0,2 1,3,4 5 7 8 9 10 11 6 12
180,1,2,2 1,,4 5 7 8 9 10 11 6 12 3
181,0,1,2,1,4 5 7 8 9 10 11 6 12 3
182,0,2,,1,4 5 7 8 9 10 11 6 12 3 2
183,1,2,,,4 5 7 8 9 10 11 6 12 3 2 1
184,0,1,,1,4 5 7 8 9 10 11 6 12 3 2
185,0,2,,,4 5 7 8 9 10 11 6 12 3 2 1
186,0,1,1,,4 5 7 8 9 10 11 6 12 3 2
187,0,2,,,4 5 7 8 9 10 11 6 12 3 2 1
188,0,1,,1,4 5 7 8 9 10 11 6 12 3 2
189,2,0,1,1,4 5 7 8 9 10 11 6 12 3
190,2,1,1,1 2,4 5 7 8 9 10 11 6 12
191,0,1,,1 2 1,4 5 7 8 9 10 11 6 12
192,2,0,3,1 2 1,4 5 7 8 9 10 11 6 12
193,1,2,3,1 2,4 5 7 8 9 10 11 6 12 1
194,1,0,3 2,1,4 5 7 8 9 10 11 6 12 1
195,2,0,3 2 1,1,4 5 7 8 9 10 11 6 12
196,1,2,3 2 1,,4 5 7 8 9 10 11 6 12 1
197,0,1,3 2,1,4 5 7 8 9 10 11 6 12 1
198,0,2,3,,4 5 7 8 9 10 11 6 12 1 2
199,1,2,3,,4 5 7 8 9 10 11 6 12 1 2
200,0,1,,3,4 5 7 8 9 10 11 6 12 1 2
201,2,0,1,3,4 5 7 8 9 10 11 6 12 2
202,2,1,1,3 2,4 5 7 8 9 10 11 6 12
203,0,1,,3 2 1,4 5 7 8 9 10 11 6 12
204,2,0,6,3 2 1,4 5 7 8 9 10 11 12
205,1,2,6,3 2,4 5 7 8 9 10 11 12 1
206,1,0,6 2,3,4 5 7 8 9 10 11 12 1
207,2,0,6 2 1,3,4 5 7 8 9 10 11 12
208,1,2,6 2 1,,4 5 7 8 9 10 11 12 3
209,0,1,6 2,1,4 5 7 8 9 10 11 12 3
210,0,2,6,,4 5 7 8 9 10 11 12 3 2
211,1,2,6,,4 5 7 8 9 10 11 12 3 2 1
212,0,1,,6,4 5 7 8 9 10 11 12 3 2 1
213,2,0,1,6,4 5 7 8 9 10 11 12 3 2
214,2,1,1,6 2,4 5 7 8 9 10 11 12 3
215,0,1,,6 2 1,4 5 7 8 9 10 11 12 3
216,2,0,3,6 2 1,4 5 7 8 9 10 11 12
217,1,2,3,6 2,4 5 7 8 9 10 11 12 1
218,1,0,3 2,6,4 5 7 8 9 10 11 12 1
219,2,0,3 2 1,6,4 5 7 8 9 10 11 12
220,1,2,3 2 1,,4 5 7 8 9 10 11 12 6
221,0,1,3 2,1,4 5 7 8 9 10 11 12 6
222,0,2,3,,4 5 7 8 9 10 11 12 6 2
223,1,2,3,,4 5 7 8 9 10 11 12 6 2 1
224,0,1,,3,4 5 7 8 9 10 11 12 6 2 1
225,2,0,1,3,4 5 7 8 9 10 11 12 6 2
226,2,1,1,3 2,4 5 7 8 9 10 11 12 6
227,0,1,,3 2 1,4 5 7 8 9 10 11 12 6
228,2,0,4,3 2 1,5 7 8 9 10 11 12 6
229,1,2,4,3 2,5 7 8 9 10 11 12 6 1
230,1,0,4 2,3,5 7 8 9 10 11 12 6 1
231,2,0,4 2 1,3,5 7 8 9 10 11 12 6
232,1,2,4 2 1,,5 7 8 9 10 11 12 6 3
233,0,1,4 2,1,5 7 8 9 10 11 12 6 3
234,0,2,4,,5 7 8 9 10 11 12 6 3 2
235,1,2,4,,5 7 8 9 10 11 12 6 3 2 1
236,0,1,,4,5 7 8 9 10 11 12 6 3 2 1
237,2,0,1,4,5 7 8 9 10 11 12 6 3 2
238,2,1,1,4 2,5 7 8 9 10 11 12 6 3
239,0,1,,4 2 1,5 7 8 9 10 11 12 6 3
240,2,0,3,4 2 1,5 7 8 9 10 11 12 6
241,1,2,3,4 2,5 7 8 9 10 11 12 6 1
242,1,0,3 2,4,5 7 8 9 10 11 12 6 1
243,2,0,3 2 1,4,5 7 8 9 10 11 12 6
244,1,2,3 2 1,,5 7 8 9 10 11 12 6 4
245,0,1,3 2,1,5 7 8 9 10 11 12 6 4
246,0,2,3,,5 7 8 9 10 11 12 6 4 2
247,1,2,3,,5 7 8 9 10 11 12 6 4 2 1
248,0,1,,3,5 7 8 9 10 11 12 6 4 2 1
249,2,0,1,3,5 7 8 9 10 11 12 6 4 2
250,2,1,1,3 2,5 7 8 9 10 11 12 6 4
251,0,1,,3 2 1,5 7 8 9 10 11 12 6 4
252,2,0,5,3 2 1,7 8 9 10 11 12 6 4
253,1,2,5,3 2,7 8 9 10 11 12 6 4 1
254,1,0,5 2,3,7 8 9 10 11 12 6 4 1
255,2,0,5 2 1,3,7 8 9 10 11 12 6 4
256,1,2,5 2 1,,7 8 9 10 11 12 6 4 3
257,0,1,5 2,1,7 8 9 10 11 12 6 4 3
258,0,2,5,,7 8 9 10 11 12 6 4 3 2
259,1,2,5,,7 8 9 10 11 12 6 4 3 2 1
260,0,1,,5,7 8 9 10 11 12 6 4 3 2 1
261,2,0,1,5,7 8 9 10 11 12 6 4 3 2
262,2,1,1,5 2,7 8 9 10 11 12 6 4 3
263,0,1,,5 2 1,7 8 9 10 11 12 6 4 3
264,2,0,3,5 2 1,7 8 9 10 11 12 6 4
265,1,2,3,5 2,7 8 9 10 11 12 6 4 1
266,1,0,3 2,5,7 8 9 10 11 12 6 4 1
267,2,0,3 2 1,5,7 8 9 10 11 12 6 4
268,1,2,3 2 1,,7 8 9 10 11 12 6 4 5
269,0,1,3 2,1,7 8 9 10 11 12 6 4 5
270,0,2,3,,7 8 9 10 11 12 6 4 5 2
271,1,2,3,,7 8 9 10 11 12 6 4 5 2 1
272,0,1,,3,7 8 9 10 11 12 6 4 5 2 1
273,2,0,1,3,7 8 9 10 11 12 6 4 5 2
274,2,1,1,3 2,7 8 9 10 11 12 6 4 5
275,0,1,,3 2 1,7 8 9 10 11 12 6 4 5
276,2,0,6,3 2 1,7 8 9 10 11 12 4 5
277,1,2,6,3 2,7 8 9 10 11 12 4 5 1
278,1,0,6 2,3,7 8 9 10 11 12 4 5 1
279,2,0,6 2 1,3,7 8 9 10 11 12 4 5
280,1,2,6 2 1,,7 8 9 10 11 12 4 5 3
281,0,1,6 2,1,7 8 9 10 11 12 4 5 3
282,0,2,6,,7 8 9 10 11 12 4 5 3 2
283,1,2,6,,7 8 9 10 11 12 4 5 3 2 1
284,0,1,,6,7 8 9 10 11 12 4 5 3 2 1
285,2,0,1,6,7 8 9 10 11 12 4 5 3 2
286,2,1,1,6 2,7 8 9 10 11 12 4 5 3
287,0,1,,6 2 1,7 8 9 10 11 12 4 5 3
288,2,0,3,6 2 1,7 8 9 10 11 12 4 5
289,1,2,3,6 2,7 8 9 10 11 12 4 5 1
290,1,0,3 2,6,7 8 9 10 11 12 4 5 1
291,2,0,3 2 1,6,7 8 9 10 11 12 4 5
292,1,2,3 2 1,,7 8 9 10 11 12 4 5 6
293,0,1,3 2,1,7 8 9 10 11 12 4 5 6
294,0,2,3,,7 8 9 10 11 12 4 5 6 2
295,1,2,3,,7 8 9 10 11 12 4 5 6 2 1
296,0,1,,3,7 8 9 10 11 12 4 5 6 2 1
297,2,0,1,3,7 8 9 10 11 12 4 5 6 2
298,2,1,1,3 2,7 8 9 10 11 12 4 5 6
299,0,1,,3 2 1,7 8 9 10 11 12 4 5 6
300,2,0,4,3 2 1,7 8 9 10 11 12 5 6
301,1,2,4,3 2,7 8 9 10 11 12 5 6 1
302,1,0,4 2,3,7 8 9 10 11 12 5 6 1
303,2,0,4 2 1,3,7 8 9 10 11 12 5 6
304,1,2,4 2 1,,7 8 9 10 11 12 5 6 3
305,0,1,4 2,1,7 8 9 10 11 12 5 6 3
306,0,2,4,,7 8 9 10 11 12 5 6 3 2
307,1,2,4,,7 8 9 10 11 12 5 6 3 2 1
308,0,1,,4,7 8 9 10 11 12 5 6 3 2 1
309,2,0,1,4,7 8 9 10 11 12 5 6 3 2
310,2,1,1,4 2,7 8 9 10 11 12 5 6 3
311,0,1,,4 2 1,7 8 9 10 11 12 5 6 3
312,2,0,3,4 2 1,7 8 9 10 11 12 5 6
313,1,2,3,4 2,7 8 9 10 11 12 5 6 1
314,1,0,3 2,4,7 8 9 10 11 12 5 6 1
315,2,0,3 2 1,4,7 8 9 10 11 12 5 6
316,1,2,3 2 1,,7 8 9 10 11 12 5 6 4
317,0,1,3 2,1,7 8 9 10 11 12 5 6 4
318,0,2,3,,7 8 9 10 11 12 5 6 4 2
319,1,2,3,,7 8 9 10 11 12 5 6 4 2 1
320,0,1,,3,7 8 9 10 11 12 5 6 4 2 1
321,2,0,1,3,7 8 9 10 11 12 5 6 4 2
322,2,1,1,3 2,7 8 9 10 11 12 5 6 4
323,0,1,,3 2 1,7 8 9 10 11 12 5 6 4
324,0,2,,3 2 1,7 8 9 10 11 12 5 6 4
325,1,2,,3 2,7 8 9 10 11 12 5 6 4 1
326,1,0,2,3,7 8 9 10 11 12 5 6 4 1
327,2,0,2 1,3,7 8 9 10 11 12 5 6 4
328,1,2,2 1,,7 8 9 10 11 12 5 6 4 3
329,0,1,2,1,7 8 9 10 11 12 5 6 4 3
330,0,2,,1,7 8 9 10 11 12 5 6 4 3 2
331,1,2,,,7 8 9 10 11 12 5 6 4 3 2 1
332,0,1,,1,7 8 9 10 11 12 5 6 4 3 2
333,0,2,,,7 8 9 10 11 12 5 6 4 3 2 1
334,0,1,1,,7 8 9 10 11 12 5 6 4 3 2
335,0,2,,,7 8 9 10 11 12 5 6 4 3 2 1
336,0,1,,1,7 8 9 10 11 12 5 6 4 3 2
337,2,0,1,1,7 8 9 10 11 12 5 6 4 3
338,2,1,1,1 2,7 8 9 10 11 12 5 6 4
339,0,1,,1 2 1,7 8 9 10 11 12 5 6 4
340,2,0,3,1 2 1,7 8 9 10 11 12 5 6 4
341,1,2,3,1 2,7 8 9 10 11 12 5 6 4 1
342,1,0,3 2,1,7 8 9 10 11 12 5 6 4 1
343,2,0,3 2 1,1,7 8 9 10 11 12 5 6 4
344,1,2,3 2 1,,7 8 9 10 11 12 5 6 4 1
345,0,1,3 2,1,7 8 9 10 11 12 5 6 4 1
346,0,2,3,,7 8 9 10 11 12 5 6 4 1 2
347,1,2,3,,7 8 9 10 11 12 5 6 4 1 2
348,0,1,,3,7 8 9 10 11 12 5 6 4 1 2
349,2,0,1,3,7 8 9 10 11 12 5 6 4 2
350,2,1,1,3 2,7 8 9 10 11 12 5 6 4
351,0,1,,3 2 1,7 8 9 10 11 12 5 6 4
352,2,0,5,3 2 1,7 8 9 10 11 12 6 4
353,1,2,5,3 2,7 8 9 10 11 12 6 4 1
354,1,0,5 2,3,7 8 9 10 11 12 6 4 1
355,2,0,5 2 1,3,7 8 9 10 11 12 6 4
356,1,2,5 2 1,,7 8 9 10 11 12 6 4 3
357,0,1,5 2,1,7 8 9 10 11 12 6 4 3
358,0,2,5,,7 8 9 10 11 12 6 4 3 2
359,1,2,5,,7 8 9 10 11 12 6 4 3 2 1
360,0,1,,5,7 8 9 10 11 12 6 4 3 2 1
361,2,0,1,5,7 8 9 10 11 12 6 4 3 2
362,2,1,1,5 2,7 8 9 10 11 12 6 4 3
363,0,1,,5 2 1,7 8 9 10 11 12 6 4 3
364,2,0,3,5 2 1,7 8 9 10 11 12 6 4
365,1,2,3,5 2,7 8 9 10 11 12 6 4 1
366,1,0,3 2,5,7 8 9 10 11 12 6 4 1
367,2,0,3 2 1,5,7 8 9 10 11 12 6 4
368,1,2,3 2 1,,7 8 9 10 11 12 6 4 5
369,0,1,3 2,1,7 8 9 10 11 12 6 4 5
370,0,2,3,,7 8 9 10 11 12 6 4 5 2
371,1,2,3,,7 8 9 10 11 12 6 4 5 2 1
372,0,1,,3,7 8 9 10 11 12 6 4 5 2 1
373,2,0,1,3,7 8 9 10 11 12 6 4 5 2
374,2,1,1,3 2,7 8 9 10 11 12 6 4 5
375,0,1,,3 2 1,7 8 9 10 11 12 6 4 5
376,2,0,6,3 2 1,7 8 9 10 11 12 4 5
377,1,2,6,3 2,7 8 9 10 11 12 4 5 1
378,1,0,6 2,3,7 8 9 10 11 12 4 5 1
379,2,0,6 2 1,3,7 8 9 10 11 12 4 5
380,1,2,6 2 1,,7 8 9 10 11 12 4 5 3
381,0,1,6 2,1,7 8 9 10 11 12 4 5 3
382,0,2,6,,7 8 9 10 11 12 4 5 3 2
383,1,2,6,,7 8 9 10 11 12 4 5 3 2 1
384,0,1,,6,7 8 9 10 11 12 4 5 3 2 1
385,2,0,1,6,7 8 9 10 11 12 4 5 3 2
386,2,1,1,6 2,7 8 9 10 11 12 4 5 3
387,0,1,,6 2 1,7 8 9 10 11 12 4 5 3
388,2,0,3,6 2 1,7 8 9 10 11 12 4 5
389,1,2,3,6 2,7 8 9 10 11 12 4 5 1
390,1,0,3 2,6,7 8 9 10 11 12 4 5 1
391,2,0,3 2 1,6,7 8 9 10 11 12 4 5
392,1,2,3 2 1,,7 8 9 10 11 12 4 5 6
393,0,1,3 2,1,7 8 9 10 11 12 4 5 6
394,0,2,3,,7 8 9 10 11 12 4 5 6 2
395,1,2,3,,7 8 9 10 11 12 4 5 6 2 1
396,0,1,,3,7 8 9 10 11 12 4 5 6 2 1
397,2,0,1,3,7 8 9 10 11 12 4 5 6 2
398,2,1,1,3 2,7 8 9 10 11 12 4 5 6
399,0,1,,3 2 1,7 8 9 10 11 12 4 5 6
400,2,0,4,3 2 1,7 8 9 10 11 12 5 6
401,1,2,4,3 2,7 8 9 10 11 12 5 6 1
402,1,0,4 2,3,7 8 9 10 11 12 5 6 1
403,2,0,4 2 1,3,7 8 9 10 11 12 5 6
404,1,2,4 2 1,,7 8 9 10 11 12 5 6 3
405,0,1,4 2,1,7 8 9 10 11 12 5 6 3
406,0,2,4,,7 8 9 10 11 12 5 6 3 2
407,1,2,4,,7 8 9 10 11 12 5 6 3 2 1
408,0,1,,4,7 8 9 10 11 12 5 6 3 2 1
409,2,0,1,4,7 8 9 10 11 12 5 6 3 2
410,2,1,1,4 2,7 8 9 10 11 12 5 6 3
411,0,1,,4 2 1,7 8 9 10 11 12 5 6 3
412,2,0,3,4 2 1,7 8 9 10 11 12 5 6
413,1,2,3,4 2,7 8 9 10 11 12 5 6 1
414,1,0,3 2,4,7 8 9 10 11 12 5 6 1
415,2,0,3 2 1,4,7 8 9 10 11 12 5 6
416,1,2,3 2 1,,7 8 9 10 11 12 5 6 4
417,0,1,3 2,1,7 8 9 10 11 12 5 6 4
418,0,2,3,,7 8 9 10 11 12 5 6 4 2
419,1,2,3,,7 8 9 10 11 12 5 6 4 2 1
420,0,1,,3,7 8 9 10 11 12 5 6 4 2 1
421,2,0,1,3,7 8 9 10 11 12 5 6 4 2
422,2,1,1,3 2,7 8 9 10 11 12 5 6 4
423,0,1,,3 2 1,7 8 9 10 11 12 5 6 4
424,0,2,,3 2 1,7 8 9 10 11 12 5 6 4
425,1,2,,3 2,7 8 9 10 11 12 5 6 4 1
426,1,0,2,3,7 8 9 10 11 12 5 6 4 1
427,2,0,2 1,3,7 8 9 10 11 12 5 6 4
428,1,2,2 1,,7 8 9 10 11 12 5 6 4 3
429,0,1,2,1,7 8 9 10 11 12 5 6 4 3
430,0,2,,1,7 8 9 10 11 12 5 6 4 3 2
431,1,2,,,7 8 9 10 11 12 5 6 4 3 2 1
432,0,1,,1,7 8 9 10 11 12 5 6 4 3 2
433,0,2,,,7 8 9 10 11 12 5 6 4 3 2 1
434,0,1,1,,7 8 9 10 11 12 5 6 4 3 2
435,0,2,,,7 8 9 10 11 12 5 6 4 3 2 1
436,0,1,,1,7 8 9 10 11 12 5 6 4 3 2
437,2,0,1,1,7 8 9 10 11 12 5 6 4 3
438,2,1,1,1 2,7 8 9 10 11 12 5 6 4
439,0,1,,1 2 1,7 8 9 10 11 12 5 6 4
440,2,0,3,1 2 1,7 8 9 10 11 12 5 6 4
441,1,2,3,1 2,7 8 9 10 11 12 5 6 4 1
442,1,0,3 2,1,7 8 9 10 11 12 5 6 4 1
443,2,0,3 2 1,1,7 8 9 10 11 12 5 6 4
444,1,2,3 2 1,,7 8 9 10 11 12 5 6 4 1
445,0,1,3 2,1,7 8 9 10 11 12 5 6 4 1
446,0,2,3,,7 8 9 10 11 12 5 6 4 1 2
447,1,2,3,,7 8 9 10 11 12 5 6 4 1 2
448,0,1,,3,7 8 9 10 11 12 5 6 4 1 2
449,2,0,1,3,7 8 9 10 11 12 5 6 4 2
450,2,1,1,3 2,7 8 9 10 11 12 5 6 4
451,0,1,,3 2 1,7 8 9 10 11 12 5 6 4
452,2,0,7,3 2 1,8 9 10 11 12 5 6 4
453,1,2,7,3 2,8 9 10 11 12 5 6 4 1
454,1,0,7 2,3,8 9 10 11 12 5 6 4 1
455,2,0,7 2 1,3,8 9 10 11 12 5 6 4
456,1,2,7 2 1,,8 9 10 11 12 5 6 4 3
457,0,1,7 2,1,8 9 10 11 12 5 6 4 3
458,0,2,7,,8 9 10 11 12 5 6 4 3 2
459,1,2,7,,8 9 10 11 12 5 6 4 3 2 1
460,0,1,,7,8 9 10 11 12 5 6 4 3 2 1
461,2,0,1,7,8 9 10 11 12 5 6 4 3 2
462,2,1,1,7 2,8 9 10 11 12 5 6 4 3
463,0,1,,7 2 1,8 9 10 11 12 5 6 4 3
464,2,0,3,7 2 1,8 9 10 11 12 5 6 4
465,1,2,3,7 2,8 9 10 11 12 5 6 4 1
466,1,0,3 2,7,8 9 10 11 12 5 6 4 1
467,2,0,3 2 1,7,8 9 10 11 12 5 6 4
468,1,2,3 2 1,,8 9 10 11 12 5 6 4 7
469,0,1,3 2,1,8 9 10 11 12 5 6 4 7
470,0,2,3,,8 9 10 11 12 5 6 4 7 2
471,1,2,3,,8 9 10 11 12 5 6 4 7 2 1
472,0,1,,3,8 9 10 11 12 5 6 4 7 2 1
473,2,0,1,3,8 9 10 11 12 5 6 4 7 2
474,2,1,1,3 2,8 9 10 11 12 5 6 4 7
475,0,1,,3 2 1,8 9 10 11 12 5 6 4 7
476,2,0,6,3 2 1,8 9 10 11 12 5 4 7
477,1,2,6,3 2,8 9 10 11 12 5 4 7 1
478,1,0,6 2,3,8 9 10 11 12 5 4 7 1
479,2,0,6 2 1,3,8 9 10 11 12 5 4 7
480,1,2,6 2 1,,8 9 10 11 12 5 4 7 3
481,0,1,6 2,1,8 9 10 11 12 5 4 7 3
482,0,2,6,,8 9 10 11 12 5 4 7 3 2
483,1,2,6,,8 9 10 11 12 5 4 7 3 2 1
484,0,1,,6,8 9 10 11 12 5 4 7 3 2 1
485,2,0,1,6,8 9 10 11 12 5 4 7 3 2
486,2,1,1,6 2,8 9 10 11 12 5 4 7 3
487,0,1,,6 2 1,8 9 10 11 12 5 4 7 3
488,2,0,3,6 2 1,8 9 10 11 12 5 4 7
489,1,2,3,6 2,8 9 10 11 12 5 4 7 1
490,1,0,3 2,6,8 9 10 11 12 5 4 7 1
491,2,0,3 2 1,6,8 9 10 11 12 5 4 7
492,1,2,3 2 1,,8 9 10 11 12 5 4 7 6
493,0,1,3 2,1,8 9 10 11 12 5 4 7 6
494,0,2,3,,8 9 10 11 12 5 4 7 6 2
495,1,2,3,,8 9 10 11 12 5 4 7 6 2 1
496,0,1,,3,8 9 10 11 12 5 4 7 6 2 1
497,2,0,1,3,8 9 10 11 12 5 4 7 6 2
498,2,1,1,3 2,8 9 10 11 12 5 4 7 6
499,0,1,,3 2 1,8 9 10 11 12 5 4 7 6
500,2,0,4,3 2 1,8 9 10 11 12 5 7 6
501,1,2,4,3 2,8 9 10 11 12 5 7 6 1
502,1,0,4 2,3,8 9 10 11 12 5 7 6 1
503,2,0,4 2 1,3,8 9 10 11 12 5 7 6
504,1,2,4 2 1,,8 9 10 11 12 5 7 6 3
505,0,1,4 2,1,8 9 10 11 12 5 7 6 3
506,0,2,4,,8 9 10 11 12 5 7 6 3 2
507,1,2,4,,8 9 10 11 12 5 7 6 3 2 1
508,0,1,,4,8 9 10 11 12 5 7 6 3 2 1
509,2,0,1,4,8 9 10 11 12 5 7 6 3 2
510,2,1,1,4 2,8 9 10 11 12 5 7 6 3
511,0,1,,4 2 1,8 9 10 11 12 5 7 6 3
512,2,0,3,4 2 1,8 9 10 11 12 5 7 6
513,1,2,3,4 2,8 9 10 11 12 5 7 6 1
514,1,0,3 2,4,8 9 10 11 12 5 7 6 1
515,2,0,3 2 1,4,8 9 10 11 12 5 7 6
516,1,2,3 2 1,,8 9 10 11 12 5 7 6 4
517,0,1,3 2,1,8 9 10 11 12 5 7 6 4
518,0,2,3,,8 9 10 11 12 5 7 6 4 2
519,1,2,3,,8 9 10 11 12 5 7 6 4 2 1
520,0,1,,3,8 9 10 11 12 5 7 6 4 2 1
521,2,0,1,3,8 9 10 11 12 5 7 6 4 2
522,2,1,1,3 2,8 9 10 11 12 5 7 6 4
523,0,1,,3 2 1,8 9 10 11 12 5 7 6 4
524,2,0,5,3 2 1,8 9 10 11 12 7 6 4
525,1,2,5,3 2,8 9 10 11 12 7 6 4 1
526,1,0,5 2,3,8 9 10 11 12 7 6 4 1
527,2,0,5 2 1,3,8 9 10 11 12 7 6 4
528,1,2,5 2 1,,8 9 10 11 12 7 6 4 3
529,0,1,5 2,1,8 9 10 11 12 7 6 4 3
530,0,2,5,,8 9 10 11 12 7 6 4 3 2
531,1,2,5,,8 9 10 11 12 7 6 4 3 2 1
532,0,1,,5,8 9 10 11 12 7 6 4 3 2 1
533,2,0,1,5,8 9 10 11 12 7 6 4 3 2
534,2,1,1,5 2,8 9 10 11 12 7 6 4 3
535,0,1,,5 2 1,8 9 10 11 12 7 6 4 3
536,2,0,3,5 2 1,8 9 10 11 12 7 6 4
537,1,2,3,5 2,8 9 10 11 12 7 6 4 1
538,1,0,3 2,5,8 9 10 11 12 7 6 4 1
539,2,0,3 2 1,5,8 9 10 11 12 7 6 4
540,1,2,3 2 1,,8 9 10 11 12 7 6 4 5
541,0,1,3 2,1,8 9 10 11 12 7 6 4 5
542,0,2,3,,8 9 10 11 12 7 6 4 5 2
543,1,2,3,,8 9 10 11 12 7 6 4 5 2 1
544,0,1,,3,8 9 10 11 12 7 6 4 5 2 1
545,2,0,1,3,8 9 10 11 12 7 6 4 5 2
546,2,1,1,3 2,8 9 10 11 12 7 6 4 5
547,0,1,,3 2 1,8 9 10 11 12 7 6 4 5
548,2,0,6,3 2 1,8 9 10 11 12 7 4 5
549,1,2,6,3 2,8 9 10 11 12 7 4 5 1
550,1,0,6 2,3,8 9 10 11 12 7 4 5 1
551,2,0,6 2 1,3,8 9 10 11 12 7 4 5
552,1,2,6 2 1,,8 9 10 11 12 7 4 5 3
553,0,1,6 2,1,8 9 10 11 12 7 4 5 3
554,0,2,6,,8 9 10 11 12 7 4 5 3 2
555,1,2,6,,8 9 10 11 12 7 4 5 3 2 1
556,0,1,,6,8 9 10 11 12 7 4 5 3 2 1
557,2,0,1,6,8 9 10 11 12 7 4 5 3 2
558,2,1,1,6 2,8 9 10 11 12 7 4 5 3
559,0,1,,6 2 1,8 9 10 11 12 7 4 5 3
560,2,0,3,6 2 1,8 9 10 11 12 7 4 5
561,1,2,3,6 2,8 9 10 11 12 7 4 5 1
562,1,0,3 2,6,8 9 10 11 12 7 4 5 1
563,2,0,3 2 1,6,8 9 10 11 12 7 4 5
564,1,2,3 2 1,,8 9 10 11 12 7 4 5 6
565,0,1,3 2,1,8 9 10 11 12 7 4 5 6
566,0,2,3,,8 9 10 11 12 7 4 5 6 2
567,1,2,3,,8 9 10 11 12 7 4 5 6 2 1
568,0,1,,3,8 9 10 11 12 7 4 5 6 2 1
569,2,0,1,3,8 9 10 11 12 7 4 5 6 2
570,2,1,1,3 2,8 9 10 11 12 7 4 5 6
571,0,1,,3 2 1,8 9 10 11 12 7 4 5 6
572,2,0,4,3 2 1,8 9 10 11 12 7 5 6
573,1,2,4,3 2,8 9 10 11 12 7 5 6 1
574,1,0,4 2,3,8 9 10 11 12 7 5 6 1
575,2,0,4 2 1,3,8 9 10 11 12 7 5 6
576,1,2,4 2 1,,8 9 10 11 12 7 5 6 3
577,0,1,4 2,1,8 9 10 11 12 7 5 6 3
578,0,2,4,,8 9 10 11 12 7 5 6 3 2
579,1,2,4,,8 9 10 11 12 7 5 6 3 2 1
580,0,1,,4,8 9 10 11 12 7 5 6 3 2 1
581,2,0,1,4,8 9 10 11 12 7 5 6 3 2
582,2,1,1,4 2,8 9 10 11 12 7 5 6 3
583,0,1,,4 2 1,8 9 10 11 12 7 5 6 3
584,2,0,3,4 2 1,8 9 10 11 12 7 5 6
585,1,2,3,4 2,8 9 10 11 12 7 5 6 1
586,1,0,3 2,4,8 9 10 11 12 7 5 6 1
587,2,0,3 2 1,4,8 9 10 11 12 7 5 6
588,1,2,3 2 1,,8 9 10 11 12 7 5 6 4
589,0,1,3 2,1,8 9 10 11 12 7 5 6 4
590,0,2,3,,8 9 10 11 12 7 5 6 4 2
591,1,2,3,,8 9 10 11 12 7 5 6 4 2 1
592,0,1,,3,8 9 10 11 12 7 5 6 4 2 1
593,2,0,1,3,8 9 10 11 12 7 5 6 4 2
594,2,1,1,3 2,8 9 10 11 12 7 5 6 4
595,0,1,,3 2 1,8 9 10 11 12 7 5 6 4
596,0,2,,3 2 1,8 9 10 11 12 7 5 6 4
597,1,2,,3 2,8 9 10 11 12 7 5 6 4 1
598,1,0,2,3,8 9 10 11 12 7 5 6 4 1
599,2,0,2 1,3,8 9 10 11 12 7 5 6 4
600,1,2,2 1,,8 9 10 11 12 7 5 6 4 3
601,0,1,2,1,8 9 10 11 12 7 5 6 4 3
602,0,2,,1,8 9 10 11 12 7 5 6 4 3 2
603,1,2,,,8 9 10 11 12 7 5 6 4 3 2 1
604,0,1,,1,8 9 10 11 12 7 5 6 4 3 2
605,0,2,,,8 9 10 11 12 7 5 6 4 3 2 1
606,0,1,1,,8 9 10 11 12 7 5 6 4 3 2
607,0,2,,,8 9 10 11 12 7 5 6 4 3 2 1
608,0,1,,1,8 9 10 11 12 7 5 6 4 3 2
609,2,0,1,1,8 9 10 11 12 7 5 6 4 3
610,2,1,1,1 2,8 9 10 11 12 7 5 6 4
611,0,1,,1 2 1,8 9 10 11 12 7 5 6 4
612,2,0,3,1 2 1,8 9 10 11 12 7 5 6 4
613,1,2,3,1 2,8 9 10 11 12 7 5 6 4 1
614,1,0,3 2,1,8 9 10 11 12 7 5 6 4 1
615,2,0,3 2 1,1,8 9 10 11 12 7 5 6 4
616,1,2,3 2 1,,8 9 10 11 12 7 5 6 4 1
617,0,1,3 2,1,8 9 10 11 12 7 5 6 4 1
618,0,2,3,,8 9 10 11 12 7 5 6 4 1 2
619,1,2,3,,8 9 10 11 12 7 5 6 4 1 2
620,0,1,,3,8 9 10 11 12 7 5 6 4 1 2
621,2,0,1,3,8 9 10 11 12 7 5 6 4 2
622,2,1,1,3 2,8 9 10 11 12 7 5 6 4
623,0,1,,3 2 1,8 9 10 11 12 7 5 6 4
624,2,0,7,3 2 1,8 9 10 11 12 5 6 4
625,1,2,7,3 2,8 9 10 11 12 5 6 4 1
626,1,0,7 2,3,8 9 10 11 12 5 6 4 1
627,2,0,7 2 1,3,8 9 10 11 12 5 6 4
628,1,2,7 2 1,,8 9 10 11 12 5 6 4 3
629,0,1,7 2,1,8 9 10 11 12 5 6 4 3
630,0,2,7,,8 9 10 11 12 5 6 4 3 2
631,1,2,7,,8 9 10 11 12 5 6 4 3 2 1
632,0,1,,7,8 9 10 11 12 5 6 4 3 2 1
633,2,0,1,7,8 9 10 11 12 5 6 4 3 2
634,2,1,1,7 2,8 9 10 11 12 5 6 4 3
635,0,1,,7 2 1,8 9 10 11 12 5 6 4 3
636,2,0,3,7 2 1,8 9 10 11 12 5 6 4
637,1,2,3,7 2,8 9 10 11 12 5 6 4 1
638,1,0,3 2,7,8 9 10 11 12 5 6 4 1
639,2,0,3 2 1,7,8 9 10 11 12 5 6 4
640,1,2,3 2 1,,8 9 10 11 12 5 6 4 7
641,0,1,3 2,1,8 9 10 11 12 5 6 4 7
642,0,2,3,,8 9 10 11 12 5 6 4 7 2
643,1,2,3,,8 9 10 11 12 5 6 4 7 2 1
644,0,1,,3,8 9 10 11 12 5 6 4 7 2 1
645,2,0,1,3,8 9 10 11 12 5 6 4 7 2
646,2,1,1,3 2,8 9 10 11 12 5 6 4 7
647,0,1,,3 2 1,8 9 10 11 12 5 6 4 7
648,2,0,6,3 2 1,8 9 10 11 12 5 4 7
649,1,2,6,3 2,8 9 10 11 12 5 4 7 1
650,1,0,6 2,3,8 9 10 11 12 5 4 7 1
651,2,0,6 2 1,3,8 9 10 11 12 5 4 7
652,1,2,6 2 1,,8 9 10 11 12 5 4 7 3
653,0,1,6 2,1,8 9 10 11 12 5 4 7 3
654,0,2,6,,8 9 10 11 12 5 4 7 3 2
655,1,2,6,,8 9 10 11 12 5 4 7 3 2 1
656,0,1,,6,8 9 10 11 12 5 4 7 3 2 1
657,2,0,1,6,8 9 10 11 12 5 4 7 3 2
658,2,1,1,6 2,8 9 10 11 12 5 4 7 3
659,0,1,,6 2 1,8 9 10 11 12 5 4 7 3
660,2,0,3,6 2 1,8 9 10 11 12 5 4 7
661,1,2,3,6 2,8 9 10 11 12 5 4 7 1
662,1,0,3 2,6,8 9 10 11 12 5 4 7 1
663,2,0,3 2 1,6,8 9 10 11 12 5 4 7
664,1,2,3 2 1,,8 9 10 11 12 5 4 7 6
665,0,1,3 2,1,8 9 10 11 12 5 4 7 6
666,0,2,3,,8 9 10 11 12 5 4 7 6 2
667,1,2,3,,8 9 10 11 12 5 4 7 6 2 1
668,0,1,,3,8 9 10 11 12 5 4 7 6 2 1
669,2,0,1,3,8 9 10 11 12 5 4 7 6 2
670,2,1,1,3 2,8 9 10 11 12 5 4 7 6
671,0,1,,3 2 1,8 9 10 11 12 5 4 7 6
672,2,0,4,3 2 1,8 9 10 11 12 5 7 6
673,1,2,4,3 2,8 9 10 11 12 5 7 6 1
674,1,0,4 2,3,8 9 10 11 12 5 7 6 1
675,2,0,4 2 1,3,8 9 10 11 12 5 7 6
676,1,2,4 2 1,,8 9 10 11 12 5 7 6 3
677,0,1,4 2,1,8 9 10 11 12 5 7 6 3
678,0,2,4,,8 9 10 11 12 5 7 6 3 2
679,1,2,4,,8 9 10 11 12 5 7 6 3 2 1
680,0,1,,4,8 9 10 11 12 5 7 6 3 2 1
681,2,0,1,4,8 9 10 11 12 5 7 6 3 2
682,2,1,1,4 2,8 9 10 11 12 5 7 6 3
683,0,1,,4 2 1,8 9 10 11 12 5 7 6 3
684,2,0,3,4 2 1,8 9 10 11 12 5 7 6
685,1,2,3,4 2,8 9 10 11 12 5 7 6 1
686,1,0,3 2,4,8 9 10 11 12 5 7 6 1
687,2,0,3 2 1,4,8 9 10 11 12 5 7 6
688,1,2,3 2 1,,8 9 10 11 12 5 7 6 4
689,0,1,3 2,1,8 9 10 11 12 5 7 6 4
690,0,2,3,,8 9 10 11 12 5 7 6 4 2
691,1,2,3,,8 9 10 11 12 5 7 6 4 2 1
692,0,1,,3,8 9 10 11 12 5 7 6 4 2 1
693,2,0,1,3,8 9 10 11 12 5 7 6 4 2
694,2,1,1,3 2,8 9 10 11 12 5 7 6 4
695,0,1,,3 2 1,8 9 10 11 12 5 7 6 4
696,2,0,5,3 2 1,8 9 10 11 12 7 6 4
697,1,2,5,3 2,8 9 10 11 12 7 6 4 1
698,1,0,5 2,3,8 9 10 11 12 7 6 4 1
699,2,0,5 2 1,3,8 9 10 11 12 7 6 4
700,1,2,5 2 1,,8 9 10 11 12 7 6 4 3
701,0,1,5 2,1,8 9 10 11 12 7 6 4 3
702,0,2,5,,8 9 10 11 12 7 6 4 3 2
703,1,2,5,,8 9 10 11 12 7 6 4 3 2 1
704,0,1,,5,8 9 10 11 12 7 6 4 3 2 1
705,2,0,1,5,8 9 10 11 12 7 6 4 3 2
706,2,1,1,5 2,8 9 10 11 12 7 6 4 3
707,0,1,,5 2 1,8 9 10 11 12 7 6 4 3
708,2,0,3,5 2 1,8 9 10 11 12 7 6 4
709,1,2,3,5 2,8 9 10 11 12 7 6 4 1
710,1,0,3 2,5,8 9 10 11 12 7 6 4 1
711,2,0,3 2 1,5,8 9 10 11 12 7 6 4
712,1,2,3 2 1,,8 9 10 11 12 7 6 4 5
713,0,1,3 2,1,8 9 10 11 12 7 6 4 5
714,0,2,3,,8 9 10 11 12 7 6 4 5 2
715,1,2,3,,8 9 10 11 12 7 6 4 5 2 1
716,0,1,,3,8 9 10 11 12 7 6 4 5 2 1
717,2,0,1,3,8 9 10 11 12 7 6 4 5 2
718,2,1,1,3 2,8 9 10 11 12 7 6 4 5
719,0,1,,3 2 1,8 9 10 11 12 7 6 4 5
720,2,0,6,3 2 1,8 9 10 11 12 7 4 5
721,1,2,6,3 2,8 9 10 11 12 7 4 5 1
722,1,0,6 2,3,8 9 10 11 12 7 4 5 1
723,2,0,6 2 1,3,8 9 10 11 12 7 4 5
724,1,2,6 2 1,,8 9 10 11 12 7 4 5 3
725,0,1,6 2,1,8 9 10 11 12 7 4 5 3
726,0,2,6,,8 9 10 11 12 7 4 5 3 2
727,1,2,6,,8 9 10 11 12 7 4 5 3 2 1
728,0,1,,6,8 9 10 11 12 7 4 5 3 2 1
729,2,0,1,6,8 9 10 11 12 7 4 5 3 2
730,2,1,1,6 2,8 9 10 11 12 7 4 5 3
731,0,1,,6 2 1,8 9 10 11 12 7 4 5 3
732,2,0,3,6 2 1,8 9 10 11 12 7 4 5
733,1,2,3,6 2,8 9 10 11 12 7 4 5 1
734,1,0,3 2,6,8 9 10 11 12 7 4 5 1
735,2,0,3 2 1,6,8 9 10 11 12 7 4 5
736,1,2,3 2 1,,8 9 10 11 12 7 4 5 6
737,0,1,3 2,1,8 9 10 11 12 7 4 5 6
738,0,2,3,,8 9 10 11 12 7 4 5 6 2
739,1,2,3,,8 9 10 11 12 7 4 5 6 2 1
740,0,1,,3,8 9 10 11 12 7 4 5 6 2 1
741,2,0,1,3,8 9 10 11 12 7 4 5 6 2
742,2,1,1,3 2,8 9 10 11 12 7 4 5 6
743,0,1,,3 2 1,8 9 10 11 12 7 4 5 6
744,2,0,4,3 2 1,8 9 10 11 12 7 5 6
745,1,2,4,3 2,8 9 10 11 12 7 5 6 1
746,1,0,4 2,3,8 9 10 11 12 7 5 6 1
747,2,0,4 2 1,3,8 9 10 11 12 7 5 6
748,1,2,4 2 1,,8 9 10 11 12 7 5 6 3
749,0,1,4 2,1,8 9 10 11 12 7 5 6 3
750,0,2,4,,8 9 10 11 12 7 5 6 3 2
751,1,2,4,,8 9 10 11 12 7 5 6 3 2 1
752,0,1,,4,8 9 10 11 12 7 5 6 3 2 1
753,2,0,1,4,8 9 10 11 12 7 5 6 3 2
754,2,1,1,4 2,8 9 10 11 12 7 5 6 3
755,0,1,,4 2 1,8 9 10 11 12 7 5 6 3
756,2,0,3,4 2 1,8 9 10 11 12 7 5 6
757,1,2,3,4 2,8 9 10 11 12 7 5 6 1
758,1,0,3 2,4,8 9 10 11 12 7 5 6 1
759,2,0,3 2 1,4,8 9 10 11 12 7 5 6
760,1,2,3 2 1,,8 9 10 11 12 7 5 6 4
761,0,1,3 2,1,8 9 10 11 12 7 5 6 4
762,0,2,3,,8 9 10 11 12 7 5 6 4 2
763,1,2,3,,8 9 10 11 12 7 5 6 4 2 1
764,0,1,,3,8 9 10 11 12 7 5 6 4 2 1
765,2,0,1,3,8 9 10 11 12 7 5 6 4 2
766,2,1,1,3 2,8 9 10 11 12 7 5 6 4
767,0,1,,3 2 1,8 9 10 11 12 7 5 6 4
768,0,2,,3 2 1,8 9 10 11 12 7 5 6 4
769,1,2,,3 2,8 9 10 11 12 7 5 6 4 1
770,1,0,2,3,8 9 10 11 12 7 5 6 4 1
771,2,0,2 1,3,8 9 10 11 12 7 5 6 4
772,1,2,2 1,,8 9 10 11 12 7 5 6 4 3
773,0,1,2,1,8 9 10 11 12 7 5 6 4 3
774,0,2,,1,8 9 10 11 12 7 5 6 4 3 2
775,1,2,,,8 9 10 11 12 7 5 6 4 3 2 1
776,0,1,,1,8 9 10 11 12 7 5 6 4 3 2
777,0,2,,,8 9 10 11 12 7 5 6 4 3 2 1
778,0,1,1,,8 9 10 11 12 7 5 6 4 3 2
779,0,2,,,8 9 10 11 12 7 5 6 4 3 2 1
780,0,1,,1,8 9 10 11 12 7 5 6 4 3 2
781,2,0,1,1,8 9 10 11 12 7 5 6 4 3
782,2,1,1,1 2,8 9 10 11 12 7 5 6 4
783,0,1,,1 2 1,8 9 10 11 12 7 5 6 4
784,2,0,3,1 2 1,8 9 10 11 12 7 5 6 4
785,1,2,3,1 2,8 9 10 11 12 7 5 6 4 1
786,1,0,3 2,1,8 9 10 11 12 7 5 6 4 1
787,2,0,3 2 1,1,8 9 10 11 12 7 5 6 4
788,1,2,3 2 1,,8 9 10 11 12 7 5 6 4 1
789,0,1,3 2,1,8 9 10 11 12 7 5 6 4 1
790,0,2,3,,8 9 10 11 12 7 5 6 4 1 2
791,1,2,3,,8 9 10 11 12 7 5 6 4 1 2
792,0,1,,3,8 9 10 11 12 7 5 6 4 1 2
793,2,0,1,3,8 9 10 11 12 7 5 6 4 2
794,2,1,1,3 2,8 9 10 11 12 7 5 6 4
795,0,1,,3 2 1,8 9 10 11 12 7 5 6 4
796,2,0,8,3 2 1,9 10 11 12 7 5 6 4
797,1,2,8,3 2,9 10 11 12 7 5 6 4 1
798,1,0,8 2,3,9 10 11 12 7 5 6 4 1
799,2,0,8 2 1,3,9 10 11 12 7 5 6 4
800,1,2,8 2 1,,9 10 11 12 7 5 6 4 3
801,0,1,8 2,1,9 10 11 12 7 5 6 4 3
802,0,2,8,,9 10 11 12 7 5 6 4 3 2
803,1,2,8,,9 10 11 12 7 5 6 4 3 2 1
804,0,1,,8,9 10 11 12 7 5 6 4 3 2 1
805,2,0,1,8,9 10 11 12 7 5 6 4 3 2
806,2,1,1,8 2,9 10 11 12 7 5 6 4 3
807,0,1,,8 2 1,9 10 11 12 7 5 6 4 3
808,2,0,3,8 2 1,9 10 11 12 7 5 6 4
809,1,2,3,8 2,9 10 11 12 7 5 6 4 1
810,1,0,3 2,8,9 10 11 12 7 5 6 4 1
811,2,0,3 2 1,8,9 10 11 12 7 5 6 4
812,1,2,3 2 1,,9 10 11 12 7 5 6 4 8
813,0,1,3 2,1,9 10 11 12 7 5 6 4 8
814,0,2,3,,9 10 11 12 7 5 6 4 8 2
815,1,2,3,,9 10 11 12 7 5 6 4 8 2 1
816,0,1,,3,9 10 11 12 7 5 6 4 8 2 1
817,2,0,1,3,9 10 11 12 7 5 6 4 8 2
818,2,1,1,3 2,9 10 11 12 7 5 6 4 8
819,0,1,,3 2 1,9 10 11 12 7 5 6 4 8
820,2,0,7,3 2 1,9 10 11 12 5 6 4 8
821,1,2,7,3 2,9 10 11 12 5 6 4 8 1
822,1,0,7 2,3,9 10 11 12 5 6 4 8 1
823,2,0,7 2 1,3,9 10 11 12 5 6 4 8
824,1,2,7 2 1,,9 10 11 12 5 6 4 8 3
825,0,1,7 2,1,9 10 11 12 5 6 4 8 3
826,0,2,7,,9 10 11 12 5 6 4 8 3 2
827,1,2,7,,9 10 11 12 5 6 4 8 3 2 1
828,0,1,,7,9 10 11 12 5 6 4 8 3 2 1
829,2,0,1,7,9 10 11 12 5 6 4 8 3 2
830,2,1,1,7 2,9 10 11 12 5 6 4 8 3
831,0,1,,7 2 1,9 10 11 12 5 6 4 8 3
832,2,0,3,7 2 1,9 10 11 12 5 6 4 8
833,1,2,3,7 2,9 10 11 12 5 6 4 8 1
834,1,0,3 2,7,9 10 11 12 5 6 4 8 1
835,2,0,3 2 1,7,9 10 11 12 5 6 4 8
836,1,2,3 2 1,,9 10 11 12 5 6 4 8 7
837,0,1,3 2,1,9 10 11 12 5 6 4 8 7
838,0,2,3,,9 10 11 12 5 6 4 8 7 2
839,1,2,3,,9 10 11 12 5 6 4 8 7 2 1
840,0,1,,3,9 10 11 12 5 6 4 8 7 2 1
841,2,0,1,3,9 10 11 12 5 6 4 8 7 2
842,2,1,1,3 2,9 10 11 12 5 6 4 8 7
843,0,1,,3 2 1,9 10 11 12 5 6 4 8 7
844,2,0,6,3 2 1,9 10 11 12 5 4 8 7
845,1,2,6,3 2,9 10 11 12 5 4 8 7 1
846,1,0,6 2,3,9 10 11 12 5 4 8 7 1
847,2,0,6 2 1,3,9 10 11 12 5 4 8 7
848,1,2,6 2 1,,9 10 11 12 5 4 8 7 3
849,0,1,6 2,1,9 10 11 12 5 4 8 7 3
850,0,2,6,,9 10 11 12 5 4 8 7 3 2
851,1,2,6,,9 10 11 12 5 4 8 7 3 2 1
852,0,1,,6,9 10 11 12 5 4 8 7 3 2 1
853,2,0,1,6,9 10 11 12 5 4 8 7 3 2
854,2,1,1,6 2,9 10 11 12 5 4 8 7 3
855,0,1,,6 2 1,9 10 11 12 5 4 8 7 3
856,2,0,3,6 2 1,9 10 11 12 5 4 8 7
857,1,2,3,6 2,9 10 11 12 5 4 8 7 1
858,1,0,3 2,6,9 10 11 12 5 4 8 7 1
859,2,0,3 2 1,6,9 10 11 12 5 4 8 7
860,1,2,3 2 1,,9 10 11 12 5 4 8 7 6
861,0,1,3 2,1,9 10 11 12 5 4 8 7 6
862,0,2,3,,9 10 11 12 5 4 8 7 6 2
863,1,2,3,,9 10 11 12 5 4 8 7 6 2 1
864,0,1,,3,9 10 11 12 5 4 8 7 6 2 1
865,2,0,1,3,9 10 11 12 5 4 8 7 6 2
866,2,1,1,3 2,9 10 11 12 5 4 8 7 6
867,0,1,,3 2 1,9 10 11 12 5 4 8 7 6
868,2,0,5,3 2 1,9 10 11 12 4 8 7 6
869,1,2,5,3 2,9 10 11 12 4 8 7 6 1
870,1,0,5 2,3,9 10 11 12 4 8 7 6 1
871,2,0,5 2 1,3,9 10 11 12 4 8 7 6
872,1,2,5 2 1,,9 10 11 12 4 8 7 6 3
873,0,1,5 2,1,9 10 11 12 4 8 7 6 3
874,0,2,5,,9 10 11 12 4 8 7 6 3 2
875,1,2,5,,9 10 11 12 4 8 7 6 3 2 1
876,0,1,,5,9 10 11 12 4 8 7 6 3 2 1
877,2,0,1,5,9 10 11 12 4 8 7 6 3 2
878,2,1,1,5 2,9 10 11 12 4 8 7 6 3
879,0,1,,5 2 1,9 10 11 12 4 8 7 6 3
880,2,0,3,5 2 1,9 10 11 12 4 8 7 6
881,1,2,3,5 2,9 10 11 12 4 8 7 6 1
882,1,0,3 2,5,9 10 11 12 4 8 7 6 1
883,2,0,3 2 1,5,9 10 11 12 4 8 7 6
884,1,2,3 2 1,,9 10 11 12 4 8 7 6 5
885,0,1,3 2,1,9 10 11 12 4 8 7 6 5
886,0,2,3,,9 10 11 12 4 8 7 6 5 2
887,1,2,3,,9 10 11 12 4 8 7 6 5 2 1
888,0,1,,3,9 10 11 12 4 8 7 6 5 2 1
889,2,0,1,3,9 10 11 12 4 8 7 6 5 2
890,2,1,1,3 2,9 10 11 12 4 8 7 6 5
891,0,1,,3 2 1,9 10 11 12 4 8 7 6 5
892,2,0,4,3 2 1,9 10 11 12 8 7 6 5
893,1,2,4,3 2,9 10 11 12 8 7 6 5 1
894,1,0,4 2,3,9 10 11 12 8 7 6 5 1
895,2,0,4 2 1,3,9 10 11 12 8 7 6 5
896,1,2,4 2 1,,9 10 11 12 8 7 6 5 3
897,0,1,4 2,1,9 10 11 12 8 7 6 5 3
898,0,2,4,,9 10 11 12 8 7 6 5 3 2
899,1,2,4,,9 10 11 12 8 7 6 5 3 2 1
900,0,1,,4,9 10 11 12 8 7 6 5 3 2 1
901,2,0,1,4,9 10 11 12 8 7 6 5 3 2
902,2,1,1,4 2,9 10 11 12 8 7 6 5 3
903,0,1,,4 2 1,9 10 11 12 8 7 6 5 3
904,2,0,3,4 2 1,9 10 11 12 8 7 6 5
905,1,2,3,4 2,9 10 11 12 8 7 6 5 1
906,1,0,3 2,4,9 10 11 12 8 7 6 5 1
907,2,0,3 2 1,4,9 10 11 12 8 7 6 5
908,1,2,3 2 1,,9 10 11 12 8 7 6 5 4
909,0,1,3 2,1,9 10 11 12 8 7 6 5 4
910,0,2,3,,9 10 11 12 8 7 6 5 4 2
911,1,2,3,,9 10 11 12 8 7 6 5 4 2 1
912,0,1,,3,9 10 11 12 8 7 6 5 4 2 1
913,2,0,1,3,9 10 11 12 8 7 6 5 4 2
914,2,1,1,3 2,9 10 11 12 8 7 6 5 4
915,0,1,,3 2 1,9 10 11 12 8 7 6 5 4
916,0,2,,3 2 1,9 10 11 12 8 7 6 5 4
917,1,2,,3 2,9 10 11 12 8 7 6 5 4 1
918,1,0,2,3,9 10 11 12 8 7 6 5 4 1
919,2,0,2 1,3,9 10 11 12 8 7 6 5 4
920,1,2,2 1,,9 10 11 12 8 7 6 5 4 3
921,0,1,2,1,9 10 11 12 8 7 6 5 4 3
922,0,2,,1,9 10 11 12 8 7 6 5 4 3 2
923,1,2,,,9 10 11 12 8 7 6 5 4 3 2 1
924,0,1,,1,9 10 11 12 8 7 6 5 4 3 2
925,0,2,,,9 10 11 12 8 7 6 5 4 3 2 1
926,0,1,1,,9 10 11 12 8 7 6 5 4 3 2
927,0,2,,,9 10 11 12 8 7 6 5 4 3 2 1
928,0,1,,1,9 10 11 12 8 7 6 5 4 3 2
929,2,0,1,1,9 10 11 12 8 7 6 5 4 3
930,2,1,1,1 2,9 10 11 12 8 7 6 5 4
931,0,1,,1 2 1,9 10 11 12 8 7 6 5 4
932,2,0,3,1 2 1,9 10 11 12 8 7 6 5 4
933,1,2,3,1 2,9 10 11 12 8 7 6 5 4 1
934,1,0,3 2,1,9 10 11 12 8 7 6 5 4 1
935,2,0,3 2 1,1,9 10 11 12 8 7 6 5 4
936,1,2,3 2 1,,9 10 11 12 8 7 6 5 4 1
937,0,1,3 2,1,9 10 11 12 8 7 6 5 4 1
938,0,2,3,,9 10 11 12 8 7 6 5 4 1 2
939,1,2,3,,9 10 11 12 8 7 6 5 4 1 2
940,0,1,,3,9 10 11 12 8 7 6 5 4 1 2
941,2,0,1,3,9 10 11 12 8 7 6 5 4 2
942,2,1,1,3 2,9 10 11 12 8 7 6 5 4
943,0,1,,3 2 1,9 10 11 12 8 7 6 5 4
944,2,0,7,3 2 1,9 10 11 12 8 6 5 4
945,1,2,7,3 2,9 10 11 12 8 6 5 4 1
946,1,0,7 2,3,9 10 11 12 8 6 5 4 1
947,2,0,7 2 1,3,9 10 11 12 8 6 5 4
948,1,2,7 2 1,,9 10 11 12 8 6 5 4 3
949,0,1,7 2,1,9 10 11 12 8 6 5 4 3
950,0,2,7,,9 10 11 12 8 6 5 4 3 2
951,1,2,7,,9 10 11 12 8 6 5 4 3 2 1
952,0,1,,7,9 10 11 12 8 6 5 4 3 2 1
953,2,0,1,7,9 10 11 12 8 6 5 4 3 2
954,2,1,1,7 2,9 10 11 12 8 6 5 4 3
955,0,1,,7 2 1,9 10 11 12 8 6 5 4 3
956,2,0,3,7 2 1,9 10 11 12 8 6 5 4
957,1,2,3,7 2,9 10 11 12 8 6 5 4 1
958,1,0,3 2,7,9 10 11 12 8 6 5 4 1
959,2,0,3 2 1,7,9 10 11 12 8 6 5 4
960,1,2,3 2 1,,9 10 11 12 8 6 5 4 7
961,0,1,3 2,1,9 10 11 12 8 6 5 4 7
962,0,2,3,,9 10 11 12 8 6 5 4 7 2
963,1,2,3,,9 10 11 12 8 6 5 4 7 2 1
964,0,1,,3,9 10 11 12 8 6 5 4 7 2 1
965,2,0,1,3,9 10 11 12 8 6 5 4 7 2
966,2,1,1,3 2,9 10 11 12 8 6 5 4 7
967,0,1,,3 2 1,9 10 11 12 8 6 5 4 7
968,2,0,6,3 2 1,9 10 11 12 8 5 4 7
969,1,2,6,3 2,9 10 11 12 8 5 4 7 1
970,1,0,6 2,3,9 10 11 12 8 5 4 7 1
971,2,0,6 2 1,3,9 10 11 12 8 5 4 7
972,1,2,6 2 1,,9 10 11 12 8 5 4 7 3
973,0,1,6 2,1,9 10 11 12 8 5 4 7 3
974,0,2,6,,9 10 11 12 8 5 4 7 3 2
975,1,2,6,,9 10 11 12 8 5 4 7 3 2 1
976,0,1,,6,9 10 11 12 8 5 4 7 3 2 1
977,2,0,1,6,9 10 11 12 8 5 4 7 3 2
978,2,1,1,6 2,9 10 11 12 8 5 4 7 3
979,0,1,,6 2 1,9 10 11 12 8 5 4 7 3
980,2,0,3,6 2 1,9 10 11 12 8 5 4 7
981,1,2,3,6 2,9 10 11 12 8 5 4 7 1
982,1,0,3 2,6,9 10 11 12 8 5 4 7 1
983,2,0,3 2 1,6,9 10 11 12 8 5 4 7
984,1,2,3 2 1,,9 10 11 12 8 5 4 7 6
985,0,1,3 2,1,9 10 11 12 8 5 4 7 6
986,0,2,3,,9 10 11 12 8 5 4 7 6 2
987,1,2,3,,9 10 11 12 8 5 4 7 6 2 1
988,0,1,,3,9 10 11 12 8 5 4 7 6 2 1
989,2,0,1,3,9 10 11 12 8 5 4 7 6 2
990,2,1,1,3 2,9 10 11 12 8 5 4 7 6
991,0,1,,3 2 1,9 10 11 12 8 5 4 7 6
992,2,0,5,3 2 1,9 10 11 12 8 4 7 6
993,1,2,5,3 2,9 10 11 12 8 4 7 6 1
994,1,0,5 2,3,9 10 11 12 8 4 7 6 1
995,2,0,5 2 1,3,9 10 11 12 8 4 7 6
996,1,2,5 2 1,,9 10 11 12 8 4 7 6 3
997,0,1,5 2,1,9 10 11 12 8 4 7 6 3
998,0,2,5,,9 10 11 12 8 4 7 6 3 2
999,1,2,5,,9 10 11 12 8 4 7 6 3 2 1
1000,0,1,,5,9 10 11 12 8 4 7 6 3 2 1
1001,2,0,1,5,9 10 11 12 8 4 7 6 3 2
1002,2,1,1,5 2,9 10 11 12 8 4 7 6 3
1003,0,1,,5 2 1,9 10 11 12 8 4 7 6 3
1004,2,0,3,5 2 1,9 10 11 12 8 4 7 6
1005,1,2,3,5 2,9 10 11 12 8 4 7 6 1
1006,1,0,3 2,5,9 10 11 12 8 4 7 6 1
1007,2,0,3 2 1,5,9 10 11 12 8 4 7 6
1008,1,2,3 2 1,,9 10 11 12 8 4 7 6 5
1009,0,1,3 2,1,9 10 11 12 8 4 7 6 5
1010,0,2,3,,9 10 11 12 8 4 7 6 5 2
1011,1,2,3,,9 10 11 12 8 4 7 6 5 2 1
1012,0,1,,3,9 10 11 12 8 4 7 6 5 2 1
1013,2,0,1,3,9 10 11 12 8 4 7 6 5 2
1014,2,1,1,3 2,9 10 11 12 8 4 7 6 5
1015,0,1,,3 2 1,9 10 11 12 8 4 7 6 5
1016,2,0,4,3 2 1,9 10 11 12 8 7 6 5
1017,1,2,4,3 2,9 10 11 12 8 7 6 5 1
1018,1,0,4 2,3,9 10 11 12 8 7 6 5 1
1019,2,0,4 2 1,3,9 10 11 12 8 7 6 5
1020,1,2,4 2 1,,9 10 11 12 8 7 6 5 3
1021,0,1,4 2,1,9 10 11 12 8 7 6 5 3
1022,0,2,4,,9 10 11 12 8 7 6 5 3 2
1023,1,2,4,,9 10 11 12 8 7 6 5 3 2 1
1024,0,1,,4,9 10 11 12 8 7 6 5 3 2 1
1025,2,0,1,4,9 10 11 12 8 7 6 5 3 2
1026,2,1,1,4 2,9 10 11 12 8 7 6 5 3
1027,0,1,,4 2 1,9 10 11 12 8 7 6 5 3
1028,2,0,3,4 2 1,9 10 11 12 8 7 6 5
1029,1,2,3,4 2,9 10 11 12 8 7 6 5 1
1030,1,0,3 2,4,9 10 11 12 8 7 6 5 1
1031,2,0,3 2 1,4,9 10 11 12 8 7 6 5
1032,1,2,3 2 1,,9 10 11 12 8 7 6 5 4
1033,0,1,3 2,1,9 10 11 12 8 7 6 5 4
1034,0,2,3,,9 10 11 12 8 7 6 5 4 2
1035,1,2,3,,9 10 11 12 8 7 6 5 4 2 1
1036,0,1,,3,9 10 11 12 8 7 6 5 4 2 1
1037,2,0,1,3,9 10 11 12 8 7 6 5 4 2
1038,2,1,1,3 2,9 10 11 12 8 7 6 5 4
1039,0,1,,3 2 1,9 10 11 12 8 7 6 5 4
1040,0,2,,3 2 1,9 10 11 12 8 7 6 5 4
1041,1,2,,3 2,9 10 11 12 8 7 6 5 4 1
1042,1,0,2,3,9 10 11 12 8 7 6 5 4 1
1043,2,0,2 1,3,9 10 11 12 8 7 6 5 4
1044,1,2,2 1,,9 10 11 12 8 7 6 5 4 3
1045,0,1,2,1,9 10 11 12 8 7 6 5 4 3
1046,0,2,,1,9 10 11 12 8 7 6 5 4 3 2
1047,1,2,,,9 10 11 12 8 7 6 5 4 3 2 1
1048,0,1,,1,9 10 11 12 8 7 6 5 4 3 2
1049,0,2,,,9 10 11 12 8 7 6 5 4 3 2 1
1050,0,1,1,,9 10 11 12 8 7 6 5 4 3 2
1051,0,2,,,9 10 11 12 8 7 6 5 4 3 2 1
1052,0,1,,1,9 10 11 12 8 7 6 5 4 3 2
1053,2,0,1,1,9 10 11 12 8 7 6 5 4 3
1054,2,1,1,1 2,9 10 11 12 8 7 6 5 4
1055,0,1,,1 2 1,9 10 11 12 8 7 6 5 4
1056,2,0,3,1 2 1,9 10 11 12 8 7 6 5 4
1057,1,2,3,1 2,9 10 11 12 8 7 6 5 4 1
1058,1,0,3 2,1,9 10 11 12 8 7 6 5 4 1
1059,2,0,3 2 1,1,9 10 11 12 8 7 6 5 4
1060,1,2,3 2 1,,9 10 11 12 8 7 6 5 4 1
1061,0,1,3 2,1,9 10 11 12 8 7 6 5 4 1
1062,0,2,3,,9 10 11 12 8 7 6 5 4 1 2
1063,1,2,3,,9 10 11 12 8 7 6 5 4 1 2
1064,0,1,,3,9 10 11 12 8 7 6 5 4 1 2
1065,2,0,1,3,9 10 11 12 8 7 6 5 4 2
1066,2,1,1,3 2,9 10 11 12 8 7 6 5 4
1067,0,1,,3 2 1,9 10 11 12 8 7 6 5 4
1068,2,0,9,3 2 1,10 11 12 8 7 6 5 4
1069,1,2,9,3 2,10 11 12 8 7 6 5 4 1
1070,1,0,9 2,3,10 11 12 8 7 6 5 4 1
1071,2,0,9 2 1,3,10 11 12 8 7 6 5 4
1072,1,2,9 2 1,,10 11 12 8 7 6 5 4 3
1073,0,1,9 2,1,10 11 12 8 7 6 5 4 3
1074,0,2,9,,10 11 12 8 7 6 5 4 3 2
1075,1,2,9,,10 11 12 8 7 6 5 4 3 2 1
1076,0,1,,9,10 11 12 8 7 6 5 4 3 2 1
1077,2,0,1,9,10 11 12 8 7 6 5 4 3 2
1078,2,1,1,9 2,10 11 12 8 7 6 5 4 3
1079,0,1,,9 2 1,10 11 12 8 7 6 5 4 3
1080,2,0,3,9 2 1,10 11 12 8 7 6 5 4
1081,1,2,3,9 2,10 11 12 8 7 6 5 4 1
1082,1,0,3 2,9,10 11 12 8 7 6 5 4 1
1083,2,0,3 2 1,9,10 11 12 8 7 6 5 4
1084,1,2,3 2 1,,10 11 12 8 7 6 5 4 9
1085,0,1,3 2,1,10 11 12 8 7 6 5 4 9
1086,0,2,3,,10 11 12 8 7 6 5 4 9 2
1087,1,2,3,,10 11 12 8 7 6 5 4 9 2 1
1088,0,1,,3,10 11 12 8 7 6 5 4 9 2 1
1089,2,0,1,3,10 11 12 8 7 6 5 4 9 2
1090,2,1,1,3 2,10 11 12 8 7 6 5 4 9
1091,0,1,,3 2 1,10 11 12 8 7 6 5 4 9
1092,2,0,8,3 2 1,10 11 12 7 6 5 4 9
1093,1,2,8,3 2,10 11 12 7 6 5 4 9 1
1094,1,0,8 2,3,10 11 12 7 6 5 4 9 1
1095,2,0,8 2 1,3,10 11 12 7 6 5 4 9
1096,1,2,8 2 1,,10 11 12 7 6 5 4 9 3
1097,0,1,8 2,1,10 11 12 7 6 5 4 9 3
1098,0,2,8,,10 11 12 7 6 5 4 9 3 2
1099,1,2,8,,10 11 12 7 6 5 4 9 3 2 1
1100,0,1,,8,10 11 12 7 6 5 4 9 3 2 1
1101,2,0,1,8,10 11 12 7 6 5 4 9 3 2
1102,2,1,1,8 2,10 11 12 7 6 5 4 9 3
1103,0,1,,8 2 1,10 11 12 7 6 5 4 9 3
1104,2,0,3,8 2 1,10 11 12 7 6 5 4 9
1105,1,2,3,8 2,10 11 12 7 6 5 4 9 1
1106,1,0,3 2,8,10 11 12 7 6 5 4 9 1
1107,2,0,3 2 1,8,10 11 12 7 6 5 4 9
1108,1,2,3 2 1,,10 11 12 7 6 5 4 9 8
1109,0,1,3 2,1,10 11 12 7 6 5 4 9 8
1110,0,2,3,,10 11 12 7 6 5 4 9 8 2
1111,1,2,3,,10 11 12 7 6 5 4 9 8 2 1
1112,0,1,,3,10 11 12 7 6 5 4 9 8 2 1
1113,2,0,1,3,10 11 12 7 6 5 4 9 8 2
1114,2,1,1,3 2,10 11 12 7 6 5 4 9 8
1115,0,1,,3 2 1,10 11 12 7 6 5 4 9 8
1116,2,0,7,3 2 1,10 11 12 6 5 4 9 8
1117,1,2,7,3 2,10 11 12 6 5 4 9 8 1
1118,1,0,7 2,3,10 11 12 6 5 4 9 8 1
1119,2,0,7 2 1,3,10 11 12 6 5 4 9 8
1120,1,2,7 2 1,,10 11 12 6 5 4 9 8 3
1121,0,1,7 2,1,10 11 12 6 5 4 9 8 3
1122,0,2,7,,10 11 12 6 5 4 9 8 3 2
1123,1,2,7,,10 11 12 6 5 4 9 8 3 2 1
1124,0,1,,7,10 11 12 6 5 4 9 8 3 2 1
1125,2,0,1,7,10 11 12 6 5 4 9 8 3 2
1126,2,1,1,7 2,10 11 12 6 5 4 9 8 3
1127,0,1,,7 2 1,10 11 12 6 5 4 9 8 3
1128,2,0,3,7 2 1,10 11 12 6 5 4 9 8
1129,1,2,3,7 2,10 11 12 6 5 4 9 8 1
1130,1,0,3 2,7,10 11 12 6 5 4 9 8 1
1131,2,0,3 2 1,7,10 11 12 6 5 4 9 8
1132,1,2,3 2 1,,10 11 12 6 5 4 9 8 7
1133,0,1,3 2,1,10 11 12 6 5 4 9 8 7
1134,0,2,3,,10 11 12 6 5 4 9 8 7 2
1135,1,2,3,,10 11 12 6 5 4 9 8 7 2 1
1136,0,1,,3,10 11 12 6 5 4 9 8 7 2 1
1137,2,0,1,3,10 11 12 6 5 4 9 8 7 2
1138,2,1,1,3 2,10 11 12 6 5 4 9 8 7
1139,0,1,,3 2 1,10 11 12 6 5 4 9 8 7
1140,2,0,6,3 2 1,10 11 12 5 4 9 8 7
1141,1,2,6,3 2,10 11 12 5 4 9 8 7 1
1142,1,0,6 2,3,10 11 12 5 4 9 8 7 1
1143,2,0,6 2 1,3,10 11 12 5 4 9 8 7
1144,1,2,6 2 1,,10 11 12 5 4 9 8 7 3
1145,0,1,6 2,1,10 11 12 5 4 9 8 7 3
1146,0,2,6,,10 11 12 5 4 9 8 7 3 2
1147,1,2,6,,10 11 12 5 4 9 8 7 3 2 1
1148,0,1,,6,10 11 12 5 4 9 8 7 3 2 1
1149,2,0,1,6,10 11 12 5 4 9 8 7 3 2
1150,2,1,1,6 2,10 11 12 5 4 9 8 7 3
1151,0,1,,6 2 1,10 11 12 5 4 9 8 7 3
1152,2,0,3,6 2 1,10 11 12 5 4 9 8 7
1153,1,2,3,6 2,10 11 12 5 4 9 8 7 1
1154,1,0,3 2,6,10 11 12 5 4 9 8 7 1
1155,2,0,3 2 1,6,10 11 12 5 4 9 8 7
1156,1,2,3 2 1,,10 11 12 5 4 9 8 7 6
1157,0,1,3 2,1,10 11 12 5 4 9 8 7 6
1158,0,2,3,,10 11 12 5 4 9 8 7 6 2
1159,1,2,3,,10 11 12 5 4 9 8 7 6 2 1
1160,0,1,,3,10 11 12 5 4 9 8 7 6 2 1
1161,2,0,1,3,10 11 12 5 4 9 8 7 6 2
1162,2,1,1,3 2,10 11 12 5 4 9 8 7 6
1163,0,1,,3 2 1,10 11 12 5 4 9 8 7 6
1164,2,0,5,3 2 1,10 11 12 4 9 8 7 6
1165,1,2,5,3 2,10 11 12 4 9 8 7 6 1
1166,1,0,5 2,3,10 11 12 4 9 8 7 6 1
1167,2,0,5 2 1,3,10 11 12 4 9 8 7 6
1168,1,2,5 2 1,,10 11 12 4 9 8 7 6 3
1169,0,1,5 2,1,10 11 12 4 9 8 7 6 3
1170,0,2,5,,10 11 12 4 9 8 7 6 3 2
1171,1,2,5,,10 11 12 4 9 8 7 6 3 2 1
1172,0,1,,5,10 11 12 4 9 8 7 6 3 2 1
1173,2,0,1,5,10 11 12 4 9 8 7 6 3 2
1174,2,1,1,5 2,10 11 12 4 9 8 7 6 3
1175,0,1,,5 2 1,10 11 12 4 9 8 7 6 3
1176,2,0,3,5 2 1,10 11 12 4 9 8 7 6
1177,1,2,3,5 2,10 11 12 4 9 8 7 6 1
1178,1,0,3 2,5,10 11 12 4 9 8 7 6 1
1179,2,0,3 2 1,5,10 11 12 4 9 8 7 6
1180,1,2,3 2 1,,10 11 12 4 9 8 7 6 5
1181,0,1,3 2,1,10 11 12 4 9 8 7 6 5
1182,0,2,3,,10 11 12 4 9 8 7 6 5 2
1183,1,2,3,,10 11 12 4 9 8 7 6 5 2 1
1184,0,1,,3,10 11 12 4 9 8 7 6 5 2 1
1185,2,0,1,3,10 11 12 4 9 8 7 6 5 2
1186,2,1,1,3 2,10 11 12 4 9 8 7 6 5
1187,0,1,,3 2 1,10 11 12 4 9 8 7 6 5
1188,2,0,4,3 2 1,10 11 12 9 8 7 6 5
1189,1,2,4,3 2,10 11 12 9 8 7 6 5 1
1190,1,0,4 2,3,10 11 12 9 8 7 6 5 1
1191,2,0,4 2 1,3,10 11 12 9 8 7 6 5
1192,1,2,4 2 1,,10 11 12 9 8 7 6 5 3
1193,0,1,4 2,1,10 11 12 9 8 7 6 5 3
1194,0,2,4,,10 11 12 9 8 7 6 5 3 2
1195,1,2,4,,10 11 12 9 8 7 6 5 3 2 1
1196,0,1,,4,10 11 12 9 8 7 6 5 3 2 1
1197,2,0,1,4,10 11 12 9 8 7 6 5 3 2
1198,2,1,1,4 2,10 11 12 9 8 7 6 5 3
1199,0,1,,4 2 1,10 11 12 9 8 7 6 5 3
1200,2,0,3,4 2 1,10 11 12 9 8 7 6 5
1201,1,2,3,4 2,10 11 12 9 8 7 6 5 1
1202,1,0,3 2,4,10 11 12 9 8 7 6 5 1
1203,2,0,3 2 1,4,10 11 12 9 8 7 6 5
1204,1,2,3 2 1,,10 11 12 9 8 7 6 5 4
1205,0,1,3 2,1,10 11 12 9 8 7 6 5 4
1206,0,2,3,,10 11 12 9 8 7 6 5 4 2
1207,1,2,3,,10 11 12 9 8 7 6 5 4 2 1
1208,0,1,,3,10 11 12 9 8 7 6 5 4 2 1
1209,2,0,1,3,10 11 12 9 8 7 6 5 4 2
1210,2,1,1,3 2,10 11 12 9 8 7 6 5 4
1211,0,1,,3 2 1,10 11 12 9 8 7 6 5 4
1212,0,2,,3 2 1,10 11 12 9 8 7 6 5 4
1213,1,2,,3 2,10 11 12 9 8 7 6 5 4 1
1214,1,0,2,3,10 11 12 9 8 7 6 5 4 1
1215,2,0,2 1,3,10 11 12 9 8 7 6 5 4
1216,1,2,2 1,,10 11 12 9 8 7 6 5 4 3
1217,0,1,2,1,10 11 12 9 8 7 6 5 4 3
1218,0,2,,1,10 11 12 9 8 7 6 5 4 3 2
1219,1,2,,,10 11 12 9 8 7 6 5 4 3 2 1
1220,0,1,,1,10 11 12 9 8 7 6 5 4 3 2
1221,0,2,,,10 11 12 9 8 7 6 5 4 3 2 1
1222,0,1,1,,10 11 12 9 8 7 6 5 4 3 2
1223,0,2,,,10 11 12 9 8 7 6 5 4 3 2 1
1224,0,1,,1,10 11 12 9 8 7 6 5 4 3 2
1225,2,0,1,1,10 11 12 9 8 7 6 5 4 3
1226,2,1,1,1 2,10 11 12 9 8 7 6 5 4
1227,0,1,,1 2 1,10 11 12 9 8 7 6 5 4
1228,2,0,3,1 2 1,10 11 12 9 8 7 6 5 4
1229,1,2,3,1 2,10 11 12 9 8 7 6 5 4 1
1230,1,0,3 2,1,10 11 12 9 8 7 6 5 4 1
1231,2,0,3 2 1,1,10 11 12 9 8 7 6 5 4
1232,1,2,3 2 1,,10 11 12 9 8 7 6 5 4 1
1233,0,1,3 2,1,10 11 12 9 8 7 6 5 4 1
1234,0,2,3,,10 11 12 9 8 7 6 5 4 1 2
1235,1,2,3,,10 11 12 9 8 7 6 5 4 1 2
1236,0,1,,3,10 11 12 9 8 7 6 5 4 1 2
1237,2,0,1,3,10 11 12 9 8 7 6 5 4 2
1238,2,1,1,3 2,10 11 12 9 8 7 6 5 4
1239,0,1,,3 2 1,10 11 12 9 8 7 6 5 4
1240,2,0,8,3 2 1,10 11 12 9 7 6 5 4
1241,1,2,8,3 2,10 11 12 9 7 6 5 4 1
1242,1,0,8 2,3,10 11 12 9 7 6 5 4 1
1243,2,0,8 2 1,3,10 11 12 9 7 6 5 4
1244,1,2,8 2 1,,10 11 12 9 7 6 5 4 3
1245,0,1,8 2,1,10 11 12 9 7 6 5 4 3
1246,0,2,8,,10 11 12 9 7 6 5 4 3 2
1247,1,2,8,,10 11 12 9 7 6 5 4 3 2 1
1248,0,1,,8,10 11 12 9 7 6 5 4 3 2 1
1249,2,0,1,8,10 11 12 9 7 6 5 4 3 2
1250,2,1,1,8 2,10 11 12 9 7 6 5 4 3
1251,0,1,,8 2 1,10 11 12 9 7 6 5 4 3
1252,2,0,3,8 2 1,10 11 12 9 7 6 5 4
1253,1,2,3,8 2,10 11 12 9 7 6 5 4 1
1254,1,0,3 2,8,10 11 12 9 7 6 5 4 1
1255,2,0,3 2 1,8,10 11 12 9 7 6 5 4
1256,1,2,3 2 1,,10 11 12 9 7 6 5 4 8
1257,0,1,3 2,1,10 11 12 9 7 6 5 4 8
1258,0,2,3,,10 11 12 9 7 6 5 4 8 2
1259,1,2,3,,10 11 12 9 7 6 5 4 8 2 1
1260,0,1,,3,10 11 12 9 7 6 5 4 8 2 1
1261,2,0,1,3,10 11 12 9 7 6 5 4 8 2
1262,2,1,1,3 2,10 11 12 9 7 6 5 4 8
1263,0,1,,3 2 1,10 11 12 9 7 6 5 4 8
1264,2,0,7,3 2 1,10 11 12 9 6 5 4 8
1265,1,2,7,3 2,10 11 12 9 6 5 4 8 1
1266,1,0,7 2,3,10 11 12 9 6 5 4 8 1
1267,2,0,7 2 1,3,10 11 12 9 6 5 4 8
1268,1,2,7 2 1,,10 11 12 9 6 5 4 8 3
1269,0,1,7 2,1,10 11 12 9 6 5 4 8 3
1270,0,2,7,,10 11 12 9 6 5 4 8 3 2
1271,1,2,7,,10 11 12 9 6 5 4 8 3 2 1
1272,0,1,,7,10 11 12 9 6 5 4 8 3 2 1
1273,2,0,1,7,10 11 12 9 6 5 4 8 3 2
1274,2,1,1,7 2,10 11 12 9 6 5 4 8 3
1275,0,1,,7 2 1,10 11 12 9 6 5 4 8 3
1276,2,0,3,7 2 1,10 11 12 9 6 5 4 8
1277,1,2,3,7 2,10 11 12 9 6 5 4 8 1
1278,1,0,3 2,7,10 11 12 9 6 5 4 8 1
1279,2,0,3 2 1,7,10 11 12 9 6 5 4 8
1280,1,2,3 2 1,,10 11 12 9 6 5 4 8 7
1281,0,1,3 2,1,10 11 12 9 6 5 4 8 7
1282,0,2,3,,10 11 12 9 6 5 4 8 7 2
1283,1,2,3,,10 11 12 9 6 5 4 8 7 2 1
1284,0,1,,3,10 11 12 9 6 5 4 8 7 2 1
1285,2,0,1,3,10 11 12 9 6 5 4 8 7 2
1286,2,1,1,3 2,10 11 12 9 6 5 4 8 7
1287,0,1,,3 2 1,10 11 12 9 6 5 4 8 7
1288,2,0,6,3 2 1,10 11 12 9 5 4 8 7
1289,1,2,6,3 2,10 11 12 9 5 4 8 7 1
1290,1,0,6 2,3,10 11 12 9 5 4 8 7 1
1291,2,0,6 2 1,3,10 11 12 9 5 4 8 7
1292,1,2,6 2 1,,10 11 12 9 5 4 8 7 3
1293,0,1,6 2,1,10 11 12 9 5 4 8 7 3
1294,0,2,6,,10 11 12 9 5 4 8 7 3 2
1295,1,2,6,,10 11 12 9 5 4 8 7 3 2 1
1296,0,1,,6,10 11 12 9 5 4 8 7 3 2 1
1297,2,0,1,6,10 11 12 9 5 4 8 7 3 2
1298,2,1,1,6 2,10 11 12 9 5 4 8 7 3
1299,0,1,,6 2 1,10 11 12 9 5 4 8 7 3
1300,2,0,3,6 2 1,10 11 12 9 5 4 8 7
1301,1,2,3,6 2,10 11 12 9 5 4 8 7 1
1302,1,0,3 2,6,10 11 12 9 5 4 8 7 1
1303,2,0,3 2 1,6,10 11 12 9 5 4 8 7
1304,1,2,3 2 1,,10 11 12 9 5 4 8 7 6
1305,0,1,3 2,1,10 11 12 9 5 4 8 7 6
1306,0,2,3,,10 11 12 9 5 4 8 7 6 2
1307,1,2,3,,10 11 12 9 5 4 8 7 6 2 1
1308,0,1,,3,10 11 12 9 5 4 8 7 6 2 1
1309,2,0,1,3,10 11 12 9 5 4 8 7 6 2
1310,2,1,1,3 2,10 11 12 9 5 4 8 7 6
1311,0,1,,3 2 1,10 11 12 9 5 4 8 7 6
1312,2,0,5,3 2 1,10 11 12 9 4 8 7 6
1313,1,2,5,3 2,10 11 12 9 4 8 7 6 1
1314,1,0,5 2,3,10 11 12 9 4 8 7 6 1
1315,2,0,5 2 1,3,10 11 12 9 4 8 7 6
1316,1,2,5 2 1,,10 11 12 9 4 8 7 6 3
1317,0,1,5 2,1,10 11 12 9 4 8 7 6 3
1318,0,2,5,,10 11 12 9 4 8 7 6 3 2
1319,1,2,5,,10 11 12 9 4 8 7 6 3 2 1
1320,0,1,,5,10 11 12 9 4 8 7 6 3 2 1
1321,2,0,1,5,10 11 12 9 4 8 7 6 3 2
1322,2,1,1,5 2,10 11 12 9 4 8 7 6 3
1323,0,1,,5 2 1,10 11 12 9 4 8 7 6 3
1324,2,0,3,5 2 1,10 11 12 9 4 8 7 6
1325,1,2,3,5 2,10 11 12 9 4 8 7 6 1
1326,1,0,3 2,5,10 11 12 9 4 8 7 6 1
1327,2,0,3 2 1,5,10 11 12 9 4 8 7 6
1328,1,2,3 2 1,,10 11 12 9 4 8 7 6 5
1329,0,1,3 2,1,10 11 12 9 4 8 7 6 5
1330,0,2,3,,10 11 12 9 4 8 7 6 5 2
1331,1,2,3,,10 11 12 9 4 8 7 6 5 2 1
1332,0,1,,3,10 11 12 9 4 8 7 6 5 2 1
1333,2,0,1,3,10 11 12 9 4 8 7 6 5 2
1334,2,1,1,3 2,10 11 12 9 4 8 7 6 5
1335,0,1,,3 2 1,10 11 12 9 4 8 7 6 5
1336,2,0,4,3 2 1,10 11 12 9 8 7 6 5
1337,1,2,4,3 2,10 11 12 9 8 7 6 5 1
1338,1,0,4 2,3,10 11 12 9 8 7 6 5 1
1339,2,0,4 2 1,3,10 11 12 9 8 7 6 5
1340,1,2,4 2 1,,10 11 12 9 8 7 6 5 3
1341,0,1,4 2,1,10 11 12 9 8 7 6 5 3
1342,0,2,4,,10 11 12 9 8 7 6 5 3 2
1343,1,2,4,,10 11 12 9 8 7 6 5 3 2 1
1344,0,1,,4,10 11 12 9 8 7 6 5 3 2 1
1345,2,0,1,4,10 11 12 9 8 7 6 5 3 2
1346,2,1,1,4 2,10 11 12 9 8 7 6 5 3
1347,0,1,,4 2 1,10 11 12 9 8 7 6 5 3
1348,2,0,3,4 2 1,10 11 12 9 8 7 6 5
1349,1,2,3,4 2,10 11 12 9 8 7 6 5 1
1350,1,0,3 2,4,10 11 12 9 8 7 6 5 1
1351,2,0,3 2 1,4,10 11 12 9 8 7 6 5
1352,1,2,3 2 1,,10 11 12 9 8 7 6 5 4
1353,0,1,3 2,1,10 11 12 9 8 7 6 5 4
1354,0,2,3,,10 11 12 9 8 7 6 5 4 2
1355,1,2,3,,10 11 12 9 8 7 6 5 4 2 1
1356,0,1,,3,10 11 12 9 8 7 6 5 4 2 1
1357,2,0,1,3,10 11 12 9 8 7 6 5 4 2
1358,2,1,1,3 2,10 11 12 9 8 7 6 5 4
1359,0,1,,3 2 1,10 11 12 9 8 7 6 5 4
1360,0,2,,3 2 1,10 11 12 9 8 7 6 5 4
1361,1,2,,3 2,10 11 12 9 8 7 6 5 4 1
1362,1,0,2,3,10 11 12 9 8 7 6 5 4 1
1363,2,0,2 1,3,10 11 12 9 8 7 6 5 4
1364,1,2,2 1,,10 11 12 9 8 7 6 5 4 3
1365,0,1,2,1,10 11 12 9 8 7 6 5 4 3
1366,0,2,,1,10 11 12 9 8 7 6 5 4 3 2
1367,1,2,,,10 11 12 9 8 7 6 5 4 3 2 1
1368,0,1,,1,10 11 12 9 8 7 6 5 4 3 2
1369,0,2,,,10 11 12 9 8 7 6 5 4 3 2 1
1370,0,1,1,,10 11 12 9 8 7 6 5 4 3 2
1371,0,2,,,10 11 12 9 8 7 6 5 4 3 2 1
1372,0,1,,1,10 11 12 9 8 7 6 5 4 3 2
1373,2,0,1,1,10 11 12 9 8 7 6 5 4 3
1374,2,1,1,1 2,10 11 12 9 8 7 6 5 4
1375,0,1,,1 2 1,10 11 12 9 8 7 6 5 4
1376,2,0,3,1 2 1,10 11 12 9 8 7 6 5 4
1377,1,2,3,1 2,10 11 12 9 8 7 6 5 4 1
1378,1,0,3 2,1,10 11 12 9 8 7 6 5 4 1
1379,2,0,3 2 1,1,10 11 12 9 8 7 6 5 4
1380,1,2,3 2 1,,10 11 12 9 8 7 6 5 4 1
1381,0,1,3 2,1,10 11 12 9 8 7 6 5 4 1
1382,0,2,3,,10 11 12 9 8 7 6 5 4 1 2
1383,1,2,3,,10 11 12 9 8 7 6 5 4 1 2
1384,0,1,,3,10 11 12 9 8 7 6 5 4 1 2
1385,2,0,1,3,10 11 12 9 8 7 6 5 4 2
1386,2,1,1,3 2,10 11 12 9 8 7 6 5 4
1387,0,1,,3 2 1,10 11 12 9 8 7 6 5 4
1388,2,0,10,3 2 1,11 12 9 8 7 6 5 4
1389,1,2,10,3 2,11 12 9 8 7 6 5 4 1
1390,1,0,10 2,3,11 12 9 8 7 6 5 4 1
1391,2,0,10 2 1,3,11 12 9 8 7 6 5 4
1392,1,2,10 2 1,,11 12 9 8 7 6 5 4 3
1393,0,1,10 2,1,11 12 9 8 7 6 5 4 3
1394,0,2,10,,11 12 9 8 7 6 5 4 3 2
1395,1,2,10,,11 12 9 8 7 6 5 4 3 2 1
1396,0,1,,10,11 12 9 8 7 6 5 4 3 2 1
1397,2,0,1,10,11 12 9 8 7 6 5 4 3 2
1398,2,1,1,10 2,11 12 9 8 7 6 5 4 3
1399,0,1,,10 2 1,11 12 9 8 7 6 5 4 3
1400,2,0,3,10 2 1,11 12 9 8 7 6 5 4
1401,1,2,3,10 2,11 12 9 8 7 6 5 4 1
1402,1,0,3 2,10,11 12 9 8 7 6 5 4 1
1403,2,0,3 2 1,10,11 12 9 8 7 6 5 4
1404,1,2,3 2 1,,11 12 9 8 7 6 5 4 10
1405,0,1,3 2,1,11 12 9 8 7 6 5 4 10
1406,0,2,3,,11 12 9 8 7 6 5 4 10 2
1407,1,2,3,,11 12 9 8 7 6 5 4 10 2 1
1408,0,1,,3,11 12 9 8 7 6 5 4 10 2 1
1409,2,0,1,3,11 12 9 8 7 6 5 4 10 2
1410,2,1,1,3 2,11 12 9 8 7 6 5 4 10
1411,0,1,,3 2 1,11 12 9 8 7 6 5 4 10
1412,2,0,9,3 2 1,11 12 8 7 6 5 4 10
1413,1,2,9,3 2,11 12 8 7 6 5 4 10 1
1414,1,0,9 2,3,11 12 8 7 6 5 4 10 1
1415,2,0,9 2 1,3,11 12 8 7 6 5 4 10
1416,1,2,9 2 1,,11 12 8 7 6 5 4 10 3
1417,0,1,9 2,1,11 12 8 7 6 5 4 10 3
1418,0,2,9,,11 12 8 7 6 5 4 10 3 2
1419,1,2,9,,11 12 8 7 6 5 4 10 3 2 1
1420,0,1,,9,11 12 8 7 6 5 4 10 3 2 1
1421,2,0,1,9,11 12 8 7 6 5 4 10 3 2
1422,2,1,1,9 2,11 12 8 7 6 5 4 10 3
1423,0,1,,9 2 1,11 12 8 7 6 5 4 10 3
1424,2,0,3,9 2 1,11 12 8 7 6 5 4 10
1425,1,2,3,9 2,11 12 8 7 6 5 4 10 1
1426,1,0,3 2,9,11 12 8 7 6 5 4 10 1
1427,2,0,3 2 1,9,11 12 8 7 6 5 4 10
1428,1,2,3 2 1,,11 12 8 7 6 5 4 10 9
1429,0,1,3 2,1,11 12 8 7 6 5 4 10 9
1430,0,2,3,,11 12 8 7 6 5 4 10 9 2
1431,1,2,3,,11 12 8 7 6 5 4 10 9 2 1
1432,0,1,,3,11 12 8 7 6 5 4 10 9 2 1
1433,2,0,1,3,11 12 8 7 6 5 4 10 9 2
1434,2,1,1,3 2,11 12 8 7 6 5 4 10 9
1435,0,1,,3 2 1,11 12 8 7 6 5 4 10 9
1436,2,0,8,3 2 1,11 12 7 6 5 4 10 9
1437,1,2,8,3 2,11 12 7 6 5 4 10 9 1
1438,1,0,8 2,3,11 12 7 6 5 4 10 9 1
1439,2,0,8 2 1,3,11 12 7 6 5 4 10 9
1440,1,2,8 2 1,,11 12 7 6 5 4 10 9 3
1441,0,1,8 2,1,11 12 7 6 5 4 10 9 3
1442,0,2,8,,11 12 7 6 5 4 10 9 3 2
1443,1,2,8,,11 12 7 6 5 4 10 9 3 2 1
1444,0,1,,8,11 12 7 6 5 4 10 9 3 2 1
1445,2,0,1,8,11 12 7 6 5 4 10 9 3 2
1446,2,1,1,8 2,11 12 7 6 5 4 10 9 3
1447,0,1,,8 2 1,11 12 7 6 5 4 10 9 3
1448,2,0,3,8 2 1,11 12 7 6 5 4 10 9
1449,1,2,3,8 2,11 12 7 6 5 4 10 9 1
1450,1,0,3 2,8,11 12 7 6 5 4 10 9 1
1451,2,0,3 2 1,8,11 12 7 6 5 4 10 9
1452,1,2,3 2 1,,11 12 7 6 5 4 10 9 8
1453,0,1,3 2,1,11 12 7 6 5 4 10 9 8
1454,0,2,3,,11 12 7 6 5 4 10 9 8 2
1455,1,2,3,,11 12 7 6 5 4 10 9 8 2 1
1456,0,1,,3,11 12 7 6 5 4 10 9 8 2 1
1457,2,0,1,3,11 12 7 6 5 4 10 9 8 2
1458,2,1,1,3 2,11 12 7 6 5 4 10 9 8
1459,0,1,,3 2 1,11 12 7 6 5 4 10 9 8
1460,2,0,7,3 2 1,11 12 6 5 4 10 9 8
1461,1,2,7,3 2,11 12 6 5 4 10 9 8 1
1462,1,0,7 2,3,11 12 6 5 4 10 9 8 1
1463,2,0,7 2 1,3,11 12 6 5 4 10 9 8
1464,1,2,7 2 1,,11 12 6 5 4 10 9 8 3
1465,0,1,7 2,1,11 12 6 5 4 10 9 8 3
1466,0,2,7,,11 12 6 5 4 10 9 8 3 2
1467,1,2,7,,11 12 6 5 4 10 9 8 3 2 1
1468,0,1,,7,11 12 6 5 4 10 9 8 3 2 1
1469,2,0,1,7,11 12 6 5 4 10 9 8 3 2
1470,2,1,1,7 2,11 12 6 5 4 10 9 8 3
1471,0,1,,7 2 1,11 12 6 5 4 10 9 8 3
1472,2,0,3,7 2 1,11 12 6 5 4 10 9 8
1473,1,2,3,7 2,11 12 6 5 4 10 9 8 1
1474,1,0,3 2,7,11 12 6 5 4 10 9 8 1
1475,2,0,3 2 1,7,11 12 6 5 4 10 9 8
1476,1,2,3 2 1,,11 12 6 5 4 10 9 8 7
1477,0,1,3 2,1,11 12 6 5 4 10 9 8 7
1478,0,2,3,,11 12 6 5 4 10 9 8 7 2
1479,1,2,3,,11 12 6 5 4 10 9 8 7 2 1
1480,0,1,,3,11 12 6 5 4 10 9 8 7 2 1
1481,2,0,1,3,11 12 6 5 4 10 9 8 7 2
1482,2,1,1,3 2,11 12 6 5 4 10 9 8 7
1483,0,1,,3 2 1,11 12 6 5 4 10 9 8 7
1484,2,0,6,3 2 1,11 12 5 4 10 9 8 7
1485,1,2,6,3 2,11 12 5 4 10 9 8 7 1
1486,1,0,6 2,3,11 12 5 4 10 9 8 7 1
1487,2,0,6 2 1,3,11 12 5 4 10 9 8 7
1488,1,2,6 2 1,,11 12 5 4 10 9 8 7 3
1489,0,1,6 2,1,11 12 5 4 10 9 8 7 3
1490,0,2,6,,11 12 5 4 10 9 8 7 3 2
1491,1,2,6,,11 12 5 4 10 9 8 7 3 2 1
1492,0,1,,6,11 12 5 4 10 9 8 7 3 2 1
1493,2,0,1,6,11 12 5 4 10 9 8 7 3 2
1494,2,1,1,6 2,11 12 5 4 10 9 8 7 3
1495,0,1,,6 2 1,11 12 5 4 10 9 8 7 3
1496,2,0,3,6 2 1,11 12 5 4 10 9 8 7
1497,1,2,3,6 2,11 12 5 4 10 9 8 7 1
1498,1,0,3 2,6,11 12 5 4 10 9 8 7 1
1499,2,0,3 2 1,6,11 12 5 4 10 9 8 7
1500,1,2,3 2 1,,11 12 5 4 10 9 8 7 6
1501,0,1,3 2,1,11 12 5 4 10 9 8 7 6
1502,0,2,3,,11 12 5 4 10 9 8 7 6 2
1503,1,2,3,,11 12 5 4 10 9 8 7 6 2 1
1504,0,1,,3,11 12 5 4 10 9 8 7 6 2 1
1505,2,0,1,3,11 12 5 4 10 9 8 7 6 2
1506,2,1,1,3 2,11 12 5 4 10 9 8 7 6
1507,0,1,,3 2 1,11 12 5 4 10 9 8 7 6
1508,2,0,5,3 2 1,11 12 4 10 9 8 7 6
1509,1,2,5,3 2,11 12 4 10 9 8 7 6 1
1510,1,0,5 2,3,11 12 4 10 9 8 7 6 1
1511,2,0,5 2 1,3,11 12 4 10 9 8 7 6
1512,1,2,5 2 1,,11 12 4 10 9 8 7 6 3
1513,0,1,5 2,1,11 12 4 10 9 8 7 6 3
1514,0,2,5,,11 12 4 10 9 8 7 6 3 2
1515,1,2,5,,11 12 4 10 9 8 7 6 3 2 1
1516,0,1,,5,11 12 4 10 9 8 7 6 3 2 1
1517,2,0,1,5,11 12 4 10 9 8 7 6 3 2
1518,2,1,1,5 2,11 12 4 10 9 8 7 6 3
1519,0,1,,5 2 1,11 12 4 10 9 8 7 6 3
1520,2,0,3,5 2 1,11 12 4 10 9 8 7 6
1521,1,2,3,5 2,11 12 4 10 9 8 7 6 1
1522,1,0,3 2,5,11 12 4 10 9 8 7 6 1
1523,2,0,3 2 1,5,11 12 4 10 9 8 7 6
1524,1,2,3 2 1,,11 12 4 10 9 8 7 6 5
1525,0,1,3 2,1,11 12 4 10 9 8 7 6 5
1526,0,2,3,,11 12 4 10 9 8 7 6 5 2
1527,1,2,3,,11 12 4 10 9 8 7 6 5 2 1
1528,0,1,,3,11 12 4 10 9 8 7 6 5 2 1
1529,2,0,1,3,11 12 4 10 9 8 7 6 5 2
1530,2,1,1,3 2,11 12 4 10 9 8 7 6 5
1531,0,1,,3 2 1,11 12 4 10 9 8 7 6 5
1532,2,0,4,3 2 1,11 12 10 9 8 7 6 5
1533,1,2,4,3 2,11 12 10 9 8 7 6 5 1
1534,1,0,4 2,3,11 12 10 9 8 7 6 5 1
1535,2,0,4 2 1,3,11 12 10 9 8 7 6 5
1536,1,2,4 2 1,,11 12 10 9 8 7 6 5 3
1537,0,1,4 2,1,11 12 10 9 8 7 6 5 3
1538,0,2,4,,11 12 10 9 8 7 6 5 3 2
1539,1,2,4,,11 12 10 9 8 7 6 5 3 2 1
1540,0,1,,4,11 12 10 9 8 7 6 5 3 2 1
1541,2,0,1,4,11 12 10 9 8 7 6 5 3 2
1542,2,1,1,4 2,11 12 10 9 8 7 6 5 3
1543,0,1,,4 2 1,11 12 10 9 8 7 6 5 3
1544,2,0,3,4 2 1,11 12 10 9 8 7 6 5
1545,1,2,3,4 2,11 12 10 9 8 7 6 5 1
1546,1,0,3 2,4,11 12 10 9 8 7 6 5 1
1547,2,0,3 2 1,4,11 12 10 9 8 7 6 5
1548,1,2,3 2 1,,11 12 10 9 8 7 6 5 4
1549,0,1,3 2,1,11 12 10 9 8 7 6 5 4
1550,0,2,3,,11 12 10 9 8 7 6 5 4 2
1551,1,2,3,,11 12 10 9 8 7 6 5 4 2 1
1552,0,1,,3,11 12 10 9 8 7 6 5 4 2 1
1553,2,0,1,3,11 12 10 9 8 7 6 5 4 2
1554,2,1,1,3 2,11 12 10 9 8 7 6 5 4
1555,0,1,,3 2 1,11 12 10 9 8 7 6 5 4
1556,0,2,,3 2 1,11 12 10 9 8 7 6 5 4
1557,1,2,,3 2,11 12 10 9 8 7 6 5 4 1
1558,1,0,2,3,11 12 10 9 8 7 6 5 4 1
1559,2,0,2 1,3,11 12 10 9 8 7 6 5 4
1560,1,2,2 1,,11 12 10 9 8 7 6 5 4 3
1561,0,1,2,1,11 12 10 9 8 7 6 5 4 3
1562,0,2,,1,11 12 10 9 8 7 6 5 4 3 2
1563,1,2,,,11 12 10 9 8 7 6 5 4 3 2 1
1564,0,1,,1,11 12 10 9 8 7 6 5 4 3 2
1565,0,2,,,11 12 10 9 8 7 6 5 4 3 2 1
1566,0,1,1,,11 12 10 9 8 7 6 5 4 3 2
1567,0,2,,,11 12 10 9 8 7 6 5 4 3 2 1
1568,0,1,,1,11 12 10 9 8 7 6 5 4 3 2
1569,2,0,1,1,11 12 10 9 8 7 6 5 4 3
1570,2,1,1,1 2,11 12 10 9 8 7 6 5 4
1571,0,1,,1 2 1,11 12 10 9 8 7 6 5 4
1572,2,0,3,1 2 1,11 12 10 9 8 7 6 5 4
1573,1,2,3,1 2,11 12 10 9 8 7 6 5 4 1
1574,1,0,3 2,1,11 12 10 9 8 7 6 5 4 1
1575,2,0,3 2 1,1,11 12 10 9 8 7 6 5 4
1576,1,2,3 2 1,,11 12 10 9 8 7 6 5 4 1
1577,0,1,3 2,1,11 12 10 9 8 7 6 5 4 1
1578,0,2,3,,11 12 10 9 8 7 6 5 4 1 2
1579,1,2,3,,11 12 10 9 8 7 6 5 4 1 2
1580,0,1,,3,11 12 10 9 8 7 6 5 4 1 2
1581,2,0,1,3,11 12 10 9 8 7 6 5 4 2
1582,2,1,1,3 2,11 12 10 9 8 7 6 5 4
1583,0,1,,3 2 1,11 12 10 9 8 7 6 5 4
1584,2,0,10,3 2 1,11 12 9 8 7 6 5 4
1585,1,2,10,3 2,11 12 9 8 7 6 5 4 1
1586,1,0,10 2,3,11 12 9 8 7 6 5 4 1
1587,2,0,10 2 1,3,11 12 9 8 7 6 5 4
1588,1,2,10 2 1,,11 12 9 8 7 6 5 4 3
1589,0,1,10 2,1,11 12 9 8 7 6 5 4 3
1590,0,2,10,,11 12 9 8 7 6 5 4 3 2
1591,1,2,10,,11 12 9 8 7 6 5 4 3 2 1
1592,0,1,,10,11 12 9 8 7 6 5 4 3 2 1
1593,2,0,1,10,11 12 9 8 7 6 5 4 3 2
1594,2,1,1,10 2,11 12 9 8 7 6 5 4 3
1595,0,1,,10 2 1,11 12 9 8 7 6 5 4 3
1596,2,0,3,10 2 1,11 12 9 8 7 6 5 4
1597,1,2,3,10 2,11 12 9 8 7 6 5 4 1
1598,1,0,3 2,10,11 12 9 8 7 6 5 4 1
1599,2,0,3 2 1,10,11 12 9 8 7 6 5 4
1600,1,2,3 2 1,,11 12 9 8 7 6 5 4 10
1601,0,1,3 2,1,11 12 9 8 7 6 5 4 10
1602,0,2,3,,11 12 9 8 7 6 5 4 10 2
1603,1,2,3,,11 12 9 8 7 6 5 4 10 2 1
1604,0,1,,3,11 12 9 8 7 6 5 4 10 2 1
1605,2,0,1,3,11 12 9 8 7 6 5 4 10 2
1606,2,1,1,3 2,11 12 9 8 7 6 5 4 10
1607,0,1,,3 2 1,11 12 9 8 7 6 5 4 10
1608,2,0,9,3 2 1,11 12 8 7 6 5 4 10
1609,1,2,9,3 2,11 12 8 7 6 5 4 10 1
1610,1,0,9 2,3,11 12 8 7 6 5 4 10 1
1611,2,0,9 2 1,3,11 12 8 7 6 5 4 10
1612,1,2,9 2 1,,11 12 8 7 6 5 4 10 3
1613,0,1,9 2,1,11 12 8 7 6 5 4 10 3
1614,0,2,9,,11 12 8 7 6 5 4 10 3 2
1615,1,2,9,,11 12 8 7 6 5 4 10 3 2 1
1616,0,1,,9,11 12 8 7 6 5 4 10 3 2 1
1617,2,0,1,9,11 12 8 7 6 5 4 10 3 2
1618,2,1,1,9 2,11 12 8 7 6 5 4 10 3
1619,0,1,,9 2 1,11 12 8 7 6 5 4 10 3
1620,2,0,3,9 2 1,11 12 8 7 6 5 4 10
1621,1,2,3,9 2,11 12 8 7 6 5 4 10 1
1622,1,0,3 2,9,11 12 8 7 6 5 4 10 1
1623,2,0,3 2 1,9,11 12 8 7 6 5 4 10
1624,1,2,

