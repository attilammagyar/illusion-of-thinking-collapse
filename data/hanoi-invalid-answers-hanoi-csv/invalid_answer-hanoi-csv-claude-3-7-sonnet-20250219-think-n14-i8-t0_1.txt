# model_name='claude-3-7-sonnet-20250219', reasoning_budget=32000, tries=0, n=14, i=8
# valid_prefix_length=0, is_valid_solution=0, first_correction=-1

<think>
This is the classic Tower of Hanoi problem. The optimal solution for $n$ disks requires $2^n - 1$ moves. In this case, with 14 disks, we would need $2^{14} - 1 = 16,383$ moves.

The recursive solution for the Tower of Hanoi problem is:
1. Move $n-1$ disks from the source peg to the auxiliary peg, using the destination peg as an auxiliary.
2. Move the largest disk (disk $n$) from the source peg to the destination peg.
3. Move the $n-1$ disks from the auxiliary peg to the destination peg, using the source peg as an auxiliary.

Let me implement this recursive algorithm to generate the complete list of moves for 14 disks.

```
function hanoi(n, source, auxiliary, destination, moves=[]) {
    if (n === 1) {
        moves.push([1, source, destination]);
        return moves;
    }
    
    hanoi(n-1, source, destination, auxiliary, moves);
    moves.push([n, source, destination]);
    hanoi(n-1, auxiliary, source, destination, moves);
    
    return moves;
}

const solution = hanoi(14, 0, 1, 2);
```

But let me just do this manually. I'll generate the complete list of moves for 14 disks using the recursive solution.

For 14 disks, moving from peg 0 to peg 2, using peg 1 as auxiliary:

1. First, we need to move 13 disks from peg 0 to peg 1, using peg 2 as auxiliary.
   a. To do this, we need to move 12 disks from peg 0 to peg 2, using peg 1 as auxiliary.
      i. To do this, we need to move 11 disks from peg 0 to peg 1, using peg 2 as auxiliary.
         ...and so on, recursively.

Let me implement the Tower of Hanoi algorithm directly to generate the complete list of moves:

```python
def hanoi(n, source, auxiliary, destination):
    moves = []
    
    def _hanoi(n, source, auxiliary, destination):
        if n == 1:
            moves.append((1, source, destination))
            return
        
        _hanoi(n-1, source, destination, auxiliary)
        moves.append((n, source, destination))
        _hanoi(n-1, auxiliary, source, destination)
    
    _hanoi(n, source, auxiliary, destination)
    return moves

solution = hanoi(14, 0, 1, 2)
```

Wait, I realize I'm making this too complicated. There's a simpler way to generate the solution for the Tower of Hanoi problem.

For $n$ disks, the optimal solution follows a pattern:
- For odd-numbered disks (1, 3, 5, ...), the first move is from the source peg to the destination peg, and then they cycle: destination -> auxiliary -> source -> destination -> ...
- For even-numbered disks (2, 4, 6, ...), the first move is from the source peg to the auxiliary peg, and then they cycle: auxiliary -> destination -> source -> auxiliary -> ...

Let me implement this iterative solution:

```python
def hanoi_iterative(n, source, auxiliary, destination):
    moves = []
    total_moves = 2**n - 1
    
    for i in range(1, total_moves + 1):
        if i % 3 == 1:
            # Move between source and destination
            if n % 2 == 1:
                moves.append((find_disk(i), source, destination))
            else:
                moves.append((find_disk(i), destination, source))
        elif i % 3 == 2:
            # Move between source and auxiliary
            if n % 2 == 1:
                moves.append((find_disk(i), source, auxiliary))
            else:
                moves.append((find_disk(i), auxiliary, source))
        else:  # i % 3 == 0
            # Move between auxiliary and destination
            if n % 2 == 1:
                moves.append((find_disk(i), auxiliary, destination))
            else:
                moves.append((find_disk(i), destination, auxiliary))
    
    return moves

def find_disk(move_number):
    # Function to determine which disk to move on a given move number
    # The disk to move on move `i` is the one corresponding to the largest power of 2 that divides `i`
    i = move_number
    disk = 1
    while i % 2 == 0:
        i //= 2
        disk += 1
    return disk
```

Actually, I think the above approach is incorrect. Let me go back to the recursive algorithm, which is known to be correct.

Actually, let me simplify this approach and be more direct. For the Tower of Hanoi with 14 disks, we need to generate $2^{14} - 1 = 16,383$ moves. Let me generate this sequence using the well-known recursive algorithm:

```
function hanoi(n, source, auxiliary, destination) {
    if (n === 0) return [];
    
    const moves = [];
    
    // Move n-1 disks from source to auxiliary
    moves.push(...hanoi(n-1, source, destination, auxiliary));
    
    // Move the nth disk from source to destination
    moves.push([n, source, destination]);
    
    // Move n-1 disks from auxiliary to destination
    moves.push(...hanoi(n-1, auxiliary, source, destination));
    
    return moves;
}

const solution = hanoi(14, 0, 1, 2);
```

I'll now execute this algorithm to generate the complete list of moves for 14 disks:

For n = 1:
1. Move disk 1 from peg 0 to peg 2 (if n is odd) or peg 1 (if n is even).

For n = 2:
1. Move disk 1 from peg 0 to peg 1 (if n is odd) or peg 2 (if n is even).
2. Move disk 2 from peg 0 to peg 2.
3. Move disk 1 from peg 1 (if n is odd) or peg 2 (if n is even) to peg 2 (if n is odd) or peg 1 (if n is even).

Actually, I think I'm overcomplicating this. Let me just use a simpler recursive approach to generate the moves.

I'll use the following recursive algorithm:
- To move n disks from source to destination using auxiliary:
  1. Move n-1 disks from source to auxiliary using destination.
  2. Move the nth disk from source to destination.
  3. Move n-1 disks from auxiliary to destination using source.

Let me implement this to generate the complete list of moves for 14 disks:

```
def hanoi(n, source, auxiliary, destination, moves=None):
    if moves is None:
        moves = []
    
    if n == 1:
        moves.append((1, source, destination))
        return moves
    
    hanoi(n-1, source, destination, auxiliary, moves)
    moves.append((n, source, destination))
    hanoi(n-1, auxiliary, source, destination, moves)
    
    return moves

solution = hanoi(14, 0, 1, 2)
```

Let me manually trace through this algorithm for a smaller number of disks, say n = 3, to make sure I understand it correctly:

For n = 3, source = 0, auxiliary = 1, destination = 2:
1. hanoi(2, 0, 2, 1, [])
   a. hanoi(1, 0, 1, 2, [])
      i. Add (1, 0, 2) to moves -> moves = [(1, 0, 2)]
   b. Add (2, 0, 1) to moves -> moves = [(1, 0, 2), (2, 0, 1)]
   c. hanoi(1, 2, 0, 1, [(1, 0, 2), (2, 0, 1)])
      i. Add (1, 2, 1) to moves -> moves = [(1, 0, 2), (2, 0, 1), (1, 2, 1)]
2. Add (3, 0, 2) to moves -> moves = [(1, 0, 2), (2, 0, 1), (1, 2, 1), (3, 0, 2)]
3. hanoi(2, 1, 0, 2, [(1, 0, 2), (2, 0, 1), (1, 2, 1), (3, 0, 2)])
   a. hanoi(1, 1, 2, 0, [(1, 0, 2), (2, 0, 1), (1, 2, 1), (3, 0, 2)])
      i. Add (1, 1, 0) to moves -> moves = [(1, 0, 2), (2, 0, 1), (1, 2, 1), (3, 0, 2), (1, 1, 0)]
   b. Add (2, 1, 2) to moves -> moves = [(1, 0, 2), (2, 0, 1), (1, 2, 1), (3, 0, 2), (1, 1, 0), (2, 1, 2)]
   c. hanoi(1, 0, 1, 2, [(1, 0, 2), (2, 0, 1), (1, 2, 1), (3, 0, 2), (1, 1, 0), (2, 1, 2)])
      i. Add (1, 0, 2) to moves -> moves = [(1, 0, 2), (2, 0, 1), (1, 2, 1), (3, 0, 2), (1, 1, 0), (2, 1, 2), (1, 0, 2)]

This gives the solution for 3 disks:
```
disk_id,from_peg,to_peg
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
```

Comparing this to the example solution from the prompt:
```
disk_id,from_peg,to_peg
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
```

Yes, the solution matches the expected output from the prompt.

Now, let me generate the complete solution for 14 disks. The algorithm I provided above is correct, but it might be clearer to use a slightly different notation:

```
def hanoi(n, source, auxiliary, destination):
    moves = []
    
    def _hanoi(n, source, auxiliary, destination):
        if n == 1:
            moves.append((1, source, destination))
            return
        
        _hanoi(n-1, source, destination, auxiliary)
        moves.append((n, source, destination))
        _hanoi(n-1, auxiliary, source, destination)
    
    _hanoi(n, source, auxiliary, destination)
    return moves

solution = hanoi(14, 0, 1, 2)
```

Now, I'll generate the complete list of moves for 14 disks using this algorithm.

Actually, the number of moves for 14 disks is $2^{14} - 1 = 16,383$, which is quite large. It's more practical to derive the solution using the recursive structure rather than enumerating all moves by hand. 

I'll use the recursive algorithm to generate the complete list of moves:

```
def hanoi(n, source, auxiliary, destination):
    if n == 1:
        return [(1, source, destination)]
    
    moves = []
    moves.extend(hanoi(n-1, source, destination, auxiliary))
    moves.append((n, source, destination))
    moves.extend(hanoi(n-1, auxiliary, source, destination))
    
    return moves

solution = hanoi(14, 0, 1, 2)
```

I'll start by providing the first few moves of the solution to validate that the algorithm is correct:

For n = 14, source = 0, auxiliary = 1, destination = 2:
1. hanoi(13, 0, 2, 1)
   a. hanoi(12, 0, 1, 2)
      i. hanoi(11, 0, 2, 1)
         ...and so on, recursively.

It gets very nested very quickly, so let me solve it for a slightly smaller n, say n = 4, to ensure the algorithm is correct:

For n = 4, source = 0, auxiliary = 1, destination = 2:
1. hanoi(3, 0, 2, 1)
   a. hanoi(2, 0, 1, 2)
      i. hanoi(1, 0, 2, 1)
         - Add (1, 0, 1) to moves -> moves = [(1, 0, 1)]
      ii. Add (2, 0, 2) to moves -> moves = [(1, 0, 1), (2, 0, 2)]
      iii. hanoi(1, 1, 0, 2)
         - Add (1, 1, 2) to moves -> moves = [(1, 0, 1), (2, 0, 2), (1, 1, 2)]
   b. Add (3, 0, 1) to moves -> moves = [(1, 0, 1), (2, 0, 2), (1, 1, 2), (3, 0, 1)]
   c. hanoi(2, 2, 0, 1)
      i. hanoi(1, 2, 1, 0)
         - Add (1, 2, 0) to moves -> moves = [(1, 0, 1), (2, 0, 2), (1, 1, 2), (3, 0, 1), (1, 2, 0)]
      ii. Add (2, 2, 1) to moves -> moves = [(1, 0, 1), (2, 0, 2), (1, 1, 2), (3, 0, 1), (1, 2, 0), (2, 2, 1)]
      iii. hanoi(1, 0, 2, 1)
         - Add (1, 0, 1) to moves -> moves = [(1, 0, 1), (2, 0, 2), (1, 1, 2), (3, 0, 1), (1, 2, 0), (2, 2, 1), (1, 0, 1)]
2. Add (4, 0, 2) to moves -> moves = [(1, 0, 1), (2, 0, 2), (1, 1, 2), (3, 0, 1), (1, 2, 0), (2, 2, 1), (1, 0, 1), (4, 0, 2)]
3. hanoi(3, 1, 0, 2)
   a. hanoi(2, 1, 2, 0)
      i. hanoi(1, 1, 0, 2)
         - Add (1, 1, 2) to moves -> moves = [..., (4, 0, 2), (1, 1, 2)]
      ii. Add (2, 1, 0) to moves -> moves = [..., (4, 0, 2), (1, 1, 2), (2, 1, 0)]
      iii. hanoi(1, 2, 1, 0)
         - Add (1, 2, 0) to moves -> moves = [..., (4, 0, 2), (1, 1, 2), (2, 1, 0), (1, 2, 0)]
   b. Add (3, 1, 2) to moves -> moves = [..., (4, 0, 2), (1, 1, 2), (2, 1, 0), (1, 2, 0), (3, 1, 2)]
   c. hanoi(2, 0, 1, 2)
      i. hanoi(1, 0, 2, 1)
         - Add (1, 0, 1) to moves -> moves = [..., (3, 1, 2), (1, 0, 1)]
      ii. Add (2, 0, 2) to moves -> moves = [..., (3, 1, 2), (1, 0, 1), (2, 0, 2)]
      iii. hanoi(1, 1, 0, 2)
         - Add (1, 1, 2) to moves -> moves = [..., (3, 1, 2), (1, 0, 1), (2, 0, 2), (1, 1, 2)]

The complete solution for 4 disks is:
```
disk_id,from_peg,to_peg
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
```

I think I've made a few errors in tracing through the algorithm manually. Let me simplify and just present the general pattern for the Tower of Hanoi solution:

For n disks, the optimal solution requires $2^n - 1$ moves. The pattern of moves is defined by the recursive structure of the algorithm:
1. Move n-1 disks from source to auxiliary, using destination as an auxiliary.
2. Move the nth disk from source to destination.
3. Move n-1 disks from auxiliary to destination, using source as an auxiliary.

Let me trace through this algorithm one more time for n = 3 to ensure correctness:

For n = 3, source = 0, auxiliary = 1, destination = 2:
1. Move 2 disks from peg 0 to peg 1, using peg 2 as auxiliary:
   a. Move 1 disk from peg 0 to peg 2, using peg 1 as auxiliary:
      - Move disk 1 from peg 0 to peg 2.
   b. Move disk 2 from peg 0 to peg 1.
   c. Move 1 disk from peg 2 to peg 1, using peg 0 as auxiliary:
      - Move disk 1 from peg 2 to peg 1.
2. Move disk 3 from peg 0 to peg 2.
3. Move 2 disks from peg 1 to peg 2, using peg 0 as auxiliary:
   a. Move 1 disk from peg 1 to peg 0, using peg 2 as auxiliary:
      - Move disk 1 from peg 1 to peg 0.
   b. Move disk 2 from peg 1 to peg 2.
   c. Move 1 disk from peg 0 to peg 2, using peg 1 as auxiliary:
      - Move disk 1 from peg 0 to peg 2.

This gives us the solution for 3 disks:
```
disk_id,from_peg,to_peg
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
```

And this matches the expected output from the prompt.

Now, let's generate the complete list of moves for 14 disks. I'll use the recursive algorithm to enumerate all moves.

I'll skip ahead to n = 14 and provide the complete solution:

With 14 disks, we have $2^{14} - 1 = 16,383$ moves. Let me start generating the list of moves:

I'll use the recursive formula to generate the complete list of moves for 14 disks. I'm going to use a Python function to do this:

```python
def tower_of_hanoi(n, source, auxiliary, destination):
    """
    Generate the sequence of moves to solve the Tower of Hanoi puzzle.
    
    Args:
        n: Number of disks
        source: Source peg (0-indexed)
        auxiliary: Auxiliary peg (0-indexed)
        destination: Destination peg (0-indexed)
    
    Returns:
        List of tuples (disk_id, from_peg, to_peg)
    """
    moves = []
    
    def _tower_of_hanoi(n, source, auxiliary, destination):
        if n == 0:
            return
        
        _tower_of_hanoi(n-1, source, destination, auxiliary)
        moves.append((n, source, destination))
        _tower_of_hanoi(n-1, auxiliary, source, destination)
    
    _tower_of_hanoi(n, source, auxiliary, destination)
    return moves

solution = tower_of_hanoi(14, 0, 1, 2)
```

But I can actually use a different algorithm to generate the moves directly. For a Tower of Hanoi puzzle with n disks, we know that:
- The disk to move on the i-th move is determined by the largest power of 2 that divides i.
- The direction of the move (which pegs are involved) depends on whether n is odd or even, and on the value of i mod 3.

Let me use this algorithm to generate the complete list of moves for 14 disks:

```python
def tower_of_hanoi_iterative(n, source, auxiliary, destination):
    """
    Generate the sequence of moves to solve the Tower of Hanoi puzzle using an iterative approach.
    
    Args:
        n: Number of disks
        source: Source peg (0-indexed)
        auxiliary: Auxiliary peg (0-indexed)
        destination: Destination peg (0-indexed)
    
    Returns:
        List of tuples (disk_id, from_peg, to_peg)
    """
    moves = []
    total_moves = 2**n - 1
    pegs = [source, auxiliary, destination]
    
    for i in range(1, total_moves + 1):
        disk = largest_power_of_two_that_divides(i)
        
        if disk % 2 == 1:  # Odd-numbered disk
            from_peg = pegs[((i - 1) // (2**disk)) % 3]
            to_peg = pegs[((i - 1) // (2**disk) + 1) % 3]
        else:  # Even-numbered disk
            from_peg = pegs[((i - 1) // (2**disk)) % 3]
            to_peg = pegs[((i - 1) // (2**disk) - 1) % 3]
        
        moves.append((disk, from_peg, to_peg))
    
    return moves

def largest_power_of_two_that_divides(n):
    """
    Find the largest power of 2 that divides n.
    
    Args:
        n: A positive integer
    
    Returns:
        The largest power of 2 that divides n
    """
    power = 0
    while n % 2 == 0:
        n //= 2
        power += 1
    return power + 1

solution = tower_of_hanoi_iterative(14, 0, 1, 2)
```

Actually, the above method is also complex and error-prone. Let's stick with the recursive algorithm, which is simpler and guaranteed to be correct:

```python
def tower_of_hanoi(n, source, auxiliary, destination):
    """
    Generate the sequence of moves to solve the Tower of Hanoi puzzle.
    
    Args:
        n: Number of disks
        source: Source peg (0-indexed)
        auxiliary: Auxiliary peg (0-indexed)
        destination: Destination peg (0-indexed)
    
    Returns:
        List of tuples (disk_id, from_peg, to_peg)
    """
    if n == 1:
        return [(1, source, destination)]
    
    moves = []
    moves.extend(tower_of_hanoi(n-1, source, destination, auxiliary))
    moves.append((n, source, destination))
    moves.extend(tower_of_hanoi(n-1, auxiliary, source, destination))
    
    return moves

solution = tower_of_hanoi(14, 0, 1, 2)
```

While it's impractical to list all 16,383 moves manually, I can use this algorithm to generate the complete solution for 14 disks.

Let me go ahead and describe the first few moves for 14 disks, to illustrate the pattern:

1. Move disk 1 from peg 0 to peg 1.
2. Move disk 2 from peg 0 to peg 2.
3. Move disk 1 from peg 1 to peg 2.
4. Move disk 3 from peg 0 to peg 1.
5. Move disk 1 from peg 2 to peg 0.
6. Move disk 2 from peg 2 to peg 1.
7. Move disk 1 from peg 0 to peg 1.
8. Move disk 4 from peg 0 to peg 2.
9. Move disk 1 from peg 1 to peg 2.
10. Move disk 2 from peg 1 to peg 0.
11. Move disk 1 from peg 2 to peg 0.
12. Move disk 3 from peg 1 to peg 2.
13. Move disk 1 from peg 0 to peg 1.
14. Move disk 2 from peg 0 to peg 2.
15. Move disk 1 from peg 1 to peg 2.
16. Move disk 5 from peg 0 to peg 1.
17. ...and so on.

But actually, I'll just use the recursive algorithm to generate the complete list of moves for 14 disks. It's going to be a lot of moves, but that's what's required.

```
def tower_of_hanoi(n, source, auxiliary, destination):
    if n == 1:
        return [(1, source, destination)]
    
    moves = []
    moves.extend(tower_of_hanoi(n-1, source, destination, auxiliary))
    moves.append((n, source, destination))
    moves.extend(tower_of_hanoi(n-1, auxiliary, source, destination))
    
    return moves

solution = tower_of_hanoi(14, 0, 1, 2)
for disk_id, from_peg, to_peg in solution:
    print(f"{disk_id},{from_peg},{to_peg}")
```

Alright, so the Tower of Hanoi algorithm gives us the complete sequence of moves for 14 disks. There are $2^{14} - 1 = 16,383$ moves in total.

I'll start listing these moves now:

Move 1: Disk 1 from peg 0 to peg 1.
Move 2: Disk 2 from peg 0 to peg 2.
Move 3: Disk 1 from peg 1 to peg 2.
Move 4: Disk 3 from peg 0 to peg 1.
Move 5: Disk 1 from peg 2 to peg 0.
Move 6: Disk 2 from peg 2 to peg 1.
Move 7: Disk 1 from peg 0 to peg 1.
Move 8: Disk 4 from peg 0 to peg 2.
Move 9: Disk 1 from peg 1 to peg 2.
Move 10: Disk 2 from peg 1 to peg 0.
Move 11: Disk 1 from peg 2 to peg 0.
Move 12: Disk 3 from peg 1 to peg 2.
Move 13: Disk 1 from peg 0 to peg 1.
Move 14: Disk 2 from peg 0 to peg 2.
Move 15: Disk 1 from peg 1 to peg 2.
Move 16: Disk 5 from peg 0 to peg 1.
Move 17: Disk 1 from peg 2 to peg 0.
Move 18: Disk 2 from peg 2 to peg 1.
Move 19: Disk 1 from peg 0 to peg 1.
Move 20: Disk 3 from peg 2 to peg 0.
Move 21: Disk 1 from peg 1 to peg 2.
Move 22: Disk 2 from peg 1 to peg 0.
Move 23: Disk 1 from peg 2 to peg 0.
Move 24: Disk 4 from peg 2 to peg 1.
Move 25: Disk 1 from peg 0 to peg 1.
Move 26: Disk 2 from peg 0 to peg 2.
Move 27: Disk 1 from peg 1 to peg 2.
Move 28: Disk 3 from peg 0 to peg 1.
Move 29: Disk 1 from peg 2 to peg 0.
Move 30: Disk 2 from peg 2 to peg 1.
Move 31: Disk 1 from peg 0 to peg 1.
Move 32: Disk 6 from peg 0 to peg 2.

And it continues this way up to Move 16,383, which would be "Move 16,383: Disk 1 from peg 1 to peg 2."

Rather than trying to manually write out all 16,383 moves, I think it's best to use the recursive algorithm to generate the complete list. The recursive algorithm is guaranteed to produce the correct sequence of moves for the Tower of Hanoi problem.

I'll now show the complete list of moves for 14 disks, generated by the recursive algorithm.

First, let me check the pattern for the first few disks to ensure my algorithm is correct:

For n = 1:
1. Move disk 1 from source to destination.

For n = 2:
1. Move disk 1 from source to auxiliary. (From n = 1: source -> destination, but destination becomes auxiliary)
2. Move disk 2 from source to destination.
3. Move disk 1 from auxiliary to destination. (From n = 1: source -> destination, but source becomes auxiliary)

For n = 3:
1. Move 2 disks from source to auxiliary. (From n = 2: Move disk 1 from source to auxiliary, disk 2 from source to destination, disk 1 from auxiliary to destination, but destination becomes auxiliary)
   a. Move disk 1 from source to destination. (From n = 1: source -> destination)
   b. Move disk 2 from source to auxiliary. (From n = 1: source -> destination, but destination becomes auxiliary)
   c. Move disk 1 from destination to auxiliary. (From n = 1: source -> destination, but source becomes destination)
2. Move disk 3 from source to destination.
3. Move 2 disks from auxiliary to destination. (From n = 2: Move disk 1 from source to auxiliary, disk 2 from source to destination, disk 1 from auxiliary to destination, but source becomes auxiliary)
   a. Move disk 1 from auxiliary to source. (From n = 1: source -> destination, but source becomes auxiliary and destination becomes source)
   b. Move disk 2 from auxiliary to destination. (From n = 1: source -> destination, but source becomes auxiliary)
   c. Move disk 1 from source to destination. (From n = 1: source -> destination)

Let me now generate the sequence of moves for 14 disks using the recursive algorithm.

I'll be following the three steps of the Tower of Hanoi recursive algorithm:
1. Move n-1 disks from source to auxiliary, using destination as an auxiliary.
2. Move the nth disk from source to destination.
3. Move n-1 disks from auxiliary to destination, using source as an auxiliary.

Now, let's begin generating the complete list of moves for 14 disks:

For n = 14, source = 0, auxiliary = 1, destination = 2:

1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
5,0,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
4,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
6,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,2,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
5,1,2
1,1,0
2,1,2
1,0,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
7,0,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
4,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
5,2,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,2,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
6,2,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,0,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
5,1,0
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
8,0,2
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
4,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
5,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,2,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
6,0,2
1,1,0
2,1,2
1,0,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
7,2,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
5,2,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
6,1,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
4,0,2
1,1,0
2,1,2
1,0,2
3,0,1
1,2,0
2,2,1
1,0,1
5,1,2
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
4,1,0
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
9,0,1
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,0,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
5,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
4,2,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
6,1,2
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
7,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
5,0,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
4,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
6,2,1
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,0,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
5,2,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
4,2,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
8,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
7,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
10,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
5,0,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
4,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
6,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,2,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
5,1,2
1,1,0
2,1,2
1,0,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
7,0,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
4,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
5,2,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,2,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
6,2,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,0,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
5,1,0
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
8,0,2
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
4,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
5,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,2,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
6,0,2
1,1,0
2,1,2
1,0,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
7,2,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
5,2,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
6,1,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
4,0,2
1,1,0
2,1,2
1,0,2
3,0,1
1,2,0
2,2,1
1,0,1
5,1,2
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
4,1,0
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
9,2,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,0,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
5,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
4,2,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
6,1,2
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
7,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
5,0,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
4,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
6,2,1
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,0,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
5,2,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
4,2,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
8,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
7,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
11,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
7,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
8,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
7,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
9,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
7,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
8,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
7,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
12,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
5,0,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
4,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
6,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,2,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
5,1,2
1,1,0
2,1,2
1,0,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
7,0,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
4,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
5,2,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,2,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
6,2,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,0,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
5,1,0
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
8,0,2
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
4,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
5,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,2,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
6,0,2
1,1,0
2,1,2
1,0,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
7,2,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
5,2,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
6,1,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
4,0,2
1,1,0
2,1,2
1,0,2
3,0,1
1,2,0
2,2,1
1,0,1
5,1,2
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
4,1,0
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
9,0,1
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,0,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
5,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
4,2,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
6,1,2
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
7,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
5,0,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
4,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
6,2,1
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,0,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
5,2,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
4,2,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
8,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
7,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
10,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
5,0,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
4,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
6,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,2,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
5,1,2
1,1,0
2,1,2
1,0,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
7,0,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
4,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
5,2,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,2,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
6,2,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,0,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
5,1,0
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
8,0,2
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
4,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
5,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,2,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
6,0,2
1,1,0
2,1,2
1,0,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
7,2,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
5,2,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
6,1,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
4,0,2
1,1,0
2,1,2
1,0,2
3,0,1
1,2,0
2,2,1
1,0,1
5,1,2
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
4,1,0
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
9,2,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,0,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
5,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
4,2,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
6,1,2
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
7,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
5,0,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
4,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
6,2,1
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,0,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
5,2,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
4,2,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
8,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
7,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
11,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
5,0,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
4,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
6,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,2,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
5,1,2
1,1,0
2,1,2
1,0,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
7,0,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
4,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
5,2,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,2,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
6,2,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,0,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
5,1,0
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
8,0,2
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
4,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
5,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,2,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
6,0,2
1,1,0
2,1,2
1,0,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
7,2,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
5,2,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
6,1,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
4,0,2
1,1,0
2,1,2
1,0,2
3,0,1
1,2,0
2,2,1
1,0,1
5,1,2
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
4,1,0
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
9,1,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,0,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
5,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
4,2,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
6,1,2
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
7,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
5,0,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
4,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
6,2,1
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,0,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
5,2,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
4,2,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
8,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
7,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
10,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
5,0,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
4,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
6,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,2,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
5,1,2
1,1,0
2,1,2
1,0,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
7,0,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
4,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
5,2,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,2,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
6,2,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,0,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
5,1,0
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
8,0,2
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
4,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
5,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,2,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
6,0,2
1,1,0
2,1,2
1,0,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
7,2,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
5,2,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
6,1,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
4,0,2
1,1,0
2,1,2
1,0,2
3,0,1
1,2,0
2,2,1
1,0,1
5,1,2
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
4,1,0
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
9,0,1
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,0,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
5,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
4,2,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
6,1,2
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
7,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
5,0,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
4,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
6,2,1
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,0,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
5,2,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
4,2,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
8,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
7,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
13,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
7,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
8,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
7,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
9,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
7,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
8,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
7,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
10,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
7,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
8,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
7,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
9,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
7,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
8,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
7,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
11,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
7,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
8,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
7,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
9,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
7,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
8,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
7,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
10,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
7,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
8,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
7,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
9,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
7,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
8,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
7,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
12,0,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
5,0,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
4,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
6,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,2,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
5,1,2
1,1,0
2,1,2
1,0,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
7,0,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
4,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
5,2,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,2,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
6,2,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,0,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
5,1,0
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
8,0,2
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
4,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
5,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,2,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
6,0,2
1,1,0
2,1,2
1,0,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
7,2,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
5,2,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
6,1,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
4,0,2
1,1,0
2,1,2
1,0,2
3,0,1
1,2,0
2,2,1
1,0,1
5,1,2
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
4,1,0
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
9,0,1
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,0,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
5,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
4,2,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
6,1,2
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
7,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
5,0,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
4,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
6,2,1
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,0,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
5,2,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
4,2,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
8,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
7,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
10,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
5,0,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
4,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
6,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,2,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
5,1,2
1,1,0
2,1,2
1,0,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
7,0,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
4,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
5,2,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,2,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
6,2,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,0,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
5,1,0
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
8,0,2
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
4,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
5,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,2,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
6,0,2
1,1,0
2,1,2
1,0,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
7,2,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
5,2,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
6,1,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
4,0,2
1,1,0
2,1,2
1,0,2
3,0,1
1,2,0
2,2,1
1,0,1
5,1,2
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
4,1,0
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
9,0,1
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,0,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
5,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
4,2,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
6,1,2
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
7,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
5,0,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
4,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
6,2,1
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,0,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
5,2,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
4,2,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
8,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
7,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
11,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
5,0,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
4,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
6,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,2,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
5,1,2
1,1,0
2,1,2
1,0,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
7,0,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
4,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
5,2,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,2,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
6,2,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,0,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
5,1,0
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
8,0,2
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
4,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
5,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,2,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
6,0,2
1,1,0
2,1,2
1,0,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
7,2,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
5,2,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
4,1,0
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
6,1,0
1,2,1
2,2,0
1,1,0
3,2,1
1,0,2
2,0,1
1,2,1
4,0,2
1,1,0
2,1,2
1,0,2
3,0,1
1,2,0
2,2,1
1,0,1
5,1,2
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
4,1,0
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
9,0,1
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,0,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
5,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
4,2,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
6,1,2
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
7,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
5,0,1
1,2,0
2,2,1
1,0,1
3,2,0
1,1,2
2,1,0
1,2,0
4,1,2
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
6,2,1
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
4,0,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
5,2,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
4,2,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
8,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
7,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
10,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
7,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
8,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
7,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
9,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
7,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
8,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
7,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
13,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
7,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
8,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
7,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
9,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
7,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
8,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
7,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
10,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
7,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
8,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
7,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
9,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
7,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
8,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
7,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
11,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
7,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
8,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
7,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
9,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
7,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
8,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
7,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
10,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
7,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
8,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,2,1
1,2,0
2,2,1
1,0,1
3,0,2
1,1,2
2,1,0
1,2,0
6,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
7,2,0
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
4,0,1
1,0,2
2,0,1
1,2,1
3,2,0
1,1,2
2,1,0
1,2,0
5,1,0
1,0,2
2,0
</think>

None

