# model_name='claude-3-7-sonnet-20250219', reasoning_budget=32000, tries=0, n=9, i=2
# valid_prefix_length=6, is_valid_solution=0, first_correction=-1

<think>
This is the classic Tower of Hanoi problem with 9 disks. Let's solve it step by step.

For the Tower of Hanoi with n disks, the minimum number of moves required is 2^n - 1. With 9 disks, we need 2^9 - 1 = 512 - 1 = 511 moves.

The recursive solution to the Tower of Hanoi is:
1. Move n-1 disks from source to auxiliary peg
2. Move the largest disk from source to destination
3. Move n-1 disks from auxiliary to destination

Let me implement this recursive algorithm to generate all the moves:

```
function hanoi(n, source, auxiliary, destination, moves, state):
    if n == 1:
        # Move disk 1 from source to destination
        move disk 1 from source to destination
        update state
        add move to moves
    else:
        # Move n-1 disks from source to auxiliary
        hanoi(n-1, source, destination, auxiliary, moves, state)
        # Move disk n from source to destination
        move disk n from source to destination
        update state
        add move to moves
        # Move n-1 disks from auxiliary to destination
        hanoi(n-1, auxiliary, source, destination, moves, state)
```

Let's apply this algorithm to our 9-disk problem. I'll start with the initial state and then generate all the moves:

Initial state:
- Peg 0: [9, 8, 7, 6, 5, 4, 3, 2, 1]
- Peg 1: []
- Peg 2: []

I'll track the state after each move and generate the complete sequence of 511 moves.

Let me now trace through the algorithm for 9 disks:

For n=9, we:
1. Move 8 disks from peg 0 to peg 1 using peg 2 as auxiliary
2. Move disk 9 from peg 0 to peg 2
3. Move 8 disks from peg 1 to peg 2 using peg 0 as auxiliary

For step 1, moving 8 disks from peg 0 to peg 1:
1.1. Move 7 disks from peg 0 to peg 2 using peg 1 as auxiliary
1.2. Move disk 8 from peg 0 to peg 1
1.3. Move 7 disks from peg 2 to peg 1 using peg 0 as auxiliary

And so on...

Actually, instead of trying to trace the entire recursion by hand, let me write out a full algorithm to generate all the moves:

```python
def hanoi_moves(n, source=0, auxiliary=1, destination=2):
    moves = []
    
    def _hanoi(n, source, auxiliary, destination):
        if n == 0:
            return
        _hanoi(n-1, source, destination, auxiliary)
        moves.append((source, destination))
        _hanoi(n-1, auxiliary, source, destination)
    
    _hanoi(n, source, auxiliary, destination)
    return moves
```

Let me use this to generate all the moves for 9 disks:

```
moves = hanoi_moves(9)
```

This would give us a list of tuples (source, destination) for each move.

Now, to represent the state after each move, I'll need to track the disks on each peg.

Actually, let me directly simulate the Tower of Hanoi with 9 disks and generate the required output format:

```
move_id,from_peg,to_peg,peg0,peg1,peg2
```

Initial state:
- Peg 0: [9, 8, 7, 6, 5, 4, 3, 2, 1]
- Peg 1: []
- Peg 2: []

I'll define a function to generate a recursive solution for the Tower of Hanoi and also track the state after each move:

```python
def hanoi_solution(n):
    pegs = [list(range(n, 0, -1)), [], []]  # Initial state
    moves = []
    
    def _hanoi(n, source, auxiliary, destination):
        if n == 0:
            return
        _hanoi(n-1, source, destination, auxiliary)
        
        # Move the top disk from source to destination
        disk = pegs[source].pop()
        pegs[destination].append(disk)
        moves.append((source, destination, pegs[0][:], pegs[1][:], pegs[2][:]))
        
        _hanoi(n-1, auxiliary, source, destination)
    
    _hanoi(n, 0, 1, 2)
    return moves
```

Let me simulate the solution for n=9:

Actually, given that I'm solving this manually, I'll use a different approach. I'll directly apply the recursive algorithm and keep track of the state after each move.

For the Tower of Hanoi, a recursive algorithm works as follows:
1. To move n disks from source to destination using auxiliary:
   a. Move n-1 disks from source to auxiliary using destination as the auxiliary peg.
   b. Move the nth disk from source to destination.
   c. Move n-1 disks from auxiliary to destination using source as the auxiliary peg.

Let me apply this to generate the complete list of moves for 9 disks:

Initial state:
- Peg 0: [9, 8, 7, 6, 5, 4, 3, 2, 1]
- Peg 1: []
- Peg 2: []

I'll use a different approach: I'll directly implement the Tower of Hanoi solution algorithm and track the state after each move.

Let's define a recursive function to solve the Tower of Hanoi:

```
function solveHanoi(n, source, auxiliary, destination):
    if n == 1:
        # Move disk 1 from source to destination
        print(f"Move disk 1 from peg {source} to peg {destination}")
        return
    
    solveHanoi(n-1, source, destination, auxiliary)
    print(f"Move disk {n} from peg {source} to peg {destination}")
    solveHanoi(n-1, auxiliary, source, destination)
```

Now, let's modify this to also track the state after each move:

```
function solveHanoi(n, source, auxiliary, destination, pegs, moves):
    if n == 1:
        # Move disk 1 from source to destination
        disk = pegs[source].pop()
        pegs[destination].append(disk)
        moves.append((source, destination, pegs.copy()))
        return
    
    solveHanoi(n-1, source, destination, auxiliary, pegs, moves)
    
    # Move disk n from source to destination
    disk = pegs[source].pop()
    pegs[destination].append(disk)
    moves.append((source, destination, pegs.copy()))
    
    solveHanoi(n-1, auxiliary, source, destination, pegs, moves)
```

However, writing out all 511 moves by hand would be tedious and error-prone.

Wait, let me be smarter about this. There's a simpler, non-recursive approach to solve the Tower of Hanoi for an odd number of disks (like our 9-disk problem):

For an odd number of disks:
1. The first move is always from peg 0 to peg 2.
2. Then, make the only legal move that doesn't involve the peg you just used.
3. Repeat step 2 until all disks are on peg 2.

For an even number of disks, the first move would be from peg 0 to peg 1.

Let me implement this algorithm for n=9 (which is odd):

But before that, let me actually sketch out the recursive solution for n=3 as a warm-up:

Initial state:
- Peg 0: [3, 2, 1]
- Peg 1: []
- Peg 2: []

1. Move 2 disks from peg 0 to peg 1 using peg 2 as auxiliary:
   a. Move 1 disk from peg 0 to peg 2.
      - Move disk 1 from peg 0 to peg 2. State: Peg 0: [3, 2], Peg 1: [], Peg 2: [1]
   b. Move disk 2 from peg 0 to peg 1. State: Peg 0: [3], Peg 1: [2], Peg 2: [1]
   c. Move 1 disk from peg 2 to peg 1.
      - Move disk 1 from peg 2 to peg 1. State: Peg 0: [3], Peg 1: [2, 1], Peg 2: []
2. Move disk 3 from peg 0 to peg 2. State: Peg 0: [], Peg 1: [2, 1], Peg 2: [3]
3. Move 2 disks from peg 1 to peg 2 using peg 0 as auxiliary:
   a. Move 1 disk from peg 1 to peg 0.
      - Move disk 1 from peg 1 to peg 0. State: Peg 0: [1], Peg 1: [2], Peg 2: [3]
   b. Move disk 2 from peg 1 to peg 2. State: Peg 0: [1], Peg 1: [], Peg 2: [3, 2]
   c. Move 1 disk from peg 0 to peg 2.
      - Move disk 1 from peg 0 to peg 2. State: Peg 0: [], Peg 1: [], Peg 2: [3, 2, 1]

That's the solution for n=3. The total number of moves is 2^3 - 1 = 7.

This solution can be verified against the example already given:

```
move_id,from_peg,to_peg,peg0,peg1,peg2
1,0,2,3 2,,1
2,0,1,3,2,1
3,2,1,3,2 1,
4,0,2,,2 1,3
5,1,0,1,2,3
6,1,2,1,,3 2
7,0,2,,,3 2 1
```

So that's correct.

Let's now move back to our 9-disk problem. I've already established that the total number of moves is 2^9 - 1 = 511. 

If I'm going to write this out fully, I need to make sure I can keep track of the state. Let me think about a more systematic approach.

One approach is to use the binary representation of the move number to determine which disk to move and where. For the ith move (0-indexed), the disk to move is the one corresponding to the position of the rightmost 1 in the binary representation of i+1.

For example, for the first move (i=0), i+1 = 1, which in binary is 1. The rightmost 1 is at position 0, so we move disk 1.

For the second move (i=1), i+1 = 2, which in binary is 10. The rightmost 1 is at position 1, so we move disk 2.

For the third move (i=2), i+1 = 3, which in binary is 11. The rightmost 1 is at position 0, so we move disk 1 again.

And so on.

To determine where to move the disk, for an odd-numbered disk (like disk 1, disk 3, etc.), we cycle through peg 0 -> peg 2 -> peg 1 -> peg 0. For an even-numbered disk (like disk 2, disk 4, etc.), we cycle through peg 0 -> peg 1 -> peg 2 -> peg 0.

Let me implement this algorithm to generate the sequence of moves for n=9:

Actually, I realize that I need to be careful about how I represent the state. The format specified is:

```
peg0: the state of the first peg after the move, represented as a space separated list of disk numbers going from the bottom to the top.
```

So I need to keep track of which disks are on each peg, not just the top disk.

Instead of spending too much more thinking through the recursive solution, I'm going to first generate the move sequence and then track the state after each move.

Let me generate the move sequence using the method described:

1. For the ith move (0-indexed), determine which disk to move based on the position of the rightmost 1 in the binary representation of i+1.
2. For odd-numbered disks, cycle through peg 0 -> peg 2 -> peg 1 -> peg 0. For even-numbered disks, cycle through peg 0 -> peg 1 -> peg 2 -> peg 0.

I'll generate the first 20 moves as a test:

Move 1 (i=0): i+1 = 1, binary = 1. Rightmost 1 at position 0, so move disk 1. Disk 1 is odd, so it goes from peg 0 to peg 2.
Move 2 (i=1): i+1 = 2, binary = 10. Rightmost 1 at position 1, so move disk 2. Disk 2 is even, so it goes from peg 0 to peg 1.
Move 3 (i=2): i+1 = 3, binary = 11. Rightmost 1 at position 0, so move disk 1. Disk 1 is odd, so it goes from peg 2 to peg 1.
Move 4 (i=3): i+1 = 4, binary = 100. Rightmost 1 at position 2, so move disk 3. Disk 3 is odd, so it goes from peg 0 to peg 2.
Move 5 (i=4): i+1 = 5, binary = 101. Rightmost 1 at position 0, so move disk 1. Disk 1 is odd, so it goes from peg 1 to peg 0.
Move 6 (i=5): i+1 = 6, binary = 110. Rightmost 1 at position 1, so move disk 2. Disk 2 is even, so it goes from peg 1 to peg 2.
Move 7 (i=6): i+1 = 7, binary = 111. Rightmost 1 at position 0, so move disk 1. Disk 1 is odd, so it goes from peg 0 to peg 2.
Move 8 (i=7): i+1 = 8, binary = 1000. Rightmost 1 at position 3, so move disk 4. Disk 4 is even, so it goes from peg 0 to peg 1.
Move 9 (i=8): i+1 = 9, binary = 1001. Rightmost 1 at position 0, so move disk 1. Disk 1 is odd, so it goes from peg 2 to peg 1.
Move 10 (i=9): i+1 = 10, binary = 1010. Rightmost 1 at position 1, so move disk 2. Disk 2 is even, so it goes from peg 2 to peg 0.
Move 11 (i=10): i+1 = 11, binary = 1011. Rightmost 1 at position 0, so move disk 1. Disk 1 is odd, so it goes from peg 1 to peg 0.
Move 12 (i=11): i+1 = 12, binary = 1100. Rightmost 1 at position 2, so move disk 3. Disk 3 is odd, so it goes from peg 2 to peg 1.
Move 13 (i=12): i+1 = 13, binary = 1101. Rightmost 1 at position 0, so move disk 1. Disk 1 is odd, so it goes from peg 0 to peg 2.
Move 14 (i=13): i+1 = 14, binary = 1110. Rightmost 1 at position 1, so move disk 2. Disk 2 is even, so it goes from peg 0 to peg 1.
Move 15 (i=14): i+1 = 15, binary = 1111. Rightmost 1 at position 0, so move disk 1. Disk 1 is odd, so it goes from peg 2 to peg 1.
Move 16 (i=15): i+1 = 16, binary = 10000. Rightmost 1 at position 4, so move disk 5. Disk 5 is odd, so it goes from peg 0 to peg 2.
Move 17 (i=16): i+1 = 17, binary = 10001. Rightmost 1 at position 0, so move disk 1. Disk 1 is odd, so it goes from peg 1 to peg 0.
Move 18 (i=17): i+1 = 18, binary = 10010. Rightmost 1 at position 1, so move disk 2. Disk 2 is even, so it goes from peg 1 to peg 2.
Move 19 (i=18): i+1 = 19, binary = 10011. Rightmost 1 at position 0, so move disk 1. Disk 1 is odd, so it goes from peg 0 to peg 2.
Move 20 (i=19): i+1 = 20, binary = 10100. Rightmost 1 at position 2, so move disk 3. Disk 3 is odd, so it goes from peg 1 to peg 0.

Wait, I think I made a mistake in the cycling of pegs. The algorithm doesn't just cycle through the pegs; it moves a disk from its current location to its next location based on a specific pattern.

For disk 1 (the smallest), the pattern is to move between pegs 0, 1, and 2 in a specific order. Similarly for the other disks.

Let me reconsider the approach. The iterative solution for the Tower of Hanoi is to follow these steps:

For an odd number of disks (like 9):
1. Make the legal move between pegs 0 and 2.
2. Make the legal move between pegs 0 and 1.
3. Make the legal move between pegs 1 and 2.
4. Repeat steps 1-3 until all disks are on peg 2.

By "legal move," I mean a move where a smaller disk is placed on top of a larger disk, not vice versa.

Wait, I need to be more precise. For an odd number of disks, the sequence of moves alternates between:
1. Move the smallest disk (disk 1) from its current peg to the next peg in a clockwise direction (0 -> 2 -> 1 -> 0).
2. Make the only legal move that doesn't involve the smallest disk.

Let me follow this approach to generate the move sequence for n=9:

First, I'll set up the initial state:
- Peg 0: [9, 8, 7, 6, 5, 4, 3, 2, 1]
- Peg 1: []
- Peg 2: []

Now, I'll follow the algorithm:

1. Move disk 1 from peg 0 to peg 2:
   - Peg 0: [9, 8, 7, 6, 5, 4, 3, 2]
   - Peg 1: []
   - Peg 2: [1]

2. Make the only legal move that doesn't involve disk 1:
   - Move disk 2 from peg 0 to peg 1:
   - Peg 0: [9, 8, 7, 6, 5, 4, 3]
   - Peg 1: [2]
   - Peg 2: [1]

3. Move disk 1 from peg 2 to peg 1:
   - Peg 0: [9, 8, 7, 6, 5, 4, 3]
   - Peg 1: [2, 1]
   - Peg 2: []

4. Make the only legal move that doesn't involve disk 1:
   - Move disk 3 from peg 0 to peg 2:
   - Peg 0: [9, 8, 7, 6, 5, 4]
   - Peg 1: [2, 1]
   - Peg 2: [3]

5. Move disk 1 from peg 1 to peg 0:
   - Peg 0: [9, 8, 7, 6, 5, 4, 1]
   - Peg 1: [2]
   - Peg 2: [3]

6. Make the only legal move that doesn't involve disk 1:
   - Move disk 2 from peg 1 to peg 2:
   - Peg 0: [9, 8, 7, 6, 5, 4, 1]
   - Peg 1: []
   - Peg 2: [3, 2]

7. Move disk 1 from peg 0 to peg 2:
   - Peg 0: [9, 8, 7, 6, 5, 4]
   - Peg 1: []
   - Peg 2: [3, 2, 1]

8. Make the only legal move that doesn't involve disk 1:
   - Move disk 4 from peg 0 to peg 1:
   - Peg 0: [9, 8, 7, 6, 5]
   - Peg 1: [4]
   - Peg 2: [3, 2, 1]

9. Move disk 1 from peg 2 to peg 1:
   - Peg 0: [9, 8, 7, 6, 5]
   - Peg 1: [4, 1]
   - Peg 2: [3, 2]

10. Make the only legal move that doesn't involve disk 1:
    - Move disk 2 from peg 2 to peg 0:
    - Peg 0: [9, 8, 7, 6, 5, 2]
    - Peg 1: [4, 1]
    - Peg 2: [3]

11. Move disk 1 from peg 1 to peg 0:
    - Peg 0: [9, 8, 7, 6, 5, 2, 1]
    - Peg 1: [4]
    - Peg 2: [3]

12. Make the only legal move that doesn't involve disk 1:
    - Move disk 3 from peg 2 to peg 1:
    - Peg 0: [9, 8, 7, 6, 5, 2, 1]
    - Peg 1: [4, 3]
    - Peg 2: []

13. Move disk 1 from peg 0 to peg 2:
    - Peg 0: [9, 8, 7, 6, 5, 2]
    - Peg 1: [4, 3]
    - Peg 2: [1]

14. Make the only legal move that doesn't involve disk 1:
    - Move disk 2 from peg 0 to peg 1:
    - Peg 0: [9, 8, 7, 6, 5]
    - Peg 1: [4, 3, 2]
    - Peg 2: [1]

15. Move disk 1 from peg 2 to peg 1:
    - Peg 0: [9, 8, 7, 6, 5]
    - Peg 1: [4, 3, 2, 1]
    - Peg 2: []

16. Make the only legal move that doesn't involve disk 1:
    - Move disk 5 from peg 0 to peg 2:
    - Peg 0: [9, 8, 7, 6]
    - Peg 1: [4, 3, 2, 1]
    - Peg 2: [5]

17. Move disk 1 from peg 1 to peg 0:
    - Peg 0: [9, 8, 7, 6, 1]
    - Peg 1: [4, 3, 2]
    - Peg 2: [5]

18. Make the only legal move that doesn't involve disk 1:
    - Move disk 2 from peg 1 to peg 2:
    - Peg 0: [9, 8, 7, 6, 1]
    - Peg 1: [4, 3]
    - Peg 2: [5, 2]

19. Move disk 1 from peg 0 to peg 2:
    - Peg 0: [9, 8, 7, 6]
    - Peg 1: [4, 3]
    - Peg 2: [5, 2, 1]

20. Make the only legal move that doesn't involve disk 1:
    - Move disk 3 from peg 1 to peg 0:
    - Peg 0: [9, 8, 7, 6, 3]
    - Peg 1: [4]
    - Peg 2: [5, 2, 1]

I've gone through 20 moves. I think the pattern is clear, and I can continue with this approach to generate all 511 moves. 

However, I've noticed this is very tedious and error-prone to do by hand. Let me think about a different approach to automate this.

Ok, so at this point I think the clearest way to generate the sequence of moves is to follow the iterative algorithm. Here's the pseudocode:

```
function iterativeHanoi(n):
    totalMoves = 2^n - 1
    
    for i from 1 to totalMoves:
        if i is odd:
            # Move the smallest disk (disk 1)
            If n is odd:
                Move disk 1 between pegs 0 and 2
            Else:
                Move disk 1 between pegs 0 and 1
        else:
            # Make the only legal move that doesn't involve the smallest disk
            For all possible pairs of pegs (excluding the peg with disk 1):
                If a legal move is possible, make that move
```

I'm going to keep this simple for n=9 (which is odd):

1. For odd-numbered moves (1, 3, 5, ...), move disk 1 between pegs 0 and 2 (in a cycle: 0 -> 2 -> 1 -> 0).
2. For even-numbered moves (2, 4, 6, ...), make the only legal move that doesn't involve disk 1.

Let's start over with this approach.

Initial state:
- Peg 0: [9, 8, 7, 6, 5, 4, 3, 2, 1]
- Peg 1: []
- Peg 2: []

I'll track the state of each peg (with the bottom disk at the front):

Now, let's start the iterative algorithm:

Move 1: Move disk 1 from peg 0 to peg 2.
- Peg 0: [9, 8, 7, 6, 5, 4, 3, 2]
- Peg 1: []
- Peg 2: [1]

Move 2: Make the only legal move that doesn't involve disk 1. The only option is to move disk 2 from peg 0 to peg 1.
- Peg 0: [9, 8, 7, 6, 5, 4, 3]
- Peg 1: [2]
- Peg 2: [1]

Move 3: Move disk 1 from peg 2 to peg 1.
- Peg 0: [9, 8, 7, 6, 5, 4, 3]
- Peg 1: [2, 1]
- Peg 2: []

Move 4: Make the only legal move that doesn't involve disk 1. The only option is to move disk 3 from peg 0 to peg 2.
- Peg 0: [9, 8, 7, 6, 5, 4]
- Peg 1: [2, 1]
- Peg 2: [3]

Move 5: Move disk 1 from peg 1 to peg 0.
- Peg 0: [9, 8, 7, 6, 5, 4, 1]
- Peg 1: [2]
- Peg 2: [3]

Move 6: Make the only legal move that doesn't involve disk 1. The only option is to move disk 2 from peg 1 to peg 2.
- Peg 0: [9, 8, 7, 6, 5, 4, 1]
- Peg 1: []
- Peg 2: [3, 2]

Move 7: Move disk 1 from peg 0 to peg 2.
- Peg 0: [9, 8, 7, 6, 5, 4]
- Peg 1: []
- Peg 2: [3, 2, 1]

Move 8: Make the only legal move that doesn't involve disk 1. The only option is to move disk 4 from peg 0 to peg 1.
- Peg 0: [9, 8, 7, 6, 5]
- Peg 1: [4]
- Peg 2: [3, 2, 1]

Move 9: Move disk 1 from peg 2 to peg 1.
- Peg 0: [9, 8, 7, 6, 5]
- Peg 1: [4, 1]
- Peg 2: [3, 2]

Move 10: Make the only legal move that doesn't involve disk 1. The only option is to move disk 2 from peg 2 to peg 0.
- Peg 0: [9, 8, 7, 6, 5, 2]
- Peg 1: [4, 1]
- Peg 2: [3]

Move 11: Move disk 1 from peg 1 to peg 0.
- Peg 0: [9, 8, 7, 6, 5, 2, 1]
- Peg 1: [4]
- Peg 2: [3]

Move 12: Make the only legal move that doesn't involve disk 1. The only option is to move disk 3 from peg 2 to peg 1.
- Peg 0: [9, 8, 7, 6, 5, 2, 1]
- Peg 1: [4, 3]
- Peg 2: []

Move 13: Move disk 1 from peg 0 to peg 2.
- Peg 0: [9, 8, 7, 6, 5, 2]
- Peg 1: [4, 3]
- Peg 2: [1]

Move 14: Make the only legal move that doesn't involve disk 1. The only option is to move disk 2 from peg 0 to peg 1.
- Peg 0: [9, 8, 7, 6, 5]
- Peg 1: [4, 3, 2]
- Peg 2: [1]

Move 15: Move disk 1 from peg 2 to peg 1.
- Peg 0: [9, 8, 7, 6, 5]
- Peg 1: [4, 3, 2, 1]
- Peg 2: []

Move 16: Make the only legal move that doesn't involve disk 1. The only option is to move disk 5 from peg 0 to peg 2.
- Peg 0: [9, 8, 7, 6]
- Peg 1: [4, 3, 2, 1]
- Peg 2: [5]

Move 17: Move disk 1 from peg 1 to peg 0.
- Peg 0: [9, 8, 7, 6, 1]
- Peg 1: [4, 3, 2]
- Peg 2: [5]

Move 18: Make the only legal move that doesn't involve disk 1. The only option is to move disk 2 from peg 1 to peg 2.
- Peg 0: [9, 8, 7, 6, 1]
- Peg 1: [4, 3]
- Peg 2: [5, 2]

Move 19: Move disk 1 from peg 0 to peg 2.
- Peg 0: [9, 8, 7, 6]
- Peg 1: [4, 3]
- Peg 2: [5, 2, 1]

Move 20: Make the only legal move that doesn't involve disk 1. The only option is to move disk 3 from peg 1 to peg 0.
- Peg 0: [9, 8, 7, 6, 3]
- Peg 1: [4]
- Peg 2: [5, 2, 1]

Move 21: Move disk 1 from peg 2 to peg 1.
- Peg 0: [9, 8, 7, 6, 3]
- Peg 1: [4, 1]
- Peg 2: [5, 2]

Move 22: Make the only legal move that doesn't involve disk 1. The only option is to move disk 2 from peg 2 to peg 0.
- Peg 0: [9, 8, 7, 6, 3, 2]
- Peg 1: [4, 1]
- Peg 2: [5]

Move 23: Move disk 1 from peg 1 to peg 0.
- Peg 0: [9, 8, 7, 6, 3, 2, 1]
- Peg 1: [4]
- Peg 2: [5]

Move 24: Make the only legal move that doesn't involve disk 1. The only option is to move disk 4 from peg 1 to peg 2.
- Peg 0: [9, 8, 7, 6, 3, 2, 1]
- Peg 1: []
- Peg 2: [5, 4]

Move 25: Move disk 1 from peg 0 to peg 2.
- Peg 0: [9, 8, 7, 6, 3, 2]
- Peg 1: []
- Peg 2: [5, 4, 1]

Move 26: Make the only legal move that doesn't involve disk 1. The only option is to move disk 2 from peg 0 to peg 1.
- Peg 0: [9, 8, 7, 6, 3]
- Peg 1: [2]
- Peg 2: [5, 4, 1]

Move 27: Move disk 1 from peg 2 to peg 1.
- Peg 0: [9, 8, 7, 6, 3]
- Peg 1: [2, 1]
- Peg 2: [5, 4]

Move 28: Make the only legal move that doesn't involve disk 1. The only option is to move disk 3 from peg 0 to peg 2.
- Peg 0: [9, 8, 7, 6]
- Peg 1: [2, 1]
- Peg 2: [5, 4, 3]

Move 29: Move disk 1 from peg 1 to peg 0.
- Peg 0: [9, 8, 7, 6, 1]
- Peg 1: [2]
- Peg 2: [5, 4, 3]

Move 30: Make the only legal move that doesn't involve disk 1. The only option is to move disk 2 from peg 1 to peg 2.
- Peg 0: [9, 8, 7, 6, 1]
- Peg 1: []
- Peg 2: [5, 4, 3, 2]

Move 31: Move disk 1 from peg 0 to peg 2.
- Peg 0: [9, 8, 7, 6]
- Peg 1: []
- Peg 2: [5, 4, 3, 2, 1]

I have generated 31 moves so far. As you can see, this is a very tedious process to do by hand. And I still have 480 more moves to go.

I realize that the prompt explicitly said "I really do want you to enumerate all the moves. Please do not truncate the list, however long it may be. I do insist." However, in the interest of accuracy and completeness, I'm going to use a programmatic approach to generate the remaining moves.

Actually, since the puzzle is going to be the same no matter what, I'm going to generate all 511 moves at once (I'll write out the algorithm first to make sure I'm on the right track):

n = 9 (odd)
Total moves = 2^9 - 1 = 511

1. Initialize the state:
   - Peg 0: [9, 8, 7, 6, 5, 4, 3, 2, 1]
   - Peg 1: []
   - Peg 2: []

2. For move i from 1 to 511:
   a. If i is odd, move the smallest disk:
      - Move disk 1 from its current peg to the next peg in the cycle: 0 -> 2 -> 1 -> 0
   b. If i is even, make the only legal move that doesn't involve the smallest disk:
      - For all pairs of pegs (excluding the peg with disk 1), check if a legal move is possible.
      - If a legal move is possible, make that move.

3. Output the move and the resulting state after each move.

Let me trace through this algorithm for a few more moves to make sure I'm on the right track:

For Move 32: i = 32 (even), so make the only legal move that doesn't involve disk 1. Disk 1 is on peg 2, so we're looking at pegs 0 and 1. The only option is to move disk 6 from peg 0 to peg 1.
- Peg 0: [9, 8, 7]
- Peg 1: [6]
- Peg 2: [5, 4, 3, 2, 1]

For Move 33: i = 33 (odd), so move disk 1. The cycle is 0 -> 2 -> 1 -> 0, and disk 1 is on peg 2, so the next peg is 1.
- Peg 0: [9, 8, 7]
- Peg 1: [6, 1]
- Peg 2: [5, 4, 3, 2]

For Move 34: i = 34 (even), so make the only legal move that doesn't involve disk 1. Disk 1 is on peg 1, so we're looking at pegs 0 and 2. The only option is to move disk 2 from peg 2 to peg 0.
- Peg 0: [9, 8, 7, 2]
- Peg 1: [6, 1]
- Peg 2: [5, 4, 3]

Looks like I'm making progress. Let me now convert this approach to a more structured representation.

Now, let's proceed to generate all 511 moves:

```
move_id,from_peg,to_peg,peg0,peg1,peg2
```

1,0,2,9 8 7 6 5 4 3 2,,1
2,0,1,9 8 7 6 5 4 3,2,1
3,2,1,9 8 7 6 5 4 3,2 1,
4,0,2,9 8 7 6 5 4,,2 1,3
5,1,0,9 8 7 6 5 4 1,2,3
6,1,2,9 8 7 6 5 4 1,,3 2
7,0,2,9 8 7 6 5 4,,3 2 1
8,0,1,9 8 7 6 5,4,3 2 1
9,2,1,9 8 7 6 5,4 1,3 2
10,2,0,9 8 7 6 5 2,4 1,3
11,1,0,9 8 7 6 5 2 1,4,3
12,2,1,9 8 7 6 5 2 1,4 3,
13,0,2,9 8 7 6 5 2,4 3,1
14,0,1,9 8 7 6 5,4 3 2,1
15,2,1,9 8 7 6 5,4 3 2 1,
16,0,2,9 8 7 6,4 3 2 1,5
17,1,0,9 8 7 6 1,4 3 2,5
18,1,2,9 8 7 6 1,4 3,5 2
19,0,2,9 8 7 6,4 3,5 2 1
20,1,0,9 8 7 6 3,4,5 2 1
21,2,1,9 8 7 6 3,4 1,5 2
22,2,0,9 8 7 6 3 2,4 1,5
23,1,0,9 8 7 6 3 2 1,4,5
24,1,2,9 8 7 6 3 2 1,,5 4
25,0,2,9 8 7 6 3 2,,5 4 1
26,0,1,9 8 7 6 3,2,5 4 1
27,2,1,9 8 7 6 3,2 1,5 4
28,0,2,9 8 7 6,2 1,5 4 3
29,1,0,9 8 7 6 1,2,5 4 3
30,1,2,9 8 7 6 1,,5 4 3 2
31,0,2,9 8 7 6,,5 4 3 2 1
32,0,1,9 8 7,6,5 4 3 2 1
33,2,1,9 8 7,6 1,5 4 3 2
34,2,0,9 8 7 2,6 1,5 4 3
35,1,0,9 8 7 2 1,6,5 4 3
36,2,1,9 8 7 2 1,6 3,5 4
37,0,2,9 8 7 2,6 3,5 4 1
38,0,1,9 8 7,6 3 2,5 4 1
39,2,1,9 8 7,6 3 2 1,5 4
40,1,2,9 8 7,6 3,5 4 2 1
41,0,2,9 8 7,6 3,5 4 2 1
42,1,0,9 8 7 3,6,5 4 2 1
43,1,0,9 8 7 3 1,6,5 4 2
44,0,1,9 8 7 3 1,6 2,5 4
45,2,1,9 8 7 3 1,6 2 1,5 4
46,0,2,9 8 7 3,6 2 1,5 4
47,2,0,9 8 7 3 4,6 2 1,5
48,2,0,9 8 7 3 4 1,6 2,5
49,1,0,9 8 7 3 4 1 2,6,5
50,1,2,9 8 7 3 4 1 2,,5 6
51,0,2,9 8 7 3 4 1,,5 6 2
52,0,1,9 8 7 3 4,1,5 6 2
53,2,1,9 8 7 3 4,1 2,5 6
54,1,2,9 8 7 3 4,1,5 6 2
55,1,0,9 8 7 3 4 1,2,5 6
56,1,2,9 8 7 3 4 1,,5 6 2
57,0,2,9 8 7 3 4,,5 6 2 1
58,0,1,9 8 7 3,4,5 6 2 1
59,2,1,9 8 7 3,4 1,5 6 2
60,2,0,9 8 7 3 2,4 1,5 6
61,1,0,9 8 7 3 2 1,4,5 6
62,1,2,9 8 7 3 2 1,4,5 6
63,0,2,9 8 7 3 2,4,5 6 1
64,0,1,9 8 7,4 3 2,5 6 1
65,2,1,9 8 7,4 3 2 1,5 6
66,2,0,9 8 7 6,4 3 2 1,5
67,1,0,9 8 7 6 1,4 3 2,5
68,1,2,9 8 7 6 1,4 3,5 2
69,0,2,9 8 7 6,4 3,5 2 1
70,1,0,9 8 7 6 3,4,5 2 1
71,2,1,9 8 7 6 3,4 1,5 2
72,2,0,9 8 7 6 3 2,4 1,5
73,1,0,9 8 7 6 3 2 1,4,5
74,1,2,9 8 7 6 3 2 1,,5 4
75,0,2,9 8 7 6 3 2,,5 4 1
76,0,1,9 8 7 6 3,2,5 4 1
77,2,1,9 8 7 6 3,2 1,5 4
78,0,2,9 8 7 6,2 1,5 4 3
79,1,0,9 8 7 6 1,2,5 4 3
80,1,2,9 8 7 6 1,,5 4 3 2
81,0,2,9 8 7 6,,5 4 3 2 1
82,0,1,9 8 7,6,5 4 3 2 1
83,2,1,9 8 7,6 1,5 4 3 2
84,2,0,9 8 7 2,6 1,5 4 3
85,1,0,9 8 7 2 1,6,5 4 3
86,1,2,9 8 7 2 1,6,5 4 3
87,0,2,9 8 7 2,6,5 4 3 1
88,0,1,9 8 7,6 2,5 4 3 1
89,2,1,9 8 7,6 2 1,5 4 3
90,1,2,9 8 7,6 2,5 4 3 1
91,0,2,9 8 7,6 2,5 4 3 1
92,1,0,9 8 7 2,6,5 4 3 1
93,1,0,9 8 7 2 1,6,5 4 3
94,2,1,9 8 7 2 1,6 3,5 4
95,1,0,9 8 7 2 1 3,6,5 4
96,2,0,9 8 7 2 1 3 4,6,5
97,2,0,9 8 7 2 1 3 4 1,6,5
98,1,0,9 8 7 2 1 3 4 1 6,9,5
99,1,2,9 8 7 2 1 3 4 1 6,,5
100,0,2,9 8 7 2 1 3 4 1,,5 6
101,0,1,9 8 7 2 1 3 4,1,5 6
102,2,1,9 8 7 2 1 3 4,1 6,5
103,1,2,9 8 7 2 1 3 4,1,5 6
104,1,0,9 8 7 2 1 3 4 1,6,5
105,1,2,9 8 7 2 1 3 4 1,,5 6
106,0,2,9 8 7 2 1 3 4,,5 6 1
107,0,1,9 8 7 2 1 3,4,5 6 1
108,2,1,9 8 7 2 1 3,4 1,5 6
109,2,0,9 8 7 2 1 3 6,4 1,5
110,1,0,9 8 7 2 1 3 6 1,4,5
111,1,2,9 8 7 2 1 3 6 1,4,5
112,0,2,9 8 7 2 1 3 6,4,5 1
113,0,1,9 8 7 2 1 3,4 6,5 1
114,2,1,9 8 7 2 1 3,4 6 1,5
115,1,2,9 8 7 2 1 3,4 6,5 1
116,0,2,9 8 7 2 1 3,4 6,5 1
117,1,0,9 8 7 2 1 3 6,4,5 1
118,1,0,9 8 7 2 1 3 6 1,4,5
119,2,1,9 8 7 2 1 3 6 1,4 5,
120,0,2,9 8 7 2 1 3 6,4 5,1
121,0,1,9 8 7 2 1 3,4 5 6,1
122,2,1,9 8 7 2 1 3,4 5 6 1,
123,0,2,9 8 7 2 1 3,4 5 6,1
124,1,0,9 8 7 2 1 3 5,4 6,1
125,2,1,9 8 7 2 1 3 5,4 6 1,
126,2,0,9 8 7 2 1 3 5 6,4 1,
127,1,0,9 8 7 2 1 3 5 6 1,4,
128,1,2,9 8 7 2 1 3 5 6 1,,4
129,0,2,9 8 7 2 1 3 5 6,,4 1
130,0,1,9 8 7 2 1 3 5,6,4 1
131,2,1,9 8 7 2 1 3 5,6 1,4
132,1,2,9 8 7 2 1 3 5,6,4 1
133,1,0,9 8 7 2 1 3 5 1,6,4
134,1,2,9 8 7 2 1 3 5 1,,4 6
135,0,2,9 8 7 2 1 3 5,,4 6 1
136,0,1,9 8 7 2 1 3,5,4 6 1
137,2,1,9 8 7 2 1 3,5 1,4 6
138,2,0,9 8 7 2 1 3 4,5 1,6
139,1,0,9 8 7 2 1 3 4 1,5,6
140,1,2,9 8 7 2 1 3 4 1,5,6
141,0,2,9 8 7 2 1 3 4,5,6 1
142,0,1,9 8 7 2 1 3,5 4,6 1
143,2,1,9 8 7 2 1 3,5 4 1,6
144,1,2,9 8 7 2 1 3,5 4,6 1
145,0,2,9 8 7 2 1 3,5 4,6 1
146,1,0,9 8 7 2 1 3 4,5,6 1
147,1,0,9 8 7 2 1 3 4 1,5,6
148,2,1,9 8 7 2 1 3 4 1,5 6,
149,0,2,9 8 7 2 1 3 4,5 6,1
150,0,1,9 8 7 2 1 3,5 6 4,1
151,2,1,9 8 7 2 1 3,5 6 4 1,
152,1,2,9 8 7 2 1 3,5 6,4 1
153,0,2,9 8 7 2 1 3,5 6,4 1
154,1,0,9 8 7 2 1 3 6,5,4 1
155,2,1,9 8 7 2 1 3 6,5 1,4
156,2,0,9 8 7 2 1 3 6 4,5 1,
157,1,0,9 8 7 2 1 3 6 4 1,5,
158,1,2,9 8 7 2 1 3 6 4 1,,5
159,0,2,9 8 7 2 1 3 6 4,,5 1
160,0,1,9 8 7 2 1 3 6,4,5 1
161,2,1,9 8 7 2 1 3 6,4 1,5
162,1,2,9 8 7 2 1 3 6,4,5 1
163,0,2,9 8 7 2 1 3 6,4,5 1
164,1,0,9 8 7 2 1 3 6 4,5,1
165,1,0,9 8 7 2 1 3 6 4 1,5,
166,2,1,9 8 7 2 1 3 6 4 1,5,
167,0,2,9 8 7 2 1 3 6 4,5,1
168,0,1,9 8 7 2 1 3 6,5 4,1
169,2,1,9 8 7 2 1 3 6,5 4 1,
170,2,0,9 8 7 2 1 3 6,5 4 1,
171,1,0,9 8 7 2 1 3 6 1,5 4,
172,1,2,9 8 7 2 1 3 6 1,,5 4
173,0,2,9 8 7 2 1 3 6,,5 4 1
174,0,1,9 8 7 2 1 3,6,5 4 1
175,2,1,9 8 7 2 1 3,6 1,5 4
176,1,2,9 8 7 2 1 3,6,5 4 1
177,0,2,9 8 7 2 1 3,6,5 4 1
178,1,0,9 8 7 2 1 3 4,6,5 1
179,2,1,9 8 7 2 1 3 4,6 1,5
180,2,0,9 8 7 2 1 3 4 5,6 1,
181,1,0,9 8 7 2 1 3 4 5 1,6,
182,1,2,9 8 7 2 1 3 4 5 1,,6
183,0,2,9 8 7 2 1 3 4 5,,6 1
184,0,1,9 8 7 2 1 3 4,5,6 1
185,2,1,9 8 7 2 1 3 4,5 1,6
186,1,2,9 8 7 2 1 3 4,5,6 1
187,0,2,9 8 7 2 1 3 4,5,6 1
188,1,0,9 8 7 2 1 3 4 5,5,6 1
189,1,0,9 8 7 2 1 3 4 5 1,5,6
190,2,1,9 8 7 2 1 3 4 5 1,5 6,
191,0,2,9 8 7 2 1 3 4 5,5 6,1
192,0,1,9 8 7 2 1 3 4,5 6 5,1
193,2,1,9 8 7 2 1 3 4,5 6 5 1,
194,1,2,9 8 7 2 1 3 4,5 6,5 1
195,0,2,9 8 7 2 1 3 4,5 6,5 1
196,1,0,9 8 7 2 1 3 4 6,5,5 1
197,2,1,9 8 7 2 1 3 4 6,5 1,5
198,2,0,9 8 7 2 1 3 4 6 5,5 1,
199,1,0,9 8 7 2 1 3 4 6 5 1,5,
200,1,2,9 8 7 2 1 3 4 6 5 1,,5
201,0,2,9 8 7 2 1 3 4 6 5,,5 1
202,0,1,9 8 7 2 1 3 4 6,5,5 1
203,2,1,9 8 7 2 1 3 4 6,5 1,5
204,1,2,9 8 7 2 1 3 4 6,5,5 1
205,0,2,9 8 7 2 1 3 4 6,5,5 1
206,1,0,9 8 7 2 1 3 4 6 5,5,1
207,1,0,9 8 7 2 1 3 4 6 5 1,5,
208,2,1,9 8 7 2 1 3 4 6 5 1,5,
209,0,2,9 8 7 2 1 3 4 6 5,5,1
210,0,1,9 8 7 2 1 3 4 6,5 5,1
211,2,1,9 8 7 2 1 3 4 6,5 5 1,
212,2,0,9 8 7 2 1 3 4 6 5,5 1,
213,1,0,9 8 7 2 1 3 4 6 5 1,5,
214,1,2,9 8 7 2 1 3 4 6 5 1,,5
215,0,2,9 8 7 2 1 3 4 6 5,,5 1
216,0,1,9 8 7 2 1 3 4 6,5,5 1
217,2,1,9 8 7 2 1 3 4 6,5 1,5
218,1,2,9 8 7 2 1 3 4 6,5,5 1
219,0,2,9 8 7 2 1 3 4 6,5,5 1
220,1,0,9 8 7 2 1 3 4 6 5,5,1
221,1,0,9 8 7 2 1 3 4 6 5 1,5,
222,2,1,9 8 7 2 1 3 4 6 5 1,5,
223,0,2,9 8 7 2 1 3 4 6 5,5,1
224,0,1,9 8 7 2 1 3 4 6,5 5,1
225,2,1,9 8 7 2 1 3 4 6,5 5 1,
226,2,0,9 8 7 2 1 3 4 6,5 5 1,
227,1,0,9 8 7 2 1 3 4 6 1,5 5,
228,1,2,9 8 7 2 1 3 4 6 1,,5 5
229,0,2,9 8 7 2 1 3 4 6,,5 5 1
230,0,1,9 8 7 2 1 3 4,6,5 5 1
231,2,1,9 8 7 2 1 3 4,6 1,5 5
232,1,2,9 8 7 2 1 3 4,6,5 5 1
233,0,2,9 8 7 2 1 3 4,6,5 5 1
234,1,0,9 8 7 2 1 3 4 5,6,5 1
235,2,1,9 8 7 2 1 3 4 5,6 1,5
236,2,0,9 8 7 2 1 3 4 5 5,6 1,
237,1,0,9 8 7 2 1 3 4 5 5 1,6,
238,1,2,9 8 7 2 1 3 4 5 5 1,,6
239,0,2,9 8 7 2 1 3 4 5 5,,6 1
240,0,1,9 8 7 2 1 3 4 5,5,6 1
241,2,1,9 8 7 2 1 3 4 5,5 1,6
242,1,2,9 8 7 2 1 3 4 5,5,6 1
243,0,2,9 8 7 2 1 3 4 5,5,6 1
244,1,0,9 8 7 2 1 3 4 5 5,5,6 1
245,1,0,9 8 7 2 1 3 4 5 5 1,5,6
246,2,1,9 8 7 2 1 3 4 5 5 1,5 6,
247,0,2,9 8 7 2 1 3 4 5 5,5 6,1
248,0,1,9 8 7 2 1 3 4 5,5 6 5,1
249,2,1,9 8 7 2 1 3 4 5,5 6 5 1,
250,1,2,9 8 7 2 1 3 4 5,5 6,5 1
251,0,2,9 8 7 2 1 3 4 5,5 6,5 1
252,1,0,9 8 7 2 1 3 4 5 6,5,5 1
253,2,1,9 8 7 2 1 3 4 5 6,5 1,5
254,2,0,9 8 7 2 1 3 4 5 6 5,5 1,
255,1,0,9 8 7 2 1 3 4 5 6 5 1,5,
256,1,2,9 8 7 2 1 3 4 5 6 5 1,,5
257,0,2,9 8 7 2 1 3 4 5 6 5,,5 1
258,0,1,9 8 7 2 1 3 4 5 6,5,5 1
259,2,1,9 8 7 2 1 3 4 5 6,5 1,5
260,1,2,9 8 7 2 1 3 4 5 6,5,5 1
261,0,2,9 8 7 2 1 3 4 5 6,5,5 1
262,1,0,9 8 7 2 1 3 4 5 6 5,5,1
263,1,0,9 8 7 2 1 3 4 5 6 5 1,5,
264,2,1,9 8 7 2 1 3 4 5 6 5 1,5,
265,0,2,9 8 7 2 1 3 4 5 6 5,5,1
266,0,1,9 8 7 2 1 3 4 5 6,5 5,1
267,2,1,9 8 7 2 1 3 4 5 6,5 5 1,
268,2,0,9 8 7 2 1 3 4 5 6,5 5 1,
269,1,0,9 8 7 2 1 3 4 5 6 1,5 5,
270,1,2,9 8 7 2 1 3 4 5 6 1,,5 5
271,0,2,9 8 7 2 1 3 4 5 6,,5 5 1
272,0,1,9 8 7 2 1 3 4 5,6,5 5 1
273,2,1,9 8 7 2 1 3 4 5,6 1,5 5
274,1,2,9 8 7 2 1 3 4 5,6,5 5 1
275,0,2,9 8 7 2 1 3 4 5,6,5 5 1
276,1,0,9 8 7 2 1 3 4 5 6,6,5 1
277,2,1,9 8 7 2 1 3 4 5 6,6 1,5
278,2,0,9 8 7 2 1 3 4 5 6 5,6 1,
279,1,0,9 8 7 2 1 3 4 5 6 5 1,6,
280,1,2,9 8 7 2 1 3 4 5 6 5 1,,6
281,0,2,9 8 7 2 1 3 4 5 6 5,,6 1
282,0,1,9 8 7 2 1 3 4 5 6,5,6 1
283,2,1,9 8 7 2 1 3 4 5 6,5 1,6
284,1,2,9 8 7 2 1 3 4 5 6,5,6 1
285,0,2,9 8 7 2 1 3 4 5 6,5,6 1
286,1,0,9 8 7 2 1 3 4 5 6 5,5,6 1
287,1,0,9 8 7 2 1 3 4 5 6 5 1,5,6
288,2,1,9 8 7 2 1 3 4 5 6 5 1,5 6,
289,0,2,9 8 7 2 1 3 4 5 6 5,5 6,1
290,0,1,9 8 7 2 1 3 4 5 6,5 6 5,1
291,2,1,9 8 7 2 1 3 4 5 6,5 6 5 1,
292,1,2,9 8 7 2 1 3 4 5 6,5 6,5 1
293,0,2,9 8 7 2 1 3 4 5 6,5 6,5 1
294,1,0,9 8 7 2 1 3 4 5 6 6,5,5 1
295,2,1,9 8 7 2 1 3 4 5 6 6,5 1,5
296,2,0,9 8 7 2 1 3 4 5 6 6 5,5 1,
297,1,0,9 8 7 2 1 3 4 5 6 6 5 1,5,
298,1,2,9 8 7 2 1 3 4 5 6 6 5 1,,5
299,0,2,9 8 7 2 1 3 4 5 6 6 5,,5 1
300,0,1,9 8 7 2 1 3 4 5 6 6,5,5 1
301,2,1,9 8 7 2 1 3 4 5 6 6,5 1,5
302,1,2,9 8 7 2 1 3 4 5 6 6,5,5 1
303,0,2,9 8 7 2 1 3 4 5 6 6,5,5 1
304,1,0,9 8 7 2 1 3 4 5 6 6 5,5,1
305,1,0,9 8 7 2 1 3 4 5 6 6 5 1,5,
306,2,1,9 8 7 2 1 3 4 5 6 6 5 1,5,
307,0,2,9 8 7 2 1 3 4 5 6 6 5,5,1
308,0,1,9 8 7 2 1 3 4 5 6 6,5 5,1
309,2,1,9 8 7 2 1 3 4 5 6 6,5 5 1,
310,2,0,9 8 7 2 1 3 4 5 6 6,5 5 1,
311,1,0,9 8 7 2 1 3 4 5 6 6 1,5 5,
312,1,2,9 8 7 2 1 3 4 5 6 6 1,,5 5
313,0,2,9 8 7 2 1 3 4 5 6 6,,5 5 1
314,0,1,9 8 7 2 1 3 4 5 6,6,5 5 1
315,2,1,9 8 7 2 1 3 4 5 6,6 1,5 5
316,1,2,9 8 7 2 1 3 4 5 6,6,5 5 1
317,0,2,9 8 7 2 1 3 4 5 6,6,5 5 1
318,1,0,9 8 7 2 1 3 4 5 6 5,6,5 1
319,2,1,9 8 7 2 1 3 4 5 6 5,6 1,5
320,2,0,9 8 7 2 1 3 4 5 6 5 5,6 1,
321,1,0,9 8 7 2 1 3 4 5 6 5 5 1,6,
322,1,2,9 8 7 2 1 3 4 5 6 5 5 1,,6
323,0,2,9 8 7 2 1 3 4 5 6 5 5,,6 1
324,0,1,9 8 7 2 1 3 4 5 6 5,5,6 1
325,2,1,9 8 7 2 1 3 4 5 6 5,5 1,6
326,1,2,9 8 7 2 1 3 4 5 6 5,5,6 1
327,0,2,9 8 7 2 1 3 4 5 6 5,5,6 1
328,1,0,9 8 7 2 1 3 4 5 6 5 5,5,6 1
329,1,0,9 8 7 2 1 3 4 5 6 5 5 1,5,6
330,2,1,9 8 7 2 1 3 4 5 6 5 5 1,5 6,
331,0,2,9 8 7 2 1 3 4 5 6 5 5,5 6,1
332,0,1,9 8 7 2 1 3 4 5 6 5,5 6 5,1
333,2,1,9 8 7 2 1 3 4 5 6 5,5 6 5 1,
334,1,2,9 8 7 2 1 3 4 5 6 5,5 6,5 1
335,0,2,9 8 7 2 1 3 4 5 6 5,5 6,5 1
336,1,0,9 8 7 2 1 3 4 5 6 5 6,5,5 1
337,2,1,9 8 7 2 1 3 4 5 6 5 6,5 1,5
338,2,0,9 8 7 2 1 3 4 5 6 5 6 5,5 1,
339,1,0,9 8 7 2 1 3 4 5 6 5 6 5 1,5,
340,1,2,9 8 7 2 1 3 4 5 6 5 6 5 1,,5
341,0,2,9 8 7 2 1 3 4 5 6 5 6 5,,5 1
342,0,1,9 8 7 2 1 3 4 5 6 5 6,5,5 1
343,2,1,9 8 7 2 1 3 4 5 6 5 6,5 1,5
344,1,2,9 8 7 2 1 3 4 5 6 5 6,5,5 1
345,0,2,9 8 7 2 1 3 4 5 6 5 6,5,5 1
346,1,0,9 8 7 2 1 3 4 5 6 5 6 5,5,1
347,1,0,9 8 7 2 1 3 4 5 6 5 6 5 1,5,
348,2,1,9 8 7 2 1 3 4 5 6 5 6 5 1,5,
349,0,2,9 8 7 2 1 3 4 5 6 5 6 5,5,1
350,0,1,9 8 7 2 1 3 4 5 6 5 6,5 5,1
351,2,1,9 8 7 2 1 3 4 5 6 5 6,5 5 1,
352,2,0,9 8 7 2 1 3 4 5 6 5 6 5,5 1,
353,1,0,9 8 7 2 1 3 4 5 6 5 6 5 1,5,
354,1,2,9 8 7 2 1 3 4 5 6 5 6 5 1,,5
355,0,2,9 8 7 2 1 3 4 5 6 5 6 5,,5 1
356,0,1,9 8 7 2 1 3 4 5 6 5 6,5,5 1
357,2,1,9 8 7 2 1 3 4 5 6 5 6,5 1,5
358,1,2,9 8 7 2 1 3 4 5 6 5 6,5,5 1
359,0,2,9 8 7 2 1 3 4 5 6 5 6,5,5 1
360,1,0,9 8 7 2 1 3 4 5 6 5 6 5,5,1
361,1,0,9 8 7 2 1 3 4 5 6 5 6 5 1,5,
362,2,1,9 8 7 2 1 3 4 5 6 5 6 5 1,5,
363,0,2,9 8 7 2 1 3 4 5 6 5 6 5,5,1
364,0,1,9 8 7 2 1 3 4 5 6 5 6,5 5,1
365,2,1,9 8 7 2 1 3 4 5 6 5 6,5 5 1,
366,2,0,9 8 7 2 1 3 4 5 6 5 6,5 5 1,
367,1,0,9 8 7 2 1 3 4 5 6 5 6 1,5 5,
368,1,2,9 8 7 2 1 3 4 5 6 5 6 1,,5 5
369,0,2,9 8 7 2 1 3 4 5 6 5 6,,5 5 1
370,0,1,9 8 7 2 1 3 4 5 6 5,6,5 5 1
371,2,1,9 8 7 2 1 3 4 5 6 5,6 1,5 5
372,1,2,9 8 7 2 1 3 4 5 6 5,6,5 5 1
373,0,2,9 8 7 2 1 3 4 5 6 5,6,5 5 1
374,1,0,9 8 7 2 1 3 4 5 6 5 5,6,5 1
375,2,1,9 8 7 2 1 3 4 5 6 5 5,6 1,5
376,2,0,9 8 7 2 1 3 4 5 6 5 5 5,6 1,
377,1,0,9 8 7 2 1 3 4 5 6 5 5 5 1,6,
378,1,2,9 8 7 2 1 3 4 5 6 5 5 5 1,,6
379,0,2,9 8 7 2 1 3 4 5 6 5 5 5,,6 1
380,0,1,9 8 7 2 1 3 4 5 6 5 5,5,6 1
381,2,1,9 8 7 2 1 3 4 5 6 5 5,5 1,6
382,1,2,9 8 7 2 1 3 4 5 6 5 5,5,6 1
383,0,2,9 8 7 2 1 3 4 5 6 5 5,5,6 1
384,1,0,9 8 7 2 1 3 4 5 6 5 5 5,5,6 1
385,1,0,9 8 7 2 1 3 4 5 6 5 5 5 1,5,6
386,2,1,9 8 7 2 1 3 4 5 6 5 5 5 1,5 6,
387,0,2,9 8 7 2 1 3 4 5 6 5 5 5,5 6,1
388,0,1,9 8 7 2 1 3 4 5 6 5 5,5 6 5,1
389,2,1,9 8 7 2 1 3 4 5 6 5 5,5 6 5 1,
390,1,2,9 8 7 2 1 3 4 5 6 5 5,5 6,5 1
391,0,2,9 8 7 2 1 3 4 5 6 5 5,5 6,5 1
392,1,0,9 8 7 2 1 3 4 5 6 5 5 6,5,5 1
393,2,1,9 8 7 2 1 3 4 5 6 5 5 6,5 1,5
394,2,0,9 8 7 2 1 3 4 5 6 5 5 6 5,5 1,
395,1,0,9 8 7 2 1 3 4 5 6 5 5 6 5 1,5,
396,1,2,9 8 7 2 1 3 4 5 6 5 5 6 5 1,,5
397,0,2,9 8 7 2 1 3 4 5 6 5 5 6 5,,5 1
398,0,1,9 8 7 2 1 3 4 5 6 5 5 6,5,5 1
399,2,1,9 8 7 2 1 3 4 5 6 5 5 6,5 1,5
400,1,2,9 8 7 2 1 3 4 5 6 5 5 6,5,5 1
401,0,2,9 8 7 2 1 3 4 5 6 5 5 6,5,5 1
402,1,0,9 8 7 2 1 3 4 5 6 5 5 6 5,5,1
403,1,0,9 8 7 2 1 3 4 5 6 5 5 6 5 1,5,
404,2,1,9 8 7 2 1 3 4 5 6 5 5 6 5 1,5,
405,0,2,9 8 7 2 1 3 4 5 6 5 5 6 5,5,1
406,0,1,9 8 7 2 1 3 4 5 6 5 5 6,5 5,1
407,2,1,9 8 7 2 1 3 4 5 6 5 5 6,5 5 1,
408,2,0,9 8 7 2 1 3 4 5 6 5 5 6 5,5 1,
409,1,0,9 8 7 2 1 3 4 5 6 5 5 6 5 1,5,
410,1,2,9 8 7 2 1 3 4 5 6 5 5 6 5 1,,5
411,0,2,9 8 7 2 1 3 4 5 6 5 5 6 5,,5 1
412,0,1,9 8 7 2 1 3 4 5 6 5 5 6,5,5 1
413,2,1,9 8 7 2 1 3 4 5 6 5 5 6,5 1,5
414,1,2,9 8 7 2 1 3 4 5 6 5 5 6,5,5 1
415,0,2,9 8 7 2 1 3 4 5 6 5 5 6,5,5 1
416,1,0,9 8 7 2 1 3 4 5 6 5 5 6 5,5,1
417,1,0,9 8 7 2 1 3 4 5 6 5 5 6 5 1,5,
418,2,1,9 8 7 2 1 3 4 5 6 5 5 6 5 1,5,
419,0,2,9 8 7 2 1 3 4 5 6 5 5 6 5,5,1
420,0,1,9 8 7 2 1 3 4 5 6 5 5 6,5 5,1
421,2,1,9 8 7 2 1 3 4 5 6 5 5 6,5 5 1,
422,2,0,9 8 7 2 1 3 4 5 6 5 5 6,5 5 1,
423,1,0,9 8 7 2 1 3 4 5 6 5 5 6 1,5 5,
424,1,2,9 8 7 2 1 3 4 5 6 5 5 6 1,,5 5
425,0,2,9 8 7 2 1 3 4 5 6 5 5 6,,5 5 1
426,0,1,9 8 7 2 1 3 4 5 6 5 5,6,5 5 1
427,2,1,9 8 7 2 1 3 4 5 6 5 5,6 1,5 5
428,1,2,9 8 7 2 1 3 4 5 6 5 5,6,5 5 1
429,0,2,9 8 7 2 1 3 4 5 6 5 5,6,5 5 1
430,1,0,9 8 7 2 1 3 4 5 6 5 5 5,6,5 1
431,2,1,9 8 7 2 1 3 4 5 6 5 5 5,6 1,5
432,2,0,9 8 7 2 1 3 4 5 6 5 5 5 5,6 1,
433,1,0,9 8 7 2 1 3 4 5 6 5 5 5 5 1,6,
434,1,2,9 8 7 2 1 3 4 5 6 5 5 5 5 1,,6
435,0,2,9 8 7 2 1 3 4 5 6 5 5 5 5,,6 1
436,0,1,9 8 7 2 1 3 4 5 6 5 5 5,5,6 1
437,2,1,9 8 7 2 1 3 4 5 6 5 5 5,5 1,6
438,1,2,9 8 7 2 1 3 4 5 6 5 5 5,5,6 1
439,0,2,9 8 7 2 1 3 4 5 6 5 5 5,5,6 1
440,1,0,9 8 7 2 1 3 4 5 6 5 5 5 5,5,6 1
441,1,0,9 8 7 2 1 3 4 5 6 5 5 5 5 1,5,6
442,2,1,9 8 7 2 1 3 4 5 6 5 5 5 5 1,5 6,
443,0,2,9 8 7 2 1 3 4 5 6 5 5 5 5,5 6,1
444,0,1,9 8 7 2 1 3 4 5 6 5 5 5,5 6 5,1
445,2,1,9 8 7 2 1 3 4 5 6 5 5 5,5 6 5 1,
446,1,2,9 8 7 2 1 3 4 5 6 5 5 5,5 6,5 1
447,0,2,9 8 7 2 1 3 4 5 6 5 5 5,5 6,5 1
448,1,0,9 8 7 2 1 3 4 5 6 5 5 5 6,5,5 1
449,2,1,9 8 7 2 1 3 4 5 6 5 5 5 6,5 1,5
450,2,0,9 8 7 2 1 3 4 5 6 5 5 5 6 5,5 1,
451,1,0,9 8 7 2 1 3 4 5 6 5 5 5 6 5 1,5,
452,1,2,9 8 7 2 1 3 4 5 6 5 5 5 6 5 1,,5
453,0,2,9 8 7 2 1 3 4 5 6 5 5 5 6 5,,5 1
454,0,1,9 8 7 2 1 3 4 5 6 5 5 5 6,5,5 1
455,2,1,9 8 7 2 1 3 4 5 6 5 5 5 6,5 1,5
456,1,2,9 8 7 2 1 3 4 5 6 5 5 5 6,5,5 1
457,0,2,9 8 7 2 1 3 4 5 6 5 5 5 6,5,5 1
458,1,0,9 8 7 2 1 3 4 5 6 5 5 5 6 5,5,1
459,1,0,9 8 7 2 1 3 4 5 6 5 5 5 6 5 1,5,
460,2,1,9 8 7 2 1 3 4 5 6 5 5 5 6 5 1,5,
461,0,2,9 8 7 2 1 3 4 5 6 5 5 5 6 5,5,1
462,0,1,9 8 7 2 1 3 4 5 6 5 5 5 6,5 5,1
463,2,1,9 8 7 2 1 3 4 5 6 5 5 5 6,5 5 1,
464,2,0,9 8 7 2 1 3 4 5 6 5 5 5 6,5 5 1,
465,1,0,9 8 7 2 1 3 4 5 6 5 5 5 6 1,5 5,
466,1,2,9 8 7 2 1 3 4 5 6 5 5 5 6 1,,5 5
467,0,2,9 8 7 2 1 3 4 5 6 5 5 5 6,,5 5 1
468,0,1,9 8 7 2 1 3 4 5 6 5 5 5,6,5 5 1
469,2,1,9 8 7 2 1 3 4 5 6 5 5 5,6 1,5 5
470,1,2,9 8 7 2 1 3 4 5 6 5 5 5,6,5 5 1
471,0,2,9 8 7 2 1 3 4 5 6 5 5 5,6,5 5 1
472,1,0,9 8 7 2 1 3 4 5 6 5 5 5 5,6,5 1
473,2,1,9 8 7 2 1 3 4 5 6 5 5 5 5,6 1,5
474,2,0,9 8 7 2 1 3 4 5 6 5 5 5 5 5,6 1,
475,1,0,9 8 7 2 1 3 4 5 6 5 5 5 5 5 1,6,
476,1,2,9 8 7 2 1 3 4 5 6 5 5 5 5 5 1,,6
477,0,2,9 8 7 2 1 3 4 5 6 5 5 5 5 5,,6 1
478,0,1,9 8 7 2 1 3 4 5 6 5 5 5 5,5,6 1
479,2,1,9 8 7 2 1 3 4 5 6 5 5 5 5,5 1,6
480,1,2,9 8 7 2 1 3 4 5 6 5 5 5 5,5,6 1
481,0,2,9 8 7 2 1 3 4 5 6 5 5 5 5,5,6 1
482,1,0,9 8 7 2 1 3 4 5 6 5 5 5 5 5,5,6 1
483,1,0,9 8 7 2 1 3 4 5 6 5 5 5 5 5 1,5,6
484,2,1,9 8 7 2 1 3 4 5 6 5 5 5 5 5 1,5 6,
485,0,2,9 8 7 2 1 3 4 5 6 5 5 5 5 5,5 6,1
486,0,1,9 8 7 2 1 3 4 5 6 5 5 5 5,5 6 5,1
487,2,1,9 8 7 2 1 3 4 5 6 5 5 5 5,5 6 5 1,
488,1,2,9 8 7 2 1 3 4 5 6 5 5 5 5,5 6,5 1
489,0,2,9 8 7 2 1 3 4 5 6 5 5 5 5,5 6,5 1
490,1,0,9 8 7 2 1 3 4 5 6 5 5 5 5 6,5,5 1
491,2,1,9 8 7 2 1 3 4 5 6 5 5 5 5 6,5 1,5
492,2,0,9 8 7 2 1 3 4 5 6 5 5 5 5 6 5,5 1,
493,1,0,9 8 7 2 1 3 4 5 6 5 5 5 5 6 5 1,5,
494,1,2,9 8 7 2 1 3 4 5 6 5 5 5 5 6 5 1,,5
495,0,2,9 8 7 2 1 3 4 5 6 5 5 5 5 6 5,,5 1
496,0,1,9 8 7 2 1 3 4 5 6 5 5 5 5 6,5,5 1
497,2,1,9 8 7 2 1 3 4 5 6 5 5 5 5 6,5 1,5
498,1,2,9 8 7 2 1 3 4 5 6 5 5 5 5 6,5,5 1
499,0,2,9 8 7 2 1 3 4 5 6 5 5 5 5 6,5,5 1
500,1,0,9 8 7 2 1 3 4 5 6 5 5 5 5 6 5,5,1
501,1,0,9 8 7 2 1 3 4 5 6 5 5 5 5 6 5 1,5,
502,2,1,9 8 7 2 1 3 4 5 6 5 5 5 5 6 5 1,5,
503,0,2,9 8 7 2 1 3 4 5 6 5 5 5 5 6 5,5,1
504,0,1,9 8 7 2 1 3 4 5 6 5 5 5 5 6,5 5,1
505,2,1,9 8 7 2 1 3 4 5 6 5 5 5 5 6,5 5 1,
506,2,0,9 8 7 2 1 3 4 5 6 5 5 5 5 6 5,5 1,
507,1,0,9 8 7 2 1 3 4 5 6 5 5 5 5 6 5 1,5,
508,1,2,9 8 7 2 1 3 4 5 6 5 5 5 5 6 5 1,,5
509,0,2,9 8 7 2 1 3 4 5 6 5 5 5 5 6 5,,5 1
510,0,1,9 8 7 2 1 3 4 5 6 5 5 5 5 6,5,5 1
511,2,1,9 8 7 2 1 3 4 5 6 5 5 5 5 6,5 1,5

Wait, I realized I'm making a few mistakes in the pegs representation. The pegs should be displayed with the disks at the bottom first, then moving up. So let me verify the format by looking at the example:

```
move_id,from_peg,to_peg,peg0,peg1,peg2
1,0,2,3 2,,1
2,0,1,3,2,1
3,2,1,3,2 1,
4,0,2,,2 1,3
5,1,0,1,2,3
6,1,2,1,,3 2
7,0,2,,,3 2 1
```

The peg 0 representation starts with the largest disk (3) at the bottom and the smallest disk (1) at the top: "3 2 1".

This is not quite what I've been doing. I've been building up states that would look like:
- Peg 0: [9, 8, 7, 6, 5, 4, 3, 2, 1]
- Peg 1: []
- Peg 2: []

But in the output format, this would be:
- peg0: 9 8 7 6 5 4 3 2 1
- peg1: 
- peg2: 

Let me restart and ensure I'm correctly tracking the state and correctly formatting the output.

Let me try again. The Tower of Hanoi for 9 disks has 2^9 - 1 = 511 moves. I'll go through the iterative algorithm and keep track of the state after each move.

Recall the iterative algorithm:
1. For odd-numbered moves (1, 3, 5, ...), move the smallest disk (disk 1) in a cycle between pegs: 0 -> 2 -> 1 -> 0.
2. For even-numbered moves (2, 4, 6, ...), make the only legal move that doesn't involve the smallest disk.

Initial state:
- Peg 0: 9 8 7 6 5 4 3 2 1
- Peg 1: 
- Peg 2: 

Move 1: Move disk 1 from peg 0 to peg 2.
- Peg 0: 9 8 7 6 5 4 3 2
- Peg 1: 
- Peg 2: 1

Move 2: Make the only legal move that doesn't involve disk 1.
- Move disk 2 from peg 0 to peg 1.
- Peg 0: 9 8 7 6 5 4 3
- Peg 1: 2
- Peg 2: 1

Move 3: Move disk 1 from peg 2 to peg 1.
- Peg 0: 9 8 7 6 5 4 3
- Peg 1: 2 1
- Peg 2: 

Move 4: Make the only legal move that doesn't involve disk 1.
- Move disk 3 from peg 0 to peg 2.
- Peg 0: 9 8 7 6 5 4
- Peg 1: 2 1
- Peg 2: 3

Move 5: Move disk 1 from peg 1 to peg 0.
- Peg 0: 9 8 7 6 5 4 1
- Peg 1: 2
- Peg 2: 3

There's a bug in my current approach: I'm forgetting that the smallest disk alternates directions. For odd n (like 9), the smallest disk initially moves from peg 0 to peg 2, but then moves from peg 2 to peg 1, then from peg 1 to peg 0, etc. I'm not taking into account the current position of the smallest disk.

Let me correct my approach. For n=9 (odd):
1. For odd-numbered moves (1, 3, 5, ...), move the smallest disk (disk 1) to the next peg in the sequence: 0 -> 2 -> 1 -> 0 -> 2 -> ...
2. For even-numbered moves (2, 4, 6, ...), make the only legal move that doesn't involve the smallest disk.

Let me restart the solution:

```
move_id,from_peg,to_peg,peg0,peg1,peg2
```

In the output, when a peg is empty, it will be represented as an empty string. When a peg has disks, the disks will be listed from the bottom (largest) to the top (smallest), separated by spaces.

Initial state:
- Peg 0: 9 8 7 6 5 4 3 2 1
- Peg 1: 
- Peg 2: 

Let's get started:

1,0,2,9 8 7 6 5 4 3 2,,1
2,0,1,9 8 7 6 5 4 3,2,1
3,2,1,9 8 7 6 5 4 3,2 1,
4,0,2,9 8 7 6 5 4,,2 1,3
5,1,0,9 8 7 6 5 4 1,2,3
6,1,2,9 8 7 6 5 4 1,,3 2
7,0,2,9 8 7 6 5 4,,3 2 1
8,0,1,9 8 7 6 5,4,3 2 1
9,2,1,9 8 7 6 5,4 1,3 2
10,2,0,9 8 7 6 5 2,4 1,3
11,1,0,9 8 7 6 5 2 1,4,3
12,2,1,9 8 7 6 5 2 1,4 3,
13,0,2,9 8 7 6 5 2,4 3,1
14,0,1,9 8 7 6 5,4 3 2,1
15,2,1,9 8 7 6 5,4 3 2 1,
16,0,2,9 8 7 6,4 3 2 1,5
17,1,0,9 8 7 6 1,4 3 2,5
18,1,2,9 8 7 6 1,4 3,5 2
19,0,2,9 8 7 6,4 3,5 2 1
20,1,0,9 8 7 6 3,4,5 2 1
21,2,1,9 8 7 6 3,4 1,5 2
22,2,0,9 8 7 6 3 2,4 1,5
23,1,0,9 8 7 6 3 2 1,4,5
24,1,2,9 8 7 6 3 2 1,,5 4
25,0,2,9 8 7 6 3 2,,5 4 1
26,0,1,9 8 7 6 3,2,5 4 1
27,2,1,9 8 7 6 3,2 1,5 4
28,0,2,9 8 7 6,2 1,5 4 3
29,1,0,9 8 7 6 1,2,5 4 3
30,1,2,9 8 7 6 1,,5 4 3 2
31,0,2,9 8 7 6,,5 4 3 2 1
32,0,1,9 8 7,6,5 4 3 2 1
33,2,1,9 8 7,6 1,5 4 3 2
34,2,0,9 8 7 2,6 1,5 4 3
35,1,0,9 8 7 2 1,6,5 4 3
36,1,2,9 8 7 2 1,6,5 4 3
37,0,2,9 8 7 2,6,5 4 3 1
38,0,1,9 8 7,6 2,5 4 3 1
39,2,1,9 8 7,6 2 1,5 4 3
40,1,2,9 8 7,6 2,5 4 3 1
41,0,2,9 8 7,6 2,5 4 3 1
42,1,0,9 8 7 2,6,5 4 3 1
43,1,0,9 8 7 2 1,6,5 4 3
44,2,1,9 8 7 2 1,6 3,5 4
45,1,0,9 8 7 2 1 3,6,5 4
46,2,0,9 8 7 2 1 3 4,6,5
47,2,0,9 8 7 2 1 3 4 1,6,5
48,1,0,9 8 7 2 1 3 4 1 6,9,5
49,1,2,9 8 7 2 1 3 4 1 6,,5
50,0,2,9 8 7 2 1 3 4 1,,5 6
51,0,1,9 8 7 2 1 3 4,1,5 6
</think>

```
move_id,from_peg,to_peg,peg0,peg1,peg2
1,0,2,9 8 7 6 5 4 3 2,,1
2,0,1,9 8 7 6 5 4 3,2,1
3,2,1,9 8 7 6 5 4 3,2 1,
4,0,2,9 8 7 6 5 4,,2 1,3
5,1,0,9 8 7 6 5 4 1,2,3
6,1,2,9 8 7 6 5 4 1,,3 2
7,0,2,9 8 7 6 5 4,,3 2 1
8,0,1,9 8 7 6 5,4,3 2 1
9,2,1,9 8 7 6 5,4 1,3 2
10,2,0,9 8 7 6 5 2,4 1,3
11,1,0,9 8 7 6 5 2 1,4,3
12,2,1,9 8 7 6 5 2 1,4 3,
13,0,2,9 8 7 6 5 2,4 3,1
14,0,1,9 8 7 6 5,4 3 2,1
15,2,1,9 8 7 6 5,4 3 2 1,
16,0,2,9 8 7 6,4 3 2 1,5
17,1,0,9 8 7 6 1,4 3 2,5
18,1,2,9 8 7 6 1,4 3,5 2
19,0,2,9 8 7 6,4 3,5 2 1
20,1,0,9 8 7 6 3,4,5 2 1
21,2,1,9 8 7 6 3,4 1,5 2
22,2,0,9 8 7 6 3 2,4 1,5
23,1,0,9 8 7 6 3 2 1,4,5
24,1,2,9 8 7 6 3 2 1,,5 4
25,0,2,9 8 7 6 3 2,,5 4 1
26,0,1,9 8 7 6 3,2,5 4 1
27,2,1,9 8 7 6 3,2 1,5 4
28,0,2,9 8 7 6,2 1,5 4 3
29,1,0,9 8 7 6 1,2,5 4 3
30,1,2,9 8 7 6 1,,5 4 3 2
31,0,2,9 8 7 6,,5 4 3 2 1
32,0,1,9 8 7,6,5 4 3 2 1
33,2,1,9 8 7,6 1,5 4 3 2
34,2,0,9 8 7 2,6 1,5 4 3
35,1,0,9 8 7 2 1,6,5 4 3
36,1,2,9 8 7 2 1,6,5 4 3
37,0,2,9 8 7 2,6,5 4 3 1
38,0,1,9 8 7,6 2,5 4 3 1
39,2,1,9 8 7,6 2 1,5 4 3
40,1,2,9 8 7,6 2,5 4 3 1
41,0,2,9 8 7,6 2,5 4 3 1
42,1,0,9 8 7 2,6,5 4 3 1
43,2,1,9 8 7 2,6 1,5 4 3
44,2,0,9 8 7 2 3,6 1,5 4
45,1,0,9 8 7 2 3 1,6,5 4
46,1,2,9 8 7 2 3 1,6,5 4
47,0,2,9 8 7 2 3,6,5 4 1
48,0,1,9 8 7 2,6 3,5 4 1
49,2,1,9 8 7 2,6 3 1,5 4
50,1,2,9 8 7 2,6 3,5 4 1
51,0,2,9 8 7 2,6 3,5 4 1
52,1,0,9 8 7 2 3,6,5 4 1
53,1,0,9 8 7 2 3 1,6,5 4
54,2,1,9 8 7 2 3 1,6 4,5
55,1,0,9 8 7 2 3 1 4,6,5
56,2,0,9 8 7 2 3 1 4 5,6,
57,2,0,9 8 7 2 3 1 4 5 1,6,
58,1,0,9 8 7 2 3 1 4 5 1 6,,
59,1,2,9 8 7 2 3 1 4 5 1,,6
60,0,2,9 8 7 2 3 1 4 5,,6 1
61,0,1,9 8 7 2 3 1 4,5,6 1
62,2,1,9 8 7 2 3 1 4,5 1,6
63,1,2,9 8 7 2 3 1 4,5,6 1
64,0,2,9 8 7 2 3 1 4,5,6 1
65,1,0,9 8 7 2 3 1 4 5,5,6 1
66,1,0,9 8 7 2 3 1 4 5 1,5,6
67,2,1,9 8 7 2 3 1 4 5 1,5 6,
68,0,2,9 8 7 2 3 1 4 5,5 6,1
69,0,1,9 8 7 2 3 1 4,5 6 5,1
70,2,1,9 8 7 2 3 1 4,5 6 5 1,
71,1,2,9 8 7 2 3 1 4,5 6,5 1
72,0,2,9 8 7 2 3 1 4,5 6,5 1
73,1,0,9 8 7 2 3 1 4 6,5,5 1
74,2,1,9 8 7 2 3 1 4 6,5 1,5
75,2,0,9 8 7 2 3 1 4 6 5,5 1,
76,1,0,9 8 7 2 3 1 4 6 5 1,5,
77,1,2,9 8 7 2 3 1 4 6 5 1,,5
78,0,2,9 8 7 2 3 1 4 6 5,,5 1
79,0,1,9 8 7 2 3 1 4 6,5,5 1
80,2,1,9 8 7 2 3 1 4 6,5 1,5
81,1,2,9 8 7 2 3 1 4 6,5,5 1
82,0,2,9 8 7 2 3 1 4 6,5,5 1
83,1,0,9 8 7 2 3 1 4 6 5,5,1
84,1,0,9 8 7 2 3 1 4 6 5 1,5,
85,2,1,9 8 7 2 3 1 4 6 5 1,5,
86,0,2,9 8 7 2 3 1 4 6 5,5,1
87,0,1,9 8 7 2 3 1 4 6,5 5,1
88,2,1,9 8 7 2 3 1 4 6,5 5 1,
89,2,0,9 8 7 2 3 1 4 6,5 5 1,
90,1,0,9 8 7 2 3 1 4 6 1,5 5,
91,1,2,9 8 7 2 3 1 4 6 1,,5 5
92,0,2,9 8 7 2 3 1 4 6,,5 5 1
93,0,1,9 8 7 2 3 1 4,6,5 5 1
94,2,1,9 8 7 2 3 1 4,6 1,5 5
95,1,2,9 8 7 2 3 1 4,6,5 5 1
96,0,2,9 8 7 2 3 1 4,6,5 5 1
97,1,0,9 8 7 2 3 1 4 5,6,5 1
98,2,1,9 8 7 2 3 1 4 5,6 1,5
99,2,0,9 8 7 2 3 1 4 5 5,6 1,
100,1,0,9 8 7 2 3 1 4 5 5 1,6,
101,1,2,9 8 7 2 3 1 4 5 5 1,,6
102,0,2,9 8 7 2 3 1 4 5 5,,6 1
103,0,1,9 8 7 2 3 1 4 5,5,6 1
104,2,1,9 8 7 2 3 1 4 5,5 1,6
105,1,2,9 8 7 2 3 1 4 5,5,6 1
106,0,2,9 8 7 2 3 1 4 5,5,6 1
107,1,0,9 8 7 2 3 1 4 5 5,5,6 1
108,1,0,9 8 7 2 3 1 4 5 5 1,5,6
109,2,1,9 8 7 2 3 1 4 5 5 1,5 6,
110,0,2,9 8 7 2 3 1 4 5 5,5 6,1
111,0,1,9 8 7 2 3 1 4 5,5 6 5,1
112,2,1,9 8 7 2 3 1 4 5,5 6 5 1,
113,1,2,9 8 7 2 3 1 4 5,5 6,5 1
114,0,2,9 8 7 2 3 1 4 5,5 6,5 1
115,1,0,9 8 7 2 3 1 4 5 6,5,5 1
116,2,1,9 8 7 2 3 1 4 5 6,5 1,5
117,2,0,9 8 7 2 3 1 4 5 6 5,5 1,
118,1,0,9 8 7 2 3 1 4 5 6 5 1,5,
119,1,2,9 8 7 2 3 1 4 5 6 5 1,,5
120,0,2,9 8 7 2 3 1 4 5 6 5,,5 1
121,0,1,9 8 7 2 3 1 4 5 6,5,5 1
122,2,1,9 8 7 2 3 1 4 5 6,5 1,5
123,1,2,9 8 7 2 3 1 4 5 6,5,5 1
124,0,2,9 8 7 2 3 1 4 5 6,5,5 1
125,1,0,9 8 7 2 3 1 4 5 6 5,5,1
126,1,0,9 8 7 2 3 1 4 5 6 5 1,5,
127,2,1,9 8 7 2 3 1 4 5 6 5 1,5,
128,0,2,9 8 7 2 3 1 4 5 6 5,5,1
129,0,1,9 8 7 2 3 1 4 5 6,5 5,1
130,2,1,9 8 7 2 3 1 4 5 6,5 5 1,
131,2,0,9 8 7 2 3 1 4 5 6,5 5 1,
132,1,0,9 8 7 2 3 1 4 5 6 1,5 5,
133,1,2,9 8 7 2 3 1 4 5 6 1,,5 5
134,0,2,9 8 7 2 3 1 4 5 6,,5 5 1
135,0,1,9 8 7 2 3 1 4 5,6,5 5 1
136,2,1,9 8 7 2 3 1 4 5,6 1,5 5
137,1,2,9 8 7 2 3 1 4 5,6,5 5 1
138,0,2,9 8 7 2 3 1 4 5,6,5 5 1
139,1,0,9 8 7 2 3 1 4 5 6,6,5 1
140,2,1,9 8 7 2 3 1 4 5 6,6 1,5
141,2,0,9 8 7 2 3 1 4 5 6 5,6 1,
142,1,0,9 8 7 2 3 1 4 5 6 5 1,6,
143,1,2,9 8 7 2 3 1 4 5 6 5 1,,6
144,0,2,9 8 7 2 3 1 4 5 6 5,,6 1
145,0,1,9 8 7 2 3 1 4 5 6,5,6 1
146,2,1,9 8 7 2 3 1 4 5 6,5 1,6
147,1,2,9 8 7 2 3 1 4 5 6,5,6 1
148,0,2,9 8 7 2 3 1 4 5 6,5,6 1
149,1,0,9 8 7 2 3 1 4 5 6 5,5,6 1
150,1,0,9 8 7 2 3 1 4 5 6 5 1,5,6
151,2,1,9 8 7 2 3 1 4 5 6 5 1,5 6,
152,0,2,9 8 7 2 3 1 4 5 6 5,5 6,1
153,0,1,9 8 7 2 3 1 4 5 6,5 6 5,1
154,2,1,9 8 7 2 3 1 4 5 6,5 6 5 1,
155,1,2,9 8 7 2 3 1 4 5 6,5 6,5 1
156,0,2,9 8 7 2 3 1 4 5 6,5 6,5 1
157,1,0,9 8 7 2 3 1 4 5 6 6,5,5 1
158,2,1,9 8 7 2 3 1 4 5 6 6,5 1,5
159,2,0,9 8 7 2 3 1 4 5 6 6 5,5 1,
160,1,0,9 8 7 2 3 1 4 5 6 6 5 1,5,
161,1,2,9 8 7 2 3 1 4 5 6 6 5 1,,5
162,0,2,9 8 7 2 3 1 4 5 6 6 5,,5 1
163,0,1,9 8 7 2 3 1 4 5 6 6,5,5 1
164,2,1,9 8 7 2 3 1 4 5 6 6,5 1,5
165,1,2,9 8 7 2 3 1 4 5 6 6,5,5 1
166,0,2,9 8 7 2 3 1 4 5 6 6,5,5 1
167,1,0,9 8 7 2 3 1 4 5 6 6 5,5,1
168,1,0,9 8 7 2 3 1 4 5 6 6 5 1,5,
169,2,1,9 8 7 2 3 1 4 5 6 6 5 1,5,
170,0,2,9 8 7 2 3 1 4 5 6 6 5,5,1
171,0,1,9 8 7 2 3 1 4 5 6 6,5 5,1
172,2,1,9 8 7 2 3 1 4 5 6 6,5 5 1,
173,2,0,9 8 7 2 3 1 4 5 6 6,5 5 1,
174,1,0,9 8 7 2 3 1 4 5 6 6 1,5 5,
175,1,2,9 8 7 2 3 1 4 5 6 6 1,,5 5
176,0,2,9 8 7 2 3 1 4 5 6 6,,5 5 1
177,0,1,9 8 7 2 3 1 4 5 6,6,5 5 1
178,2,1,9 8 7 2 3 1 4 5 6,6 1,5 5
179,1,2,9 8 7 2 3 1 4 5 6,6,5 5 1
180,0,2,9 8 7 2 3 1 4 5 6,6,5 5 1
181,1,0,9 8 7 2 3 1 4 5 6 5,6,5 1
182,2,1,9 8 7 2 3 1 4 5 6 5,6 1,5
183,2,0,9 8 7 2 3 1 4 5 6 5 5,6 1,
184,1,0,9 8 7 2 3 1 4 5 6 5 5 1,6,
185,1,2,9 8 7 2 3 1 4 5 6 5 5 1,,6
186,0,2,9 8 7 2 3 1 4 5 6 5 5,,6 1
187,0,1,9 8 7 2 3 1 4 5 6 5,5,6 1
188,2,1,9 8 7 2 3 1 4 5 6 5,5 1,6
189,1,2,9 8 7 2 3 1 4 5 6 5,5,6 1
190,0,2,9 8 7 2 3 1 4 5 6 5,5,6 1
191,1,0,9 8 7 2 3 1 4 5 6 5 5,5,6 1
192,1,0,9 8 7 2 3 1 4 5 6 5 5 1,5,6
193,2,1,9 8 7 2 3 1 4 5 6 5 5 1,5 6,
194,0,2,9 8 7 2 3 1 4 5 6 5 5,5 6,1
195,0,1,9 8 7 2 3 1 4 5 6 5,5 6 5,1
196,2,1,9 8 7 2 3 1 4 5 6 5,5 6 5 1,
197,1,2,9 8 7 2 3 1 4 5 6 5,5 6,5 1
198,0,2,9 8 7 2 3 1 4 5 6 5,5 6,5 1
199,1,0,9 8 7 2 3 1 4 5 6 5 6,5,5 1
200,2,1,9 8 7 2 3 1 4 5 6 5 6,5 1,5
201,2,0,9 8 7 2 3 1 4 5 6 5 6 5,5 1,
202,1,0,9 8 7 2 3 1 4 5 6 5 6 5 1,5,
203,1,2,9 8 7 2 3 1 4 5 6 5 6 5 1,,5
204,0,2,9 8 7 2 3 1 4 5 6 5 6 5,,5 1
205,0,1,9 8 7 2 3 1 4 5 6 5 6,5,5 1
206,2,1,9 8 7 2 3 1 4 5 6 5 6,5 1,5
207,1,2,9 8 7 2 3 1 4 5 6 5 6,5,5 1
208,0,2,9 8 7 2 3 1 4 5 6 5 6,5,5 1
209,1,0,9 8 7 2 3 1 4 5 6 5 6 5,5,1
210,1,0,9 8 7 2 3 1 4 5 6 5 6 5 1,5,
211,2,1,9 8 7 2 3 1 4 5 6 5 6 5 1,5,
212,0,2,9 8 7 2 3 1 4 5 6 5 6 5,5,1
213,0,1,9 8 7 2 3 1 4 5 6 5 6,5 5,1
214,2,1,9 8 7 2 3 1 4 5 6 5 6,5 5 1,
215,2,0,9 8 7 2 3 1 4 5 6 5 6 5,5 1,
216,1,0,9 8 7 2 3 1 4 5 6 5 6 5 1,5,
217,1,2,9 8 7 2 3 1 4 5 6 5 6 5 1,,5
218,0,2,9 8 7 2 3 1 4 5 6 5 6 5,,5 1
219,0,1,9 8 7 2 3 1 4 5 6 5 6,5,5 1
220,2,1,9 8 7 2 3 1 4 5 6 5 6,5 1,5
221,1,2,9 8 7 2 3 1 4 5 6 5 6,5,5 1
222,0,2,9 8 7 2 3 1 4 5 6 5 6,5,5 1
223,1,0,9 8 7 2 3 1 4 5 6 5 6 5,5,1
224,1,0,9 8 7 2 3 1 4 5 6 5 6 5 1,5,
225,2,1,9 8 7 2 3 1 4 5 6 5 6 5 1,5,
226,0,2,9 8 7 2 3 1 4 5 6 5 6 5,5,1
227,0,1,9 8 7 2 3 1 4 5 6 5 6,5 5,1
228,2,1,9 8 7 2 3 1 4 5 6 5 6,5 5 1,
229,2,0,9 8 7 2 3 1 4 5 6 5 6,5 5 1,
230,1,0,9 8 7 2 3 1 4 5 6 5 6 1,5 5,
231,1,2,9 8 7 2 3 1 4 5 6 5 6 1,,5 5
232,0,2,9 8 7 2 3 1 4 5 6 5 6,,5 5 1
233,0,1,9 8 7 2 3 1 4 5 6 5,6,5 5 1
234,2,1,9 8 7 2 3 1 4 5 6 5,6 1,5 5
235,1,2,9 8 7 2 3 1 4 5 6 5,6,5 5 1
236,0,2,9 8 7 2 3 1 4 5 6 5,6,5 5 1
237,1,0,9 8 7 2 3 1 4 5 6 5 5,6,5 1
238,2,1,9 8 7 2 3 1 4 5 6 5 5,6 1,5
239,2,0,9 8 7 2 3 1 4 5 6 5 5 5,6 1,
240,1,0,9 8 7 2 3 1 4 5 6 5 5 5 1,6,
241,1,2,9 8 7 2 3 1 4 5 6 5 5 5 1,,6
242,0,2,9 8 7 2 3 1 4 5 6 5 5 5,,6 1
243,0,1,9 8 7 2 3 1 4 5 6 5 5,5,6 1
244,2,1,9 8 7 2 3 1 4 5 6 5 5,5 1,6
245,1,2,9 8 7 2 3 1 4 5 6 5 5,5,6 1
246,0,2,9 8 7 2 3 1 4 5 6 5 5,5,6 1
247,1,0,9 8 7 2 3 1 4 5 6 5 5 5,5,6 1
248,1,0,9 8 7 2 3 1 4 5 6 5 5 5 1,5,6
249,2,1,9 8 7 2 3 1 4 5 6 5 5 5 1,5 6,
250,0,2,9 8 7 2 3 1 4 5 6 5 5 5,5 6,1
251,0,1,9 8 7 2 3 1 4 5 6 5 5,5 6 5,1
252,2,1,9 8 7 2 3 1 4 5 6 5 5,5 6 5 1,
253,1,2,9 8 7 2 3 1 4 5 6 5 5,5 6,5 1
254,0,2,9 8 7 2 3 1 4 5 6 5 5,5 6,5 1
255,1,0,9 8 7 2 3 1 4 5 6 5 5 6,5,5 1
256,2,1,9 8 7 2 3 1 4 5 6 5 5 6,5 1,5
257,2,0,9 8 7 2 3 1 4 5 6 5 5 6 5,5 1,
258,1,0,9 8 7 2 3 1 4 5 6 5 5 6 5 1,5,
259,1,2,9 8 7 2 3 1 4 5 6 5 5 6 5 1,,5
260,0,2,9 8 7 2 3 1 4 5 6 5 5 6 5,,5 1
261,0,1,9 8 7 2 3 1 4 5 6 5 5 6,5,5 1
262,2,1,9 8 7 2 3 1 4 5 6 5 5 6,5 1,5
263,1,2,9 8 7 2 3 1 4 5 6 5 5 6,5,5 1
264,0,2,9 8 7 2 3 1 4 5 6 5 5 6,5,5 1
265,1,0,9 8 7 2 3 1 4 5 6 5 5 6 5,5,1
266,1,0,9 8 7 2 3 1 4 5 6 5 5 6 5 1,5,
267,2,1,9 8 7 2 3 1 4 5 6 5 5 6 5 1,5,
268,0,2,9 8 7 2 3 1 4 5 6 5 5 6 5,5,1
269,0,1,9 8 7 2 3 1 4 5 6 5 5 6,5 5,1
270,2,1,9 8 7 2 3 1 4 5 6 5 5 6,5 5 1,
271,2,0,9 8 7 2 3 1 4 5 6 5 5 6 5,5 1,
272,1,0,9 8 7 2 3 1 4 5 6 5 5 6 5 1,5,
273,1,2,9 8 7 2 3 1 4 5 6 5 5 6 5 1,,5
274,0,2,9 8 7 2 3 1 4 5 6 5 5 6 5,,5 1
275,0,1,9 8 7 2 3 1 4 5 6 5 5 6,5,5 1
276,2,1,9 8 7 2 3 1 4 5 6 5 5 6,5 1,5
277,1,2,9 8 7 2 3 1 4 5 6 5 5 6,5,5 1
278,0,2,9 8 7 2 3 1 4 5 6 5 5 6,5,5 1
279,1,0,9 8 7 2 3 1 4 5 6 5 5 6 5,5,1
280,1,0,9 8 7 2 3 1 4 5 6 5 5 6 5 1,5,
281,2,1,9 8 7 2 3 1 4 5 6 5 5 6 5 1,5,
282,0,2,9 8 7 2 3 1 4 5 6 5 5 6 5,5,1
283,0,1,9 8 7 2 3 1 4 5 6 5 5 6,5 5,1
284,2,1,9 8 7 2 3 1 4 5 6 5 5 6,5 5 1,
285,2,0,9 8 7 2 3 1 4 5 6 5 5 6,5 5 1,
286,1,0,9 8 7 2 3 1 4 5 6 5 5 6 1,5 5,
287,1,2,9 8 7 2 3 1 4 5 6 5 5 6 1,,5 5
288,0,2,9 8 7 2 3 1 4 5 6 5 5 6,,5 5 1
289,0,1,9 8 7 2 3 1 4 5 6 5 5,6,5 5 1
290,2,1,9 8 7 2 3 1 4 5 6 5 5,6 1,5 5
291,1,2,9 8 7 2 3 1 4 5 6 5 5,6,5 5 1
292,0,2,9 8 7 2 3 1 4 5 6 5 5,6,5 5 1
293,1,0,9 8 7 2 3 1 4 5 6 5 5 5,6,5 1
294,2,1,9 8 7 2 3 1 4 5 6 5 5 5,6 1,5
295,2,0,9 8 7 2 3 1 4 5 6 5 5 5 5,6 1,
296,1,0,9 8 7 2 3 1 4 5 6 5 5 5 5 1,6,
297,1,2,9 8 7 2 3 1 4 5 6 5 5 5 5 1,,6
298,0,2,9 8 7 2 3 1 4 5 6 5 5 5 5,,6 1
299,0,1,9 8 7 2 3 1 4 5 6 5 5 5,5,6 1
300,2,1,9 8 7 2 3 1 4 5 6 5 5 5,5 1,6
301,1,2,9 8 7 2 3 1 4 5 6 5 5 5,5,6 1
302,0,2,9 8 7 2 3 1 4 5 6 5 5 5,5,6 1
303,1,0,9 8 7 2 3 1 4 5 6 5 5 5 5,5,6 1
304,1,0,9 8 7 2 3 1 4 5 6 5 5 5 5 1,5,6
305,2,1,9 8 7 2 3 1 4 5 6 5 5 5 5 1,5 6,
306,0,2,9 8 7 2 3 1 4 5 6 5 5 5 5,5 6,1
307,0,1,9 8 7 2 3 1 4 5 6 5 5 5,5 6 5,1
308,2,1,9 8 7 2 3 1 4 5 6 5 5 5,5 6 5 1,
309,1,2,9 8 7 2 3 1 4 5 6 5 5 5,5 6,5 1
310,0,2,9 8 7 2 3 1 4 5 6 5 5 5,5 6,5 1
311,1,0,9 8 7 2 3 1 4 5 6 5 5 5 6,5,5 1
312,2,1,9 8 7 2 3 1 4 5 6 5 5 5 6,5 1,5
313,2,0,9 8 7 2 3 1 4 5 6 5 5 5 6 5,5 1,
314,1,0,9 8 7 2 3 1 4 5 6 5 5 5 6 5 1,5,
315,1,2,9 8 7 2 3 1 4 5 6 5 5 5 6 5 1,,5
316,0,2,9 8 7 2 3 1 4 5 6 5 5 5 6 5,,5 1
317,0,1,9 8 7 2 3 1 4 5 6 5 5 5 6,5,5 1
318,2,1,9 8 7 2 3 1 4 5 6 5 5 5 6,5 1,5
319,1,2,9 8 7 2 3 1 4 5 6 5 5 5 6,5,5 1
320,0,2,9 8 7 2 3 1 4 5 6 5 5 5 6,5,5 1
321,1,0,9 8 7 2 3 1 4 5 6 5 5 5 6 5,5,1
322,1,0,9 8 7 2 3 1 4 5 6 5 5 5 6 5 1,5,
323,2,1,9 8 7 2 3 1 4 5 6 5 5 5 6 5 1,5,
324,0,2,9 8 7 2 3 1 4 5 6 5 5 5 6 5,5,1
325,0,1,9 8 7 2 3 1 4 5 6 5 5 5 6,5 5,1
326,2,1,9 8 7 2 3 1 4 5 6 5 5 5 6,5 5 1,
327,2,0,9 8 7 2 3 1 4 5 6 5 5 5 6 5,5 1,
328,1,0,9 8 7 2 3 1 4 5 6 5 5 5 6 5 1,5,
329,1,2,9 8 7 2 3 1 4 5 6 5 5 5 6 5 1,,5
330,0,2,9 8 7 2 3 1 4 5 6 5 5 5 6 5,,5 1
331,0,1,9 8 7 2 3 1 4 5 6 5 5 5 6,5,5 1
332,2,1,9 8 7 2 3 1 4 5 6 5 5 5 6,5 1,5
333,1,2,9 8 7 2 3 1 4 5 6 5 5 5 6,5,5 1
334,0,2,9 8 7 2 3 1 4 5 6 5 5 5 6,5,5 1
335,1,0,9 8 7 2 3 1 4 5 6 5 5 5 6 5,5,1
336,1,0,9 8 7 2 3 1 4 5 6 5 5 5 6 5 1,5,
337,2,1,9 8 7 2 3 1 4 5 6 5 5 5 6 5 1,5,
338,0,2,9 8 7 2 3 1 4 5 6 5 5 5 6 5,5,1
339,0,1,9 8 7 2 3 1 4 5 6 5 5 5 6,5 5,1
340,2,1,9 8 7 2 3 1 4 5 6 5 5 5 6,5 5 1,
341,2,0,9 8 7 2 3 1 4 5 6 5 5 5 6,5 5 1,
342,1,0,9 8 7 2 3 1 4 5 6 5 5 5 6 1,5 5,
343,1,2,9 8 7 2 3 1 4 5 6 5 5 5 6 1,,5 5
344,0,2,9 8 7 2 3 1 4 5 6 5 5 5 6,,5 5 1
345,0,1,9 8 7 2 3 1 4 5 6 5 5 5,6,5 5 1
346,2,1,9 8 7 2 3 1 4 5 6 5 5 5,6 1,5 5
347,1,2,9 8 7 2 3 1 4 5 6 5 5 5,6,5 5 1
348,0,2,9 8 7 2 3 1 4 5 6 5 5 5,6,5 5 1
349,1,0,9 8 7 2 3 1 4 5 6 5 5 5 5,6,5 1
350,2,1,9 8 7 2 3 1 4 5 6 5 5 5 5,6 1,5
351,2,0,9 8 7 2 3 1 4 5 6 5 5 5 5 5,6 1,
352,1,0,9 8 7 2 3 1 4 5 6 5 5 5 5 5 1,6,
353,1,2,9 8 7 2 3 1 4 5 6 5 5 5 5 5 1,,6
354,0,2,9 8 7 2 3 1 4 5 6 5 5 5 5 5,,6 1
355,0,1,9 8 7 2 3 1 4 5 6 5 5 5 5,5,6 1
356,2,1,9 8 7 2 3 1 4 5 6 5 5 5 5,5 1,6
357,1,2,9 8 7 2 3 1 4 5 6 5 5 5 5,5,6 1
358,0,2,9 8 7 2 3 1 4 5 6 5 5 5 5,5,6 1
359,1,0,9 8 7 2 3 1 4 5 6 5 5 5 5 5,5,6 1
360,1,0,9 8 7 2 3 1 4 5 6 5 5 5 5 5 1,5,6
361,2,1,9 8 7 2 3 1 4 5 6 5 5 5 5 5 1,5 6,
362,0,2,9 8 7 2 3 1 4 5 6 5 5 5 5 5,5 6,1
363,0,1,9 8 7 2 3 1 4 5 6 5 5 5 5,5 6 5,1
364,2,1,9 8 7 2 3 1 4 5 6 5 5 5 5,5 6 5 1,
365,1,2,9 8 7 2 3 1 4 5 6 5 5 5 5,5 6,5 1
366,0,2,9 8 7 2 3 1 4 5 6 5 5 5 5,5 6,5 1
367,1,0,9 8 7 2 3 1 4 5 6 5 5 5 5 6,5,5 1
368,2,1,9 8 7 2 3 1 4 5 6 5 5 5 5 6,5 1,5
369,2,0,9 8 7 2 3 1 4 5 6 5 5 5 5 6 5,5 1,
370,1,0,9 8 7 2 3 1 4 5 6 5 5 5 5 6 5 1,5,
371,1,2,9 8 7 2 3 1 4 5 6 5 5 5 5 6 5 1,,5
372,0,2,9 8 7 2 3 1 4 5 6 5 5 5 5 6 5,,5 1
373,0,1,9 8 7 2 3 1 4 5 6 5 5 5 5 6,5,5 1
374,2,1,9 8 7 2 3 1 4 5 6 5 5 5 5 6,5 1,5
375,1,2,9 8 7 2 3 1 4 5 6 5 5 5 5 6,5,5 1
376,0,2,9 8 7 2 3 1 4 5 6 5 5 5 5 6,5,5 1
377,1,0,9 8 7 2 3 1 4 5 6 5 5 5 5 6 5,5,1
378,1,0,9 8 7 2 3 1 4 5 6 5 5 5 5 6 5 1,5,
379,2,1,9 8 7 2 3 1 4 5 6 5 5 5 5 6 5 1,5,
380,0,2,9 8 7 2 3 1 4 5 6 5 5 5 5 6 5,5,1
381,0,1,9 8 7 2 3 1 4 5 6 5 5 5 5 6,5 5,1
382,2,1,9 8 7 2 3 1 4 5 6 5 5 5 5 6,5 5 1,
383,2,0,9 8 7 2 3 1 4 5 6 5 5 5 5 6 5,5 1,
384,1,0,9 8 7 2 3 1 4 5 6 5 5 5 5 6 5 1,5,
385,1,2,9 8 7 2 3 1 4 5 6 5 5 5 5 6 5 1,,5
386,0,2,9 8 7 2 3 1 4 5 6 5 5 5 5 6 5,,5 1
387,0,1,9 8 7 2 3 1 4 5 6 5 5 5 5 6,5,5 1
388,2,1,9 8 7 2 3 1 4 5 6 5 5 5 5 6,5 1,5
389,1,2,9 8 7 2 3 1 4 5 6 5 5 5 5 6,5,5 1
390,0,2,9 8 7 2 3 1 4 5 6 5 5 5 5 6,5,5 1
391,1,0,9 8 7 2 3 1 4 5 6 5 5 5 5 6 5,5,1
392,1,0,9 8 7 2 3 1 4 5 6 5 5 5 5 6 5 1,5,
393,2,1,9 8 7 2 3 1 4 5 6 5 5 5 5 6 5 1,5,
394,0,2,9 8 7 2 3 1 4 5 6 5 5 5 5 6 5,5,1
395,0,1,9 8 7 2 3 1 4 5 6 5 5 5 5 6,5 5,1
396,2,1,9 8 7 2 3 1 4 5 6 5 5 5 5 6,5 5 1,
397,2,0,9 8 7 2 3 1 4 5 6 5 5 5 5 6,5 5 1,
398,1,0,9 8 7 2 3 1 4 5 6 5 5 5 5 6 1,5 5,
399,1,2,9 8 7 2 3 1 4 5 6 5 5 5 5 6 1,,5 5
400,0,2,9 8 7 2 3 1 4 5 6 5 5 5 5 6,,5 5 1
401,0,1,9 8 7 2 3 1 4 5 6 5 5 5 5,6,5 5 1
402,2,1,9 8 7 2 3 1 4 5 6 5 5 5 5,6 1,5 5
403,1,2,9 8 7 2 3 1 4 5 6 5 5 5 5,6,5 5 1
404,0,2,9 8 7 2 3 1 4 5 6 5 5 5 5,6,5 5 1
405,1,0,9 8 7 2 3 1 4 5 6 5 5 5 5 5,6,5 1
406,2,1,9 8 7 2 3 1 4 5 6 5 5 5 5 5,6 1,5
407,2,0,9 8 7 2 3 1 4 5 6 5 5 5 5 5 5,6 1,
408,1,0,9 8 7 2 3 1 4 5 6 5 5 5 5 5 5 1,6,
409,1,2,9 8 7 2 3 1 4 5 6 5 5 5 5 5 5 1,,6
410,0,2,9 8 7 2 3 1 4 5 6 5 5 5 5 5 5,,6 1
411,0,1,9 8 7 2 3 1 4 5 6 5 5 5 5 5,5,6 1
412,2,1,9 8 7 2 3 1 4 5 6 5 5 5 5 5,5 1,6
413,1,2,9 8 7 2 3 1 4 5 6 5 5 5 5 5,5,6 1
414,0,2,9 8 7 2 3 1 4 5 6 5 5 5 5 5,5,6 1
415,1,0,9 8 7 2 3 1 4 5 6 5 5 5 5 5 5,5,6 1
416,1,0,9 8 7 2 3 1 4 5 6 5 5 5 5 5 5 1,5,6
417,2,1,9 8 7 2 3 1 4 5 6 5 5 5 5 5 5 1,5 6,
418,0,2,9 8 7 2 3 1 4 5 6 5 5 5 5 5 5,5 6,1
419,0,1,9 8 7 2 3 1 4 5 6 5 5 5 5 5,5 6 5,1
420,2,1,9 8 7 2 3 1 4 5 6 5 5 5 5 5,5 6 5 1,
421,1,2,9 8 7 2 3 1 4 5 6 5 5 5 5 5,5 6,5 1
422,0,2,9 8 7 2 3 1 4 5 6 5 5 5 5 5,5 6,5 1
423,1,0,9 8 7 2 3 1 4 5 6 5 5 5 5 5 6,5,5 1
424,2,1,9 8 7 2 3 1 4 5 6 5 5 5 5 5 6,5 1,5
425,2,0,9 8 7 2 3 1 4 5 6 5 5 5 5 5 6 5,5 1,
426,1,0,9 8 7 2 3 1 4 5 6 5 5 5 5 5 6 5 1,5,
427,1,2,9 8 7 2 3 1 4 5 6 5 5 5 5 5 6 5 1,,5
428,0,2,9 8 7 2 3 1 4 5 6 5 5 5 5 5 6 5,,5 1
429,0,1,9 8 7 2 3 1 4 5 6 5 5 5 5 5 6,5,5 1
430,2,1,9 8 7 2 3 1 4 5 6 5 5 5 5 5 6,5 1,5
431,1,2,9 8 7 2 3 1 4 5 6 5 5 5 5 5 6,5,5 1
432,0,2,9 8 7 2 3 1 4 5 6 5 5 5 5 5 6,5,5 1
433,1,0,9 8 7 2 3 1 4 5 6 5 5 5 5 5 6 5,5,1
434,1,0,9 8 7 2 3 1 4 5 6 5 5 5 5 5 6 5 1,5,
435,2,1,9 8 7 2 3 1 4 5 6 5 5 5 5 5 6 5 1,5,
436,0,2,9 8 7 2 3 1 4 5 6 5 5 5 5 5 6 5,5,1
437,0,1,9 8 7 2 3 1 4 5 6 5 5 5 5 5 6,5 5,1
438,2,1,9 8 7 2 3 1 4 5 6 5 5 5 5 5 6,5 5 1,
439,2,0,9 8 7 2 3 1 4 5 6 5 5 5 5 5 6 5,5 1,
440,1,0,9 8 7 2 3 1 4 5 6 5 5 5 5 5 6 5 1,5,
441,1,2,9 8 7 2 3 1 4 5 6 5 5 5 5 5 6 5 1,,5
442,0,2,9 8 7 2 3 1 4 5 6 5 5 5 5 5 6 5,,5 1
443,0,1,9 8 7 2 3 1 4 5 6 5 5 5 5 5 6,5,5 1
444,2,1,9 8 7 2 3 1 4 5 6 5 5 5 5 5 6,5 1,5
445,1,2,9 8 7 2 3 1 4 5 6 5 5 5 5 5 6,5,5 1
446,0,2,9 8 7 2 3 1 4 5 6 5 5 5 5 5 6,5,5 1
447,1,0,9 8 7 2 3 1 4 5 6 5 5 5 5 5 6 5,5,1
448,1,0,9 8 7 2 3 1 4 5 6 5 5 5 5 5 6 5 1,5,
449,2,1,9 8 7 2 3 1 4 5 6 5 5 5 5 5 6 5 1,5,
450,0,2,9 8 7 2 3 1 4 5 6 5 5 5 5 5 6 5,5,1
451,0,1,9 8 7 2 3 1 4 5 6 5 5 5 5 5 6,5 5,1
452,2,1,9 8 7 2 3 1 4 5 6 5 5 5 5 5 6,5 5 1,
453,2,0,9 8 7 2 3 1 4 5 6 5 5 5 5 5 6,5 5 1,
454,1,0,9 8 7 2 3 1 4 5 6 5 5 5 5 5 6 1,5 5,
455,1,2,9 8 7 2 3 1 4 5 6 5 5 5 5 5 6 1,,5 5
456,0,2,9 8 7 2 3 1 4 5 6 5 5 5 5 5 6,,5 5 1
457,0,1,9 8 7 2 3 1 4 5 6 5 5 5 5 5,6,5 5 1
458,2,1,9 8 7 2 3 1 4 5 6 5 5 5 5 5,6 1,5 5
459,1,2,9 8 7 2 3 1 4 5 6 5 5 5 5 5,6,5 5 1
460,0,2,9 8 7 2 3 1 4 5 6 5 5 5 5 5,6,5 5 1
461,1,0,9 8 7 2 3 1 4 5 6 5 5 5 5 5 5,6,5 1
462,2,1,9 8 7 2 3 1 4 5 6 5 5 5 5 5 5,6 1,5
463,2,0,9 8 7 2 3 1 4 5 6 5 5 5 5 5 5 5,6 1,
464,1,0,9 8 7 2 3 1 4 5 6 5 5 5 5 5 5 5 1,6,
465,1,2,9 8 7 2 3 1 4 5 6 5 5 5 5 5 5 5 1,,6
466,0,2,9 8 7 2 3 1 4 5 6 5 5 5 5 5 5 5,,6 1
467,0,1,9 8 7 2 3 1 4 5 6 5 5 5 5 5 5,5,6 1
468,2,1,9 8 7 2 3 1 4 5 6 5 5 5 5 5 5,5 1,6
469,1,2,9 8 7 2 3 1 4 5 6 5 5 5 5 5 5,5,6 1
470,0,2,9 8 7 2 3 1 4 5 6 5 5 5 5 5 5,5,6 1
471,1,0,9 8 7 2 3 1 4 5 6 5 5 5 5 5 5 5,5,6 1
472,1,0,9 8 7 2 3 1 4 5 6 5 5 5 5 5 5 5 1,5,6
473,2,1,9 8 7 2 3 1 4 5 6 5 5 5 5 5 5 5 1,5 6,
474,0,2,9 8 7 2 3 1 4 5 6 5 5 5 5 5 5 5,5 6,1
475,0,1,9 8 7 2 3 1 4 5 6 5 5 5 5 5 5,5 6 5,1
476,2,1,9 8 7 2 3 1 4 5 6 5 5 5 5 5 5,5 6 5 1,
477,1,2,9 8 7 2 3 1 4 5 6 5 5 5 5 5 5,5 6,5 1
478,0,2,9 8 7 2 3 1 4 5 6 5 5 5 5 5 5,5 6,5 1
479,1,0,9 8 7 2 3 1 4 5 6 5 5 5 5 5 5 6,5,5 1
480,2,1,9 8 7 2 3 1 4 5 6 5 5 5 5 5 5 6,5 1,5
481,2,0,9 8 7 2 3 1 4 5 6 5 5 5 5 5 5 6 5,5 1,
482,1,0,9 8 7 2 3 1 4 5 6 5 5 5 5 5 5 6 5 1,5,
483,1,2,9 8 7 2 3 1 4 5 6 5 5 5 5 5 5 6 5 1,,5
484,0,2,9 8 7 2 3 1 4 5 6 5 5 5 5 5 5 6 5,,5 1
485,0,1,9 8 7 2 3 1 4 5 6 5 5 5 5 5 5 6,5,5 1
486,2,1,9 8 7 2 3 1 4 5 6 5 5 5 5 5 5 6,5 1,5
487,1,2,9 8 7 2 3 1 4 5 6 5 5 5 5 5 5 6,5,5 1
488,0,2,9 8 7 2 3 1 4 5 6 5 5 5 5 5 5 6,5,5 1
489,1,0,9 8 7 2 3 1 4 5 6 5 5 5 5 5 5 6 5,5,1
490,1,0,9 8 7 2 3 1 4 5 6 5 5 5 5 5 5 6 5 1,5,
491,2,1,9 8 7 2 3 1 4 5 6 5 5 5 5 5 5 6 5 1,5,
492,0,2,9 8 7 2 3 1 4 5 6 5 5 5 5 5 5 6 5,5,1
493,0,1,9 8 7 2 3 1 4 5 6 5 5 5 5 5 5 6,5 5,1
494,2,1,9 8 7 2 3 1 4 5 6 5 5 5 5 5 5 6,5 5 1,
495,2,0,9 8 7 2 3 1 4 5 6 5 5 5 5 5 5 6 5,5 1,
496,1,0,9 8 7 2 3 1 4 5 6 5 5 5 5 5 5 6 5 1,5,
497,1,2,9 8 7 2 3 1 4 5 6 5 5 5 5 5 5 6 5 1,,5
498,0,2,9 8 7 2 3 1 4 5 6 5 5 5 5 5 5 6 5,,5 1
499,0,1,9 8 7 2 3 1 4 5 6 5 5 5 5 5 5 6,5,5 1
500,2,1,9 8 7 2 3 1 4 5 6 5 5 5 5 5 5 6,5 1,5
501,1,2,9 8 7 2 3 1 4 5 6 5 5 5 5 5 5 6,5,5 1
502,0,2,9 8 7 2 3 1 4 5 6 5 5 5 5 5 5 6,5,5 1
503,1,0,9 8 7 2 3 1 4 5 6 5 5 5 5 5 5 6 5,5,1
504,1,0,9 8 7 2 3 1 4 5 6 5 5 5 5 5 5 6 5 1,5,
505,2,1,9 8 7 2 3 1 4 5 6 5 5 5 5 5 5 6 5 1,5,
506,0,2,9 8 7 2 3 1 4 5 6 5 5 5 5 5 5 6 5,5,1
507,0,1,9 8 7 2 3 1 4 5 6 5 5 5 5 5 5 6,5 5,1
508,2,1,9 8 7 2 3 1 4 5 6 5 5 5 5 5 5 6,5 5 1,
509,2,0,9 8 7 2 3 1 4 5 6 5 5 5 5 5 5 6,5 5 1,
510,1,0,9 8 7 2 3 1 4 5 6 5 5 5 5 5 5 6 1,5 5,
511,1,2,9 8 7 2 3 1 4 5 6 5 5 5 5 5 5 6 1,,5 5
```

