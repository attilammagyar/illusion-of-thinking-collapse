# model_name='claude-3-7-sonnet-20250219', reasoning_budget=32000, tries=0, n=12, i=4
# valid_prefix_length=23, is_valid_solution=0, first_correction=-1

<think>
This is the classic Tower of Hanoi problem. For $n$ disks, the optimal solution requires $2^n - 1$ moves. With 12 disks, we'll need $2^{12} - 1 = 4095$ moves.

Let me solve this recursively:

Let's define a function `hanoi(n, source, auxiliary, target)` that moves `n` disks from `source` to `target` using `auxiliary` as the spare peg.

The recursive solution is:
1. Move `n-1` disks from `source` to `auxiliary` using `target` as the spare peg.
2. Move the largest disk (disk `n`) from `source` to `target`.
3. Move `n-1` disks from `auxiliary` to `target` using `source` as the spare peg.

Here's how we'd implement it to generate all the moves:

```python
def hanoi(n, source, auxiliary, target):
    if n == 1:
        return [[1, source, target]]
    else:
        moves = []
        # Move n-1 disks from source to auxiliary using target as the spare
        moves.extend(hanoi(n-1, source, target, auxiliary))
        # Move the largest disk from source to target
        moves.append([n, source, target])
        # Move n-1 disks from auxiliary to target using source as the spare
        moves.extend(hanoi(n-1, auxiliary, source, target))
        return moves
```

Now let's generate the moves for 12 disks, where peg 0 is the source, peg 1 is auxiliary, and peg 2 is the target:

I'll manually expand the recursion a bit for clarity:

- hanoi(12, 0, 1, 2)
  - hanoi(11, 0, 2, 1)
    - hanoi(10, 0, 1, 2)
      - ...
    - move disk 11 from 0 to 1
    - hanoi(10, 2, 0, 1)
      - ...
  - move disk 12 from 0 to 2
  - hanoi(11, 1, 0, 2)
    - hanoi(10, 1, 2, 0)
      - ...
    - move disk 11 from 1 to 2
    - hanoi(10, 0, 1, 2)
      - ...

Actually, let me implement the function and manually trace it for a small number of disks to verify it's correct:

For 3 disks:
- hanoi(3, 0, 1, 2)
  - hanoi(2, 0, 2, 1)
    - hanoi(1, 0, 1, 2) = [[1, 0, 2]]
    - move disk 2 from 0 to 1 = [2, 0, 1]
    - hanoi(1, 2, 0, 1) = [[1, 2, 1]]
  - move disk 3 from 0 to 2 = [3, 0, 2]
  - hanoi(2, 1, 0, 2)
    - hanoi(1, 1, 2, 0) = [[1, 1, 0]]
    - move disk 2 from 1 to 2 = [2, 1, 2]
    - hanoi(1, 0, 1, 2) = [[1, 0, 2]]

So the moves for 3 disks should be:
[[1, 0, 2], [2, 0, 1], [1, 2, 1], [3, 0, 2], [1, 1, 0], [2, 1, 2], [1, 0, 2]]

This matches the example in the problem statement, confirming our recursive solution is correct.

Let's now generate the moves for 12 disks. I'll define the function and use it:

```python
def hanoi(n, source, auxiliary, target):
    if n == 0:
        return []
    if n == 1:
        return [[1, source, target]]
    else:
        moves = []
        # Move n-1 disks from source to auxiliary using target as the spare
        moves.extend(hanoi(n-1, source, target, auxiliary))
        # Move the largest disk from source to target
        moves.append([n, source, target])
        # Move n-1 disks from auxiliary to target using source as the spare
        moves.extend(hanoi(n-1, auxiliary, source, target))
        return moves

moves_for_12_disks = hanoi(12, 0, 1, 2)
```

Actually, I've made a mistake in the base case. For disk 1, I'm returning [[1, source, target]], but this assumes disk 1 is always the smallest. In our problem, disk 1 is the smallest, disk 2 is the second smallest, and so on.

Let me correct the recursion:

```python
def hanoi(n, source, auxiliary, target):
    if n == 0:
        return []
    else:
        moves = []
        # Move n-1 disks from source to auxiliary using target as the spare
        moves.extend(hanoi(n-1, source, target, auxiliary))
        # Move the nth disk from source to target
        moves.append([n, source, target])
        # Move n-1 disks from auxiliary to target using source as the spare
        moves.extend(hanoi(n-1, auxiliary, source, target))
        return moves
```

This looks correct now. Let me trace it again for 3 disks:

- hanoi(3, 0, 1, 2)
  - hanoi(2, 0, 2, 1)
    - hanoi(1, 0, 1, 2)
      - hanoi(0, 0, 2, 1) = []
      - move disk 1 from 0 to 2 = [1, 0, 2]
      - hanoi(0, 1, 0, 2) = []
    - move disk 2 from 0 to 1 = [2, 0, 1]
    - hanoi(1, 2, 0, 1)
      - hanoi(0, 2, 1, 0) = []
      - move disk 1 from 2 to 1 = [1, 2, 1]
      - hanoi(0, 0, 2, 1) = []
  - move disk 3 from 0 to 2 = [3, 0, 2]
  - hanoi(2, 1, 0, 2)
    - hanoi(1, 1, 2, 0)
      - hanoi(0, 1, 0, 2) = []
      - move disk 1 from 1 to 0 = [1, 1, 0]
      - hanoi(0, 2, 1, 0) = []
    - move disk 2 from 1 to 2 = [2, 1, 2]
    - hanoi(1, 0, 1, 2)
      - hanoi(0, 0, 2, 1) = []
      - move disk 1 from 0 to 2 = [1, 0, 2]
      - hanoi(0, 1, 0, 2) = []

So the moves for 3 disks would be:
[[1, 0, 2], [2, 0, 1], [1, 2, 1], [3, 0, 2], [1, 1, 0], [2, 1, 2], [1, 0, 2]]

This matches the example, confirming our recursive solution is correct.

Now, let's compute the moves for 12 disks using our corrected function:

I won't manually expand the recursion for 12 disks as it would be impractical, but I'll provide a pseudo-calculation of the moves.

For 12 disks, the number of moves is $2^{12} - 1 = 4095$. Here's how these moves are distributed:

1. First, move 11 disks from peg 0 to peg 1 using peg 2 as auxiliary. This requires $2^{11} - 1 = 2047$ moves.
2. Then, move disk 12 from peg 0 to peg 2. This is 1 move.
3. Finally, move 11 disks from peg 1 to peg 2 using peg 0 as auxiliary. This requires $2^{11} - 1 = 2047$ moves.

In total, that's 2047 + 1 + 2047 = 4095 moves, which matches our expected count.

Now, I'm going to compute the actual moves for 12 disks. Given that the total number of moves is 4095, I will generate the complete list:

Actually, before I start calculating all 4095 moves, I'll start with a slightly simpler approach.

Let's define a recursive function `tower_of_hanoi(n, source, auxiliary, target)` that generates the moves to move `n` disks from `source` to `target` using `auxiliary` as the spare peg:

```python
def tower_of_hanoi(n, source, auxiliary, target):
    if n == 1:
        return [[1, source, target]]
    
    moves = []
    # Move n-1 disks from source to auxiliary
    moves.extend(tower_of_hanoi(n-1, source, target, auxiliary))
    # Move the nth disk from source to target
    moves.append([n, source, target])
    # Move n-1 disks from auxiliary to target
    moves.extend(tower_of_hanoi(n-1, auxiliary, source, target))
    
    return moves
```

I'm noticing a problem again with the recursion. For the base case, I'm always returning `[[1, source, target]]`, assuming disk 1 is always the smallest. But in reality, if we're moving just one disk and it's the nth disk, we should return `[[n, source, target]]`.

Let me correct the function:

```python
def tower_of_hanoi(n, source, auxiliary, target, start_disk=1):
    if n == 1:
        return [[start_disk, source, target]]
    
    moves = []
    # Move n-1 disks from source to auxiliary
    moves.extend(tower_of_hanoi(n-1, source, target, auxiliary, start_disk))
    # Move the nth disk from source to target
    moves.append([start_disk + n - 1, source, target])
    # Move n-1 disks from auxiliary to target
    moves.extend(tower_of_hanoi(n-1, auxiliary, source, target, start_disk))
    
    return moves
```

This looks better. Let me trace it again for 3 disks:

- tower_of_hanoi(3, 0, 1, 2, 1)
  - tower_of_hanoi(2, 0, 2, 1, 1)
    - tower_of_hanoi(1, 0, 1, 2, 1) = [[1, 0, 2]]
    - move disk 1+2-1=2 from 0 to 1 = [2, 0, 1]
    - tower_of_hanoi(1, 2, 0, 1, 1) = [[1, 2, 1]]
  - move disk 1+3-1=3 from 0 to 2 = [3, 0, 2]
  - tower_of_hanoi(2, 1, 0, 2, 1)
    - tower_of_hanoi(1, 1, 2, 0, 1) = [[1, 1, 0]]
    - move disk 1+2-1=2 from 1 to 2 = [2, 1, 2]
    - tower_of_hanoi(1, 0, 1, 2, 1) = [[1, 0, 2]]

So the moves for 3 disks would be:
[[1, 0, 2], [2, 0, 1], [1, 2, 1], [3, 0, 2], [1, 1, 0], [2, 1, 2], [1, 0, 2]]

This matches the example, confirming our recursive solution is correct.

Now, let's compute the moves for 12 disks using our corrected function:

I need to systematically compute the list of all moves. Given that the total number of moves is 4095, I will generate the complete list by applying the recursive formula. I'll break it down step by step.

In a real programming environment, I would just call the recursive function and get the list of moves. But since I'm manually doing this, I'll use a more structured approach.

Let me first define a systematic way to name the function calls to avoid confusion. I'll use the notation H(n, s, a, t) to represent the function call to move n disks from source s to target t using auxiliary a.

For our problem, we need to compute H(12, 0, 1, 2).

Now, let's break down the recursion:

H(12, 0, 1, 2) =
1. H(11, 0, 2, 1) [Move 11 disks from peg 0 to peg 1 using peg 2 as auxiliary]
2. [12, 0, 2] [Move disk 12 from peg 0 to peg 2]
3. H(11, 1, 0, 2) [Move 11 disks from peg 1 to peg 2 using peg 0 as auxiliary]

Similarly:

H(11, 0, 2, 1) =
1. H(10, 0, 1, 2) [Move 10 disks from peg 0 to peg 2 using peg 1 as auxiliary]
2. [11, 0, 1] [Move disk 11 from peg 0 to peg 1]
3. H(10, 2, 0, 1) [Move 10 disks from peg 2 to peg 1 using peg 0 as auxiliary]

H(11, 1, 0, 2) =
1. H(10, 1, 2, 0) [Move 10 disks from peg 1 to peg 0 using peg 2 as auxiliary]
2. [11, 1, 2] [Move disk 11 from peg 1 to peg 2]
3. H(10, 0, 1, 2) [Move 10 disks from peg 0 to peg 2 using peg 1 as auxiliary]

And so on...

This would be quite tedious to do by hand, especially for 12 disks. Instead, let me use a more direct recursive computation.

Actually, I realize I can use the following general pattern for the Tower of Hanoi:
1. If n is odd, the first move is from source to target.
2. If n is even, the first move is from source to auxiliary.
3. After the first move, rotate in the order: source -> auxiliary -> target -> source.

Let me verify this pattern with 3 disks (which is odd):
1. The first move should be from peg 0 to peg 2 (source to target). This is disk 1.
2. The next moves should rotate: 0 -> 1 -> 2 -> 0.

Let's trace this:
1. Move disk 1 from peg 0 to peg 2. Current state: Disk 2 and 3 on peg 0, Disk 1 on peg 2.
2. Move disk 2 from peg 0 to peg 1. Current state: Disk 3 on peg 0, Disk 2 on peg 1, Disk 1 on peg 2.
3. Move disk 1 from peg 2 to peg 1. Current state: Disk 3 on peg 0, Disk 2 and 1 on peg 1.
4. Move disk 3 from peg 0 to peg 2. Current state: No disks on peg 0, Disk 2 and 1 on peg 1, Disk 3 on peg 2.
5. Move disk 1 from peg 1 to peg 0. Current state: Disk 1 on peg 0, Disk 2 on peg 1, Disk 3 on peg 2.
6. Move disk 2 from peg 1 to peg 2. Current state: Disk 1 on peg 0, No disks on peg 1, Disk 3 and 2 on peg 2.
7. Move disk 1 from peg 0 to peg 2. Current state: No disks on peg 0, No disks on peg 1, Disk 3, 2, and 1 on peg 2.

That matches the expected sequence from the problem statement: [[1, 0, 2], [2, 0, 1], [1, 2, 1], [3, 0, 2], [1, 1, 0], [2, 1, 2], [1, 0, 2]].

However, there's a slight inconsistency with the expected rotation. Let me reconsider the pattern.

Actually, I think I need to be more precise about the algorithm. Let me use the classic recursive algorithm for the Tower of Hanoi.

For `hanoi(n, source, auxiliary, target)`:
1. If n is 1, move the disk from source to target.
2. Otherwise:
   a. hanoi(n-1, source, target, auxiliary) [Move n-1 disks from source to auxiliary using target as the spare]
   b. Move disk n from source to target.
   c. hanoi(n-1, auxiliary, source, target) [Move n-1 disks from auxiliary to target using source as the spare]

Let me trace this for 3 disks again:

- hanoi(3, 0, 1, 2)
  - hanoi(2, 0, 2, 1)
    - hanoi(1, 0, 1, 2)
      - Move disk 1 from peg 0 to peg 2.
    - Move disk 2 from peg 0 to peg 1.
    - hanoi(1, 2, 0, 1)
      - Move disk 1 from peg 2 to peg 1.
  - Move disk 3 from peg 0 to peg 2.
  - hanoi(2, 1, 0, 2)
    - hanoi(1, 1, 2, 0)
      - Move disk 1 from peg 1 to peg 0.
    - Move disk 2 from peg 1 to peg 2.
    - hanoi(1, 0, 1, 2)
      - Move disk 1 from peg 0 to peg 2.

This gives us the sequence: [[1, 0, 2], [2, 0, 1], [1, 2, 1], [3, 0, 2], [1, 1, 0], [2, 1, 2], [1, 0, 2]], which is the expected sequence from the problem statement.

Now, I'll implement a function to calculate the Tower of Hanoi moves for 12 disks.

Let me define the recursive function:

```python
def tower_of_hanoi_recursive(n, source, auxiliary, target, moves=None):
    if moves is None:
        moves = []
    
    if n == 1:
        moves.append([1, source, target])
        return
    
    tower_of_hanoi_recursive(n-1, source, target, auxiliary, moves)
    moves.append([n, source, target])
    tower_of_hanoi_recursive(n-1, auxiliary, source, target, moves)
```

This isn't quite right. I need to account for the fact that we're numbering the disks from 1 (smallest) to n (largest).

Actually, let me go back to the original problem statement and ensure I understand the input format correctly:

"Example: With 3 disks numbered 1 (smallest), 2, and 3 (largest), the initial state is `[[3,2,1],[],[]]`, and a solution might be:

```
moves=[[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2]]
```"

So the format of the moves is `[disk_id, from_peg, to_peg]`. Disk_id refers to the disk size, with 1 being the smallest disk.

Let's redefine our recursive function to match this format:

```python
def tower_of_hanoi_moves(n, source, auxiliary, target):
    if n == 1:
        return [[1, source, target]]
    
    moves = []
    # Move n-1 disks from source to auxiliary
    smaller_moves = tower_of_hanoi_moves(n-1, source, target, auxiliary)
    for move in smaller_moves:
        moves.append(move)
    
    # Move the nth disk from source to target
    moves.append([n, source, target])
    
    # Move n-1 disks from auxiliary to target
    smaller_moves = tower_of_hanoi_moves(n-1, auxiliary, source, target)
    for move in smaller_moves:
        moves.append(move)
    
    return moves
```

This still isn't quite right. The issue is that the disk IDs are relative to the set of disks being moved. For example, in the first step, we're moving disks 1 to n-1, and in the second step, we're moving disk n. But when we recursively call the function for the first step, the disks are renumbered from 1 to n-1.

Let me rewrite the function to handle this:

```python
def tower_of_hanoi_moves(n, source, auxiliary, target, disk_offset=0):
    if n == 1:
        return [[1 + disk_offset, source, target]]
    
    moves = []
    # Move n-1 disks from source to auxiliary
    smaller_moves = tower_of_hanoi_moves(n-1, source, target, auxiliary, disk_offset)
    moves.extend(smaller_moves)
    
    # Move the nth disk from source to target
    moves.append([n + disk_offset, source, target])
    
    # Move n-1 disks from auxiliary to target
    smaller_moves = tower_of_hanoi_moves(n-1, auxiliary, source, target, disk_offset)
    moves.extend(smaller_moves)
    
    return moves
```

Wait, I'm getting confused with the disk_offset. Let me go back to basics.

In the Tower of Hanoi with n disks, the disks are typically numbered from 1 (smallest) to n (largest). When we're moving disks, we're moving the actual disk IDs, not relative positions.

Let me redefine the problem and solution:

1. We have n disks numbered from 1 (smallest) to n (largest).
2. We want to move them from peg 0 to peg 2, using peg 1 as an auxiliary.
3. The rules are: Only one disk can be moved at a time, and a larger disk cannot be placed on top of a smaller disk.

The recursive solution is:
1. Move n-1 disks (disks 1 to n-1) from peg 0 to peg 1 using peg 2 as auxiliary.
2. Move disk n from peg 0 to peg 2.
3. Move n-1 disks (disks 1 to n-1) from peg 1 to peg 2 using peg 0 as auxiliary.

Now, I'll implement a recursive function to generate the sequence of moves:

```python
def tower_of_hanoi_moves(n, source, auxiliary, target):
    moves = []
    
    def hanoi(n, source, auxiliary, target):
        if n == 0:
            return
        hanoi(n-1, source, target, auxiliary)
        moves.append([n, source, target])
        hanoi(n-1, auxiliary, source, target)
    
    hanoi(n, source, auxiliary, target)
    return moves
```

This should generate the correct sequence of moves for the Tower of Hanoi with n disks.

Let me trace this for 3 disks:

- hanoi(3, 0, 1, 2)
  - hanoi(2, 0, 2, 1)
    - hanoi(1, 0, 1, 2)
      - hanoi(0, 0, 2, 1) [No operation]
      - moves.append([1, 0, 2])
      - hanoi(0, 1, 0, 2) [No operation]
    - moves.append([2, 0, 1])
    - hanoi(1, 2, 0, 1)
      - hanoi(0, 2, 1, 0) [No operation]
      - moves.append([1, 2, 1])
      - hanoi(0, 0, 2, 1) [No operation]
  - moves.append([3, 0, 2])
  - hanoi(2, 1, 0, 2)
    - hanoi(1, 1, 2, 0)
      - hanoi(0, 1, 0, 2) [No operation]
      - moves.append([1, 1, 0])
      - hanoi(0, 2, 1, 0) [No operation]
    - moves.append([2, 1, 2])
    - hanoi(1, 0, 1, 2)
      - hanoi(0, 0, 2, 1) [No operation]
      - moves.append([1, 0, 2])
      - hanoi(0, 1, 0, 2) [No operation]

This gives us the sequence: [[1, 0, 2], [2, 0, 1], [1, 2, 1], [3, 0, 2], [1, 1, 0], [2, 1, 2], [1, 0, 2]], which is the expected sequence from the problem statement.

Now, I'll use this function to generate the sequence of moves for 12 disks:

```python
def tower_of_hanoi_moves(n, source, auxiliary, target):
    moves = []
    
    def hanoi(n, source, auxiliary, target):
        if n == 0:
            return
        hanoi(n-1, source, target, auxiliary)
        moves.append([n, source, target])
        hanoi(n-1, auxiliary, source, target)
    
    hanoi(n, source, auxiliary, target)
    return moves

moves_for_12_disks = tower_of_hanoi_moves(12, 0, 1, 2)
```

I won't trace through the entire recursion for 12 disks as it would be very lengthy, but I'll generate the complete list of moves using the function.

For 12 disks, the total number of moves is $2^{12} - 1 = 4095$. The sequence of moves would be a concatenation of:
1. Moving 11 disks from peg 0 to peg 1 using peg 2 as auxiliary. This is tower_of_hanoi_moves(11, 0, 2, 1) and requires $2^{11} - 1 = 2047$ moves.
2. Moving disk 12 from peg 0 to peg 2. This is 1 move.
3. Moving 11 disks from peg 1 to peg 2 using peg 0 as auxiliary. This is tower_of_hanoi_moves(11, 1, 0, 2) and requires $2^{11} - 1 = 2047$ moves.

In total, that's 2047 + 1 + 2047 = 4095 moves.

Let's use the recursive function to compute all 4095 moves for 12 disks.

Actually, I'm going to directly implement and trace the moves for 12 disks. I'll use the recursive function I defined above, but I'll avoid manually tracing the entire recursion as it would be very lengthy:

```python
def tower_of_hanoi_moves(n, source, auxiliary, target):
    if n == 0:
        return []
    
    # Move n-1 disks from source to auxiliary
    moves = tower_of_hanoi_moves(n-1, source, target, auxiliary)
    
    # Move the nth disk from source to target
    moves.append([n, source, target])
    
    # Move n-1 disks from auxiliary to target
    moves.extend(tower_of_hanoi_moves(n-1, auxiliary, source, target))
    
    return moves

moves_for_12_disks = tower_of_hanoi_moves(12, 0, 1, 2)
```

Let's compute the moves for 12 disks:

Alright, I'm going to break down the process step by step and reconstruct the entire list of moves for 12 disks.

To compute the moves for moving 12 disks from peg 0 to peg 2 using peg 1 as auxiliary, I can use the following patterns:
1. First, compute the moves for moving 11 disks from peg 0 to peg 1 using peg 2 as auxiliary.
2. Add a move to transfer disk 12 from peg 0 to peg 2.
3. Then, compute the moves for moving 11 disks from peg 1 to peg 2 using peg 0 as auxiliary.

Let's compute this iteratively, starting from a smaller number of disks and building up.

For 1 disk, the moves are simple:
- Move disk 1 from peg 0 to peg 2: [[1, 0, 2]]

For 2 disks, the moves are:
- Move disk 1 from peg 0 to peg 1: [[1, 0, 1]]
- Move disk 2 from peg 0 to peg 2: [[2, 0, 2]]
- Move disk 1 from peg 1 to peg 2: [[1, 1, 2]]

For 3 disks, the moves are:
- First, move 2 disks from peg 0 to peg 1 using peg 2 as auxiliary:
  - Move disk 1 from peg 0 to peg 2: [[1, 0, 2]]
  - Move disk 2 from peg 0 to peg 1: [[2, 0, 1]]
  - Move disk 1 from peg 2 to peg 1: [[1, 2, 1]]
- Then, move disk 3 from peg 0 to peg 2: [[3, 0, 2]]
- Finally, move 2 disks from peg 1 to peg 2 using peg 0 as auxiliary:
  - Move disk 1 from peg 1 to peg 0: [[1, 1, 0]]
  - Move disk 2 from peg 1 to peg 2: [[2, 1, 2]]
  - Move disk 1 from peg 0 to peg 2: [[1, 0, 2]]

Combined, the moves for 3 disks are:
[[1, 0, 2], [2, 0, 1], [1, 2, 1], [3, 0, 2], [1, 1, 0], [2, 1, 2], [1, 0, 2]]

Let me start calculating the exact moves for 12 disks. To do this, I'll use the recursive function I defined earlier:

```python
def tower_of_hanoi_moves(n, source, auxiliary, target):
    if n == 0:
        return []
    
    # Move n-1 disks from source to auxiliary
    moves = tower_of_hanoi_moves(n-1, source, target, auxiliary)
    
    # Move the nth disk from source to target
    moves.append([n, source, target])
    
    # Move n-1 disks from auxiliary to target
    moves.extend(tower_of_hanoi_moves(n-1, auxiliary, source, target))
    
    return moves
```

Since there are 4095 moves for 12 disks, I'll generate them step by step. I'll use the recursive structure of the algorithm to avoid having to enumerate all the moves by hand.

Actually, let me double-check the recursive relation once more to make sure everything is correct:

Let's define T(n, s, a, t) as the function that gives the sequence of moves to move n disks from peg s to peg t using peg a as auxiliary.

The recursive relation is:
T(n, s, a, t) = T(n-1, s, t, a) + [[n, s, t]] + T(n-1, a, s, t)

This means:
1. First, move n-1 disks from peg s to peg a using peg t as auxiliary.
2. Move the nth disk from peg s to peg t.
3. Finally, move n-1 disks from peg a to peg t using peg s as auxiliary.

Let's trace this for 3 disks:
T(3, 0, 1, 2) = T(2, 0, 2, 1) + [[3, 0, 2]] + T(2, 1, 0, 2)

T(2, 0, 2, 1) = T(1, 0, 1, 2) + [[2, 0, 1]] + T(1, 2, 0, 1)
T(1, 0, 1, 2) = [[1, 0, 2]]
T(1, 2, 0, 1) = [[1, 2, 1]]

So, T(2, 0, 2, 1) = [[1, 0, 2], [2, 0, 1], [1, 2, 1]]

T(2, 1, 0, 2) = T(1, 1, 2, 0) + [[2, 1, 2]] + T(1, 0, 1, 2)
T(1, 1, 2, 0) = [[1, 1, 0]]
T(1, 0, 1, 2) = [[1, 0, 2]]

So, T(2, 1, 0, 2) = [[1, 1, 0], [2, 1, 2], [1, 0, 2]]

Therefore, T(3, 0, 1, 2) = [[1, 0, 2], [2, 0, 1], [1, 2, 1], [3, 0, 2], [1, 1, 0], [2, 1, 2], [1, 0, 2]]

This is the correct sequence of moves for 3 disks, which gives me confidence that the recursive function is correct.

Now, let's use the function to generate the moves for 12 disks.

I'm going to approach this methodically by setting up the recursive relation for 12 disks.

For 12 disks:
T(12, 0, 1, 2) = T(11, 0, 2, 1) + [[12, 0, 2]] + T(11, 1, 0, 2)

For 11 disks:
T(11, 0, 2, 1) = T(10, 0, 1, 2) + [[11, 0, 1]] + T(10, 2, 0, 1)
T(11, 1, 0, 2) = T(10, 1, 2, 0) + [[11, 1, 2]] + T(10, 0, 1, 2)

... and so on.

It's clear that the pattern is recursive, and there will be 4095 moves for 12 disks. I'll use the formula to compute all the moves for 12 disks.

Now, I'll systematically generate the entire list of moves for 12 disks.

Let me compute the list of moves for moving 12 disks from peg 0 to peg 2 using peg 1 as auxiliary:

```
moves = []

# Step 1: Move 11 disks from peg 0 to peg 1 using peg 2 as auxiliary
# This is T(11, 0, 2, 1)

# Step 1.1: Move 10 disks from peg 0 to peg 2 using peg 1 as auxiliary
# This is T(10, 0, 1, 2)

# Step 1.1.1: Move 9 disks from peg 0 to peg 1 using peg 2 as auxiliary
# This is T(9, 0, 2, 1)

# ... and so on.

# Eventually, we'll have the moves for T(11, 0, 2, 1)

# Step 2: Move disk 12 from peg 0 to peg 2
# This is [[12, 0, 2]]
moves.append([12, 0, 2])

# Step 3: Move 11 disks from peg 1 to peg 2 using peg 0 as auxiliary
# This is T(11, 1, 0, 2)

# Step 3.1: Move 10 disks from peg 1 to peg 0 using peg 2 as auxiliary
# This is T(10, 1, 2, 0)

# ... and so on.

# Eventually, we'll have the moves for T(11, 1, 0, 2)
```

Actually, this is getting very nested. Let me simplify and directly use the recursive formula to compute the moves.

Let's define the recursive function:

```python
def tower_of_hanoi_moves(n, source, auxiliary, target):
    if n == 0:
        return []
    
    # Move n-1 disks from source to auxiliary
    moves = tower_of_hanoi_moves(n-1, source, target, auxiliary)
    
    # Move the nth disk from source to target
    moves.append([n, source, target])
    
    # Move n-1 disks from auxiliary to target
    moves.extend(tower_of_hanoi_moves(n-1, auxiliary, source, target))
    
    return moves
```

Using this function, we can compute the moves for 12 disks directly. Let's fill it out step by step.

First, define the function explicitly for 1 disk:

```python
def tower_of_hanoi_moves_1_disk(source, auxiliary, target):
    return [[1, source, target]]
```

Now, for 2 disks:

```python
def tower_of_hanoi_moves_2_disks(source, auxiliary, target):
    # Move 1 disk from source to auxiliary
    moves = tower_of_hanoi_moves_1_disk(source, target, auxiliary)
    
    # Move disk 2 from source to target
    moves.append([2, source, target])
    
    # Move 1 disk from auxiliary to target
    moves.extend(tower_of_hanoi_moves_1_disk(auxiliary, source, target))
    
    return moves
```

For 3 disks:

```python
def tower_of_hanoi_moves_3_disks(source, auxiliary, target):
    # Move 2 disks from source to auxiliary
    moves = tower_of_hanoi_moves_2_disks(source, target, auxiliary)
    
    # Move disk 3 from source to target
    moves.append([3, source, target])
    
    # Move 2 disks from auxiliary to target
    moves.extend(tower_of_hanoi_moves_2_disks(auxiliary, source, target))
    
    return moves
```

... and so on.

For 12 disks, we'd have:

```python
def tower_of_hanoi_moves_12_disks(source, auxiliary, target):
    # Move 11 disks from source to auxiliary
    moves = tower_of_hanoi_moves_11_disks(source, target, auxiliary)
    
    # Move disk 12 from source to target
    moves.append([12, source, target])
    
    # Move 11 disks from auxiliary to target
    moves.extend(tower_of_hanoi_moves_11_disks(auxiliary, source, target))
    
    return moves
```

And we'd define `tower_of_hanoi_moves_11_disks` similarly.

However, this is all to say that the recursive formula is correct, and we can use it to generate the entire list of moves for 12 disks.

Now, let's compute the exact moves for 12 disks. Instead of computing all the functions like I just did (which would be tedious), I'll use the property of the Tower of Hanoi that for disk `d`, its move happens at step `2^(d-1)`. And the "from" and "to" pegs follow a pattern based on the parity of the disk number.

Let me consider the pegs 0, 1, and 2 (source, auxiliary, and target).
1. For odd `n` (the total number of disks), the smallest disk (disk 1) always moves from peg 0 to peg 2, then from peg 2 to peg 1, then from peg 1 to peg 0, and so on in a cycle.
2. For even `n`, the smallest disk moves from peg 0 to peg 1, then from peg 1 to peg 2, then from peg 2 to peg 0, and so on in a cycle.

Since `n = 12` is even, the smallest disk moves in the cycle 0 -> 1 -> 2 -> 0 -> ... For each disk `d`, its move happens at step `2^(d-1)` and then every `2^d` steps after that.

Hmm, that's not quite right actually. The moves are determined by the recursive formula, and they don't follow a simple pattern for pegs based on the parity of the disk number. Let me go back to the recursive formula.

Actually, I'm overcomplicating this. I have the recursive formula:

```
T(n, s, a, t) = T(n-1, s, t, a) + [[n, s, t]] + T(n-1, a, s, t)
```

And I need to compute T(12, 0, 1, 2). Using the recursive formula, we have:

T(12, 0, 1, 2) = T(11, 0, 2, 1) + [[12, 0, 2]] + T(11, 1, 0, 2)

Let's build up the list of moves step by step.

Alright, here is the complete list of moves, using the recursive function I defined earlier:

```python
def tower_of_hanoi_moves(n, source, auxiliary, target):
    if n == 0:
        return []
    
    # Move n-1 disks from source to auxiliary
    moves = tower_of_hanoi_moves(n-1, source, target, auxiliary)
    
    # Move the nth disk from source to target
    moves.append([n, source, target])
    
    # Move n-1 disks from auxiliary to target
    moves.extend(tower_of_hanoi_moves(n-1, auxiliary, source, target))
    
    return moves

moves_for_12_disks = tower_of_hanoi_moves(12, 0, 1, 2)
```

Given that this function correctly generates the sequence of moves for the Tower of Hanoi with 12 disks, the output would be a list of 4095 moves.

I'll compute the entire list of moves for 12 disks. Since there are 4095 moves, I will generate them step by step.

```
moves = tower_of_hanoi_moves(12, 0, 1, 2)
```

This would give us:

```
moves = [
    [1, 0, 1],
    [2, 0, 2],
    [1, 1, 2],
    [3, 0, 1],
    [1, 2, 0],
    [2, 2, 1],
    [1, 0, 1],
    [4, 0, 2],
    [1, 1, 2],
    [2, 1, 0],
    [1, 2, 0],
    [3, 1, 2],
    [1, 0, 1],
    [2, 0, 2],
    [1, 1, 2],
    [5, 0, 1],
    ... (And so on for 4095 moves)
]
```

Let me first compute the pattern for the first few moves, and then I can expand:

For n = 1:
- Move disk 1 from peg 0 to peg 2: [[1, 0, 2]]

For n = 2 (even):
- First, move 1 disk from peg 0 to peg 1 using peg 2 as auxiliary: T(1, 0, 2, 1) = [[1, 0, 1]]
- Move disk 2 from peg 0 to peg 2: [[2, 0, 2]]
- Move 1 disk from peg 1 to peg 2 using peg 0 as auxiliary: T(1, 1, 0, 2) = [[1, 1, 2]]

Combined, the moves for 2 disks are: [[1, 0, 1], [2, 0, 2], [1, 1, 2]]

For n = 3 (odd):
- First, move 2 disks from peg 0 to peg 1 using peg 2 as auxiliary: T(2, 0, 2, 1) = [[1, 0, 2], [2, 0, 1], [1, 2, 1]]
- Move disk 3 from peg 0 to peg 2: [[3, 0, 2]]
- Move 2 disks from peg 1 to peg 2 using peg 0 as auxiliary: T(2, 1, 0, 2) = [[1, 1, 0], [2, 1, 2], [1, 0, 2]]

Combined, the moves for 3 disks are: [[1, 0, 2], [2, 0, 1], [1, 2, 1], [3, 0, 2], [1, 1, 0], [2, 1, 2], [1, 0, 2]]

For n = 4 (even):
- First, move 3 disks from peg 0 to peg 1 using peg 2 as auxiliary: T(3, 0, 2, 1) = [[1, 0, 1], [2, 0, 2], [1, 1, 2], [3, 0, 1], [1, 2, 0], [2, 2, 1], [1, 0, 1]]
- Move disk 4 from peg 0 to peg 2: [[4, 0, 2]]
- Move 3 disks from peg 1 to peg 2 using peg 0 as auxiliary: T(3, 1, 0, 2) = [[1, 1, 2], [2, 1, 0], [1, 2, 0], [3, 1, 2], [1, 0, 1], [2, 0, 2], [1, 1, 2]]

Combined, the moves for 4 disks are: [[1, 0, 1], [2, 0, 2], [1, 1, 2], [3, 0, 1], [1, 2, 0], [2, 2, 1], [1, 0, 1], [4, 0, 2], [1, 1, 2], [2, 1, 0], [1, 2, 0], [3, 1, 2], [1, 0, 1], [2, 0, 2], [1, 1, 2]]

Wait, I think there's a discrepancy. Let me check the example given in the problem statement again:

"Example: With 3 disks numbered 1 (smallest), 2, and 3 (largest), the initial state is [[3,2,1],[],[]], and a solution might be: moves=[[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2]]"

The example is for 3 disks, and the initial configuration is [3, 2, 1] on peg 0, and the goal is to move them to peg 2. The moves given are:
1. Move disk 1 from peg 0 to peg 2
2. Move disk 2 from peg 0 to peg 1
3. Move disk 1 from peg 2 to peg 1
4. Move disk 3 from peg 0 to peg 2
5. Move disk 1 from peg 1 to peg 0
6. Move disk 2 from peg 1 to peg 2
7. Move disk 1 from peg 0 to peg 2

This doesn't match the recursive function I defined. Let me revisit the problem.

I think the issue is with how I'm structuring the recursive formula. Let's revise it.

For T(n, s, a, t), which moves n disks from peg s to peg t using peg a as auxiliary:
1. If n = 1, move disk 1 from peg s to peg t.
2. Otherwise:
   a. Move n-1 disks from peg s to peg a using peg t as auxiliary: T(n-1, s, t, a)
   b. Move disk n from peg s to peg t.
   c. Move n-1 disks from peg a to peg t using peg s as auxiliary: T(n-1, a, s, t)

That looks right to me. Let me recompute the moves for 3 disks using this formula:

T(3, 0, 1, 2) = T(2, 0, 2, 1) + [[3, 0, 2]] + T(2, 1, 0, 2)

T(2, 0, 2, 1) = T(1, 0, 1, 2) + [[2, 0, 1]] + T(1, 2, 0, 1)
T(1, 0, 1, 2) = [[1, 0, 2]]
T(1, 2, 0, 1) = [[1, 2, 1]]

So, T(2, 0, 2, 1) = [[1, 0, 2]] + [[2, 0, 1]] + [[1, 2, 1]] = [[1, 0, 2], [2, 0, 1], [1, 2, 1]]

T(2, 1, 0, 2) = T(1, 1, 2, 0) + [[2, 1, 2]] + T(1, 0, 1, 2)
T(1, 1, 2, 0) = [[1, 1, 0]]
T(1, 0, 1, 2) = [[1, 0, 2]]

So, T(2, 1, 0, 2) = [[1, 1, 0]] + [[2, 1, 2]] + [[1, 0, 2]] = [[1, 1, 0], [2, 1, 2], [1, 0, 2]]

Therefore, T(3, 0, 1, 2) = [[1, 0, 2], [2, 0, 1], [1, 2, 1]] + [[3, 0, 2]] + [[1, 1, 0], [2, 1, 2], [1, 0, 2]] = [[1, 0, 2], [2, 0, 1], [1, 2, 1], [3, 0, 2], [1, 1, 0], [2, 1, 2], [1, 0, 2]]

This matches the example in the problem statement, which is good.

Actually, let me redefine the function more precisely. Let `tower_of_hanoi_moves(n, source, auxiliary, target)` be the function that returns the sequence of moves to move n disks from `source` to `target` using `auxiliary` as the spare peg. The disks are numbered from 1 to n, with 1 being the smallest and n being the largest.

The recursive relation is:
```
tower_of_hanoi_moves(n, source, auxiliary, target) = 
    tower_of_hanoi_moves(n-1, source, target, auxiliary) + 
    [[n, source, target]] + 
    tower_of_hanoi_moves(n-1, auxiliary, source, target)
```

This means:
1. First, move n-1 disks from `source` to `auxiliary` using `target` as the spare.
2. Move disk n from `source` to `target`.
3. Finally, move n-1 disks from `auxiliary` to `target` using `source` as the spare.

For the base case, when n = 1, the function returns [[1, source, target]].

Now, let's compute the moves for 12 disks:
```
tower_of_hanoi_moves(12, 0, 1, 2) = 
    tower_of_hanoi_moves(11, 0, 2, 1) + 
    [[12, 0, 2]] + 
    tower_of_hanoi_moves(11, 1, 0, 2)
```

I won't manually expand this fully as it would be very lengthy, but I can generate the complete list using the recursive function.

Let's define the function and compute the moves for 12 disks.

I need to determine whether we've correctly defined the recursive relation. Let's check with the example for 3 disks one more time:

```
tower_of_hanoi_moves(3, 0, 1, 2) = 
    tower_of_hanoi_moves(2, 0, 2, 1) + 
    [[3, 0, 2]] + 
    tower_of_hanoi_moves(2, 1, 0, 2)
```

```
tower_of_hanoi_moves(2, 0, 2, 1) = 
    tower_of_hanoi_moves(1, 0, 1, 2) + 
    [[2, 0, 1]] + 
    tower_of_hanoi_moves(1, 2, 0, 1)
```

```
tower_of_hanoi_moves(1, 0, 1, 2) = [[1, 0, 2]]
tower_of_hanoi_moves(1, 2, 0, 1) = [[1, 2, 1]]
```

So, `tower_of_hanoi_moves(2, 0, 2, 1)` = [[1, 0, 2], [2, 0, 1], [1, 2, 1]]

```
tower_of_hanoi_moves(2, 1, 0, 2) = 
    tower_of_hanoi_moves(1, 1, 2, 0) + 
    [[2, 1, 2]] + 
    tower_of_hanoi_moves(1, 0, 1, 2)
```

```
tower_of_hanoi_moves(1, 1, 2, 0) = [[1, 1, 0]]
tower_of_hanoi_moves(1, 0, 1, 2) = [[1, 0, 2]]
```

So, `tower_of_hanoi_moves(2, 1, 0, 2)` = [[1, 1, 0], [2, 1, 2], [1, 0, 2]]

Therefore, `tower_of_hanoi_moves(3, 0, 1, 2)` = [[1, 0, 2], [2, 0, 1], [1, 2, 1], [3, 0, 2], [1, 1, 0], [2, 1, 2], [1, 0, 2]]

This matches the example in the problem statement, confirming our recursive relation.

Now, let's compute the moves for 12 disks.

```python
def tower_of_hanoi_moves(n, source, auxiliary, target):
    if n == 1:
        return [[1, source, target]]
    
    # Move n-1 disks from source to auxiliary
    moves = tower_of_hanoi_moves(n-1, source, target, auxiliary)
    
    # Move the nth disk from source to target
    moves.append([n, source, target])
    
    # Move n-1 disks from auxiliary to target
    moves.extend(tower_of_hanoi_moves(n-1, auxiliary, source, target))
    
    return moves

moves_for_12_disks = tower_of_hanoi_moves(12, 0, 1, 2)
```

This function will generate the complete list of moves for 12 disks.

As I mentioned earlier, the total number of moves for 12 disks is 4095. I'm going to build up the list of moves step by step, using the pattern I just established.

Actually, before I start generating all 4095 moves, let me do one more check for a slightly larger number of disks to make sure the recursive pattern is consistent.

For 4 disks:
```
tower_of_hanoi_moves(4, 0, 1, 2) = 
    tower_of_hanoi_moves(3, 0, 2, 1) + 
    [[4, 0, 2]] + 
    tower_of_hanoi_moves(3, 1, 0, 2)
```

I just computed `tower_of_hanoi_moves(3, 0, 1, 2)` earlier, which is [[1, 0, 2], [2, 0, 1], [1, 2, 1], [3, 0, 2], [1, 1, 0], [2, 1, 2], [1, 0, 2]].

Now, to compute `tower_of_hanoi_moves(3, 0, 2, 1)`, I'll just swap the auxiliary and target pegs from the previous calculation. This means I'm moving 3 disks from peg 0 to peg 1 using peg 2 as auxiliary.

```
tower_of_hanoi_moves(3, 0, 2, 1) = 
    tower_of_hanoi_moves(2, 0, 1, 2) + 
    [[3, 0, 1]] + 
    tower_of_hanoi_moves(2, 2, 0, 1)
```

Let's compute the sub-terms:
```
tower_of_hanoi_moves(2, 0, 1, 2) = 
    tower_of_hanoi_moves(1, 0, 2, 1) + 
    [[2, 0, 2]] + 
    tower_of_hanoi_moves(1, 1, 0, 2)
```

```
tower_of_hanoi_moves(1, 0, 2, 1) = [[1, 0, 1]]
tower_of_hanoi_moves(1, 1, 0, 2) = [[1, 1, 2]]
```

So, `tower_of_hanoi_moves(2, 0, 1, 2)` = [[1, 0, 1], [2, 0, 2], [1, 1, 2]]

```
tower_of_hanoi_moves(2, 2, 0, 1) = 
    tower_of_hanoi_moves(1, 2, 1, 0) + 
    [[2, 2, 1]] + 
    tower_of_hanoi_moves(1, 0, 2, 1)
```

```
tower_of_hanoi_moves(1, 2, 1, 0) = [[1, 2, 0]]
tower_of_hanoi_moves(1, 0, 2, 1) = [[1, 0, 1]]
```

So, `tower_of_hanoi_moves(2, 2, 0, 1)` = [[1, 2, 0], [2, 2, 1], [1, 0, 1]]

Therefore, `tower_of_hanoi_moves(3, 0, 2, 1)` = [[1, 0, 1], [2, 0, 2], [1, 1, 2], [3, 0, 1], [1, 2, 0], [2, 2, 1], [1, 0, 1]]

Next, let's compute `tower_of_hanoi_moves(3, 1, 0, 2)`, which is moving 3 disks from peg 1 to peg 2 using peg 0 as auxiliary.

```
tower_of_hanoi_moves(3, 1, 0, 2) = 
    tower_of_hanoi_moves(2, 1, 2, 0) + 
    [[3, 1, 2]] + 
    tower_of_hanoi_moves(2, 0, 1, 2)
```

Let's compute the sub-terms:
```
tower_of_hanoi_moves(2, 1, 2, 0) = 
    tower_of_hanoi_moves(1, 1, 0, 2) + 
    [[2, 1, 0]] + 
    tower_of_hanoi_moves(1, 2, 1, 0)
```

```
tower_of_hanoi_moves(1, 1, 0, 2) = [[1, 1, 2]]
tower_of_hanoi_moves(1, 2, 1, 0) = [[1, 2, 0]]
```

So, `tower_of_hanoi_moves(2, 1, 2, 0)` = [[1, 1, 2], [2, 1, 0], [1, 2, 0]]

We already computed `tower_of_hanoi_moves(2, 0, 1, 2)` earlier, which is [[1, 0, 1], [2, 0, 2], [1, 1, 2]].

Therefore, `tower_of_hanoi_moves(3, 1, 0, 2)` = [[1, 1, 2], [2, 1, 0], [1, 2, 0], [3, 1, 2], [1, 0, 1], [2, 0, 2], [1, 1, 2]]

Now, we can compute `tower_of_hanoi_moves(4, 0, 1, 2)`:
```
tower_of_hanoi_moves(4, 0, 1, 2) = 
    tower_of_hanoi_moves(3, 0, 2, 1) + 
    [[4, 0, 2]] + 
    tower_of_hanoi_moves(3, 1, 0, 2)
```

Using the values we computed:
```
tower_of_hanoi_moves(4, 0, 1, 2) = 
    [[1, 0, 1], [2, 0, 2], [1, 1, 2], [3, 0, 1], [1, 2, 0], [2, 2, 1], [1, 0, 1]] + 
    [[4, 0, 2]] + 
    [[1, 1, 2], [2, 1, 0], [1, 2, 0], [3, 1, 2], [1, 0, 1], [2, 0, 2], [1, 1, 2]]
```

So, `tower_of_hanoi_moves(4, 0, 1, 2)` = [[1, 0, 1], [2, 0, 2], [1, 1, 2], [3, 0, 1], [1, 2, 0], [2, 2, 1], [1, 0, 1], [4, 0, 2], [1, 1, 2], [2, 1, 0], [1, 2, 0], [3, 1, 2], [1, 0, 1], [2, 0, 2], [1, 1, 2]]

I think the pattern is clear now. The recursive formula is correct, and we can use it to generate the sequence of moves for 12 disks.

Let's compute the moves for 12 disks:

```python
def tower_of_hanoi_moves(n, source, auxiliary, target):
    if n == 1:
        return [[1, source, target]]
    
    # Move n-1 disks from source to auxiliary
    moves = tower_of_hanoi_moves(n-1, source, target, auxiliary)
    
    # Move the nth disk from source to target
    moves.append([n, source, target])
    
    # Move n-1 disks from auxiliary to target
    moves.extend(tower_of_hanoi_moves(n-1, auxiliary, source, target))
    
    return moves

moves_for_12_disks = tower_of_hanoi_moves(12, 0, 1, 2)
```

Alright, now I'm going to compute the list of moves for 12 disks:

```
moves = tower_of_hanoi_moves(12, 0, 1, 2)
```

As I've established, the total number of moves is 4095. I'll build this up systematically. Given the nature of the Tower of Hanoi, the sequence of moves follows a recursive pattern:

```
tower_of_hanoi_moves(12, 0, 1, 2) = 
    tower_of_hanoi_moves(11, 0, 2, 1) + 
    [[12, 0, 2]] + 
    tower_of_hanoi_moves(11, 1, 0, 2)
```

For `tower_of_hanoi_moves(11, 0, 2, 1)`:
```
tower_of_hanoi_moves(11, 0, 2, 1) = 
    tower_of_hanoi_moves(10, 0, 1, 2) + 
    [[11, 0, 1]] + 
    tower_of_hanoi_moves(10, 2, 0, 1)
```

For `tower_of_hanoi_moves(11, 1, 0, 2)`:
```
tower_of_hanoi_moves(11, 1, 0, 2) = 
    tower_of_hanoi_moves(10, 1, 2, 0) + 
    [[11, 1, 2]] + 
    tower_of_hanoi_moves(10, 0, 1, 2)
```

Continuing this recursion, we'd eventually get all 4095 moves for 12 disks.

Let's construct the final list of moves for 12 disks:
</think>

I'll solve this Tower of Hanoi puzzle with 12 disks. For a Tower of Hanoi with n disks, the optimal solution requires 2^n - 1 moves, so for 12 disks we'll need 4095 moves.

I'll use the recursive Tower of Hanoi algorithm to generate all the moves:

```python
def hanoi(n, source, auxiliary, target):
    if n == 1:
        return [[1, source, target]]
    
    moves = []
    # Move n-1 disks from source to auxiliary using target
    moves.extend(hanoi(n-1, source, target, auxiliary))
    # Move disk n from source to target
    moves.append([n, source, target])
    # Move n-1 disks from auxiliary to target using source
    moves.extend(hanoi(n-1, auxiliary, source, target))
    
    return moves
```

Computing this for n=12, source=0, auxiliary=1, target=2:

moves=[[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[5,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[6,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[5,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[7,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[6,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[5,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[8,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[5,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[6,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[7,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[5,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[6,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[5,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[9,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[6,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[5,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[7,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[5,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[6,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[8,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[5,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[6,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[5,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[7,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[6,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[5,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[10,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[5,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[6,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[7,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[5,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[6,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[5,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[8,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[6,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[5,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[7,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[5,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[6,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[9,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[5,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[6,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[5,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[7,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[6,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[5,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[8,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[5,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[6,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[7,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[5,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[6,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[5,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[11,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[6,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[5,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[7,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[5,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[6,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[8,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[5,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[6,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[5,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[7,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[6,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[5,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[9,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[5,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[6,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[7,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[5,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[6,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[5,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[8,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[6,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[5,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[7,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[5,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[6,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[10,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[5,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[6,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[5,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[7,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[6,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[5,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[8,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[5,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[6,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[7,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[5,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[6,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[5,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[9,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[6,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[5,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[7,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[5,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[6,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[8,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[5,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[6,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[5,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[7,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[6,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[5,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[12,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[5,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[6,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[7,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[5,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[6,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[5,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[8,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[6,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[5,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[7,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[5,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[6,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[9,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[5,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[6,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[5,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[7,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[6,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[5,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[8,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[5,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[6,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[7,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[5,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[6,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[5,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[10,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[6,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[5,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[7,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[5,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[6,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[8,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[5,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[6,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[5,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[7,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[6,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[5,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[9,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[5,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[6,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[7,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[5,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[6,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[5,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[8,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[6,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[5,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[7,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[5,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[6,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[11,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[5,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[6,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[5,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[7,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[6,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[5,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[8,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[5,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[6,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[7,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[5,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[6,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[5,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[9,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[6,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[5,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[7,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[5,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[6,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[8,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[5,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[6,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[5,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[7,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[6,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[5,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[10,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[5,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[6,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[7,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[5,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[6,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[5,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[8,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[6,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[5,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[7,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[5,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[6,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[9,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[5,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[6,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[5,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[7,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[6,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[5,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[8,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[5,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[6,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[7,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[5,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[6,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[5,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2]]

