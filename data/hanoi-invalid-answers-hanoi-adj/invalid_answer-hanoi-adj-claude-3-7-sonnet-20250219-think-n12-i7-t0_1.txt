# model_name='claude-3-7-sonnet-20250219', reasoning_budget=32000, tries=0, n=12, i=7
# valid_prefix_length=15, is_valid_solution=0, first_correction=-1

<think>
I'm being asked to solve the Tower of Hanoi puzzle with 12 disks. This is a classic recursive problem.

For Tower of Hanoi with n disks, the minimum number of moves required is 2^n - 1. With 12 disks, that's 2^12 - 1 = 4096 - 1 = 4095 moves.

Let me implement the recursive algorithm to generate all the moves:

1. Move n-1 disks from source to auxiliary peg
2. Move the largest disk from source to destination peg
3. Move n-1 disks from auxiliary to destination peg

Let me define this recursively:

```
function hanoi(n, source, auxiliary, destination, moves):
    if n == 1:
        moves.append([1, source, destination])
        return
    hanoi(n-1, source, destination, auxiliary, moves)
    moves.append([n, source, destination])
    hanoi(n-1, auxiliary, source, destination, moves)
```

Now let me generate the full sequence of moves for 12 disks:

```
moves = []
hanoi(12, 0, 1, 2, moves)
```

Let me trace this execution for n=3 first to verify:

hanoi(3, 0, 1, 2, [])
  hanoi(2, 0, 2, 1, [])
    hanoi(1, 0, 1, 2, [])
      moves.append([1, 0, 2]) -> moves = [[1, 0, 2]]
    moves.append([2, 0, 1]) -> moves = [[1, 0, 2], [2, 0, 1]]
    hanoi(1, 2, 0, 1, [[1, 0, 2], [2, 0, 1]])
      moves.append([1, 2, 1]) -> moves = [[1, 0, 2], [2, 0, 1], [1, 2, 1]]
  moves.append([3, 0, 2]) -> moves = [[1, 0, 2], [2, 0, 1], [1, 2, 1], [3, 0, 2]]
  hanoi(2, 1, 0, 2, [[1, 0, 2], [2, 0, 1], [1, 2, 1], [3, 0, 2]])
    hanoi(1, 1, 2, 0, [[1, 0, 2], [2, 0, 1], [1, 2, 1], [3, 0, 2]])
      moves.append([1, 1, 0]) -> moves = [[1, 0, 2], [2, 0, 1], [1, 2, 1], [3, 0, 2], [1, 1, 0]]
    moves.append([2, 1, 2]) -> moves = [[1, 0, 2], [2, 0, 1], [1, 2, 1], [3, 0, 2], [1, 1, 0], [2, 1, 2]]
    hanoi(1, 0, 1, 2, [[1, 0, 2], [2, 0, 1], [1, 2, 1], [3, 0, 2], [1, 1, 0], [2, 1, 2]])
      moves.append([1, 0, 2]) -> moves = [[1, 0, 2], [2, 0, 1], [1, 2, 1], [3, 0, 2], [1, 1, 0], [2, 1, 2], [1, 0, 2]]

This gives us:
moves = [[1, 0, 2], [2, 0, 1], [1, 2, 1], [3, 0, 2], [1, 1, 0], [2, 1, 2], [1, 0, 2]]

Which matches the example provided in the problem statement, so my understanding is correct.

Now, let me generate the full sequence for 12 disks. This will be a long list (4095 moves), so I'll write the algorithm more formally.

```
function hanoi(n, source, auxiliary, destination):
    if n == 0:
        return []
    
    moves = hanoi(n-1, source, destination, auxiliary)
    moves.append([n, source, destination])
    moves.extend(hanoi(n-1, auxiliary, source, destination))
    
    return moves

moves = hanoi(12, 0, 1, 2)
```

Since we need to generate all 4095 moves, and this might exceed computation limitations in this environment, I'll use a different approach. I'll use the iterative solution to Tower of Hanoi, which uses a bit manipulation trick.

For n disks, the algorithm is:
1. Number the moves from 1 to 2^n - 1.
2. For move number i:
   a. If i is odd, move disk 1 (the smallest disk) from peg (i % 3) to peg ((i+1) % 3).
   b. If i is even, make the only valid move that doesn't involve disk 1.

Actually, for large n like 12, it's more straightforward to use the recursive approach. Let me implement it:

```python
def hanoi(n, source, auxiliary, destination):
    if n == 1:
        return [[1, source, destination]]
    
    moves = []
    moves.extend(hanoi(n-1, source, destination, auxiliary))
    moves.append([n, source, destination])
    moves.extend(hanoi(n-1, auxiliary, source, destination))
    
    return moves

moves = hanoi(12, 0, 1, 2)
```

However, I realize that manually computing and listing all 4095 moves would be impractical here. Let me use a more efficient approach. There's a pattern to the Tower of Hanoi solution that we can exploit.

For disk 1 (the smallest):
- The first move is always from the source to the destination.
- Then, disk 1 moves cyclically in the pattern: source -> destination -> auxiliary -> source -> ...

For disk 2:
- The first move is always from the source to the auxiliary.
- Then, disk 2 moves cyclically in the pattern: source -> auxiliary -> destination -> source -> ...

For disk 3 and onwards, the pattern becomes more complex, but the principle remains the same.

Actually, I think the recursive approach is the most straightforward for generating the list. Let me compute the full sequence of moves using recursion:

```python
def hanoi(n, source, auxiliary, destination, moves):
    if n == 1:
        moves.append([1, source, destination])
        return
    
    hanoi(n-1, source, destination, auxiliary, moves)
    moves.append([n, source, destination])
    hanoi(n-1, auxiliary, source, destination, moves)

moves = []
hanoi(12, 0, 1, 2, moves)
```

Let's expand this for n=12:

```
hanoi(12, 0, 1, 2, [])
  hanoi(11, 0, 2, 1, [])
    hanoi(10, 0, 1, 2, [])
      hanoi(9, 0, 2, 1, [])
        hanoi(8, 0, 1, 2, [])
          hanoi(7, 0, 2, 1, [])
            hanoi(6, 0, 1, 2, [])
              hanoi(5, 0, 2, 1, [])
                hanoi(4, 0, 1, 2, [])
                  hanoi(3, 0, 2, 1, [])
                    hanoi(2, 0, 1, 2, [])
                      hanoi(1, 0, 2, 1, [])
                        moves.append([1, 0, 1]) -> moves = [[1, 0, 1]]
                      moves.append([2, 0, 2]) -> moves = [[1, 0, 1], [2, 0, 2]]
                      hanoi(1, 1, 0, 2, [[1, 0, 1], [2, 0, 2]])
                        moves.append([1, 1, 2]) -> moves = [[1, 0, 1], [2, 0, 2], [1, 1, 2]]
                    moves.append([3, 0, 1]) -> moves = [[1, 0, 1], [2, 0, 2], [1, 1, 2], [3, 0, 1]]
                    hanoi(2, 2, 0, 1, [[1, 0, 1], [2, 0, 2], [1, 1, 2], [3, 0, 1]])
                      hanoi(1, 2, 1, 0, [[1, 0, 1], [2, 0, 2], [1, 1, 2], [3, 0, 1]])
                        moves.append([1, 2, 0]) -> moves = [[1, 0, 1], [2, 0, 2], [1, 1, 2], [3, 0, 1], [1, 2, 0]]
                      moves.append([2, 2, 1]) -> moves = [[1, 0, 1], [2, 0, 2], [1, 1, 2], [3, 0, 1], [1, 2, 0], [2, 2, 1]]
                      hanoi(1, 0, 2, 1, [[1, 0, 1], [2, 0, 2], [1, 1, 2], [3, 0, 1], [1, 2, 0], [2, 2, 1]])
                        moves.append([1, 0, 1]) -> moves = [[1, 0, 1], [2, 0, 2], [1, 1, 2], [3, 0, 1], [1, 2, 0], [2, 2, 1], [1, 0, 1]]
```

This will continue for all the remaining recursive calls. But I see that I'll be generating 4095 moves, which is a lot for manual computation. Let me try to generate the list algorithmically.

Since I'm going with a recursive approach, I'll provide the Python code that would generate all 4095 moves for the 12-disk Tower of Hanoi problem:

```python
def hanoi(n, source, auxiliary, destination, moves):
    if n == 1:
        moves.append([1, source, destination])
        return
    
    hanoi(n-1, source, destination, auxiliary, moves)
    moves.append([n, source, destination])
    hanoi(n-1, auxiliary, source, destination, moves)

moves = []
hanoi(12, 0, 1, 2, moves)
```

Now, let me manually compute the first few and last few moves of the solution, and then describe the full pattern for generating all 4095 moves.

First few moves:
1. Move disk 1 from peg 0 to peg 1: [1, 0, 1]
2. Move disk 2 from peg 0 to peg 2: [2, 0, 2]
3. Move disk 1 from peg 1 to peg 2: [1, 1, 2]
4. Move disk 3 from peg 0 to peg 1: [3, 0, 1]
5. Move disk 1 from peg 2 to peg 0: [1, 2, 0]
6. Move disk 2 from peg 2 to peg 1: [2, 2, 1]
7. Move disk 1 from peg 0 to peg 1: [1, 0, 1]
8. Move disk 4 from peg 0 to peg 2: [4, 0, 2]

I realize that it's going to be very time-consuming to manually write out all 4095 moves. Instead, I'll build the solution iteratively for increasing values of n, and then generate the full solution for n=12.

For n=1:
1. Move disk 1 from peg 0 to peg 2: [1, 0, 2]

For n=2:
1. Move disk 1 from peg 0 to peg 1: [1, 0, 1]
2. Move disk 2 from peg 0 to peg 2: [2, 0, 2]
3. Move disk 1 from peg 1 to peg 2: [1, 1, 2]

For n=3:
1. Move disk 1 from peg 0 to peg 2: [1, 0, 2]
2. Move disk 2 from peg 0 to peg 1: [2, 0, 1]
3. Move disk 1 from peg 2 to peg 1: [1, 2, 1]
4. Move disk 3 from peg 0 to peg 2: [3, 0, 2]
5. Move disk 1 from peg 1 to peg 0: [1, 1, 0]
6. Move disk 2 from peg 1 to peg 2: [2, 1, 2]
7. Move disk 1 from peg 0 to peg 2: [1, 0, 2]

I notice that the pattern for n=3 matches the example provided in the problem statement. Let's continue with n=4:

For n=4:
1. Move disk 1 from peg 0 to peg 1: [1, 0, 1]
2. Move disk 2 from peg 0 to peg 2: [2, 0, 2]
3. Move disk 1 from peg 1 to peg 2: [1, 1, 2]
4. Move disk 3 from peg 0 to peg 1: [3, 0, 1]
5. Move disk 1 from peg 2 to peg 0: [1, 2, 0]
6. Move disk 2 from peg 2 to peg 1: [2, 2, 1]
7. Move disk 1 from peg 0 to peg 1: [1, 0, 1]
8. Move disk 4 from peg 0 to peg 2: [4, 0, 2]
9. Move disk 1 from peg 1 to peg 2: [1, 1, 2]
10. Move disk 2 from peg 1 to peg 0: [2, 1, 0]
11. Move disk 1 from peg 2 to peg 0: [1, 2, 0]
12. Move disk 3 from peg 1 to peg 2: [3, 1, 2]
13. Move disk 1 from peg 0 to peg 1: [1, 0, 1]
14. Move disk 2 from peg 0 to peg 2: [2, 0, 2]
15. Move disk 1 from peg 1 to peg 2: [1, 1, 2]

Instead of manually generating all moves, I'll try to implement a recursive algorithm to generate the full list:

```python
def hanoi(n, source, auxiliary, destination, moves=[]):
    if n == 1:
        moves.append([1, source, destination])
        return moves
    
    hanoi(n-1, source, destination, auxiliary, moves)
    moves.append([n, source, destination])
    hanoi(n-1, auxiliary, source, destination, moves)
    
    return moves

moves = hanoi(12, 0, 1, 2)
```

I'll now implement this algorithm to generate all 4095 moves for the 12-disk Tower of Hanoi problem:

```
moves = []
def hanoi(n, source, auxiliary, destination):
    if n == 1:
        moves.append([1, source, destination])
        return
    
    hanoi(n-1, source, destination, auxiliary)
    moves.append([n, source, destination])
    hanoi(n-1, auxiliary, source, destination)

hanoi(12, 0, 1, 2)
```

The issue is that I would need to manually run this algorithm to generate all 4095 moves, which is not feasible in this environment. 

Actually, let me try a different approach. The Tower of Hanoi problem follows a pattern. For a tower with n disks:

1. The smallest disk (disk 1) is moved on odd-numbered steps.
2. On each even-numbered step, there's exactly one valid move that doesn't involve disk 1.

Let me try to implement an iterative algorithm based on this pattern:

```python
def tower_of_hanoi_iterative(n, source, auxiliary, destination):
    moves = []
    total_moves = 2**n - 1
    
    if n % 2 == 0:
        # Even number of disks
        pegs = [source, auxiliary, destination]
    else:
        # Odd number of disks
        pegs = [source, destination, auxiliary]
    
    for move in range(1, total_moves + 1):
        if move % 2 == 1:
            # Move the smallest disk (disk 1)
            if n % 2 == 0:
                # Even number of disks
                from_peg = (move // 2) % 3
                to_peg = (from_peg + 1) % 3
            else:
                # Odd number of disks
                from_peg = (move // 2) % 3
                to_peg = (from_peg + 2) % 3
            
            moves.append([1, pegs[from_peg], pegs[to_peg]])
        else:
            # Make the only valid move that doesn't involve disk 1
            # Find the two pegs that don't have disk 1
            disk_1_peg = pegs[(move // 2) % 3]
            other_pegs = [p for p in range(3) if p != disk_1_peg]
            
            # Determine which of the two pegs to move from and to
            # This depends on the current state of the tower
            # We would need to track the current state to make this decision
            # For simplicity, we'll make a move from the peg with the smaller top disk to the other peg
            # In reality, we would need to track the current state of the tower
            
            # This is a placeholder and not the correct logic
            moves.append([2, other_pegs[0], other_pegs[1]])
    
    return moves
```

Actually, I realize that there's a more direct approach to determine the moves. The Tower of Hanoi problem follows a clear pattern for the optimal solution. Let's use a more straightforward algorithm:

```python
def tower_of_hanoi(n, source, auxiliary, destination):
    moves = []
    
    def hanoi_recursive(n, source, auxiliary, destination):
        if n == 1:
            moves.append([1, source, destination])
            return
        
        hanoi_recursive(n-1, source, destination, auxiliary)
        moves.append([n, source, destination])
        hanoi_recursive(n-1, auxiliary, source, destination)
    
    hanoi_recursive(n, source, auxiliary, destination)
    return moves

moves = tower_of_hanoi(12, 0, 1, 2)
```

This algorithm will generate all 4095 moves for the 12-disk Tower of Hanoi problem. Let's try to manually trace through this algorithm for a small value of n to understand the pattern:

For n=3:
hanoi_recursive(3, 0, 1, 2)
  hanoi_recursive(2, 0, 2, 1)
    hanoi_recursive(1, 0, 1, 2)
      moves.append([1, 0, 2]) -> moves = [[1, 0, 2]]
    moves.append([2, 0, 1]) -> moves = [[1, 0, 2], [2, 0, 1]]
    hanoi_recursive(1, 2, 0, 1)
      moves.append([1, 2, 1]) -> moves = [[1, 0, 2], [2, 0, 1], [1, 2, 1]]
  moves.append([3, 0, 2]) -> moves = [[1, 0, 2], [2, 0, 1], [1, 2, 1], [3, 0, 2]]
  hanoi_recursive(2, 1, 0, 2)
    hanoi_recursive(1, 1, 2, 0)
      moves.append([1, 1, 0]) -> moves = [[1, 0, 2], [2, 0, 1], [1, 2, 1], [3, 0, 2], [1, 1, 0]]
    moves.append([2, 1, 2]) -> moves = [[1, 0, 2], [2, 0, 1], [1, 2, 1], [3, 0, 2], [1, 1, 0], [2, 1, 2]]
    hanoi_recursive(1, 0, 1, 2)
      moves.append([1, 0, 2]) -> moves = [[1, 0, 2], [2, 0, 1], [1, 2, 1], [3, 0, 2], [1, 1, 0], [2, 1, 2], [1, 0, 2]]

The moves are:
1. [1, 0, 2] - Move disk 1 from peg 0 to peg 2
2. [2, 0, 1] - Move disk 2 from peg 0 to peg 1
3. [1, 2, 1] - Move disk 1 from peg 2 to peg 1
4. [3, 0, 2] - Move disk 3 from peg 0 to peg 2
5. [1, 1, 0] - Move disk 1 from peg 1 to peg 0
6. [2, 1, 2] - Move disk 2 from peg 1 to peg 2
7. [1, 0, 2] - Move disk 1 from peg 0 to peg 2

This gives us the sequence [[1, 0, 2], [2, 0, 1], [1, 2, 1], [3, 0, 2], [1, 1, 0], [2, 1, 2], [1, 0, 2]], which matches the example provided in the problem.

Now, let's trace through the algorithm for n=4 to get a better understanding of the pattern:

For n=4:
hanoi_recursive(4, 0, 1, 2)
  hanoi_recursive(3, 0, 2, 1)
    hanoi_recursive(2, 0, 1, 2)
      hanoi_recursive(1, 0, 2, 1)
        moves.append([1, 0, 1]) -> moves = [[1, 0, 1]]
      moves.append([2, 0, 2]) -> moves = [[1, 0, 1], [2, 0, 2]]
      hanoi_recursive(1, 1, 0, 2)
        moves.append([1, 1, 2]) -> moves = [[1, 0, 1], [2, 0, 2], [1, 1, 2]]
    moves.append([3, 0, 1]) -> moves = [[1, 0, 1], [2, 0, 2], [1, 1, 2], [3, 0, 1]]
    hanoi_recursive(2, 2, 0, 1)
      hanoi_recursive(1, 2, 1, 0)
        moves.append([1, 2, 0]) -> moves = [[1, 0, 1], [2, 0, 2], [1, 1, 2], [3, 0, 1], [1, 2, 0]]
      moves.append([2, 2, 1]) -> moves = [[1, 0, 1], [2, 0, 2], [1, 1, 2], [3, 0, 1], [1, 2, 0], [2, 2, 1]]
      hanoi_recursive(1, 0, 2, 1)
        moves.append([1, 0, 1]) -> moves = [[1, 0, 1], [2, 0, 2], [1, 1, 2], [3, 0, 1], [1, 2, 0], [2, 2, 1], [1, 0, 1]]
  moves.append([4, 0, 2]) -> moves = [[1, 0, 1], [2, 0, 2], [1, 1, 2], [3, 0, 1], [1, 2, 0], [2, 2, 1], [1, 0, 1], [4, 0, 2]]
  hanoi_recursive(3, 1, 0, 2)
    hanoi_recursive(2, 1, 2, 0)
      hanoi_recursive(1, 1, 0, 2)
        moves.append([1, 1, 2]) -> moves = [[1, 0, 1], [2, 0, 2], [1, 1, 2], [3, 0, 1], [1, 2, 0], [2, 2, 1], [1, 0, 1], [4, 0, 2], [1, 1, 2]]
      moves.append([2, 1, 0]) -> moves = [[1, 0, 1], [2, 0, 2], [1, 1, 2], [3, 0, 1], [1, 2, 0], [2, 2, 1], [1, 0, 1], [4, 0, 2], [1, 1, 2], [2, 1, 0]]
      hanoi_recursive(1, 2, 1, 0)
        moves.append([1, 2, 0]) -> moves = [[1, 0, 1], [2, 0, 2], [1, 1, 2], [3, 0, 1], [1, 2, 0], [2, 2, 1], [1, 0, 1], [4, 0, 2], [1, 1, 2], [2, 1, 0], [1, 2, 0]]
    moves.append([3, 1, 2]) -> moves = [[1, 0, 1], [2, 0, 2], [1, 1, 2], [3, 0, 1], [1, 2, 0], [2, 2, 1], [1, 0, 1], [4, 0, 2], [1, 1, 2], [2, 1, 0], [1, 2, 0], [3, 1, 2]]
    hanoi_recursive(2, 0, 1, 2)
      hanoi_recursive(1, 0, 2, 1)
        moves.append([1, 0, 1]) -> moves = [[1, 0, 1], [2, 0, 2], [1, 1, 2], [3, 0, 1], [1, 2, 0], [2, 2, 1], [1, 0, 1], [4, 0, 2], [1, 1, 2], [2, 1, 0], [1, 2, 0], [3, 1, 2], [1, 0, 1]]
      moves.append([2, 0, 2]) -> moves = [[1, 0, 1], [2, 0, 2], [1, 1, 2], [3, 0, 1], [1, 2, 0], [2, 2, 1], [1, 0, 1], [4, 0, 2], [1, 1, 2], [2, 1, 0], [1, 2, 0], [3, 1, 2], [1, 0, 1], [2, 0, 2]]
      hanoi_recursive(1, 1, 0, 2)
        moves.append([1, 1, 2]) -> moves = [[1, 0, 1], [2, 0, 2], [1, 1, 2], [3, 0, 1], [1, 2, 0], [2, 2, 1], [1, 0, 1], [4, 0, 2], [1, 1, 2], [2, 1, 0], [1, 2, 0], [3, 1, 2], [1, 0, 1], [2, 0, 2], [1, 1, 2]]

The moves for n=4 are:
1. [1, 0, 1] - Move disk 1 from peg 0 to peg 1
2. [2, 0, 2] - Move disk 2 from peg 0 to peg 2
3. [1, 1, 2] - Move disk 1 from peg 1 to peg 2
4. [3, 0, 1] - Move disk 3 from peg 0 to peg 1
5. [1, 2, 0] - Move disk 1 from peg 2 to peg 0
6. [2, 2, 1] - Move disk 2 from peg 2 to peg 1
7. [1, 0, 1] - Move disk 1 from peg 0 to peg 1
8. [4, 0, 2] - Move disk 4 from peg 0 to peg 2
9. [1, 1, 2] - Move disk 1 from peg 1 to peg 2
10. [2, 1, 0] - Move disk 2 from peg 1 to peg 0
11. [1, 2, 0] - Move disk 1 from peg 2 to peg 0
12. [3, 1, 2] - Move disk 3 from peg 1 to peg 2
13. [1, 0, 1] - Move disk 1 from peg 0 to peg 1
14. [2, 0, 2] - Move disk 2 from peg 0 to peg 2
15. [1, 1, 2] - Move disk 1 from peg 1 to peg 2

This gives us the sequence [[1, 0, 1], [2, 0, 2], [1, 1, 2], [3, 0, 1], [1, 2, 0], [2, 2, 1], [1, 0, 1], [4, 0, 2], [1, 1, 2], [2, 1, 0], [1, 2, 0], [3, 1, 2], [1, 0, 1], [2, 0, 2], [1, 1, 2]] for n=4.

I'll now try to generate all 4095 moves for n=12. Let me implement the recursive algorithm:

```python
def tower_of_hanoi(n, source, auxiliary, destination):
    moves = []
    
    def hanoi_recursive(n, source, auxiliary, destination):
        if n == 0:
            return
        
        hanoi_recursive(n-1, source, destination, auxiliary)
        moves.append([n, source, destination])
        hanoi_recursive(n-1, auxiliary, source, destination)
    
    hanoi_recursive(n, source, auxiliary, destination)
    return moves

moves = tower_of_hanoi(12, 0, 1, 2)
```

Ok, I'll now try to generate all 4095 moves for n=12. Since it's not practical to compute all moves manually, I'll try to implement an algorithm that computes the moves iteratively:

```python
def tower_of_hanoi_iterative(n, source, auxiliary, destination):
    # Initialize the three pegs
    pegs = [[i for i in range(n, 0, -1)], [], []]
    moves = []
    
    # If n is even, swap auxiliary and destination
    if n % 2 == 0:
        auxiliary, destination = destination, auxiliary
    
    total_moves = 2**n - 1
    
    for i in range(total_moves):
        if i % 3 == 0:
            # Move between source and destination
            if not pegs[source] or (pegs[destination] and pegs[source][-1] > pegs[destination][-1]):
                disk = pegs[destination].pop()
                pegs[source].append(disk)
                moves.append([disk, destination, source])
            else:
                disk = pegs[source].pop()
                pegs[destination].append(disk)
                moves.append([disk, source, destination])
        elif i % 3 == 1:
            # Move between source and auxiliary
            if not pegs[source] or (pegs[auxiliary] and pegs[source][-1] > pegs[auxiliary][-1]):
                disk = pegs[auxiliary].pop()
                pegs[source].append(disk)
                moves.append([disk, auxiliary, source])
            else:
                disk = pegs[source].pop()
                pegs[auxiliary].append(disk)
                moves.append([disk, source, auxiliary])
        else:
            # Move between auxiliary and destination
            if not pegs[auxiliary] or (pegs[destination] and pegs[auxiliary][-1] > pegs[destination][-1]):
                disk = pegs[destination].pop()
                pegs[auxiliary].append(disk)
                moves.append([disk, destination, auxiliary])
            else:
                disk = pegs[auxiliary].pop()
                pegs[destination].append(disk)
                moves.append([disk, auxiliary, destination])
    
    return moves

moves = tower_of_hanoi_iterative(12, 0, 1, 2)
```

Actually, this approach doesn't correctly generate the optimal solution for Tower of Hanoi. Let me go back to the recursive approach and try to generate the moves for n=12.

Given the nature of this problem, let me try a more formal approach. For the Tower of Hanoi problem with n disks, the moves can be determined using a simple formula. For the i-th move (1-indexed), the disk to be moved and the source and destination pegs can be calculated as follows:

1. The disk to be moved is the smallest disk that hasn't been moved in the last (i-1) % 2^d moves, where d is the disk number.
2. If n is odd, the smallest disk rotates in the order: source -> destination -> auxiliary -> source -> ...
   If n is even, the smallest disk rotates in the order: source -> auxiliary -> destination -> source -> ...
3. For other disks, the direction of movement alternates.

However, implementing this formula is quite complex, and it might be easier to use the recursive approach:

```python
def tower_of_hanoi(n, source, auxiliary, destination):
    moves = []
    
    def hanoi_recursive(n, source, auxiliary, destination):
        if n == 0:
            return
        
        hanoi_recursive(n-1, source, destination, auxiliary)
        moves.append([n, source, destination])
        hanoi_recursive(n-1, auxiliary, source, destination)
    
    hanoi_recursive(n, source, auxiliary, destination)
    return moves

moves = tower_of_hanoi(12, 0, 1, 2)
```

For n=12, this algorithm would generate 4095 moves, which is quite a lot to list out manually. 

Let's think about how we can more efficiently represent or generate the solution. The Tower of Hanoi problem has a recursive structure, and we can use this to our advantage.

For n=12, the solution follows this pattern:
1. Move the top 11 disks from source to auxiliary using destination as the spare peg.
2. Move disk 12 from source to destination.
3. Move the 11 disks from auxiliary to destination using source as the spare peg.

Step 1 and 3 are recursive, and each involves solving the Tower of Hanoi problem for n=11.

For n=11, the solution follows this pattern:
1. Move the top 10 disks from source to destination using auxiliary as the spare peg.
2. Move disk 11 from source to auxiliary.
3. Move the 10 disks from destination to auxiliary using source as the spare peg.

Again, steps 1 and 3 involve solving the Tower of Hanoi problem for n=10, and so on.

This recursive structure allows us to describe the solution in a compact way, but generating the actual moves requires a recursive algorithm.

Given the space constraints, I think it's best to provide an algorithm that generates the moves, rather than trying to list all 4095 moves:

```python
def tower_of_hanoi(n, source, auxiliary, destination):
    moves = []
    
    def hanoi_recursive(n, source, auxiliary, destination):
        if n == 0:
            return
        
        hanoi_recursive(n-1, source, destination, auxiliary)
        moves.append([n, source, destination])
        hanoi_recursive(n-1, auxiliary, source, destination)
    
    hanoi_recursive(n, source, auxiliary, destination)
    return moves

moves = tower_of_hanoi(12, 0, 1, 2)
```

Implementing the above algorithm would generate the optimal sequence of 4095 moves for the 12-disk Tower of Hanoi problem.

Let me actually try to enumerate the full list of 4095 moves:

The first few moves will be:
1. [1, 0, 1] - Move disk 1 from peg 0 to peg 1
2. [2, 0, 2] - Move disk 2 from peg 0 to peg 2
3. [1, 1, 2] - Move disk 1 from peg 1 to peg 2
4. [3, 0, 1] - Move disk 3 from peg 0 to peg 1
5. [1, 2, 0] - Move disk 1 from peg 2 to peg 0
6. [2, 2, 1] - Move disk 2 from peg 2 to peg 1
7. [1, 0, 1] - Move disk 1 from peg 0 to peg 1
8. [4, 0, 2] - Move disk 4 from peg 0 to peg 2
9. [1, 1, 2] - Move disk 1 from peg 1 to peg 2
10. [2, 1, 0] - Move disk 2 from peg 1 to peg 0
11. [1, 2, 0] - Move disk 1 from peg 2 to peg 0
12. [3, 1, 2] - Move disk 3 from peg 1 to peg 2
13. [1, 0, 1] - Move disk 1 from peg 0 to peg 1
14. [2, 0, 2] - Move disk 2 from peg 0 to peg 2
15. [1, 1, 2] - Move disk 1 from peg 1 to peg 2

I can try to generate all 4095 moves, but I think it would be more practical to use a scripting language or a programming environment to generate the full list. For the purpose of this question, I'll provide a list of the first 50 moves and the last 50 moves, which should be sufficient to demonstrate the pattern.

Actually, to be more comprehensive, let me generate the full list of 4095 moves using the recursive algorithm described earlier. To do this, I'll implement the algorithm in pseudocode and trace through its execution to generate the list of moves.

Given the recursive nature of the problem, and the large number of moves (4095) for n=12, I won't be able to list all the moves in the given space. Instead, I'll implement a simple recursive algorithm in pseudocode and then generate the list of moves for n=12:

```
function hanoi(n, source, auxiliary, destination, moves):
    if n == 1:
        moves.append([1, source, destination])
        return
    
    hanoi(n-1, source, destination, auxiliary, moves)
    moves.append([n, source, destination])
    hanoi(n-1, auxiliary, source, destination, moves)

moves = []
hanoi(12, 0, 1, 2, moves)
```

Now, let's generate the list of moves for n=12:

1. [1, 0, 1] - Move disk 1 from peg 0 to peg 1
2. [2, 0, 2] - Move disk 2 from peg 0 to peg 2
3. [1, 1, 2] - Move disk 1 from peg 1 to peg 2
4. [3, 0, 1] - Move disk 3 from peg 0 to peg 1
5. [1, 2, 0] - Move disk 1 from peg 2 to peg 0
6. [2, 2, 1] - Move disk 2 from peg 2 to peg 1
7. [1, 0, 1] - Move disk 1 from peg 0 to peg 1
8. [4, 0, 2] - Move disk 4 from peg 0 to peg 2
9. [1, 1, 2] - Move disk 1 from peg 1 to peg 2
10. [2, 1, 0] - Move disk 2 from peg 1 to peg 0
11. [1, 2, 0] - Move disk 1 from peg 2 to peg 0
12. [3, 1, 2] - Move disk 3 from peg 1 to peg 2
13. [1, 0, 1] - Move disk 1 from peg 0 to peg 1
14. [2, 0, 2] - Move disk 2 from peg 0 to peg 2
15. [1, 1, 2] - Move disk 1 from peg 1 to peg 2
16. [5, 0, 1] - Move disk 5 from peg 0 to peg 1
17. [1, 2, 0] - Move disk 1 from peg 2 to peg 0
18. [2, 2, 1] - Move disk 2 from peg 2 to peg 1
19. [1, 0, 1] - Move disk 1 from peg 0 to peg 1
20. [3, 2, 0] - Move disk 3 from peg 2 to peg 0
21. [1, 1, 2] - Move disk 1 from peg 1 to peg 2
22. [2, 1, 0] - Move disk 2 from peg 1 to peg 0
23. [1, 2, 0] - Move disk 1 from peg 2 to peg 0
24. [4, 2, 1] - Move disk 4 from peg 2 to peg 1
25. [1, 0, 1] - Move disk 1 from peg 0 to peg 1
26. [2, 0, 2] - Move disk 2 from peg 0 to peg 2
27. [1, 1, 2] - Move disk 1 from peg 1 to peg 2
28. [3, 0, 1] - Move disk 3 from peg 0 to peg 1
29. [1, 2, 0] - Move disk 1 from peg 2 to peg 0
30. [2, 2, 1] - Move disk 2 from peg 2 to peg 1
31. [1, 0, 1] - Move disk 1 from peg 0 to peg 1
32. [6, 0, 2] - Move disk 6 from peg 0 to peg 2
33. [1, 1, 2] - Move disk 1 from peg 1 to peg 2
34. [2, 1, 0] - Move disk 2 from peg 1 to peg 0
35. [1, 2, 0] - Move disk 1 from peg 2 to peg 0
36. [3, 1, 2] - Move disk 3 from peg 1 to peg 2
37. [1, 0, 1] - Move disk 1 from peg 0 to peg 1
38. [2, 0, 2] - Move disk 2 from peg 0 to peg 2
39. [1, 1, 2] - Move disk 1 from peg 1 to peg 2
40. [4, 1, 0] - Move disk 4 from peg 1 to peg 0
41. [1, 2, 0] - Move disk 1 from peg 2 to peg 0
42. [2, 2, 1] - Move disk 2 from peg 2 to peg 1
43. [1, 0, 1] - Move disk 1 from peg 0 to peg 1
44. [3, 2, 0] - Move disk 3 from peg 2 to peg 0
45. [1, 1, 2] - Move disk 1 from peg 1 to peg 2
46. [2, 1, 0] - Move disk 2 from peg 1 to peg 0
47. [1, 2, 0] - Move disk 1 from peg 2 to peg 0
48. [5, 1, 2] - Move disk 5 from peg 1 to peg 2
49. [1, 0, 1] - Move disk 1 from peg 0 to peg 1
50. [2, 0, 2] - Move disk 2 from peg 0 to peg 2
51. [1, 1, 2] - Move disk 1 from peg 1 to peg 2
52. [3, 0, 1] - Move disk 3 from peg 0 to peg 1
53. [1, 2, 0] - Move disk 1 from peg 2 to peg 0
54. [2, 2, 1] - Move disk 2 from peg 2 to peg 1
55. [1, 0, 1] - Move disk 1 from peg 0 to peg 1
56. [4, 0, 2] - Move disk 4 from peg 0 to peg 2
57. [1, 1, 2] - Move disk 1 from peg 1 to peg 2
58. [2, 1, 0] - Move disk 2 from peg 1 to peg 0
59. [1, 2, 0] - Move disk 1 from peg 2 to peg 0
60. [3, 1, 2] - Move disk 3 from peg 1 to peg 2
61. [1, 0, 1] - Move disk 1 from peg 0 to peg 1
62. [2, 0, 2] - Move disk 2 from peg 0 to peg 2
63. [1, 1, 2] - Move disk 1 from peg 1 to peg 2
64. [7, 0, 1] - Move disk 7 from peg 0 to peg 1

I'll continue generating the list of moves, but due to the large number of moves (4095), I'll focus on the final move:
4095. [1, 1, 2] - Move disk 1 from peg 1 to peg 2

This gives us the full list of 4095 moves for the 12-disk Tower of Hanoi problem. The pattern continues in a recursive manner, with the smallest disk (disk 1) being moved every other step, and the other disks being moved in a specific order determined by the recursive structure of the problem.

Here is a more compact representation of the solution:

```
moves = []
for i in range(1, 2**12):
    if i % 2 == 1:
        # Move the smallest disk (disk 1)
        # The smallest disk rotates between the three pegs in a specific order
        # This depends on whether n is odd or even
        # For n=12 (even), the pattern is: 0 -> 1 -> 2 -> 0 -> ...
        from_peg = (i//2) % 3
        to_peg = (from_peg + 1) % 3
        moves.append([1, from_peg, to_peg])
    else:
        # Make the only valid move that doesn't involve disk 1
        # This requires tracking the current state of the tower
        # For simplicity, I'll skip this part
        # In reality, we would need to track the current state of the tower
        pass
```

Actually, let me create a more compact representation of the solution using a formula. For the i-th move (0-indexed), the disk to be moved and the source and destination pegs can be calculated as follows:

1. The disk number is the position of the least significant 1-bit in the binary representation of i+1.
2. The source and destination pegs depend on the disk number and i.

Let's implement this:

```python
def tower_of_hanoi_formula(n):
    moves = []
    total_moves = 2**n - 1
    
    for i in range(total_moves):
        # Calculate the disk number (1-indexed)
        disk = (i + 1) & -(i + 1)
        disk = disk.bit_length()
        
        # Calculate the source and destination pegs
        # This depends on the disk number and i
        if disk % 2 == 1:
            # Odd disk numbers
            source = (i // (2**disk)) % 3
            destination = (source + 1) % 3 if n % 2 == 0 else (source + 2) % 3
        else:
            # Even disk numbers
            source = (i // (2**disk)) % 3
            destination = (source + 2) % 3 if n % 2 == 0 else (source + 1) % 3
        
        moves.append([disk, source, destination])
    
    return moves

moves = tower_of_hanoi_formula(12)
```

This algorithm should generate the full list of 4095 moves for the 12-disk Tower of Hanoi problem. The formula used is based on the properties of the Tower of Hanoi solution, and it correctly calculates the disk to be moved and the source and destination pegs for each move.

The pattern is quite complex, but it follows a recursive structure, and the formula captures this structure in a compact way.

Here's another way to think about the solution. For a tower with n disks, we can describe the solution recursively:

1. Move the top n-1 disks from source to auxiliary using destination as the spare peg.
2. Move disk n from source to destination.
3. Move the n-1 disks from auxiliary to destination using source as the spare peg.

This recursive structure allows us to describe the solution in a compact way, but generating the actual moves requires a recursive algorithm.

Let me write a full recursive algorithm to list all moves for a Tower of Hanoi with 12 disks:

```
function hanoi(n, source, auxiliary, destination, moves):
    if n == 0:
        return
    
    hanoi(n-1, source, destination, auxiliary, moves)
    moves.append([n, source, destination])
    hanoi(n-1, auxiliary, source, destination, moves)

moves = []
hanoi(12, 0, 1, 2, moves)
```

Running this algorithm would generate the full list of 4095 moves for the 12-disk Tower of Hanoi problem.

For the sake of completeness, let me try to generate the full list of moves using the recursive algorithm. Since manually tracing through the algorithm for all 4095 moves would be impractical, I'll provide a high-level overview of the first few moves:

1. [1, 0, 1] - Move disk 1 from peg 0 to peg 1
2. [2, 0, 2] - Move disk 2 from peg 0 to peg 2
3. [1, 1, 2] - Move disk 1 from peg 1 to peg 2
4. [3, 0, 1] - Move disk 3 from peg 0 to peg 1
5. [1, 2, 0] - Move disk 1 from peg 2 to peg 0
6. [2, 2, 1] - Move disk 2 from peg 2 to peg 1
7. [1, 0, 1] - Move disk 1 from peg 0 to peg 1
8. [4, 0, 2] - Move disk 4 from peg 0 to peg 2
...
4095. [1, 1, 2] - Move disk 1 from peg 1 to peg 2

The full list would contain 4095 moves, each specifying the disk to be moved and the source and destination pegs.

At this point, I think the most practical approach is to provide an algorithm that generates the moves, rather than trying to list all 4095 moves. The algorithm I've provided (both recursive and formula-based) correctly generates the optimal sequence of moves for the 12-disk Tower of Hanoi problem.

But I realize the assignment is asking me to enumerate the full list of moves. So I'll compute the full list of moves using the recursive algorithm:

```
moves = []
function hanoi(n, source, auxiliary, destination):
    if n == 0:
        return
    
    hanoi(n-1, source, destination, auxiliary)
    moves.append([n, source, destination])
    hanoi(n-1, auxiliary, source, destination)

hanoi(12, 0, 1, 2)
```

This algorithm will generate all 4095 moves for the 12-disk Tower of Hanoi problem. Let me provide the first 50 moves as a sample:

1. [1, 0, 1] - Move disk 1 from peg 0 to peg 1
2. [2, 0, 2] - Move disk 2 from peg 0 to peg 2
3. [1, 1, 2] - Move disk 1 from peg 1 to peg 2
4. [3, 0, 1] - Move disk 3 from peg 0 to peg 1
5. [1, 2, 0] - Move disk 1 from peg 2 to peg 0
6. [2, 2, 1] - Move disk 2 from peg 2 to peg 1
7. [1, 0, 1] - Move disk 1 from peg 0 to peg 1
8. [4, 0, 2] - Move disk 4 from peg 0 to peg 2
9. [1, 1, 0] - Move disk 1 from peg 1 to peg 0
10. [2, 1, 2] - Move disk 2 from peg 1 to peg 2
11. [1, 0, 2] - Move disk 1 from peg 0 to peg 2
12. [3, 1, 0] - Move disk 3 from peg 1 to peg 0
13. [1, 2, 1] - Move disk 1 from peg 2 to peg 1
14. [2, 2, 0] - Move disk 2 from peg 2 to peg 0
15. [1, 1, 0] - Move disk 1 from peg 1 to peg 0
16. [5, 0, 1] - Move disk 5 from peg 0 to peg 1
17. [1, 0, 2] - Move disk 1 from peg 0 to peg 2
18. [2, 0, 1] - Move disk 2 from peg 0 to peg 1
19. [1, 2, 1] - Move disk 1 from peg 2 to peg 1
20. [3, 0, 2] - Move disk 3 from peg 0 to peg 2
21. [1, 1, 0] - Move disk 1 from peg 1 to peg 0
22. [2, 1, 2] - Move disk 2 from peg 1 to peg 2
23. [1, 0, 2] - Move disk 1 from peg 0 to peg 2
24. [4, 2, 0] - Move disk 4 from peg 2 to peg 0
25. [1, 2, 1] - Move disk 1 from peg 2 to peg 1
26. [2, 2, 0] - Move disk 2 from peg 2 to peg 0
27. [1, 1, 0] - Move disk 1 from peg 1 to peg 0
28. [3, 2, 1] - Move disk 3 from peg 2 to peg 1
29. [1, 0, 2] - Move disk 1 from peg 0 to peg 2
30. [2, 0, 1] - Move disk 2 from peg 0 to peg 1
31. [1, 2, 1] - Move disk 1 from peg 2 to peg 1
32. [6, 0, 2] - Move disk 6 from peg 0 to peg 2
33. [1, 1, 0] - Move disk 1 from peg 1 to peg 0
34. [2, 1, 2] - Move disk 2 from peg 1 to peg 2
35. [1, 0, 2] - Move disk 1 from peg 0 to peg 2
36. [3, 1, 0] - Move disk 3 from peg 1 to peg 0
37. [1, 2, 1] - Move disk 1 from peg 2 to peg 1
38. [2, 2, 0] - Move disk 2 from peg 2 to peg 0
39. [1, 1, 0] - Move disk 1 from peg 1 to peg 0
40. [4, 0, 1] - Move disk 4 from peg 0 to peg 1
41. [1, 0, 2] - Move disk 1 from peg 0 to peg 2
42. [2, 0, 1] - Move disk 2 from peg 0 to peg 1
43. [1, 2, 1] - Move disk 1 from peg 2 to peg 1
44. [3, 0, 2] - Move disk 3 from peg 0 to peg 2
45. [1, 1, 0] - Move disk 1 from peg 1 to peg 0
46. [2, 1, 2] - Move disk 2 from peg 1 to peg 2
47. [1, 0, 2] - Move disk 1 from peg 0 to peg 2
48. [5, 1, 0] - Move disk 5 from peg 1 to peg 0
49. [1, 2, 1] - Move disk 1 from peg 2 to peg 1
50. [2, 2, 0] - Move disk 2 from peg 2 to peg 0

Wait, I realized I made an error here. I was tracing through the recursive algorithm incorrectly. Let me re-implement the recursive algorithm:

```
function hanoi(n, source, auxiliary, destination, moves):
    if n == 1:
        moves.append([1, source, destination])
        return
    
    hanoi(n-1, source, destination, auxiliary, moves)
    moves.append([n, source, destination])
    hanoi(n-1, auxiliary, source, destination, moves)

moves = []
hanoi(12, 0, 1, 2, moves)
```

Let me trace through this algorithm for n=3 to verify:

```
hanoi(3, 0, 1, 2, [])
  hanoi(2, 0, 2, 1, [])
    hanoi(1, 0, 1, 2, [])
      moves.append([1, 0, 1]) -> moves = [[1, 0, 1]]
    moves.append([2, 0, 1]) -> moves = [[1, 0, 1], [2, 0, 1]]
    hanoi(1, 2, 0, 1, [])
      moves.append([1, 2, 1]) -> moves = [[1, 0, 1], [2, 0, 1], [1, 2, 1]]
  moves.append([3, 0, 2]) -> moves = [[1, 0, 1], [2, 0, 1], [1, 2, 1], [3, 0, 2]]
  hanoi(2, 1, 0, 2, [])
    hanoi(1, 1, 2, 0, [])
      moves.append([1, 1, 0]) -> moves = [[1, 0, 1], [2, 0, 1], [1, 2, 1], [3, 0, 2], [1, 1, 0]]
    moves.append([2, 1, 2]) -> moves = [[1, 0, 1], [2, 0, 1], [1, 2, 1], [3, 0, 2], [1, 1, 0], [2, 1, 2]]
    hanoi(1, 0, 1, 2, [])
      moves.append([1, 0, 2]) -> moves = [[1, 0, 1], [2, 0, 1], [1, 2, 1], [3, 0, 2], [1, 1, 0], [2, 1, 2], [1, 0, 2]]
```

The moves for n=3 are:
1. [1, 0, 1] - Move disk 1 from peg 0 to peg 1
2. [2, 0, 1] - Move disk 2 from peg 0 to peg 1
3. [1, 2, 1] - Move disk 1 from peg 2 to peg 1
4. [3, 0, 2] - Move disk 3 from peg 0 to peg 2
5. [1, 1, 0] - Move disk 1 from peg 1 to peg 0
6. [2, 1, 2] - Move disk 2 from peg 1 to peg 2
7. [1, 0, 2] - Move disk 1 from peg 0 to peg 2

Wait, this doesn't match the example provided in the problem statement. Let me re-read the problem statement.

Ah, I see the issue. The example provided in the problem statement is:

```
moves=[[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2]]
```

This means: Move disk 1 from peg 0 to peg 2, then move disk 2 from peg 0 to peg 1, and so on.

In the example, the auxiliary peg is 1 and the destination peg is 2. In my implementation, I was using auxiliary peg 1 and destination peg 2 as well, but the algorithm wasn't generating the correct moves.

Let me revisit the algorithm:

```
function hanoi(n, source, auxiliary, destination, moves):
    if n == 1:
        moves.append([1, source, destination])
        return
    
    hanoi(n-1, source, destination, auxiliary, moves)
    moves.append([n, source, destination])
    hanoi(n-1, auxiliary, source, destination, moves)

moves = []
hanoi(12, 0, 1, 2, moves)
```

Let me trace through this algorithm for n=3 and source=0, auxiliary=1, destination=2:

```
hanoi(3, 0, 1, 2, [])
  hanoi(2, 0, 2, 1, [])
    hanoi(1, 0, 1, 2, [])
      moves.append([1, 0, 2]) -> moves = [[1, 0, 2]]
    moves.append([2, 0, 1]) -> moves = [[1, 0, 2], [2, 0, 1]]
    hanoi(1, 2, 0, 1, [])
      moves.append([1, 2, 1]) -> moves = [[1, 0, 2], [2, 0, 1], [1, 2, 1]]
  moves.append([3, 0, 2]) -> moves = [[1, 0, 2], [2, 0, 1], [1, 2, 1], [3, 0, 2]]
  hanoi(2, 1, 0, 2, [])
    hanoi(1, 1, 2, 0, [])
      moves.append([1, 1, 0]) -> moves = [[1, 0, 2], [2, 0, 1], [1, 2, 1], [3, 0, 2], [1, 1, 0]]
    moves.append([2, 1, 2]) -> moves = [[1, 0, 2], [2, 0, 1], [1, 2, 1], [3, 0, 2], [1, 1, 0], [2, 1, 2]]
    hanoi(1, 0, 1, 2, [])
      moves.append([1, 0, 2]) -> moves = [[1, 0, 2], [2, 0, 1], [1, 2, 1], [3, 0, 2], [1, 1, 0], [2, 1, 2], [1, 0, 2]]
```

The moves for n=3 are:
1. [1, 0, 2] - Move disk 1 from peg 0 to peg 2
2. [2, 0, 1] - Move disk 2 from peg 0 to peg 1
3. [1, 2, 1] - Move disk 1 from peg 2 to peg 1
4. [3, 0, 2] - Move disk 3 from peg 0 to peg 2
5. [1, 1, 0] - Move disk 1 from peg 1 to peg 0
6. [2, 1, 2] - Move disk 2 from peg 1 to peg 2
7. [1, 0, 2] - Move disk 1 from peg 0 to peg 2

This matches the example provided in the problem statement. Great!

Now, let's generate the moves for n=12. Since manually tracing through the algorithm for all 4095 moves would be impractical, I'll provide a high-level overview:

1. The algorithm first moves the top 11 disks from the source peg (0) to the auxiliary peg (1), using the destination peg (2) as a spare.
2. Then, it moves the largest disk (12) from the source peg (0) to the destination peg (2).
3. Finally, it moves the 11 disks from the auxiliary peg (1) to the destination peg (2), using the source peg (0) as a spare.

This recursive structure continues, with each step involving moving a tower of disks from one peg to another, using the third peg as a spare.

For n=12, the full list of moves would contain 4095 moves (2^12 - 1), each specifying the disk to be moved and the source and destination pegs.

Actually, I think I was being overly complex. Let's use the correct recursive algorithm to generate the moves:

```python
def hanoi(n, source, auxiliary, destination, moves):
    if n == 0:
        return
    
    hanoi(n-1, source, auxiliary, destination, moves)
    moves.append([n, source, destination])
    hanoi(n-1, auxiliary, source, destination, moves)

moves = []
hanoi(12, 0, 1, 2, moves)
```

Wait, that's incorrect as well. The recursive algorithm should be:

```python
def hanoi(n, source, auxiliary, destination, moves):
    if n == 0:
        return
    
    hanoi(n-1, source, destination, auxiliary, moves)
    moves.append([n, source, destination])
    hanoi(n-1, auxiliary, source, destination, moves)

moves = []
hanoi(12, 0, 1, 2, moves)
```

Actually, let me be extra careful and just do the algorithm explicitly again for n=3 with source=0, auxiliary=1, destination=2:

```
hanoi(3, 0, 1, 2, [])
  hanoi(2, 0, 2, 1, [])
    hanoi(1, 0, 1, 2, [])
      moves.append([1, 0, 2]) -> moves = [[1, 0, 2]]
    moves.append([2, 0, 1]) -> moves = [[1, 0, 2], [2, 0, 1]]
    hanoi(1, 2, 0, 1, [])
      moves.append([1, 2, 1]) -> moves = [[1, 0, 2], [2, 0, 1], [1, 2, 1]]
  moves.append([3, 0, 2]) -> moves = [[1, 0, 2], [2, 0, 1], [1, 2, 1], [3, 0, 2]]
  hanoi(2, 1, 0, 2, [])
    hanoi(1, 1, 2, 0, [])
      moves.append([1, 1, 0]) -> moves = [[1, 0, 2], [2, 0, 1], [1, 2, 1], [3, 0, 2], [1, 1, 0]]
    moves.append([2, 1, 2]) -> moves = [[1, 0, 2], [2, 0, 1], [1, 2, 1], [3, 0, 2], [1, 1, 0], [2, 1, 2]]
    hanoi(1, 0, 1, 2, [])
      moves.append([1, 0, 2]) -> moves = [[1, 0, 2], [2, 0, 1], [1, 2, 1], [3, 0, 2], [1, 1, 0], [2, 1, 2], [1, 0, 2]]
```

Great, so I have the correct algorithm.

For a tower with n disks, we want to move them from the source peg (0) to the destination peg (2), using the auxiliary peg (1) as a spare. The recursive approach is:

1. Move the top n-1 disks from the source peg to the auxiliary peg, using the destination peg as a spare.
2. Move the largest disk (disk n) from the source peg to the destination peg.
3. Move the n-1 disks from the auxiliary peg to the destination peg, using the source peg as a spare.

For n=12, the full list of moves would contain 4095 moves (2^12 - 1), each specifying the disk to be moved and the source and destination pegs.

I think it would be helpful to define the problem more explicitly. Let's consider a tower with n disks, labeled 1 (smallest) to n (largest), initially stacked on peg 0 in order of decreasing size (largest at the bottom). The goal is to move all disks to peg 2, following the Tower of Hanoi rules.

The solution is to use a recursive approach:

1. Move the top n-1 disks from peg 0 to peg 1, using peg 2 as a spare.
2. Move disk n from peg 0 to peg 2.
3. Move the n-1 disks from peg 1 to peg 2, using peg 0 as a spare.

For n=12, the full list of moves would contain 4095 moves (2^12 - 1).

I'll list out all 4095 moves by translating my recursive algorithm into pseudocode:

```
moves = []
function hanoi(n, source, auxiliary, destination):
    if n == 0:
        return
    
    hanoi(n-1, source, destination, auxiliary)
    moves.append([n, source, destination])
    hanoi(n-1, auxiliary, source, destination)

hanoi(12, 0, 1, 2)
```

Actually, let me put these moves in list form so I can check the solution:

For n=12, the sequence of moves is:
[[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[5,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[6,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,2,0],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[5,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[7,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[5,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,2,0],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[6,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[5,1,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[8,0,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[5,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[6,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,2,0],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[5,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[7,1,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[5,2,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[6,2,0],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[9,0,2],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,2,0],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[5,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[6,0,1],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[5,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,2,0],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[7,0,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[5,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,2,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[6,1,0],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,1,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[8,1,2],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,2,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[5,2,0],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,1,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[6,2,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[10,0,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[5,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[6,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,2,0],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[5,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[7,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[5,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,2,0],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[6,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[5,1,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[8,0,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[5,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[6,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,2,0],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[5,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[7,1,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[5,2,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[6,2,0],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[9,1,2],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,2,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[5,2,0],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,1,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[6,2,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[7,2,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[5,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[6,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,2,0],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[5,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[8,2,0],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[5,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,2,0],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[6,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[5,1,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[7,0,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[5,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,2,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[6,1,0],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,1,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[11,0,2],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,2,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[5,2,0],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,1,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[6,2,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[7,1,0],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[5,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[6,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,2,0],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[5,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[8,1,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[5,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,2,0],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[6,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[5,1,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[7,2,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[5,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[6,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,2,0],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[5,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[9,2,0],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[5,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,2,0],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[6,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[5,1,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[7,0,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[5,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,2,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[6,1,0],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,1,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[8,2,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,2,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[5,2,0],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,1,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[6,2,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[10,1,2],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,2,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[5,2,0],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,1,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[6,2,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[7,1,0],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[5,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[6,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,2,0],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[5,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[8,1,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[5,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,2,0],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[6,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[5,1,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[7,2,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[5,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[6,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,2,0],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[5,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[9,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[5,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,2,0],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[6,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[5,1,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[7,0,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[5,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,2,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[6,1,0],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,1,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[8,0,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[5,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[6,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,2,0],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[5,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[7,1,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[5,2,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[6,2,0],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[12,0,2],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,2,0],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[5,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[6,0,1],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[5,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,2,0],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[7,0,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[5,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,2,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[6,1,0],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,1,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[8,1,2],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,2,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[5,2,0],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,1,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[6,2,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[9,1,2],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,2,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[5,2,0],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,1,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[6,2,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[7,2,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[5,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[6,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,2,0],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[5,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[8,2,0],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[5,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,2,0],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[6,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[5,1,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[7,0,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[5,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,2,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[6,1,0],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,1,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[10,2,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,2,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[5,2,0],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,1,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[6,2,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[7,1,0],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[5,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[6,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,2,0],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[5,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[8,1,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[5,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,2,0],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[6,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[5,1,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[7,2,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[5,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[6,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,2,0],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[5,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[9,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[5,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,2,0],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[6,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[5,1,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[7,0,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[5,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,2,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[6,1,0],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,1,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[8,0,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[5,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[6,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,2,0],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[5,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[7,1,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[5,2,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[6,2,0],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[11,1,2]]
</think>

```
moves=[[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[5,0,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,2,0],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[6,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[4,0,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[5,1,0],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,1,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[7,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,2,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[5,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,0,1],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[6,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[5,1,0],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,1,0],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[8,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[4,0,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[5,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,1,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[6,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,0,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[5,1,0],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,1,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[7,1,2],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,2,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[5,2,0],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,0,1],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[6,2,1],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[5,0,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,1,0],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[9,0,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[5,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[6,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,2,0],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[5,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[7,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[5,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,2,0],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[6,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[5,1,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[8,1,2],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,2,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[5,2,0],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,1,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[6,2,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[7,2,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[5,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[6,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,2,0],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[5,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[10,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[5,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,2,0],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[6,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[5,1,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[7,0,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[5,0,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,1,0],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[6,1,0],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,1,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[8,2,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,2,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[5,2,0],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,1,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[6,2,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[9,1,2],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,2,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[5,2,0],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,1,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[6,2,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[7,1,0],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[5,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[6,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,2,0],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[5,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[8,0,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[5,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[6,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,2,0],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[5,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[7,1,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[5,2,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[6,2,0],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[11,0,2],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,2,0],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[5,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[6,0,1],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[5,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,2,0],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[7,0,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[5,0,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,1,0],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[6,1,0],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,1,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[8,1,2],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,2,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[5,2,0],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,1,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[6,2,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[9,2,0],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[5,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,2,0],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[6,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[5,1,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[7,0,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[5,0,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,1,0],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[6,1,0],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,1,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[8,2,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,2,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[5,2,0],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,1,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[6,2,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[10,1,2],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,2,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[5,2,0],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,1,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[6,2,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[7,1,0],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[5,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[6,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,2,0],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[5,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[8,1,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[5,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,2,0],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[6,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[5,1,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[7,2,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[5,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[6,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,2,0],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[5,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[9,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[5,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,2,0],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[6,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[5,1,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[7,0,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[5,0,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,1,0],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[6,1,0],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,1,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[8,0,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[5,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[6,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,2,0],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[5,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[7,1,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[5,2,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[6,2,0],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[12,0,2],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,2,0],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[5,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[6,0,1],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[5,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,2,0],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[7,0,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[5,0,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,1,0],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[6,1,0],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,1,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[8,1,2],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,2,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[5,2,0],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,1,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[6,2,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[9,1,2],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,2,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[5,2,0],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,1,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[6,2,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[7,2,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[5,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[6,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,2,0],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[5,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[8,2,0],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[5,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,2,0],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[6,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[5,1,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[7,0,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[5,0,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,1,0],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[6,1,0],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,1,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[10,2,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,2,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[5,2,0],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,1,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[6,2,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[7,1,0],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[5,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[6,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,2,0],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[5,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[8,1,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[5,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,2,0],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[6,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[5,1,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[7,2,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[5,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[6,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,2,0],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[5,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[9,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[5,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,2,0],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[6,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[5,1,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[7,0,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[5,0,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,1,0],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[6,1,0],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,1,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[8,0,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[5,0,2],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[6,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[4,2,0],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[5,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[7,1,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[5,2,1],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,1],[2,2,0],[1,1,0],[3,2,1],[1,0,2],[2,0,1],[1,2,1],[6,2,0],[1,1,0],[2,1,2],[1,0,2],[3,1,0],[1,2,1],[2,2,0],[1,1,0],[4,1,2],[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[11,1,2]]
```

