# model_name='claude-3-7-sonnet-20250219', reasoning_budget=32000, tries=0, n=7, i=1
# valid_prefix_length=6, is_valid_solution=0, first_correction=-1

<think>
This is a standard Tower of Hanoi problem with 7 disks. I need to find a sequence of moves to transfer all 7 disks from peg 0 to peg 2 following the given rules.

For the Tower of Hanoi with n disks, the minimum number of moves required is 2^n - 1. So with 7 disks, we need 2^7 - 1 = 128 - 1 = 127 moves.

Let me solve this recursively:

To move n disks from source peg to destination peg using an auxiliary peg:
1. Move n-1 disks from source to auxiliary peg
2. Move the largest disk from source to destination
3. Move n-1 disks from auxiliary to destination

Let's track the state of each peg after each move to ensure we're following the rules.

Initial state:
- Peg 0: [7, 6, 5, 4, 3, 2, 1] (bottom to top)
- Peg 1: []
- Peg 2: []

I'll define the recursive function `hanoi(n, source, auxiliary, destination)` that gives the sequence of moves to transfer n disks from source peg to destination peg using the auxiliary peg.

For our problem, we need to call `hanoi(7, 0, 1, 2)`.

Let me work out the moves:

```
hanoi(7, 0, 1, 2):
    hanoi(6, 0, 2, 1)
        hanoi(5, 0, 1, 2)
            hanoi(4, 0, 2, 1)
                hanoi(3, 0, 1, 2)
                    hanoi(2, 0, 2, 1)
                        hanoi(1, 0, 1, 2)
                            Move disk 1 from peg 0 to peg 2
                        Move disk 2 from peg 0 to peg 1
                        hanoi(1, 2, 0, 1)
                            Move disk 1 from peg 2 to peg 1
                    Move disk 3 from peg 0 to peg 2
                    hanoi(2, 1, 0, 2)
                        hanoi(1, 1, 2, 0)
                            Move disk 1 from peg 1 to peg 0
                        Move disk 2 from peg 1 to peg 2
                        hanoi(1, 0, 1, 2)
                            Move disk 1 from peg 0 to peg 2
                Move disk 4 from peg 0 to peg 1
                hanoi(3, 2, 0, 1)
                    hanoi(2, 2, 1, 0)
                        hanoi(1, 2, 0, 1)
                            Move disk 1 from peg 2 to peg 1
                        Move disk 2 from peg 2 to peg 0
                        hanoi(1, 1, 2, 0)
                            Move disk 1 from peg 1 to peg 0
                    Move disk 3 from peg 2 to peg 1
                    hanoi(2, 0, 2, 1)
                        hanoi(1, 0, 1, 2)
                            Move disk 1 from peg 0 to peg 2
                        Move disk 2 from peg 0 to peg 1
                        hanoi(1, 2, 0, 1)
                            Move disk 1 from peg 2 to peg 1
            Move disk 5 from peg 0 to peg 2
            hanoi(4, 1, 0, 2)
                hanoi(3, 1, 2, 0)
                    hanoi(2, 1, 0, 2)
                        hanoi(1, 1, 2, 0)
                            Move disk 1 from peg 1 to peg 0
                        Move disk 2 from peg 1 to peg 2
                        hanoi(1, 0, 1, 2)
                            Move disk 1 from peg 0 to peg 2
                    Move disk 3 from peg 1 to peg 0
                    hanoi(2, 2, 1, 0)
                        hanoi(1, 2, 0, 1)
                            Move disk 1 from peg 2 to peg 1
                        Move disk 2 from peg 2 to peg 0
                        hanoi(1, 1, 2, 0)
                            Move disk 1 from peg 1 to peg 0
                Move disk 4 from peg 1 to peg 2
                hanoi(3, 0, 1, 2)
                    hanoi(2, 0, 2, 1)
                        hanoi(1, 0, 1, 2)
                            Move disk 1 from peg 0 to peg 2
                        Move disk 2 from peg 0 to peg 1
                        hanoi(1, 2, 0, 1)
                            Move disk 1 from peg 2 to peg 1
                    Move disk 3 from peg 0 to peg 2
                    hanoi(2, 1, 0, 2)
                        hanoi(1, 1, 2, 0)
                            Move disk 1 from peg 1 to peg 0
                        Move disk 2 from peg 1 to peg 2
                        hanoi(1, 0, 1, 2)
                            Move disk 1 from peg 0 to peg 2
        Move disk 6 from peg 0 to peg 1
        hanoi(5, 2, 0, 1)
            hanoi(4, 2, 1, 0)
                hanoi(3, 2, 0, 1)
                    hanoi(2, 2, 1, 0)
                        hanoi(1, 2, 0, 1)
                            Move disk 1 from peg 2 to peg 1
                        Move disk 2 from peg 2 to peg 0
                        hanoi(1, 1, 2, 0)
                            Move disk 1 from peg 1 to peg 0
                    Move disk 3 from peg 2 to peg 1
                    hanoi(2, 0, 2, 1)
                        hanoi(1, 0, 1, 2)
                            Move disk 1 from peg 0 to peg 2
                        Move disk 2 from peg 0 to peg 1
                        hanoi(1, 2, 0, 1)
                            Move disk 1 from peg 2 to peg 1
                Move disk 4 from peg 2 to peg 0
                hanoi(3, 1, 2, 0)
                    hanoi(2, 1, 0, 2)
                        hanoi(1, 1, 2, 0)
                            Move disk 1 from peg 1 to peg 0
                        Move disk 2 from peg 1 to peg 2
                        hanoi(1, 0, 1, 2)
                            Move disk 1 from peg 0 to peg 2
                    Move disk 3 from peg 1 to peg 0
                    hanoi(2, 2, 1, 0)
                        hanoi(1, 2, 0, 1)
                            Move disk 1 from peg 2 to peg 1
                        Move disk 2 from peg 2 to peg 0
                        hanoi(1, 1, 2, 0)
                            Move disk 1 from peg 1 to peg 0
            Move disk 5 from peg 2 to peg 1
            hanoi(4, 0, 2, 1)
                hanoi(3, 0, 1, 2)
                    hanoi(2, 0, 2, 1)
                        hanoi(1, 0, 1, 2)
                            Move disk 1 from peg 0 to peg 2
                        Move disk 2 from peg 0 to peg 1
                        hanoi(1, 2, 0, 1)
                            Move disk 1 from peg 2 to peg 1
                    Move disk 3 from peg 0 to peg 2
                    hanoi(2, 1, 0, 2)
                        hanoi(1, 1, 2, 0)
                            Move disk 1 from peg 1 to peg 0
                        Move disk 2 from peg 1 to peg 2
                        hanoi(1, 0, 1, 2)
                            Move disk 1 from peg 0 to peg 2
                Move disk 4 from peg 0 to peg 1
                hanoi(3, 2, 0, 1)
                    hanoi(2, 2, 1, 0)
                        hanoi(1, 2, 0, 1)
                            Move disk 1 from peg 2 to peg 1
                        Move disk 2 from peg 2 to peg 0
                        hanoi(1, 1, 2, 0)
                            Move disk 1 from peg 1 to peg 0
                    Move disk 3 from peg 2 to peg 1
                    hanoi(2, 0, 2, 1)
                        hanoi(1, 0, 1, 2)
                            Move disk 1 from peg 0 to peg 2
                        Move disk 2 from peg 0 to peg 1
                        hanoi(1, 2, 0, 1)
                            Move disk 1 from peg 2 to peg 1
    Move disk 7 from peg 0 to peg 2
    hanoi(6, 1, 0, 2)
        hanoi(5, 1, 2, 0)
            hanoi(4, 1, 0, 2)
                hanoi(3, 1, 2, 0)
                    hanoi(2, 1, 0, 2)
                        hanoi(1, 1, 2, 0)
                            Move disk 1 from peg 1 to peg 0
                        Move disk 2 from peg 1 to peg 2
                        hanoi(1, 0, 1, 2)
                            Move disk 1 from peg 0 to peg 2
                    Move disk 3 from peg 1 to peg 0
                    hanoi(2, 2, 1, 0)
                        hanoi(1, 2, 0, 1)
                            Move disk 1 from peg 2 to peg 1
                        Move disk 2 from peg 2 to peg 0
                        hanoi(1, 1, 2, 0)
                            Move disk 1 from peg 1 to peg 0
                Move disk 4 from peg 1 to peg 2
                hanoi(3, 0, 1, 2)
                    hanoi(2, 0, 2, 1)
                        hanoi(1, 0, 1, 2)
                            Move disk 1 from peg 0 to peg 2
                        Move disk 2 from peg 0 to peg 1
                        hanoi(1, 2, 0, 1)
                            Move disk 1 from peg 2 to peg 1
                    Move disk 3 from peg 0 to peg 2
                    hanoi(2, 1, 0, 2)
                        hanoi(1, 1, 2, 0)
                            Move disk 1 from peg 1 to peg 0
                        Move disk 2 from peg 1 to peg 2
                        hanoi(1, 0, 1, 2)
                            Move disk 1 from peg 0 to peg 2
            Move disk 5 from peg 1 to peg 0
            hanoi(4, 2, 1, 0)
                hanoi(3, 2, 0, 1)
                    hanoi(2, 2, 1, 0)
                        hanoi(1, 2, 0, 1)
                            Move disk 1 from peg 2 to peg 1
                        Move disk 2 from peg 2 to peg 0
                        hanoi(1, 1, 2, 0)
                            Move disk 1 from peg 1 to peg 0
                    Move disk 3 from peg 2 to peg 1
                    hanoi(2, 0, 2, 1)
                        hanoi(1, 0, 1, 2)
                            Move disk 1 from peg 0 to peg 2
                        Move disk 2 from peg 0 to peg 1
                        hanoi(1, 2, 0, 1)
                            Move disk 1 from peg 2 to peg 1
                Move disk 4 from peg 2 to peg 0
                hanoi(3, 1, 2, 0)
                    hanoi(2, 1, 0, 2)
                        hanoi(1, 1, 2, 0)
                            Move disk 1 from peg 1 to peg 0
                        Move disk 2 from peg 1 to peg 2
                        hanoi(1, 0, 1, 2)
                            Move disk 1 from peg 0 to peg 2
                    Move disk 3 from peg 1 to peg 0
                    hanoi(2, 2, 1, 0)
                        hanoi(1, 2, 0, 1)
                            Move disk 1 from peg 2 to peg 1
                        Move disk 2 from peg 2 to peg 0
                        hanoi(1, 1, 2, 0)
                            Move disk 1 from peg 1 to peg 0
        Move disk 6 from peg 1 to peg 2
        hanoi(5, 0, 1, 2)
            hanoi(4, 0, 2, 1)
                hanoi(3, 0, 1, 2)
                    hanoi(2, 0, 2, 1)
                        hanoi(1, 0, 1, 2)
                            Move disk 1 from peg 0 to peg 2
                        Move disk 2 from peg 0 to peg 1
                        hanoi(1, 2, 0, 1)
                            Move disk 1 from peg 2 to peg 1
                    Move disk 3 from peg 0 to peg 2
                    hanoi(2, 1, 0, 2)
                        hanoi(1, 1, 2, 0)
                            Move disk 1 from peg 1 to peg 0
                        Move disk 2 from peg 1 to peg 2
                        hanoi(1, 0, 1, 2)
                            Move disk 1 from peg 0 to peg 2
                Move disk 4 from peg 0 to peg 1
                hanoi(3, 2, 0, 1)
                    hanoi(2, 2, 1, 0)
                        hanoi(1, 2, 0, 1)
                            Move disk 1 from peg 2 to peg 1
                        Move disk 2 from peg 2 to peg 0
                        hanoi(1, 1, 2, 0)
                            Move disk 1 from peg 1 to peg 0
                    Move disk 3 from peg 2 to peg 1
                    hanoi(2, 0, 2, 1)
                        hanoi(1, 0, 1, 2)
                            Move disk 1 from peg 0 to peg 2
                        Move disk 2 from peg 0 to peg 1
                        hanoi(1, 2, 0, 1)
                            Move disk 1 from peg 2 to peg 1
            Move disk 5 from peg 0 to peg 2
            hanoi(4, 1, 0, 2)
                hanoi(3, 1, 2, 0)
                    hanoi(2, 1, 0, 2)
                        hanoi(1, 1, 2, 0)
                            Move disk 1 from peg 1 to peg 0
                        Move disk 2 from peg 1 to peg 2
                        hanoi(1, 0, 1, 2)
                            Move disk 1 from peg 0 to peg 2
                    Move disk 3 from peg 1 to peg 0
                    hanoi(2, 2, 1, 0)
                        hanoi(1, 2, 0, 1)
                            Move disk 1 from peg 2 to peg 1
                        Move disk 2 from peg 2 to peg 0
                        hanoi(1, 1, 2, 0)
                            Move disk 1 from peg 1 to peg 0
                Move disk 4 from peg 1 to peg 2
                hanoi(3, 0, 1, 2)
                    hanoi(2, 0, 2, 1)
                        hanoi(1, 0, 1, 2)
                            Move disk 1 from peg 0 to peg 2
                        Move disk 2 from peg 0 to peg 1
                        hanoi(1, 2, 0, 1)
                            Move disk 1 from peg 2 to peg 1
                    Move disk 3 from peg 0 to peg 2
                    hanoi(2, 1, 0, 2)
                        hanoi(1, 1, 2, 0)
                            Move disk 1 from peg 1 to peg 0
                        Move disk 2 from peg 1 to peg 2
                        hanoi(1, 0, 1, 2)
                            Move disk 1 from peg 0 to peg 2
```

OK, I think trying to manually trace through all 127 moves in the thinking section is not efficient. Let me instead implement a function to generate the moves systematically and track the state of the pegs.

```python
def hanoi_moves(n, source, auxiliary, destination):
    if n == 1:
        return [(source, destination)]
    else:
        return (
            hanoi_moves(n-1, source, destination, auxiliary) +
            [(source, destination)] +
            hanoi_moves(n-1, auxiliary, source, destination)
        )
```

This recursive function will give us the sequence of moves (from_peg, to_peg) for the Tower of Hanoi problem. Now, let's generate this for n=7:

Let me simulate the algorithm:

1. hanoi_moves(7, 0, 1, 2)
   - First recursion: hanoi_moves(6, 0, 2, 1)
     - First recursion: hanoi_moves(5, 0, 1, 2)
       - First recursion: hanoi_moves(4, 0, 2, 1)
         - First recursion: hanoi_moves(3, 0, 1, 2)
           - First recursion: hanoi_moves(2, 0, 2, 1)
             - First recursion: hanoi_moves(1, 0, 1, 2)
               - Base case: [(0, 2)]
             - Move disk 2: [(0, 1)]
             - Second recursion: hanoi_moves(1, 2, 0, 1)
               - Base case: [(2, 1)]
             - Combine: [(0, 2), (0, 1), (2, 1)]
           - Move disk 3: [(0, 2)]
           - Second recursion: hanoi_moves(2, 1, 0, 2)
             - First recursion: hanoi_moves(1, 1, 2, 0)
               - Base case: [(1, 0)]
             - Move disk 2: [(1, 2)]
             - Second recursion: hanoi_moves(1, 0, 1, 2)
               - Base case: [(0, 2)]
             - Combine: [(1, 0), (1, 2), (0, 2)]
           - Combine: [(0, 2), (0, 1), (2, 1), (0, 2), (1, 0), (1, 2), (0, 2)]
         - Move disk 4: [(0, 1)]
         - Second recursion: hanoi_moves(3, 2, 0, 1)
           - First recursion: hanoi_moves(2, 2, 1, 0)
             - First recursion: hanoi_moves(1, 2, 0, 1)
               - Base case: [(2, 1)]
             - Move disk 2: [(2, 0)]
             - Second recursion: hanoi_moves(1, 1, 2, 0)
               - Base case: [(1, 0)]
             - Combine: [(2, 1), (2, 0), (1, 0)]
           - Move disk 3: [(2, 1)]
           - Second recursion: hanoi_moves(2, 0, 2, 1)
             - First recursion: hanoi_moves(1, 0, 1, 2)
               - Base case: [(0, 2)]
             - Move disk 2: [(0, 1)]
             - Second recursion: hanoi_moves(1, 2, 0, 1)
               - Base case: [(2, 1)]
             - Combine: [(0, 2), (0, 1), (2, 1)]
           - Combine: [(2, 1), (2, 0), (1, 0), (2, 1), (0, 2), (0, 1), (2, 1)]
         - Combine: [(0, 2), (0, 1), (2, 1), (0, 2), (1, 0), (1, 2), (0, 2), (0, 1), (2, 1), (2, 0), (1, 0), (2, 1), (0, 2), (0, 1), (2, 1)]
       - Move disk 5: [(0, 2)]
       - Second recursion: hanoi_moves(4, 1, 0, 2)
         - (similar recursive structure)
       - Combine moves for disk 5
     - Move disk 6: [(0, 1)]
     - Second recursion: hanoi_moves(5, 2, 0, 1)
       - (similar recursive structure)
     - Combine moves for disk 6
   - Move disk 7: [(0, 2)]
   - Second recursion: hanoi_moves(6, 1, 0, 2)
     - (similar recursive structure)
   - Combine all moves

Instead of writing out every single move (which would be 127 moves), let me create a function to generate the moves and track the state of each peg after each move.

Actually, I realize that there's a simpler pattern to the Tower of Hanoi solution when there are an odd number of disks (which is the case here with 7 disks):

1. Move the smallest disk to the destination peg (peg 2)
2. Make the only legal move that doesn't involve the smallest disk
3. Move the smallest disk to the peg that doesn't have the smallest or largest disk
4. Repeat steps 2 and 3 until all disks are on the destination peg

Let me implement this and track the state of each peg:

I'll start by initializing the pegs:
- Peg 0: [7, 6, 5, 4, 3, 2, 1] (bottom to top)
- Peg 1: []
- Peg 2: []

I'll also keep track of the move number and the state of each peg after each move.

Ok, I will systematically generate all 127 moves for the Tower of Hanoi with 7 disks, starting from peg 0 and ending at peg 2. I'll track the state of each peg after each move to ensure the solution is valid.

Initial state:
- peg0 = [7, 6, 5, 4, 3, 2, 1]
- peg1 = []
- peg2 = []

I'll use a structured approach to generate the moves:

```
move_id,from_peg,to_peg,peg0,peg1,peg2
```

Move 1: Move disk 1 from peg 0 to peg 2
- peg0 = [7, 6, 5, 4, 3, 2]
- peg1 = []
- peg2 = [1]

Move 2: Move disk 2 from peg 0 to peg 1
- peg0 = [7, 6, 5, 4, 3]
- peg1 = [2]
- peg2 = [1]

Move 3: Move disk 1 from peg 2 to peg 1
- peg0 = [7, 6, 5, 4, 3]
- peg1 = [2, 1]
- peg2 = []

Move 4: Move disk 3 from peg 0 to peg 2
- peg0 = [7, 6, 5, 4]
- peg1 = [2, 1]
- peg2 = [3]

Move 5: Move disk 1 from peg 1 to peg 0
- peg0 = [7, 6, 5, 4, 1]
- peg1 = [2]
- peg2 = [3]

Move 6: Move disk 2 from peg 1 to peg 2
- peg0 = [7, 6, 5, 4, 1]
- peg1 = []
- peg2 = [3, 2]

Move 7: Move disk 1 from peg 0 to peg 2
- peg0 = [7, 6, 5, 4]
- peg1 = []
- peg2 = [3, 2, 1]

Move 8: Move disk 4 from peg 0 to peg 1
- peg0 = [7, 6, 5]
- peg1 = [4]
- peg2 = [3, 2, 1]

Move 9: Move disk 1 from peg 2 to peg 1
- peg0 = [7, 6, 5]
- peg1 = [4, 1]
- peg2 = [3, 2]

Move 10: Move disk 2 from peg 2 to peg 0
- peg0 = [7, 6, 5, 2]
- peg1 = [4, 1]
- peg2 = [3]

Move 11: Move disk 1 from peg 1 to peg 0
- peg0 = [7, 6, 5, 2, 1]
- peg1 = [4]
- peg2 = [3]

Move 12: Move disk 3 from peg 2 to peg 1
- peg0 = [7, 6, 5, 2, 1]
- peg1 = [4, 3]
- peg2 = []

Move 13: Move disk 1 from peg 0 to peg 2
- peg0 = [7, 6, 5, 2]
- peg1 = [4, 3]
- peg2 = [1]

Move 14: Move disk 2 from peg 0 to peg 1
- peg0 = [7, 6, 5]
- peg1 = [4, 3, 2]
- peg2 = [1]

Move 15: Move disk 1 from peg 2 to peg 1
- peg0 = [7, 6, 5]
- peg1 = [4, 3, 2, 1]
- peg2 = []

Move 16: Move disk 5 from peg 0 to peg 2
- peg0 = [7, 6]
- peg1 = [4, 3, 2, 1]
- peg2 = [5]

Move 17: Move disk 1 from peg 1 to peg 0
- peg0 = [7, 6, 1]
- peg1 = [4, 3, 2]
- peg2 = [5]

Move 18: Move disk 2 from peg 1 to peg 2
- peg0 = [7, 6, 1]
- peg1 = [4, 3]
- peg2 = [5, 2]

Move 19: Move disk 1 from peg 0 to peg 2
- peg0 = [7, 6]
- peg1 = [4, 3]
- peg2 = [5, 2, 1]

Move 20: Move disk 3 from peg 1 to peg 0
- peg0 = [7, 6, 3]
- peg1 = [4]
- peg2 = [5, 2, 1]

Move 21: Move disk 1 from peg 2 to peg 1
- peg0 = [7, 6, 3]
- peg1 = [4, 1]
- peg2 = [5, 2]

Move 22: Move disk 2 from peg 2 to peg 0
- peg0 = [7, 6, 3, 2]
- peg1 = [4, 1]
- peg2 = [5]

Move 23: Move disk 1 from peg 1 to peg 0
- peg0 = [7, 6, 3, 2, 1]
- peg1 = [4]
- peg2 = [5]

Move 24: Move disk 4 from peg 1 to peg 2
- peg0 = [7, 6, 3, 2, 1]
- peg1 = []
- peg2 = [5, 4]

Move 25: Move disk 1 from peg 0 to peg 2
- peg0 = [7, 6, 3, 2]
- peg1 = []
- peg2 = [5, 4, 1]

Move 26: Move disk 2 from peg 0 to peg 1
- peg0 = [7, 6, 3]
- peg1 = [2]
- peg2 = [5, 4, 1]

Move 27: Move disk 1 from peg 2 to peg 1
- peg0 = [7, 6, 3]
- peg1 = [2, 1]
- peg2 = [5, 4]

Move 28: Move disk 3 from peg 0 to peg 2
- peg0 = [7, 6]
- peg1 = [2, 1]
- peg2 = [5, 4, 3]

Move 29: Move disk 1 from peg 1 to peg 0
- peg0 = [7, 6, 1]
- peg1 = [2]
- peg2 = [5, 4, 3]

Move 30: Move disk 2 from peg 1 to peg 2
- peg0 = [7, 6, 1]
- peg1 = []
- peg2 = [5, 4, 3, 2]

Move 31: Move disk 1 from peg 0 to peg 2
- peg0 = [7, 6]
- peg1 = []
- peg2 = [5, 4, 3, 2, 1]

Move 32: Move disk 6 from peg 0 to peg 1
- peg0 = [7]
- peg1 = [6]
- peg2 = [5, 4, 3, 2, 1]

Move 33: Move disk 1 from peg 2 to peg 1
- peg0 = [7]
- peg1 = [6, 1]
- peg2 = [5, 4, 3, 2]

Move 34: Move disk 2 from peg 2 to peg 0
- peg0 = [7, 2]
- peg1 = [6, 1]
- peg2 = [5, 4, 3]

Move 35: Move disk 1 from peg 1 to peg 0
- peg0 = [7, 2, 1]
- peg1 = [6]
- peg2 = [5, 4, 3]

Move 36: Move disk 3 from peg 2 to peg 1
- peg0 = [7, 2, 1]
- peg1 = [6, 3]
- peg2 = [5, 4]

Move 37: Move disk 1 from peg 0 to peg 2
- peg0 = [7, 2]
- peg1 = [6, 3]
- peg2 = [5, 4, 1]

Move 38: Move disk 2 from peg 0 to peg 1
- peg0 = [7]
- peg1 = [6, 3, 2]
- peg2 = [5, 4, 1]

Move 39: Move disk 1 from peg 2 to peg 1
- peg0 = [7]
- peg1 = [6, 3, 2, 1]
- peg2 = [5, 4]

Move 40: Move disk 4 from peg 2 to peg 0
- peg0 = [7, 4]
- peg1 = [6, 3, 2, 1]
- peg2 = [5]

Move 41: Move disk 1 from peg 1 to peg 0
- peg0 = [7, 4, 1]
- peg1 = [6, 3, 2]
- peg2 = [5]

Move 42: Move disk 2 from peg 1 to peg 2
- peg0 = [7, 4, 1]
- peg1 = [6, 3]
- peg2 = [5, 2]

Move 43: Move disk 1 from peg 0 to peg 2
- peg0 = [7, 4]
- peg1 = [6, 3]
- peg2 = [5, 2, 1]

Move 44: Move disk 3 from peg 1 to peg 0
- peg0 = [7, 4, 3]
- peg1 = [6]
- peg2 = [5, 2, 1]

Move 45: Move disk 1 from peg 2 to peg 1
- peg0 = [7, 4, 3]
- peg1 = [6, 1]
- peg2 = [5, 2]

Move 46: Move disk 2 from peg 2 to peg 0
- peg0 = [7, 4, 3, 2]
- peg1 = [6, 1]
- peg2 = [5]

Move 47: Move disk 1 from peg 1 to peg 0
- peg0 = [7, 4, 3, 2, 1]
- peg1 = [6]
- peg2 = [5]

Move 48: Move disk 5 from peg 2 to peg 1
- peg0 = [7, 4, 3, 2, 1]
- peg1 = [6, 5]
- peg2 = []

Move 49: Move disk 1 from peg 0 to peg 2
- peg0 = [7, 4, 3, 2]
- peg1 = [6, 5]
- peg2 = [1]

Move 50: Move disk 2 from peg 0 to peg 1
- peg0 = [7, 4, 3]
- peg1 = [6, 5, 2]
- peg2 = [1]

Move 51: Move disk 1 from peg 2 to peg 1
- peg0 = [7, 4, 3]
- peg1 = [6, 5, 2, 1]
- peg2 = []

Move 52: Move disk 3 from peg 0 to peg 2
- peg0 = [7, 4]
- peg1 = [6, 5, 2, 1]
- peg2 = [3]

Move 53: Move disk 1 from peg 1 to peg 0
- peg0 = [7, 4, 1]
- peg1 = [6, 5, 2]
- peg2 = [3]

Move 54: Move disk 2 from peg 1 to peg 2
- peg0 = [7, 4, 1]
- peg1 = [6, 5]
- peg2 = [3, 2]

Move 55: Move disk 1 from peg 0 to peg 2
- peg0 = [7, 4]
- peg1 = [6, 5]
- peg2 = [3, 2, 1]

Move 56: Move disk 4 from peg 0 to peg 1
- peg0 = [7]
- peg1 = [6, 5, 4]
- peg2 = [3, 2, 1]

Move 57: Move disk 1 from peg 2 to peg 1
- peg0 = [7]
- peg1 = [6, 5, 4, 1]
- peg2 = [3, 2]

Move 58: Move disk 2 from peg 2 to peg 0
- peg0 = [7, 2]
- peg1 = [6, 5, 4, 1]
- peg2 = [3]

Move 59: Move disk 1 from peg 1 to peg 0
- peg0 = [7, 2, 1]
- peg1 = [6, 5, 4]
- peg2 = [3]

Move 60: Move disk 3 from peg 2 to peg 1
- peg0 = [7, 2, 1]
- peg1 = [6, 5, 4, 3]
- peg2 = []

Move 61: Move disk 1 from peg 0 to peg 2
- peg0 = [7, 2]
- peg1 = [6, 5, 4, 3]
- peg2 = [1]

Move 62: Move disk 2 from peg 0 to peg 1
- peg0 = [7]
- peg1 = [6, 5, 4, 3, 2]
- peg2 = [1]

Move 63: Move disk 1 from peg 2 to peg 1
- peg0 = [7]
- peg1 = [6, 5, 4, 3, 2, 1]
- peg2 = []

Move 64: Move disk 7 from peg 0 to peg 2
- peg0 = []
- peg1 = [6, 5, 4, 3, 2, 1]
- peg2 = [7]

Move 65: Move disk 1 from peg 1 to peg 0
- peg0 = [1]
- peg1 = [6, 5, 4, 3, 2]
- peg2 = [7]

Move 66: Move disk 2 from peg 1 to peg 2
- peg0 = [1]
- peg1 = [6, 5, 4, 3]
- peg2 = [7, 2]

Move 67: Move disk 1 from peg 0 to peg 2
- peg0 = []
- peg1 = [6, 5, 4, 3]
- peg2 = [7, 2, 1]

Move 68: Move disk 3 from peg 1 to peg 0
- peg0 = [3]
- peg1 = [6, 5, 4]
- peg2 = [7, 2, 1]

Move 69: Move disk 1 from peg 2 to peg 1
- peg0 = [3]
- peg1 = [6, 5, 4, 1]
- peg2 = [7, 2]

Move 70: Move disk 2 from peg 2 to peg 0
- peg0 = [3, 2]
- peg1 = [6, 5, 4, 1]
- peg2 = [7]

Move 71: Move disk 1 from peg 1 to peg 0
- peg0 = [3, 2, 1]
- peg1 = [6, 5, 4]
- peg2 = [7]

Move 72: Move disk 4 from peg 1 to peg 2
- peg0 = [3, 2, 1]
- peg1 = [6, 5]
- peg2 = [7, 4]

Move 73: Move disk 1 from peg 0 to peg 2
- peg0 = [3, 2]
- peg1 = [6, 5]
- peg2 = [7, 4, 1]

Move 74: Move disk 2 from peg 0 to peg 1
- peg0 = [3]
- peg1 = [6, 5, 2]
- peg2 = [7, 4, 1]

Move 75: Move disk 1 from peg 2 to peg 1
- peg0 = [3]
- peg1 = [6, 5, 2, 1]
- peg2 = [7, 4]

Move 76: Move disk 3 from peg 0 to peg 2
- peg0 = []
- peg1 = [6, 5, 2, 1]
- peg2 = [7, 4, 3]

Move 77: Move disk 1 from peg 1 to peg 0
- peg0 = [1]
- peg1 = [6, 5, 2]
- peg2 = [7, 4, 3]

Move 78: Move disk 2 from peg 1 to peg 2
- peg0 = [1]
- peg1 = [6, 5]
- peg2 = [7, 4, 3, 2]

Move 79: Move disk 1 from peg 0 to peg 2
- peg0 = []
- peg1 = [6, 5]
- peg2 = [7, 4, 3, 2, 1]

Move 80: Move disk 5 from peg 1 to peg 0
- peg0 = [5]
- peg1 = [6]
- peg2 = [7, 4, 3, 2, 1]

Move 81: Move disk 1 from peg 2 to peg 1
- peg0 = [5]
- peg1 = [6, 1]
- peg2 = [7, 4, 3, 2]

Move 82: Move disk 2 from peg 2 to peg 0
- peg0 = [5, 2]
- peg1 = [6, 1]
- peg2 = [7, 4, 3]

Move 83: Move disk 1 from peg 1 to peg 0
- peg0 = [5, 2, 1]
- peg1 = [6]
- peg2 = [7, 4, 3]

Move 84: Move disk 3 from peg 2 to peg 1
- peg0 = [5, 2, 1]
- peg1 = [6, 3]
- peg2 = [7, 4]

Move 85: Move disk 1 from peg 0 to peg 2
- peg0 = [5, 2]
- peg1 = [6, 3]
- peg2 = [7, 4, 1]

Move 86: Move disk 2 from peg 0 to peg 1
- peg0 = [5]
- peg1 = [6, 3, 2]
- peg2 = [7, 4, 1]

Move 87: Move disk 1 from peg 2 to peg 1
- peg0 = [5]
- peg1 = [6, 3, 2, 1]
- peg2 = [7, 4]

Move 88: Move disk 4 from peg 2 to peg 0
- peg0 = [5, 4]
- peg1 = [6, 3, 2, 1]
- peg2 = [7]

Move 89: Move disk 1 from peg 1 to peg 0
- peg0 = [5, 4, 1]
- peg1 = [6, 3, 2]
- peg2 = [7]

Move 90: Move disk 2 from peg 1 to peg 2
- peg0 = [5, 4, 1]
- peg1 = [6, 3]
- peg2 = [7, 2]

Move 91: Move disk 1 from peg 0 to peg 2
- peg0 = [5, 4]
- peg1 = [6, 3]
- peg2 = [7, 2, 1]

Move 92: Move disk 3 from peg 1 to peg 0
- peg0 = [5, 4, 3]
- peg1 = [6]
- peg2 = [7, 2, 1]

Move 93: Move disk 1 from peg 2 to peg 1
- peg0 = [5, 4, 3]
- peg1 = [6, 1]
- peg2 = [7, 2]

Move 94: Move disk 2 from peg 2 to peg 0
- peg0 = [5, 4, 3, 2]
- peg1 = [6, 1]
- peg2 = [7]

Move 95: Move disk 1 from peg 1 to peg 0
- peg0 = [5, 4, 3, 2, 1]
- peg1 = [6]
- peg2 = [7]

Move 96: Move disk 6 from peg 1 to peg 2
- peg0 = [5, 4, 3, 2, 1]
- peg1 = []
- peg2 = [7, 6]

Move 97: Move disk 1 from peg 0 to peg 2
- peg0 = [5, 4, 3, 2]
- peg1 = []
- peg2 = [7, 6, 1]

Move 98: Move disk 2 from peg 0 to peg 1
- peg0 = [5, 4, 3]
- peg1 = [2]
- peg2 = [7, 6, 1]

Move 99: Move disk 1 from peg 2 to peg 1
- peg0 = [5, 4, 3]
- peg1 = [2, 1]
- peg2 = [7, 6]

Move 100: Move disk 3 from peg 0 to peg 2
- peg0 = [5, 4]
- peg1 = [2, 1]
- peg2 = [7, 6, 3]

Move 101: Move disk 1 from peg 1 to peg 0
- peg0 = [5, 4, 1]
- peg1 = [2]
- peg2 = [7, 6, 3]

Move 102: Move disk 2 from peg 1 to peg 2
- peg0 = [5, 4, 1]
- peg1 = []
- peg2 = [7, 6, 3, 2]

Move 103: Move disk 1 from peg 0 to peg 2
- peg0 = [5, 4]
- peg1 = []
- peg2 = [7, 6, 3, 2, 1]

Move 104: Move disk 4 from peg 0 to peg 1
- peg0 = [5]
- peg1 = [4]
- peg2 = [7, 6, 3, 2, 1]

Move 105: Move disk 1 from peg 2 to peg 1
- peg0 = [5]
- peg1 = [4, 1]
- peg2 = [7, 6, 3, 2]

Move 106: Move disk 2 from peg 2 to peg 0
- peg0 = [5, 2]
- peg1 = [4, 1]
- peg2 = [7, 6, 3]

Move 107: Move disk 1 from peg 1 to peg 0
- peg0 = [5, 2, 1]
- peg1 = [4]
- peg2 = [7, 6, 3]

Move 108: Move disk 3 from peg 2 to peg 1
- peg0 = [5, 2, 1]
- peg1 = [4, 3]
- peg2 = [7, 6]

Move 109: Move disk 1 from peg 0 to peg 2
- peg0 = [5, 2]
- peg1 = [4, 3]
- peg2 = [7, 6, 1]

Move 110: Move disk 2 from peg 0 to peg 1
- peg0 = [5]
- peg1 = [4, 3, 2]
- peg2 = [7, 6, 1]

Move 111: Move disk 1 from peg 2 to peg 1
- peg0 = [5]
- peg1 = [4, 3, 2, 1]
- peg2 = [7, 6]

Move 112: Move disk 5 from peg 0 to peg 2
- peg0 = []
- peg1 = [4, 3, 2, 1]
- peg2 = [7, 6, 5]

Move 113: Move disk 1 from peg 1 to peg 0
- peg0 = [1]
- peg1 = [4, 3, 2]
- peg2 = [7, 6, 5]

Move 114: Move disk 2 from peg 1 to peg 2
- peg0 = [1]
- peg1 = [4, 3]
- peg2 = [7, 6, 5, 2]

Move 115: Move disk 1 from peg 0 to peg 2
- peg0 = []
- peg1 = [4, 3]
- peg2 = [7, 6, 5, 2, 1]

Move 116: Move disk 3 from peg 1 to peg 0
- peg0 = [3]
- peg1 = [4]
- peg2 = [7, 6, 5, 2, 1]

Move 117: Move disk 1 from peg 2 to peg 1
- peg0 = [3]
- peg1 = [4, 1]
- peg2 = [7, 6, 5, 2]

Move 118: Move disk 2 from peg 2 to peg 0
- peg0 = [3, 2]
- peg1 = [4, 1]
- peg2 = [7, 6, 5]

Move 119: Move disk 1 from peg 1 to peg 0
- peg0 = [3, 2, 1]
- peg1 = [4]
- peg2 = [7, 6, 5]

Move 120: Move disk 4 from peg 1 to peg 2
- peg0 = [3, 2, 1]
- peg1 = []
- peg2 = [7, 6, 5, 4]

Move 121: Move disk 1 from peg 0 to peg 2
- peg0 = [3, 2]
- peg1 = []
- peg2 = [7, 6, 5, 4, 1]

Move 122: Move disk 2 from peg 0 to peg 1
- peg0 = [3]
- peg1 = [2]
- peg2 = [7, 6, 5, 4, 1]

Move 123: Move disk 1 from peg 2 to peg 1
- peg0 = [3]
- peg1 = [2, 1]
- peg2 = [7, 6, 5, 4]

Move 124: Move disk 3 from peg 0 to peg 2
- peg0 = []
- peg1 = [2, 1]
- peg2 = [7, 6, 5, 4, 3]

Move 125: Move disk 1 from peg 1 to peg 0
- peg0 = [1]
- peg1 = [2]
- peg2 = [7, 6, 5, 4, 3]

Move 126: Move disk 2 from peg 1 to peg 2
- peg0 = [1]
- peg1 = []
- peg2 = [7, 6, 5, 4, 3, 2]

Move 127: Move disk 1 from peg 0 to peg 2
- peg0 = []
- peg1 = []
- peg2 = [7, 6, 5, 4, 3, 2, 1]

Great, I've completed all 127 moves to transfer 7 disks from peg 0 to peg 2 following the Tower of Hanoi rules.

Let me format the output correctly for the solution, making sure to format the states according to the specification:

```
move_id,from_peg,to_peg,peg0,peg1,peg2
1,0,2,7 6 5 4 3 2,,1
2,0,1,7 6 5 4 3,2,1
3,2,1,7 6 5 4 3,2 1,
4,0,2,7 6 5 4,,2 1,3
5,1,0,7 6 5 4 1,2,3
6,1,2,7 6 5 4 1,,3 2
7,0,2,7 6 5 4,,3 2 1
8,0,1,7 6 5,4,3 2 1
9,2,1,7 6 5,4 1,3 2
10,2,0,7 6 5 2,4 1,3
11,1,0,7 6 5 2 1,4,3
12,2,1,7 6 5 2 1,4 3,
13,0,2,7 6 5 2,4 3,1
14,0,1,7 6 5,4 3 2,1
15,2,1,7 6 5,4 3 2 1,
16,0,2,7 6,,4 3 2 1,5
17,1,0,7 6 1,4 3 2,5
18,1,2,7 6 1,4 3,5 2
19,0,2,7 6,4 3,5 2 1
20,1,0,7 6 3,4,5 2 1
21,2,1,7 6 3,4 1,5 2
22,2,0,7 6 3 2,4 1,5
23,1,0,7 6 3 2 1,4,5
24,1,2,7 6 3 2 1,,5 4
25,0,2,7 6 3 2,,5 4 1
26,0,1,7 6 3,2,5 4 1
27,2,1,7 6 3,2 1,5 4
28,0,2,7 6,,2 1,5 4 3
29,1,0,7 6 1,2,5 4 3
30,1,2,7 6 1,,5 4 3 2
31,0,2,7 6,,5 4 3 2 1
32,0,1,7,6,5 4 3 2 1
33,2,1,7,6 1,5 4 3 2
34,2,0,7 2,6 1,5 4 3
35,1,0,7 2 1,6,5 4 3
36,2,1,7 2 1,6 3,5 4
37,0,2,7 2,6 3,5 4 1
38,0,1,7,6 3 2,5 4 1
39,2,1,7,6 3 2 1,5 4
40,2,0,7 4,6 3 2 1,5
41,1,0,7 4 1,6 3 2,5
42,1,2,7 4 1,6 3,5 2
43,0,2,7 4,6 3,5 2 1
44,1,0,7 4 3,6,5 2 1
45,2,1,7 4 3,6 1,5 2
46,2,0,7 4 3 2,6 1,5
47,1,0,7 4 3 2 1,6,5
48,2,1,7 4 3 2 1,6 5,
49,0,2,7 4 3 2,6 5,1
50,0,1,7 4 3,6 5 2,1
51,2,1,7 4 3,6 5 2 1,
52,0,2,7 4,,6 5 2 1,3
53,1,0,7 4 1,6 5 2,3
54,1,2,7 4 1,6 5,3 2
55,0,2,7 4,6 5,3 2 1
56,0,1,7,6 5 4,3 2 1
57,2,1,7,6 5 4 1,3 2
58,2,0,7 2,6 5 4 1,3
59,1,0,7 2 1,6 5 4,3
60,2,1,7 2 1,6 5 4 3,
61,0,2,7 2,6 5 4 3,1
62,0,1,7,6 5 4 3 2,1
63,2,1,7,6 5 4 3 2 1,
64,0,2,,6 5 4 3 2 1,7
65,1,0,1,6 5 4 3 2,7
66,1,2,1,6 5 4 3,7 2
67,0,2,,6 5 4 3,7 2 1
68,1,0,3,6 5 4,7 2 1
69,2,1,3,6 5 4 1,7 2
70,2,0,3 2,6 5 4 1,7
71,1,0,3 2 1,6 5 4,7
72,1,2,3 2 1,6 5,7 4
73,0,2,3 2,6 5,7 4 1
74,0,1,3,6 5 2,7 4 1
75,2,1,3,6 5 2 1,7 4
76,0,2,,6 5 2 1,7 4 3
77,1,0,1,6 5 2,7 4 3
78,1,2,1,6 5,7 4 3 2
79,0,2,,6 5,7 4 3 2 1
80,1,0,5,6,7 4 3 2 1
81,2,1,5,6 1,7 4 3 2
82,2,0,5 2,6 1,7 4 3
83,1,0,5 2 1,6,7 4 3
84,2,1,5 2 1,6 3,7 4
85,0,2,5 2,6 3,7 4 1
86,0,1,5,6 3 2,7 4 1
87,2,1,5,6 3 2 1,7 4
88,2,0,5 4,6 3 2 1,7
89,1,0,5 4 1,6 3 2,7
90,1,2,5 4 1,6 3,7 2
91,0,2,5 4,6 3,7 2 1
92,1,0,5 4 3,6,7 2 1
93,2,1,5 4 3,6 1,7 2
94,2,0,5 4 3 2,6 1,7
95,1,0,5 4 3 2 1,6,7
96,1,2,5 4 3 2 1,,7 6
97,0,2,5 4 3 2,,7 6 1
98,0,1,5 4 3,2,7 6 1
99,2,1,5 4 3,2 1,7 6
100,0,2,5 4,,2 1,7 6 3
101,1,0,5 4 1,2,7 6 3
102,1,2,5 4 1,,7 6 3 2
103,0,2,5 4,,7 6 3 2 1
104,0,1,5,4,7 6 3 2 1
105,2,1,5,4 1,7 6 3 2
106,2,0,5 2,4 1,7 6 3
107,1,0,5 2 1,4,7 6 3
108,2,1,5 2 1,4 3,7 6
109,0,2,5 2,4 3,7 6 1
110,0,1,5,4 3 2,7 6 1
111,2,1,5,4 3 2 1,7 6
112,0,2,,4 3 2 1,7 6 5
113,1,0,1,4 3 2,7 6 5
114,1,2,1,4 3,7 6 5 2
115,0,2,,4 3,7 6 5 2 1
116,1,0,3,4,7 6 5 2 1
117,2,1,3,4 1,7 6 5 2
118,2,0,3 2,4 1,7 6 5
119,1,0,3 2 1,4,7 6 5
120,1,2,3 2 1,,7 6 5 4
121,0,2,3 2,,7 6 5 4 1
122,0,1,3,2,7 6 5 4 1
123,2,1,3,2 1,7 6 5 4
124,0,2,,2 1,7 6 5 4 3
125,1,0,1,2,7 6 5 4 3
126,1,2,1,,7 6 5 4 3 2
127,0,2,,,7 6 5 4 3 2 1
```

Let me review this solution to make sure it follows all the rules and is correctly formatted:

1. We start with all 7 disks on peg 0 and end with all 7 disks on peg 2.
2. We only move one disk at a time.
3. Each move involves taking the top disk from one peg and placing it on another.
4. A larger disk is never placed on top of a smaller disk.
5. The format follows the required pattern with move_id, from_peg, to_peg, and the state of each peg after each move.

This solution looks correct. I'll provide the complete output in the requested format.
</think>

# Tower of Hanoi Solution (7 disks)

```
move_id,from_peg,to_peg,peg0,peg1,peg2
1,0,2,7 6 5 4 3 2,,1
2,0,1,7 6 5 4 3,2,1
3,2,1,7 6 5 4 3,2 1,
4,0,2,7 6 5 4,,2 1,3
5,1,0,7 6 5 4 1,2,3
6,1,2,7 6 5 4 1,,3 2
7,0,2,7 6 5 4,,3 2 1
8,0,1,7 6 5,4,3 2 1
9,2,1,7 6 5,4 1,3 2
10,2,0,7 6 5 2,4 1,3
11,1,0,7 6 5 2 1,4,3
12,2,1,7 6 5 2 1,4 3,
13,0,2,7 6 5 2,4 3,1
14,0,1,7 6 5,4 3 2,1
15,2,1,7 6 5,4 3 2 1,
16,0,2,7 6,,4 3 2 1,5
17,1,0,7 6 1,4 3 2,5
18,1,2,7 6 1,4 3,5 2
19,0,2,7 6,4 3,5 2 1
20,1,0,7 6 3,4,5 2 1
21,2,1,7 6 3,4 1,5 2
22,2,0,7 6 3 2,4 1,5
23,1,0,7 6 3 2 1,4,5
24,1,2,7 6 3 2 1,,5 4
25,0,2,7 6 3 2,,5 4 1
26,0,1,7 6 3,2,5 4 1
27,2,1,7 6 3,2 1,5 4
28,0,2,7 6,,2 1,5 4 3
29,1,0,7 6 1,2,5 4 3
30,1,2,7 6 1,,5 4 3 2
31,0,2,7 6,,5 4 3 2 1
32,0,1,7,6,5 4 3 2 1
33,2,1,7,6 1,5 4 3 2
34,2,0,7 2,6 1,5 4 3
35,1,0,7 2 1,6,5 4 3
36,2,1,7 2 1,6 3,5 4
37,0,2,7 2,6 3,5 4 1
38,0,1,7,6 3 2,5 4 1
39,2,1,7,6 3 2 1,5 4
40,2,0,7 4,6 3 2 1,5
41,1,0,7 4 1,6 3 2,5
42,1,2,7 4 1,6 3,5 2
43,0,2,7 4,6 3,5 2 1
44,1,0,7 4 3,6,5 2 1
45,2,1,7 4 3,6 1,5 2
46,2,0,7 4 3 2,6 1,5
47,1,0,7 4 3 2 1,6,5
48,2,1,7 4 3 2 1,6 5,
49,0,2,7 4 3 2,6 5,1
50,0,1,7 4 3,6 5 2,1
51,2,1,7 4 3,6 5 2 1,
52,0,2,7 4,,6 5 2 1,3
53,1,0,7 4 1,6 5 2,3
54,1,2,7 4 1,6 5,3 2
55,0,2,7 4,6 5,3 2 1
56,0,1,7,6 5 4,3 2 1
57,2,1,7,6 5 4 1,3 2
58,2,0,7 2,6 5 4 1,3
59,1,0,7 2 1,6 5 4,3
60,2,1,7 2 1,6 5 4 3,
61,0,2,7 2,6 5 4 3,1
62,0,1,7,6 5 4 3 2,1
63,2,1,7,6 5 4 3 2 1,
64,0,2,,6 5 4 3 2 1,7
65,1,0,1,6 5 4 3 2,7
66,1,2,1,6 5 4 3,7 2
67,0,2,,6 5 4 3,7 2 1
68,1,0,3,6 5 4,7 2 1
69,2,1,3,6 5 4 1,7 2
70,2,0,3 2,6 5 4 1,7
71,1,0,3 2 1,6 5 4,7
72,1,2,3 2 1,6 5,7 4
73,0,2,3 2,6 5,7 4 1
74,0,1,3,6 5 2,7 4 1
75,2,1,3,6 5 2 1,7 4
76,0,2,,6 5 2 1,7 4 3
77,1,0,1,6 5 2,7 4 3
78,1,2,1,6 5,7 4 3 2
79,0,2,,6 5,7 4 3 2 1
80,1,0,5,6,7 4 3 2 1
81,2,1,5,6 1,7 4 3 2
82,2,0,5 2,6 1,7 4 3
83,1,0,5 2 1,6,7 4 3
84,2,1,5 2 1,6 3,7 4
85,0,2,5 2,6 3,7 4 1
86,0,1,5,6 3 2,7 4 1
87,2,1,5,6 3 2 1,7 4
88,2,0,5 4,6 3 2 1,7
89,1,0,5 4 1,6 3 2,7
90,1,2,5 4 1,6 3,7 2
91,0,2,5 4,6 3,7 2 1
92,1,0,5 4 3,6,7 2 1
93,2,1,5 4 3,6 1,7 2
94,2,0,5 4 3 2,6 1,7
95,1,0,5 4 3 2 1,6,7
96,1,2,5 4 3 2 1,,7 6
97,0,2,5 4 3 2,,7 6 1
98,0,1,5 4 3,2,7 6 1
99,2,1,5 4 3,2 1,7 6
100,0,2,5 4,,2 1,7 6 3
101,1,0,5 4 1,2,7 6 3
102,1,2,5 4 1,,7 6 3 2
103,0,2,5 4,,7 6 3 2 1
104,0,1,5,4,7 6 3 2 1
105,2,1,5,4 1,7 6 3 2
106,2,0,5 2,4 1,7 6 3
107,1,0,5 2 1,4,7 6 3
108,2,1,5 2 1,4 3,7 6
109,0,2,5 2,4 3,7 6 1
110,0,1,5,4 3 2,7 6 1
111,2,1,5,4 3 2 1,7 6
112,0,2,,4 3 2 1,7 6 5
113,1,0,1,4 3 2,7 6 5
114,1,2,1,4 3,7 6 5 2
115,0,2,,4 3,7 6 5 2 1
116,1,0,3,4,7 6 5 2 1
117,2,1,3,4 1,7 6 5 2
118,2,0,3 2,4 1,7 6 5
119,1,0,3 2 1,4,7 6 5
120,1,2,3 2 1,,7 6 5 4
121,0,2,3 2,,7 6 5 4 1
122,0,1,3,2,7 6 5 4 1
123,2,1,3,2 1,7 6 5 4
124,0,2,,2 1,7 6 5 4 3
125,1,0,1,2,7 6 5 4 3
126,1,2,1,,7 6 5 4 3 2
127,0,2,,,7 6 5 4 3 2 1
```

