# model_name='claude-3-7-sonnet-20250219', reasoning_budget=32000, tries=0, n=11, i=5
# valid_prefix_length=15, is_valid_solution=0, first_correction=-1

<think>
Alright, so I'm solving the Tower of Hanoi problem with 11 disks. The initial configuration has all disks on peg 0, and the goal is to move all disks to peg 2.

The Tower of Hanoi has a well-known recursive solution. For n disks, the minimum number of moves required is 2^n - 1. With 11 disks, that's 2^11 - 1 = 2048 - 1 = 2047 moves.

Let me develop a systematic solution. The classic recursive algorithm for the Tower of Hanoi is:

1. Move n-1 disks from the source peg to the auxiliary peg.
2. Move the largest disk from the source peg to the destination peg.
3. Move n-1 disks from the auxiliary peg to the destination peg.

Let me implement this algorithm to generate the complete list of moves:

```python
def hanoi(n, source, auxiliary, destination, moves):
    if n > 0:
        # Move n-1 disks from source to auxiliary
        hanoi(n-1, source, destination, auxiliary, moves)
        # Move the nth disk from source to destination
        moves.append([n, source, destination])
        # Move n-1 disks from auxiliary to destination
        hanoi(n-1, auxiliary, source, destination, moves)

moves = []
hanoi(11, 0, 1, 2, moves)
```

Let me trace through this for a small example, like n = 3, to ensure I'm implementing it correctly:

Initial configuration: Peg 0 has disks [3, 2, 1] (bottom to top), Peg 1 and Peg 2 are empty.

1. Call hanoi(3, 0, 1, 2, moves)
   a. Call hanoi(2, 0, 2, 1, moves)
      i. Call hanoi(1, 0, 1, 2, moves)
         - Call hanoi(0, 0, 2, 1, moves) - does nothing
         - Move disk 1 from peg 0 to peg 2: moves = [[1, 0, 2]]
         - Call hanoi(0, 1, 0, 2, moves) - does nothing
      ii. Move disk 2 from peg 0 to peg 1: moves = [[1, 0, 2], [2, 0, 1]]
      iii. Call hanoi(1, 2, 0, 1, moves)
         - Call hanoi(0, 2, 1, 0, moves) - does nothing
         - Move disk 1 from peg 2 to peg 1: moves = [[1, 0, 2], [2, 0, 1], [1, 2, 1]]
         - Call hanoi(0, 0, 2, 1, moves) - does nothing
   b. Move disk 3 from peg 0 to peg 2: moves = [[1, 0, 2], [2, 0, 1], [1, 2, 1], [3, 0, 2]]
   c. Call hanoi(2, 1, 0, 2, moves)
      i. Call hanoi(1, 1, 2, 0, moves)
         - Call hanoi(0, 1, 0, 2, moves) - does nothing
         - Move disk 1 from peg 1 to peg 0: moves = [[1, 0, 2], [2, 0, 1], [1, 2, 1], [3, 0, 2], [1, 1, 0]]
         - Call hanoi(0, 2, 1, 0, moves) - does nothing
      ii. Move disk 2 from peg 1 to peg 2: moves = [[1, 0, 2], [2, 0, 1], [1, 2, 1], [3, 0, 2], [1, 1, 0], [2, 1, 2]]
      iii. Call hanoi(1, 0, 1, 2, moves)
         - Call hanoi(0, 0, 2, 1, moves) - does nothing
         - Move disk 1 from peg 0 to peg 2: moves = [[1, 0, 2], [2, 0, 1], [1, 2, 1], [3, 0, 2], [1, 1, 0], [2, 1, 2], [1, 0, 2]]
         - Call hanoi(0, 1, 0, 2, moves) - does nothing

So the final list of moves for n = 3 is:
[[1, 0, 2], [2, 0, 1], [1, 2, 1], [3, 0, 2], [1, 1, 0], [2, 1, 2], [1, 0, 2]]

This looks correct for the Tower of Hanoi with 3 disks. Now, let's generate the moves for n = 11. But first, let me double-check that I'm interpreting the problem statement correctly.

The problem states that the disks are numbered from 1 (smallest) to n (largest). In my implementation, I'm using disk numbers the same way, so disk 1 is the smallest, and disk 11 is the largest. This seems consistent with the problem statement.

One clarification: in the format of the moves, it says [disk_id, from_peg, to_peg]. I'm assuming disk_id refers to the number of the disk (1 for the smallest, 11 for the largest). Let me double-check with the example provided.

For n = 3, the example solution is:
[[1, 0, 2], [2, 0, 1], [1, 2, 1], [3, 0, 2], [1, 1, 0], [2, 1, 2], [1, 0, 2]]

This matches the solution I traced through, so I'm confident that I'm interpreting the problem statement correctly.

Now, let's generate the full list of moves for n = 11. I'll implement the recursive algorithm in pseudocode and then list out all the moves.

```
function hanoi(n, source, auxiliary, destination, moves):
    if n > 0:
        hanoi(n-1, source, destination, auxiliary, moves)
        moves.append([n, source, destination])
        hanoi(n-1, auxiliary, source, destination, moves)

moves = []
hanoi(11, 0, 1, 2, moves)
```

Now, let's generate the list of moves for n = 11. Given that there will be 2047 moves, I'll start listing them:

1. Call hanoi(11, 0, 1, 2, moves)
   a. Call hanoi(10, 0, 2, 1, moves)
      i. Call hanoi(9, 0, 1, 2, moves)
         ...

Actually, let me just implement this recursively and generate the full list of moves:

```python
def hanoi(n, source, auxiliary, destination, moves):
    if n > 0:
        # Move n-1 disks from source to auxiliary
        hanoi(n-1, source, destination, auxiliary, moves)
        # Move the nth disk from source to destination
        moves.append([n, source, destination])
        # Move n-1 disks from auxiliary to destination
        hanoi(n-1, auxiliary, source, destination, moves)

moves = []
hanoi(11, 0, 1, 2, moves)
```

With this algorithm, for n = 11, the resulting moves list will have 2^11 - 1 = 2047 moves.

Let me trace through the first few and last few steps to ensure I'm generating the correct sequence:

First few moves:
1. Call hanoi(11, 0, 1, 2, moves)
   a. Call hanoi(10, 0, 2, 1, moves)
      i. Call hanoi(9, 0, 1, 2, moves)
         a. Call hanoi(8, 0, 2, 1, moves)
            i. ... (recursive calls continue)
            ii. Eventually, call hanoi(1, 0, 1, 2, moves)
               - Move disk 1 from peg 0 to peg 2: moves = [[1, 0, 2]]
               - ... (more recursive calls)
         b. Move disk 9 from peg 0 to peg 2: (added to moves)
         c. ... (more recursive calls)
      ii. Move disk 10 from peg 0 to peg 1: (added to moves)
      iii. ... (more recursive calls)
   b. Move disk 11 from peg 0 to peg 2: (added to moves)
   c. ... (more recursive calls)

Let me think about the structure of the Tower of Hanoi solution. For n disks, the pattern of moves is:
1. Move n-1 disks from the source to the auxiliary peg (using the destination peg as an auxiliary).
2. Move the largest disk from the source to the destination peg.
3. Move n-1 disks from the auxiliary peg to the destination peg (using the source peg as an auxiliary).

For n = 11, this means:
1. Move 10 disks from peg 0 to peg 1 (using peg 2 as an auxiliary).
2. Move disk 11 from peg 0 to peg 2.
3. Move 10 disks from peg 1 to peg 2 (using peg 0 as an auxiliary).

Let's adopt a systematic approach to enumerate all moves. I'll use the recursive algorithm and list out all the moves.

For the Tower of Hanoi with 11 disks, there will be 2^11 - 1 = 2047 moves. I'll start by listing the moves for disk 1 (the smallest disk) and gradually build up to disk 11 (the largest disk).

Actually, let me directly compute the full list of moves using the recursive algorithm:

```python
def hanoi(n, source, auxiliary, destination, moves):
    if n > 0:
        hanoi(n-1, source, destination, auxiliary, moves)
        moves.append([n, source, destination])
        hanoi(n-1, auxiliary, source, destination, moves)

moves = []
hanoi(11, 0, 1, 2, moves)
```

With this algorithm, the full list of moves for n = 11 will be:

Let me generate the full list using the recursive algorithm:

1. Recursively solve for n=10, moving disks 1-10 from peg 0 to peg 1 using peg 2 as auxiliary.
2. Move disk 11 from peg 0 to peg 2.
3. Recursively solve for n=10, moving disks 1-10 from peg 1 to peg 2 using peg 0 as auxiliary.

Within each recursive call, we break it down further. For n=10:
1. Recursively solve for n=9, moving disks 1-9 from peg 0 to peg 2 using peg 1 as auxiliary.
2. Move disk 10 from peg 0 to peg 1.
3. Recursively solve for n=9, moving disks 1-9 from peg 2 to peg 1 using peg 0 as auxiliary.

And so on.

Actually, let me just go ahead and simulate the algorithm to generate the full list of moves:

I'll use a simpler recursive approach to generate the list:

```python
def hanoi(n, source, auxiliary, destination):
    moves = []
    
    def _hanoi(n, source, auxiliary, destination):
        if n > 0:
            _hanoi(n-1, source, destination, auxiliary)
            moves.append([n, source, destination])
            _hanoi(n-1, auxiliary, source, destination)
    
    _hanoi(n, source, auxiliary, destination)
    return moves

moves = hanoi(11, 0, 1, 2)
```

This recursive approach will generate the full list of moves for n=11. Let me do this computation:

Actually, I'm already confident in the recursive approach I've outlined. Let me write out the moves directly based on the recursive algorithm.

For n=1:
1. Move disk 1 from peg 0 to peg 2: [[1, 0, 2]]

For n=2:
1. Move disk 1 from peg 0 to peg 1: [[1, 0, 1]]
2. Move disk 2 from peg 0 to peg 2: [[2, 0, 2]]
3. Move disk 1 from peg 1 to peg 2: [[1, 1, 2]]

For n=3:
1. Move disk 1 from peg 0 to peg 2: [[1, 0, 2]]
2. Move disk 2 from peg 0 to peg 1: [[2, 0, 1]]
3. Move disk 1 from peg 2 to peg 1: [[1, 2, 1]]
4. Move disk 3 from peg 0 to peg 2: [[3, 0, 2]]
5. Move disk 1 from peg 1 to peg 0: [[1, 1, 0]]
6. Move disk 2 from peg 1 to peg 2: [[2, 1, 2]]
7. Move disk 1 from peg 0 to peg 2: [[1, 0, 2]]

I notice a pattern here. For n=1, the moves are just [[1, 0, 2]]. For n=2, we move the n-1 disks to the auxiliary peg (peg 1), then move the largest disk to the destination peg, and then move the n-1 disks from the auxiliary peg to the destination peg.

But I notice that my n=3 example doesn't match the given example:

My solution: [[1, 0, 2], [2, 0, 1], [1, 2, 1], [3, 0, 2], [1, 1, 0], [2, 1, 2], [1, 0, 2]]
Example solution: [[1, 0, 2], [2, 0, 1], [1, 2, 1], [3, 0, 2], [1, 1, 0], [2, 1, 2], [1, 0, 2]]

Wait, they do match! I must have made a mistake somewhere in my comparison. Let me check again.

My solution: [[1, 0, 2], [2, 0, 1], [1, 2, 1], [3, 0, 2], [1, 1, 0], [2, 1, 2], [1, 0, 2]]
Example solution: [[1, 0, 2], [2, 0, 1], [1, 2, 1], [3, 0, 2], [1, 1, 0], [2, 1, 2], [1, 0, 2]]

Yes, they are identical. This confirms that I'm using the correct approach.

Now, for n=11, I need to generate 2047 moves. I'll use the recursive algorithm to generate the moves.

Let's trace through the algorithm for n=11:

```
def hanoi(n, source, auxiliary, destination, moves):
    if n > 0:
        hanoi(n-1, source, destination, auxiliary, moves)
        moves.append([n, source, destination])
        hanoi(n-1, auxiliary, source, destination, moves)
```

For n=11, source=0, auxiliary=1, destination=2:

1. Call hanoi(10, 0, 2, 1, moves)
   a. Call hanoi(9, 0, 1, 2, moves)
      i. Call hanoi(8, 0, 2, 1, moves)
         ...
      ii. After recursive calls, add [9, 0, 2] to moves
      iii. Call hanoi(8, 1, 0, 2, moves)
         ...
   b. After recursive calls, add [10, 0, 1] to moves
   c. Call hanoi(9, 2, 0, 1, moves)
      ...
2. After recursive calls, add [11, 0, 2] to moves
3. Call hanoi(10, 1, 0, 2, moves)
   ...

The pattern continues, with recursive calls getting deeper and deeper. For n=11, there will be 2047 moves in total.

I'll now start listing the moves:

1. For disk 1, the pattern is to alternate between pegs 0, 1, and 2, moving every 1 step.
2. For disk 2, the pattern is to move every 2 steps, following a specific sequence.
3. For disk 3, the pattern is to move every 4 steps, and so on.

Actually, let me just directly use the recursive algorithm to generate the complete list of moves for n=11:

Let's use the following approach to generate the full list of moves:

1. Define the `hanoi` function as before.
2. Call it for n=11 and collect all the moves.
3. List all 2047 moves.

Let me do this computation:

```python
def hanoi(n, source, auxiliary, destination):
    if n == 1:
        return [[1, source, destination]]
    else:
        moves = hanoi(n-1, source, destination, auxiliary)
        moves.append([n, source, destination])
        moves.extend(hanoi(n-1, auxiliary, source, destination))
        return moves

moves = hanoi(11, 0, 1, 2)
```

Let's compute this. For n=1, the moves are simply [[1, source, destination]]. For n=2, we have:

1. hanoi(1, 0, 2, 1) = [[1, 0, 1]]
2. Move disk 2 from peg 0 to peg 2: [[2, 0, 2]]
3. hanoi(1, 1, 0, 2) = [[1, 1, 2]]

So, for n=2, the moves are: [[1, 0, 1], [2, 0, 2], [1, 1, 2]].

For n=3, we have:

1. hanoi(2, 0, 2, 1) = [[1, 0, 1], [2, 0, 2], [1, 1, 2]]
   But we need to adjust the destination and auxiliary for hanoi(2, 0, 2, 1):
   hanoi(2, 0, 2, 1) = [[1, 0, 1], [2, 0, 1], [1, 2, 1]]
2. Move disk 3 from peg 0 to peg 2: [[3, 0, 2]]
3. hanoi(2, 1, 0, 2) = [[1, 1, 2], [2, 1, 2], [1, 0, 2]]

Wait, I made an error in the function definition. Let me correct it:

```python
def hanoi(n, source, auxiliary, destination):
    if n == 1:
        return [[1, source, destination]]
    else:
        moves = hanoi(n-1, source, destination, auxiliary)
        moves.append([n, source, destination])
        moves.extend(hanoi(n-1, auxiliary, source, destination))
        return moves
```

This is still not quite right. Let me think about the recursive structure again.

For n disks, we want to:
1. Move n-1 disks from source to auxiliary (using destination as a temporary peg).
2. Move the nth disk from source to destination.
3. Move n-1 disks from auxiliary to destination (using source as a temporary peg).

Let me redefine the function:

```python
def hanoi(n, source, auxiliary, destination):
    moves = []
    
    def _hanoi(n, source, auxiliary, destination):
        if n == 1:
            moves.append([1, source, destination])
        else:
            _hanoi(n-1, source, destination, auxiliary)
            moves.append([n, source, destination])
            _hanoi(n-1, auxiliary, source, destination)
    
    _hanoi(n, source, auxiliary, destination)
    return moves
```

No, the order of the parameters in the recursive calls is wrong. Let me correct it:

```python
def hanoi(n, source, auxiliary, destination):
    moves = []
    
    def _hanoi(n, source, auxiliary, destination):
        if n == 1:
            moves.append([1, source, destination])
        else:
            _hanoi(n-1, source, destination, auxiliary)
            moves.append([n, source, destination])
            _hanoi(n-1, auxiliary, source, destination)
    
    _hanoi(n, source, auxiliary, destination)
    return moves
```

Wait, even this is not right. Let me think about it again. For n disks:

1. Move n-1 disks from source to auxiliary (using destination as a temporary peg).
2. Move the nth disk from source to destination.
3. Move n-1 disks from auxiliary to destination (using source as a temporary peg).

In the recursive call for step 1, we're moving n-1 disks from source to auxiliary, so the parameters should be (n-1, source, destination, auxiliary).

In the recursive call for step 3, we're moving n-1 disks from auxiliary to destination, so the parameters should be (n-1, auxiliary, source, destination).

Let me correct the function:

```python
def hanoi(n, source, auxiliary, destination):
    moves = []
    
    def _hanoi(n, source, auxiliary, destination):
        if n == 1:
            moves.append([1, source, destination])
        else:
            _hanoi(n-1, source, destination, auxiliary)
            moves.append([n, source, destination])
            _hanoi(n-1, auxiliary, source, destination)
    
    _hanoi(n, source, auxiliary, destination)
    return moves
```

Wait, no, that's not right again. Let me carefully think about the recursive structure.

For n disks, we want to:
1. Move n-1 disks from source to auxiliary (using destination as a temporary peg).
2. Move the nth disk from source to destination.
3. Move n-1 disks from auxiliary to destination (using source as a temporary peg).

In the recursive call for step 1, source is still source, auxiliary becomes destination, and destination becomes auxiliary.

In the recursive call for step 3, source becomes auxiliary, auxiliary becomes source, and destination is still destination.

Let me correct the function:

```python
def hanoi(n, source, auxiliary, destination):
    if n == 0:
        return []
    
    moves = hanoi(n-1, source, destination, auxiliary)
    moves.append([n, source, destination])
    moves.extend(hanoi(n-1, auxiliary, source, destination))
    
    return moves
```

This should be the correct recursive structure. Let's verify it with the example for n=3:

For n=3, source=0, auxiliary=1, destination=2:

1. hanoi(2, 0, 2, 1)
   a. hanoi(1, 0, 1, 2)
      i. (n=0 base case, return [])
      ii. Add [1, 0, 2] to moves: moves = [[1, 0, 2]]
   b. hanoi(1, 2, 0, 1)
      i. (n=0 base case, return [])
      ii. Add [1, 2, 1] to moves: moves = [[1, 0, 2], [1, 2, 1]]
   c. Add [2, 0, 1] to moves: moves = [[1, 0, 2], [2, 0, 1], [1, 2, 1]]
2. Add [3, 0, 2] to moves: moves = [[1, 0, 2], [2, 0, 1], [1, 2, 1], [3, 0, 2]]
3. hanoi(2, 1, 0, 2)
   a. hanoi(1, 1, 2, 0)
      i. (n=0 base case, return [])
      ii. Add [1, 1, 0] to moves: moves = [[1, 0, 2], [2, 0, 1], [1, 2, 1], [3, 0, 2], [1, 1, 0]]
   b. hanoi(1, 0, 1, 2)
      i. (n=0 base case, return [])
      ii. Add [1, 0, 2] to moves: moves = [[1, 0, 2], [2, 0, 1], [1, 2, 1], [3, 0, 2], [1, 1, 0], [1, 0, 2]]
   c. Add [2, 1, 2] to moves: moves = [[1, 0, 2], [2, 0, 1], [1, 2, 1], [3, 0, 2], [1, 1, 0], [2, 1, 2], [1, 0, 2]]

That doesn't match the expected result. Let me trace through the algorithm again and see where I went wrong.

For n=3, source=0, auxiliary=1, destination=2:

1. Call hanoi(2, 0, 2, 1)
   a. Call hanoi(1, 0, 1, 2)
      i. (n=1 base case) Add [1, 0, 2] to moves: moves = [[1, 0, 2]]
   b. Add [2, 0, 1] to moves: moves = [[1, 0, 2], [2, 0, 1]]
   c. Call hanoi(1, 2, 0, 1)
      i. (n=1 base case) Add [1, 2, 1] to moves: moves = [[1, 0, 2], [2, 0, 1], [1, 2, 1]]
2. Add [3, 0, 2] to moves: moves = [[1, 0, 2], [2, 0, 1], [1, 2, 1], [3, 0, 2]]
3. Call hanoi(2, 1, 0, 2)
   a. Call hanoi(1, 1, 2, 0)
      i. (n=1 base case) Add [1, 1, 0] to moves: moves = [[1, 0, 2], [2, 0, 1], [1, 2, 1], [3, 0, 2], [1, 1, 0]]
   b. Add [2, 1, 2] to moves: moves = [[1, 0, 2], [2, 0, 1], [1, 2, 1], [3, 0, 2], [1, 1, 0], [2, 1, 2]]
   c. Call hanoi(1, 0, 1, 2)
      i. (n=1 base case) Add [1, 0, 2] to moves: moves = [[1, 0, 2], [2, 0, 1], [1, 2, 1], [3, 0, 2], [1, 1, 0], [2, 1, 2], [1, 0, 2]]

This matches the expected result. Let me fix the base case in the function:

```python
def hanoi(n, source, auxiliary, destination):
    if n == 1:
        return [[1, source, destination]]
    
    moves = hanoi(n-1, source, destination, auxiliary)
    moves.append([n, source, destination])
    moves.extend(hanoi(n-1, auxiliary, source, destination))
    
    return moves
```

This should be the correct function. Now, let's use it to generate the full list of moves for n=11.

Actually, let's generate the function from scratch and use the code to generate the moves.

```python
def hanoi(n, source, auxiliary, destination, moves=None):
    if moves is None:
        moves = []
    
    if n == 1:
        moves.append([1, source, destination])
    else:
        hanoi(n-1, source, destination, auxiliary, moves)
        moves.append([n, source, destination])
        hanoi(n-1, auxiliary, source, destination, moves)
    
    return moves

moves = hanoi(11, 0, 1, 2)
```

This should generate all 2047 moves for n=11. I'll trace through the first few and last few steps to ensure the correctness.

Ok, actually I'm confident that this is correct. For n=11, there will be 2^11 - 1 = 2047 moves. Let's start enumerating them:

For n=11, source=0, auxiliary=1, destination=2, the moves are:

I'll start by using our recursive algorithm for small n, and then generalize.

For n=1:
[[1, 0, 2]]

For n=2:
[[1, 0, 1], [2, 0, 2], [1, 1, 2]]

For n=3:
[[1, 0, 2], [2, 0, 1], [1, 2, 1], [3, 0, 2], [1, 1, 0], [2, 1, 2], [1, 0, 2]]

For n=4:
1. hanoi(3, 0, 2, 1)
   - [[1, 0, 1], [2, 0, 2], [1, 1, 2], [3, 0, 1], [1, 2, 0], [2, 2, 1], [1, 0, 1]]
2. [4, 0, 2]
3. hanoi(3, 1, 0, 2)
   - [[1, 1, 2], [2, 1, 0], [1, 2, 0], [3, 1, 2], [1, 0, 1], [2, 0, 2], [1, 1, 2]]

Combining, for n=4, the moves are:
[[1, 0, 1], [2, 0, 2], [1, 1, 2], [3, 0, 1], [1, 2, 0], [2, 2, 1], [1, 0, 1], [4, 0, 2], [1, 1, 2], [2, 1, 0], [1, 2, 0], [3, 1, 2], [1, 0, 1], [2, 0, 2], [1, 1, 2]]

Now, let's generate the moves for n=11.

Ok, using the recursive algorithm, I know that for n=11, there will be 2^11 - 1 = 2047 moves. Rather than manually listing all 2047 moves, I'll use the recursive algorithm to compute them.

Let's construct the list of moves for n=11 using the recursive algorithm:

```python
def hanoi(n, source, auxiliary, destination, moves=None):
    if moves is None:
        moves = []
    
    if n == 1:
        moves.append([1, source, destination])
    else:
        hanoi(n-1, source, destination, auxiliary, moves)
        moves.append([n, source, destination])
        hanoi(n-1, auxiliary, source, destination, moves)
    
    return moves

moves = hanoi(11, 0, 1, 2)
```

For n=11, this function will generate a list of 2047 moves. I'll now list all these moves:

moves = [
[1, 0, 2],
[2, 0, 1],
[1, 2, 1],
[3, 0, 2],
[1, 1, 0],
[2, 1, 2],
[1, 0, 2],
[4, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[5, 0, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[4, 1, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[6, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[4, 0, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[5, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[4, 2, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[7, 0, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[4, 0, 2],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[5, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[4, 2, 1],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[6, 1, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[4, 1, 0],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[5, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[4, 0, 2],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[8, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[4, 0, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[5, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[4, 2, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[6, 0, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[4, 0, 2],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[5, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[4, 2, 1],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[7, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[4, 1, 0],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[5, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[4, 0, 2],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[6, 2, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[4, 0, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[5, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[4, 2, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[9, 0, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[4, 0, 2],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[5, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[4, 2, 1],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[6, 0, 2],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[4, 1, 0],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[5, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[4, 0, 2],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[7, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[4, 0, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[5, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[4, 2, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[6, 2, 0],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[4, 0, 2],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[5, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[4, 2, 1],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[8, 1, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[4, 1, 0],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[5, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[4, 0, 2],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[6, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[4, 0, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[5, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[4, 2, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[7, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[4, 0, 2],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[5, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[4, 2, 1],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[6, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[4, 1, 0],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[5, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[4, 0, 2],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[10, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[4, 0, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[5, 0, 2],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[4, 2, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[6, 0, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[4, 0, 2],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[5, 2, 0],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[4, 2, 1],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[7, 0, 2],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[4, 1, 0],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[5, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[4, 0, 2],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[6, 2, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[4, 0, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[5, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[4, 2, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[8, 0, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[4, 0, 2],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[5, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[4, 2, 1],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[6, 0, 2],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[4, 1, 0],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[5, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[4, 0, 2],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[7, 2, 0],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[4, 0, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[5, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[4, 2, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[6, 2, 1],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[4, 0, 2],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[5, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[4, 2, 1],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[9, 1, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[4, 1, 0],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[5, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[4, 0, 2],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[6, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[4, 0, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[5, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[4, 2, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[7, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[4, 0, 2],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[5, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[4, 2, 1],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[6, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[4, 1, 0],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[5, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[4, 0, 2],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[8, 2, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[4, 0, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[5, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[4, 2, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[6, 0, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[4, 0, 2],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[5, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[4, 2, 1],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[7, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[4, 1, 0],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[5, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[4, 0, 2],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[6, 2, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[4, 0, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[5, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[4, 2, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[11, 0, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[4, 0, 2],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[5, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[4, 2, 1],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[6, 0, 2],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[4, 1, 0],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[5, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[4, 0, 2],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[7, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[4, 0, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[5, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[4, 2, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[6, 2, 0],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[4, 0, 2],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[5, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[4, 2, 1],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[8, 0, 2],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[4, 1, 0],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[5, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[4, 0, 2],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[6, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[4, 0, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[5, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[4, 2, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[7, 2, 1],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[4, 0, 2],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[5, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[4, 2, 1],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[6, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[4, 1, 0],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[5, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[4, 0, 2],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[9, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[4, 0, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[5, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[4, 2, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[6, 0, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[4, 0, 2],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[5, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[4, 2, 1],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[7, 0, 2],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[4, 1, 0],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[5, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[4, 0, 2],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[6, 2, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[4, 0, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[5, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[4, 2, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[8, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[4, 0, 2],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[5, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[4, 2, 1],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[6, 0, 2],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[4, 1, 0],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[5, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[4, 0, 2],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[7, 2, 0],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[4, 0, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[5, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[4, 2, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[6, 2, 1],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[4, 0, 2],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[5, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[4, 2, 1],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[10, 1, 2],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[4, 1, 0],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[5, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[4, 0, 2],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[6, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[4, 0, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[5, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[4, 2, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[7, 0, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[4, 0, 2],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[5, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[4, 2, 1],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[6, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[4, 1, 0],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[5, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[4, 0, 2],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[8, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[4, 0, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[5, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[4, 2, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[6, 0, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[4, 0, 2],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[5, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[4, 2, 1],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[7, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[4, 1, 0],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[5, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[4, 0, 2],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[6, 2, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[4, 0, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[5, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[4, 2, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[9, 2, 0],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[4, 0, 2],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[5, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[4, 2, 1],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[6, 0, 2],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[4, 1, 0],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[5, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[4, 0, 2],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[7, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[4, 0, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[5, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[4, 2, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[6, 2, 0],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[4, 0, 2],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[5, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[4, 2, 1],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[8, 1, 2],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[4, 1, 0],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[5, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[4, 0, 2],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[6, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[4, 0, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[5, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[4, 2, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[7, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[4, 0, 2],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[5, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[4, 2, 1],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[6, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[4, 1, 0],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[3, 2, 0],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[5, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2],
[3, 0, 1],
[1, 2, 0],
[2, 2, 1],
[1, 0, 1],
[4, 0, 2],
[1, 1, 2],
[2, 1, 0],
[1, 2, 0],
[3, 1, 2],
[1, 0, 1],
[2, 0, 2],
[1, 1, 2]
]
</think>

```
moves=[[1,0,2],[2,0,1],[1,2,1],[3,0,2],[1,1,0],[2,1,2],[1,0,2],[4,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[5,0,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,1,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[6,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,0,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,2,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[7,0,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[5,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,2,1],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[6,1,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,1,0],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[5,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[8,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,0,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,2,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[6,0,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[5,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,2,1],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[7,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,1,0],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[5,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[6,2,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,0,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,2,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[9,0,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[5,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,2,1],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[6,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,1,0],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[5,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[7,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,0,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,2,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[6,2,0],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[5,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,2,1],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[8,1,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,1,0],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[5,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[6,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,0,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,2,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[7,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[5,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,2,1],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[6,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,1,0],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[5,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[10,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,0,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,2,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[6,0,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[5,2,0],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,2,1],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[7,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,1,0],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[5,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[6,2,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,0,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,2,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[8,0,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[5,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,2,1],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[6,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,1,0],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[5,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[7,2,0],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,0,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,2,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[6,2,1],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[5,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,2,1],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[9,1,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,1,0],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[5,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[6,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,0,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,2,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[7,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[5,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,2,1],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[6,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,1,0],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[5,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[8,2,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,0,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,2,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[6,0,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[5,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,2,1],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[7,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,1,0],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[5,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[6,2,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,0,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,2,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[11,0,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[5,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,2,1],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[6,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,1,0],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[5,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[7,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,0,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,2,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[6,2,0],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[5,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,2,1],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[8,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,1,0],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[5,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[6,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,0,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,2,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[7,2,1],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[5,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,2,1],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[6,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,1,0],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[5,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[9,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,0,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,2,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[6,0,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[5,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,2,1],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[7,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,1,0],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[5,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[6,2,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,0,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,2,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[8,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[5,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,2,1],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[6,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,1,0],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[5,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[7,2,0],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,0,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,2,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[6,2,1],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[5,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,2,1],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[10,1,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,1,0],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[5,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[6,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,0,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,2,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[7,0,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[5,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,2,1],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[6,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,1,0],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[5,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[8,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,0,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,2,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[6,0,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[5,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,2,1],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[7,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,1,0],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[5,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[6,2,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,0,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[5,2,0],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,2,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[9,2,0],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[5,0,1],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[4,2,1],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[6,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2],[4,1,0],[1,2,0],[2,2,1],[1,0,1],[3,2,0],[1,1,2],[2,1,0],[1,2,0],[5,1,2],[1,0,1],[2,0,2],[1,1,2],[3,0,1],[1,2,0],[2,2,1],[1,0,1],[4,0,2],[1,1,2],[2,1,0],[1,2,0],[3,1,2],[1,0,1],[2,0,2],[1,1,2]]
```

