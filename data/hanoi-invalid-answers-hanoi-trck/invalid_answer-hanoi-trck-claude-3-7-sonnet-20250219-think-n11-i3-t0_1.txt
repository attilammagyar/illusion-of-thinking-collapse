# model_name='claude-3-7-sonnet-20250219', reasoning_budget=32000, tries=0, n=11, i=3
# valid_prefix_length=18, is_valid_solution=0, first_correction=-1

<think>
This is the classic Tower of Hanoi problem with 11 disks. I need to find the sequence of moves to move all disks from peg 0 to peg 2, following the rules that only one disk can be moved at a time, and a larger disk cannot be placed on top of a smaller disk.

Let's first recall the optimal solution for the Tower of Hanoi problem. For n disks, the minimum number of moves needed is 2^n - 1. So for 11 disks, we need 2^11 - 1 = 2048 - 1 = 2047 moves.

The recursive solution to solve the Tower of Hanoi problem is:
1. Move n-1 disks from the source peg to the auxiliary peg.
2. Move the largest disk from the source peg to the destination peg.
3. Move n-1 disks from the auxiliary peg to the destination peg.

Let's implement this algorithm to generate the complete list of moves:

```python
def hanoi(n, source, auxiliary, destination, moves=None, pegs=None):
    if moves is None:
        moves = []
    if pegs is None:
        # Initialize pegs
        pegs = [list(range(n, 0, -1)), [], []]
    
    if n == 1:
        # Move disk 1 from source to destination
        disk = pegs[source].pop()
        pegs[destination].append(disk)
        moves.append((len(moves) + 1, source, destination, pegs[0].copy(), pegs[1].copy(), pegs[2].copy()))
    else:
        # Move n-1 disks from source to auxiliary
        hanoi(n-1, source, destination, auxiliary, moves, pegs)
        
        # Move the largest disk from source to destination
        disk = pegs[source].pop()
        pegs[destination].append(disk)
        moves.append((len(moves) + 1, source, destination, pegs[0].copy(), pegs[1].copy(), pegs[2].copy()))
        
        # Move n-1 disks from auxiliary to destination
        hanoi(n-1, auxiliary, source, destination, moves, pegs)
    
    return moves

# Generate the complete list of moves for 11 disks
moves = hanoi(11, 0, 1, 2)

# Print the moves in the required format
for move_id, from_peg, to_peg, peg0, peg1, peg2 in moves:
    peg0_str = " ".join(map(str, peg0)) if peg0 else ""
    peg1_str = " ".join(map(str, peg1)) if peg1 else ""
    peg2_str = " ".join(map(str, peg2)) if peg2 else ""
    print(f"{move_id},{from_peg},{to_peg},{peg0_str},{peg1_str},{peg2_str}")
```

However, I realize that I need to modify the algorithm slightly to match the required output format. Let me revise it:

First, let me create a function that recursively solves the Tower of Hanoi problem and tracks the state of the pegs at each step:

```python
def hanoi(n, source, auxiliary, target):
    moves = []
    pegs = [list(range(n, 0, -1)), [], []]  # Initialize pegs with disks
    
    def hanoi_recursive(n, source, auxiliary, target):
        if n == 0:
            return
        
        hanoi_recursive(n - 1, source, target, auxiliary)
        
        # Move disk n from source to target
        disk = pegs[source].pop()
        pegs[target].append(disk)
        
        # Record the move and the state of the pegs
        peg0 = list(pegs[0])  # Make a copy
        peg1 = list(pegs[1])  # Make a copy
        peg2 = list(pegs[2])  # Make a copy
        
        # Reverse the lists to display from bottom to top
        peg0.reverse()
        peg1.reverse()
        peg2.reverse()
        
        moves.append((len(moves) + 1, source, target, peg0, peg1, peg2))
        
        hanoi_recursive(n - 1, auxiliary, source, target)
    
    hanoi_recursive(n, source, auxiliary, target)
    return moves
```

Wait, that's not right. The pegs should display from bottom to top, but we're popping disks from the end of the list. Let me rethink this.

The Tower of Hanoi problem can be solved iteratively as well. Let's implement an iterative solution that records the state of the pegs after each move:

```python
def hanoi_iterative(n, source, auxiliary, target):
    moves = []
    # Initialize pegs with disks on the source peg
    pegs = [list(range(n, 0, -1)), [], []]
    
    # For odd n, swap the auxiliary and target pegs
    if n % 2 == 1:
        total_moves = 2**n - 1
        for move in range(1, total_moves + 1):
            if move % 3 == 1:
                # Move between source and target
                if not pegs[source] and not pegs[target]:
                    continue
                elif not pegs[source]:
                    from_peg, to_peg = target, source
                elif not pegs[target]:
                    from_peg, to_peg = source, target
                elif pegs[source][-1] < pegs[target][-1]:
                    from_peg, to_peg = source, target
                else:
                    from_peg, to_peg = target, source
            elif move % 3 == 2:
                # Move between source and auxiliary
                if not pegs[source] and not pegs[auxiliary]:
                    continue
                elif not pegs[source]:
                    from_peg, to_peg = auxiliary, source
                elif not pegs[auxiliary]:
                    from_peg, to_peg = source, auxiliary
                elif pegs[source][-1] < pegs[auxiliary][-1]:
                    from_peg, to_peg = source, auxiliary
                else:
                    from_peg, to_peg = auxiliary, source
            else:  # move % 3 == 0
                # Move between auxiliary and target
                if not pegs[auxiliary] and not pegs[target]:
                    continue
                elif not pegs[auxiliary]:
                    from_peg, to_peg = target, auxiliary
                elif not pegs[target]:
                    from_peg, to_peg = auxiliary, target
                elif pegs[auxiliary][-1] < pegs[target][-1]:
                    from_peg, to_peg = auxiliary, target
                else:
                    from_peg, to_peg = target, auxiliary
            
            # Move the disk
            disk = pegs[from_peg].pop()
            pegs[to_peg].append(disk)
            
            # Record the move and the state of the pegs
            peg0 = pegs[0].copy()
            peg1 = pegs[1].copy()
            peg2 = pegs[2].copy()
            
            moves.append((move, from_peg, to_peg, peg0, peg1, peg2))
    else:
        # For even n, the pattern is different
        # TODO: Implement the pattern for even n
        pass
    
    return moves
```

Actually, I think I'm making this too complicated. Let me take a step back.

I will implement a recursive solution that correctly tracks the state of the pegs at each step:

```python
def hanoi(n, source, auxiliary, target):
    """
    Solve the Tower of Hanoi problem for n disks, moving them from source to target.
    Return a list of moves, each move being a tuple (move_id, from_peg, to_peg, peg0, peg1, peg2).
    """
    # Initialize pegs with disks on the source peg
    pegs = [[] for _ in range(3)]
    for i in range(n, 0, -1):
        pegs[source].append(i)
    
    moves = []
    
    def move_disk(from_peg, to_peg):
        disk = pegs[from_peg].pop()
        pegs[to_peg].append(disk)
        
        # Record the move and the state of the pegs
        move_id = len(moves) + 1
        peg0 = pegs[0].copy()
        peg1 = pegs[1].copy()
        peg2 = pegs[2].copy()
        
        moves.append((move_id, from_peg, to_peg, peg0, peg1, peg2))
    
    def hanoi_recursive(n, source, auxiliary, target):
        if n == 1:
            move_disk(source, target)
        else:
            hanoi_recursive(n - 1, source, target, auxiliary)
            move_disk(source, target)
            hanoi_recursive(n - 1, auxiliary, source, target)
    
    hanoi_recursive(n, source, auxiliary, target)
    return moves
```

Hmm, I'm still not convinced that this will work correctly. Let's create a simpler function to solve the problem:

```python
def solve_hanoi(n, source=0, auxiliary=1, target=2):
    """
    Solve the Tower of Hanoi puzzle for n disks.
    
    Args:
        n: Number of disks
        source: Source peg (0-indexed)
        auxiliary: Auxiliary peg (0-indexed)
        target: Target peg (0-indexed)
    
    Returns:
        A list of moves, where each move is a tuple (from_peg, to_peg)
    """
    moves = []
    
    def hanoi(n, source, auxiliary, target):
        if n == 1:
            moves.append((source, target))
        else:
            hanoi(n - 1, source, target, auxiliary)
            moves.append((source, target))
            hanoi(n - 1, auxiliary, source, target)
    
    hanoi(n, source, auxiliary, target)
    return moves
```

This will give us the list of moves needed to solve the Tower of Hanoi problem. Now we need to track the state of the pegs after each move:

```python
def generate_peg_states(n, moves):
    """
    Generate the state of the pegs after each move.
    
    Args:
        n: Number of disks
        moves: List of moves, where each move is a tuple (from_peg, to_peg)
    
    Returns:
        A list of states, where each state is a tuple (move_id, from_peg, to_peg, peg0, peg1, peg2)
    """
    # Initialize pegs with disks on the first peg
    pegs = [[] for _ in range(3)]
    for i in range(n, 0, -1):
        pegs[0].append(i)
    
    states = []
    
    for i, (from_peg, to_peg) in enumerate(moves, 1):
        # Move the disk
        disk = pegs[from_peg].pop()
        pegs[to_peg].append(disk)
        
        # Record the state
        peg0 = pegs[0].copy()
        peg1 = pegs[1].copy()
        peg2 = pegs[2].copy()
        
        states.append((i, from_peg, to_peg, peg0, peg1, peg2))
    
    return states
```

Now let's combine the two functions to solve the Tower of Hanoi problem and generate the peg states:

```python
def solve_hanoi_with_states(n, source=0, auxiliary=1, target=2):
    """
    Solve the Tower of Hanoi puzzle for n disks and generate the state of the pegs after each move.
    
    Args:
        n: Number of disks
        source: Source peg (0-indexed)
        auxiliary: Auxiliary peg (0-indexed)
        target: Target peg (0-indexed)
    
    Returns:
        A list of states, where each state is a tuple (move_id, from_peg, to_peg, peg0, peg1, peg2)
    """
    moves = solve_hanoi(n, source, auxiliary, target)
    states = generate_peg_states(n, moves)
    return states
```

Wait, I'm not displaying the pegs correctly according to the required format. Let me update the `generate_peg_states` function:

```python
def generate_peg_states(n, moves):
    """
    Generate the state of the pegs after each move.
    
    Args:
        n: Number of disks
        moves: List of moves, where each move is a tuple (from_peg, to_peg)
    
    Returns:
        A list of states, where each state is a tuple (move_id, from_peg, to_peg, peg0_str, peg1_str, peg2_str)
    """
    # Initialize pegs with disks on the first peg
    pegs = [[] for _ in range(3)]
    for i in range(n, 0, -1):
        pegs[0].append(i)
    
    states = []
    
    for i, (from_peg, to_peg) in enumerate(moves, 1):
        # Move the disk
        disk = pegs[from_peg].pop()
        pegs[to_peg].append(disk)
        
        # Format the peg states as strings
        peg0_str = " ".join(map(str, pegs[0]))
        peg1_str = " ".join(map(str, pegs[1]))
        peg2_str = " ".join(map(str, pegs[2]))
        
        states.append((i, from_peg, to_peg, peg0_str, peg1_str, peg2_str))
    
    return states
```

Actually, I need to reverse the order of the disks on each peg, since I am popping from the end of the list but the disks should be displayed from bottom to top:

```python
def generate_peg_states(n, moves):
    """
    Generate the state of the pegs after each move.
    
    Args:
        n: Number of disks
        moves: List of moves, where each move is a tuple (from_peg, to_peg)
    
    Returns:
        A list of states, where each state is a tuple (move_id, from_peg, to_peg, peg0_str, peg1_str, peg2_str)
    """
    # Initialize pegs with disks on the first peg
    pegs = [[] for _ in range(3)]
    for i in range(n, 0, -1):
        pegs[0].append(i)
    
    states = []
    
    for i, (from_peg, to_peg) in enumerate(moves, 1):
        # Move the disk
        disk = pegs[from_peg].pop()
        pegs[to_peg].append(disk)
        
        # Format the peg states as strings, reversing the order to display from bottom to top
        peg0_str = " ".join(map(str, reversed(pegs[0])))
        peg1_str = " ".join(map(str, reversed(pegs[1])))
        peg2_str = " ".join(map(str, reversed(pegs[2])))
        
        states.append((i, from_peg, to_peg, peg0_str, peg1_str, peg2_str))
    
    return states
```

No wait, I think I'm overthinking it. The problem statement says "...a space separated list of disk numbers going from the bottom to the top." So the bottom disk should be listed first, followed by the next disk up, and so on. If I reverse the list before joining, the top disk will be listed first, which is not what we want.

The issue is that I'm using a list to represent the peg, where the end of the list is the top of the peg. So when I pop a disk, I'm taking it from the end of the list (the top of the peg). When I display the state of the peg, I need to reverse the list so that the bottom disk is listed first.

Let me rewrite the `generate_peg_states` function:

```python
def generate_peg_states(n, moves):
    """
    Generate the state of the pegs after each move.
    
    Args:
        n: Number of disks
        moves: List of moves, where each move is a tuple (from_peg, to_peg)
    
    Returns:
        A list of states, where each state is a tuple (move_id, from_peg, to_peg, peg0_str, peg1_str, peg2_str)
    """
    # Initialize pegs with disks on the first peg
    pegs = [[] for _ in range(3)]
    for i in range(n, 0, -1):
        pegs[0].append(i)
    
    states = []
    
    for i, (from_peg, to_peg) in enumerate(moves, 1):
        # Move the disk
        disk = pegs[from_peg].pop()
        pegs[to_peg].append(disk)
        
        # Format the peg states as strings, displaying from bottom to top
        peg0_str = " ".join(map(str, pegs[0][::-1]))
        peg1_str = " ".join(map(str, pegs[1][::-1]))
        peg2_str = " ".join(map(str, pegs[2][::-1]))
        
        states.append((i, from_peg, to_peg, peg0_str, peg1_str, peg2_str))
    
    return states
```

Wait, let me be more careful here. When I initialize the pegs, I'm adding disks in descending order (largest to smallest), so the first element of the list is the largest disk (at the bottom of the peg), and the last element is the smallest disk (at the top of the peg). So to display from bottom to top, I should iterate through the list in order, not reversed.

Argh, I'm getting confused. Let me trace through the algorithm for a simple case to make sure I'm doing it right:

```
For n = 3:
Initial pegs: [[3, 2, 1], [], []]

Moves:
1. Move disk 1 from peg 0 to peg 2: [[3, 2], [], [1]]
2. Move disk 2 from peg 0 to peg 1: [[3], [2], [1]]
3. Move disk 1 from peg 2 to peg 1: [[3], [2, 1], []]
4. Move disk 3 from peg 0 to peg 2: [[], [2, 1], [3]]
5. Move disk 1 from peg 1 to peg 0: [[1], [2], [3]]
6. Move disk 2 from peg 1 to peg 2: [[1], [], [3, 2]]
7. Move disk 1 from peg 0 to peg 2: [[], [], [3, 2, 1]]
```

Ok, I think I see the issue now. If I initialize the pegs with the disks in descending order, with the largest at the start of the list and the smallest at the end, then the list order will match the peg order (bottom to top). When I pop a disk, I'm taking it from the end of the list (the top of the peg), which is what I want. So I don't need to reverse the list when displaying the state of the peg.

Let me rewrite the `generate_peg_states` function one more time:

```python
def generate_peg_states(n, moves):
    """
    Generate the state of the pegs after each move.
    
    Args:
        n: Number of disks
        moves: List of moves, where each move is a tuple (from_peg, to_peg)
    
    Returns:
        A list of states, where each state is a tuple (move_id, from_peg, to_peg, peg0_str, peg1_str, peg2_str)
    """
    # Initialize pegs with disks on the first peg
    pegs = [[] for _ in range(3)]
    for i in range(n, 0, -1):
        pegs[0].append(i)
    
    states = []
    
    for i, (from_peg, to_peg) in enumerate(moves, 1):
        # Move the disk
        disk = pegs[from_peg].pop()
        pegs[to_peg].append(disk)
        
        # Format the peg states as strings, displaying from bottom to top
        peg0_str = " ".join(map(str, pegs[0]))
        peg1_str = " ".join(map(str, pegs[1]))
        peg2_str = " ".join(map(str, pegs[2]))
        
        states.append((i, from_peg, to_peg, peg0_str, peg1_str, peg2_str))
    
    return states
```

I think I'm making this overcomplicated. Let's take a step back and think about it one more time:

Given the description in the problem statement: "...a space separated list of disk numbers going from the bottom to the top.", and the examples provided, I need to represent the pegs such that the largest disk is the first element, and the smallest disk is the last element, and the disks are joined with spaces from bottom to top.

In the example with 3 disks, the initial state is `[3, 2, 1], [], []`, which means disk 3 (largest) is at the bottom, disk 2 is in the middle, and disk 1 (smallest) is at the top. This corresponds to a Python list representation of `[3, 2, 1]` for the first peg.

After a first move, the final state shown is `3 2,,1`. This looks like disk 3 and 2 on peg 0, and disk 1 on peg 2. This corresponds to a Python list representation of `[3, 2]` for the first peg, and `[1]` for the third peg.

I think I was thrown off by the description, and should think about it this way: I am asked to output a string representation of each peg where the disks are listed from bottom to top. If my Python list representation has the largest disk first and the smallest disk last, then I can directly convert the list to a string with spaces.

So let me rewrite the algorithm more simply:

```python
def solve_hanoi(n):
    """
    Solve the Tower of Hanoi puzzle for n disks.
    
    Args:
        n: Number of disks
    
    Returns:
        A list of moves, where each move is formatted according to the problem statement
    """
    # Initialize pegs with disks on the first peg
    pegs = [[], [], []]
    for i in range(n, 0, -1):
        pegs[0].append(i)
    
    result = []
    
    def move_disk(from_peg, to_peg, move_id):
        disk = pegs[from_peg].pop()
        pegs[to_peg].append(disk)
        
        # Format the peg states as strings
        peg0_str = " ".join(map(str, pegs[0]))
        peg1_str = " ".join(map(str, pegs[1]))
        peg2_str = " ".join(map(str, pegs[2]))
        
        result.append(f"{move_id},{from_peg},{to_peg},{peg0_str},{peg1_str},{peg2_str}")
    
    def hanoi(n, source, auxiliary, target, move_id):
        if n == 1:
            move_disk(source, target, move_id)
            return move_id + 1
        
        move_id = hanoi(n - 1, source, target, auxiliary, move_id)
        move_id = hanoi(1, source, auxiliary, target, move_id)
        move_id = hanoi(n - 1, auxiliary, source, target, move_id)
        
        return move_id
    
    hanoi(n, 0, 1, 2, 1)
    
    return result
```

Wait, I'm misunderstanding the problem again. Let me reread the examples.

Disk: 1 is the smallest, 3 is the largest. The initial state is `[3, 2, 1], [], []`, which means disk 3 is at the bottom, disk 2 is in the middle, and disk 1 is at the top of the first peg, and the other pegs are empty.

Let's trace through the first few moves of the example:

1. Move disk 1 from peg 0 to peg 2, resulting in `[3, 2], [], [1]`.
2. Move disk 2 from peg 0 to peg 1, resulting in `[3], [2], [1]`.
3. Move disk 1 from peg 2 to peg 1, resulting in `[3], [2, 1], []`.

Ok, wait. I'm confusing myself because I'm not being careful enough with the representation in the output.

In the example, the state of the pegs after the first move is shown as `3 2,,1`. This means peg 0 has disks 3 and 2, peg 1 is empty, and peg 2 has disk 1. In terms of our Python list representation, this would be `[3, 2], [], [1]`. So the example is using the bottom-to-top ordering in the output, which matches my plan.

I'm going to adapt this example and make sure I'm getting it right.
Say we have disks [3, 2, 1] on peg 0, where 3 is the largest and 1 is the smallest.
- The Python list representation is `[3, 2, 1]`, where the first element is the bottom disk.
- The string representation is "3 2 1", where the first character is the bottom disk.

If I move the top disk (1) to peg 2, the state would be:
- Python list: `[3, 2], [], [1]`
- String representation: "3 2", "", "1"

I think I was overthinking the representation. Let me simplify the algorithm:

```python
def solve_hanoi(n):
    """
    Solve the Tower of Hanoi puzzle for n disks.
    
    Args:
        n: Number of disks
    
    Returns:
        A list of moves, where each move is formatted according to the problem statement
    """
    # Initialize pegs with disks on the first peg
    pegs = [[], [], []]
    for i in range(n, 0, -1):
        pegs[0].append(i)
    
    result = []
    move_id = 1
    
    def hanoi(n, source, auxiliary, target):
        nonlocal move_id
        
        if n == 0:
            return
        
        hanoi(n - 1, source, target, auxiliary)
        
        # Move disk n from source to target
        disk = pegs[source].pop()
        pegs[target].append(disk)
        
        # Format the peg states as strings
        peg0_str = " ".join(map(str, pegs[0]))
        peg1_str = " ".join(map(str, pegs[1]))
        peg2_str = " ".join(map(str, pegs[2]))
        
        result.append(f"{move_id},{source},{target},{peg0_str},{peg1_str},{peg2_str}")
        move_id += 1
        
        hanoi(n - 1, auxiliary, source, target)
    
    hanoi(n, 0, 1, 2)
    
    return result
```

Hmm, let me reconsider the way I append disks to the pegs. The problem statement says the initial state is `[3, 2, 1], [], []`, where the largest disk is first in the list. I'm initializing the pegs with the largest disk first, so I believe my approach is correct.

Actually now that I look at the example again, I am a bit confused because one of the entries is `3 2 1`, which I would have expressed as `[3, 2, 1]`. This makes me think that the disks are shown in bottom-to-top order in the output, with the bottom disk first. Let me trace through the example once more:

1. Move disk 1 from peg 0 to peg 2, resulting in `3 2,,1`. I would express this as `[3, 2], [], [1]` in Python.
2. Move disk 2 from peg 0 to peg 1, resulting in `3,2,1`. I would express this as `[3], [2], [1]` in Python.
3. Move disk 1 from peg 2 to peg 1, resulting in `3,2 1,`. I would express this as `[3], [2, 1], []` in Python.

Yes, so the disks are listed from bottom to top in the output, which matches the way I'm representing them in the Python lists. So I believe my approach is correct. Let me just double-check my algorithm:

```python
def solve_hanoi(n):
    """
    Solve the Tower of Hanoi puzzle for n disks.
    
    Args:
        n: Number of disks
    
    Returns:
        A list of moves, where each move is formatted according to the problem statement
    """
    # Initialize pegs with disks on the first peg
    pegs = [[], [], []]
    for i in range(n, 0, -1):
        pegs[0].append(i)
    
    result = []
    move_id = 1
    
    def hanoi(n, source, auxiliary, target):
        nonlocal move_id
        
        if n == 0:
            return
        
        hanoi(n - 1, source, target, auxiliary)
        
        # Move disk n from source to target
        disk = pegs[source].pop()
        pegs[target].append(disk)
        
        # Format the peg states as strings
        peg0_str = " ".join(map(str, pegs[0]))
        peg1_str = " ".join(map(str, pegs[1]))
        peg2_str = " ".join(map(str, pegs[2]))
        
        result.append(f"{move_id},{source},{target},{peg0_str},{peg1_str},{peg2_str}")
        move_id += 1
        
        hanoi(n - 1, auxiliary, source, target)
    
    hanoi(n, 0, 1, 2)
    
    return result
```

The problem statement already gives me the initial state of the pegs with `n = 11`:
- Peg 0: 11 (bottom), ... 2, 1 (top)
- Peg 1: (empty)
- Peg 2: (empty)

This means the Python list representation of the initial state is:
```
pegs = [[11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1], [], []]
```

We initialize the pegs like this in my algorithm:
```python
pegs = [[], [], []]
for i in range(n, 0, -1):
    pegs[0].append(i)
```

Which gives us:
```
pegs = [[11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1], [], []]
```

Seems correct.

Now, when we move disk 1 (the top disk of peg 0) to peg 2, we would update the pegs like this:
```
disk = pegs[0].pop()  # disk = 1
pegs[2].append(disk)
```

Which gives us:
```
pegs = [[11, 10, 9, 8, 7, 6, 5, 4, 3, 2], [], [1]]
```

This looks right.

I believe my approach is correct. Let me generate the solution for `n = 11`:

```python
result = solve_hanoi(11)
for r in result:
    print(r)
```

Actually, I just realized there's a recursive call to `hanoi` with a different ordering of the pegs, so we could end up with `source` and `target` being different than what we expect. I should be more careful about this.

Let me revise the algorithm to make sure we're always moving disks from the correct pegs:

```python
def solve_hanoi(n):
    """
    Solve the Tower of Hanoi puzzle for n disks.
    
    Args:
        n: Number of disks
    
    Returns:
        A list of moves, where each move is formatted according to the problem statement
    """
    # Initialize pegs with disks on the first peg
    pegs = [[], [], []]
    for i in range(n, 0, -1):
        pegs[0].append(i)
    
    result = []
    move_id = 1
    
    def hanoi(n, source, auxiliary, target):
        nonlocal move_id
        
        if n == 0:
            return
        
        hanoi(n - 1, source, target, auxiliary)
        
        # Move disk n from source to target
        disk = pegs[source].pop()
        pegs[target].append(disk)
        
        # Format the peg states as strings
        peg0_str = " ".join(map(str, pegs[0]))
        peg1_str = " ".join(map(str, pegs[1]))
        peg2_str = " ".join(map(str, pegs[2]))
        
        result.append(f"{move_id},{source},{target},{peg0_str},{peg1_str},{peg2_str}")
        move_id += 1
        
        hanoi(n - 1, auxiliary, source, target)
    
    hanoi(n, 0, 1, 2)
    
    return result
```

Actually wait, I'm still not sure I understand the full algorithm. When we make recursive calls, we're always moving disks from one peg to another, but the specific source and target pegs change based on the recursive call. So even though we initialize the pegs correctly, I'm not sure we're tracking the pegs correctly in the recursive calls.

Let me think about this problem differently.

The Tower of Hanoi problem can be solved recursively, and the solution involves moving disks in a very specific pattern:
1. Move n-1 disks from the source to the auxiliary peg.
2. Move the largest disk from the source to the target peg.
3. Move n-1 disks from the auxiliary to the target peg.

This pattern can be implemented by a recursive function.

However, it's also possible to solve the problem iteratively. For n disks, we need to make 2^n - 1 moves. If n is odd, the first move is from the source to the target peg. If n is even, the first move is from the source to the auxiliary peg. Then we alternate between the three possible moves, always choosing the valid move that involves the smallest disk.

Let me implement the iterative solution, which may be easier to understand:

```python
def solve_hanoi(n):
    """
    Solve the Tower of Hanoi puzzle for n disks using an iterative algorithm.
    
    Args:
        n: Number of disks
    
    Returns:
        A list of moves, where each move is formatted according to the problem statement
    """
    # Initialize pegs with disks on the first peg
    pegs = [[], [], []]
    for i in range(n, 0, -1):
        pegs[0].append(i)
    
    result = []
    
    # Calculate the total number of moves
    total_moves = 2**n - 1
    
    for move_id in range(1, total_moves + 1):
        # Determine which pegs to move between
        if n % 2 == 0:
            if move_id % 3 == 1:
                source, target = 0, 1
            elif move_id % 3 == 2:
                source, target = 0, 2
            else:  # move_id % 3 == 0
                source, target = 1, 2
        else:
            if move_id % 3 == 1:
                source, target = 0, 2
            elif move_id % 3 == 2:
                source, target = 0, 1
            else:  # move_id % 3 == 0
                source, target = 1, 2
        
        # Check if the move is valid, and adjust if necessary
        if not pegs[source]:
            # If the source peg is empty, swap the source and target
            source, target = target, source
        elif not pegs[target]:
            # If the target peg is empty, do nothing (the move is valid)
            pass
        elif pegs[source][-1] > pegs[target][-1]:
            # If the top disk of the source peg is larger than the top disk of the target peg,
            # swap the source and target
            source, target = target, source
        
        # Move the disk
        disk = pegs[source].pop()
        pegs[target].append(disk)
        
        # Format the peg states as strings
        peg0_str = " ".join(map(str, pegs[0]))
        peg1_str = " ".join(map(str, pegs[1]))
        peg2_str = " ".join(map(str, pegs[2]))
        
        result.append(f"{move_id},{source},{target},{peg0_str},{peg1_str},{peg2_str}")
    
    return result
```

Wait, that's not quite right. Let me take a step back again.

The optimal solution for the Tower of Hanoi problem involves making 2^n - 1 moves. If n is odd, we want to move disk 1 to peg 2, disk 2 to peg 1, disk 3 to peg 2, and so on. If n is even, we want to move disk 1 to peg 1, disk 2 to peg 2, disk 3 to peg 1, and so on.

This can be implemented using a recursive function, but we need to be careful to pass the correct source, auxiliary, and target pegs to the recursive calls.

Let me implement the recursive solution correctly:

```python
def solve_hanoi(n):
    """
    Solve the Tower of Hanoi puzzle for n disks.
    
    Args:
        n: Number of disks
    
    Returns:
        A list of moves, where each move is formatted according to the problem statement
    """
    # Initialize pegs with disks on the first peg
    pegs = [[] for _ in range(3)]
    for i in range(n, 0, -1):
        pegs[0].append(i)
    
    result = []
    move_id = 1
    
    def move_disk(from_peg, to_peg):
        nonlocal move_id
        
        disk = pegs[from_peg].pop()
        pegs[to_peg].append(disk)
        
        # Format the peg states as strings
        peg0_str = " ".join(map(str, pegs[0]))
        peg1_str = " ".join(map(str, pegs[1]))
        peg2_str = " ".join(map(str, pegs[2]))
        
        result.append(f"{move_id},{from_peg},{to_peg},{peg0_str},{peg1_str},{peg2_str}")
        move_id += 1
    
    def hanoi(n, source, auxiliary, target):
        if n == 1:
            move_disk(source, target)
        else:
            hanoi(n - 1, source, target, auxiliary)
            move_disk(source, target)
            hanoi(n - 1, auxiliary, source, target)
    
    hanoi(n, 0, 1, 2)
    
    return result
```

I think I'm finally converging on a solution. Let me check if we're using the correct pegs in the recursive calls:

In the first recursive call, we're moving n-1 disks from `source` to `auxiliary`, using `target` as the auxiliary peg. This means we're passing `source, target, auxiliary` as the arguments, which matches the function signature `hanoi(n, source, auxiliary, target)`.

In the second recursive call, we're moving n-1 disks from `auxiliary` to `target`, using `source` as the auxiliary peg. This means we're passing `auxiliary, source, target` as the arguments, which matches the function signature `hanoi(n, source, auxiliary, target)`.

This looks right to me. The recursive algorithm should correctly solve the Tower of Hanoi problem. Let me restate the algorithm in English:
1. Move n-1 disks from the source to the auxiliary peg, using the target peg as the auxiliary.
2. Move the largest disk from the source to the target peg.
3. Move n-1 disks from the auxiliary to the target peg, using the source peg as the auxiliary.

Let me trace through the algorithm for a simple case to make sure it's working correctly:

For n = 3:
- Initial pegs: `[[3, 2, 1], [], []]`
- Call `hanoi(3, 0, 1, 2)`
  - Call `hanoi(2, 0, 2, 1)`
    - Call `hanoi(1, 0, 1, 2)`
      - Move disk 1 from peg 0 to peg 2: `[[3, 2], [], [1]]`
    - Move disk 2 from peg 0 to peg 1: `[[3], [2], [1]]`
    - Call `hanoi(1, 2, 0, 1)`
      - Move disk 1 from peg 2 to peg 1: `[[3], [2, 1], []]`
  - Move disk 3 from peg 0 to peg 2: `[[], [2, 1], [3]]`
  - Call `hanoi(2, 1, 0, 2)`
    - Call `hanoi(1, 1, 2, 0)`
      - Move disk 1 from peg 1 to peg 0: `[[1], [2], [3]]`
    - Move disk 2 from peg 1 to peg 2: `[[1], [], [3, 2]]`
    - Call `hanoi(1, 0, 1, 2)`
      - Move disk 1 from peg 0 to peg 2: `[[], [], [3, 2, 1]]`

This matches the expected sequence of moves, so I believe the algorithm is correct.

Let me implement the solution for n = 11:

```python
def solve_hanoi(n):
    """
    Solve the Tower of Hanoi puzzle for n disks.
    
    Args:
        n: Number of disks
    
    Returns:
        A list of moves, where each move is formatted according to the problem statement
    """
    # Initialize pegs with disks on the first peg
    pegs = [[] for _ in range(3)]
    for i in range(n, 0, -1):
        pegs[0].append(i)
    
    result = []
    move_id = 1
    
    def move_disk(from_peg, to_peg):
        nonlocal move_id
        
        disk = pegs[from_peg].pop()
        pegs[to_peg].append(disk)
        
        # Format the peg states as strings
        peg0_str = " ".join(map(str, pegs[0]))
        peg1_str = " ".join(map(str, pegs[1]))
        peg2_str = " ".join(map(str, pegs[2]))
        
        result.append(f"{move_id},{from_peg},{to_peg},{peg0_str},{peg1_str},{peg2_str}")
        move_id += 1
    
    def hanoi(n, source, auxiliary, target):
        if n == 1:
            move_disk(source, target)
        else:
            hanoi(n - 1, source, target, auxiliary)
            move_disk(source, target)
            hanoi(n - 1, auxiliary, source, target)
    
    hanoi(n, 0, 1, 2)
    
    return result

result = solve_hanoi(11)
for r in result:
    print(r)
```

Now let me run this for n = 11 and we will have the solution.

Let me just double-check my solution once more:

1. We initialize the pegs with disks on the first peg, with the largest disk at the bottom and the smallest disk at the top.
2. We define a recursive function `hanoi(n, source, auxiliary, target)` that solves the Tower of Hanoi problem for n disks, moving them from the source peg to the target peg, using the auxiliary peg as needed.
3. For each move, we record the move ID, the source peg, the target peg, and the state of all three pegs after the move.
4. We call the `hanoi` function with n = 11, source = 0, auxiliary = 1, and target = 2, to solve the problem.

The algorithm looks right to me. Let's solve it for n = 11, and we'll have the solution.

For n = 11 I would get 2^11 - 1 = 2047 moves, which is a lot, but I think that's what the problem asks for. Let's do it!

def solve_hanoi(n):
    """
    Solve the Tower of Hanoi puzzle for n disks.
    
    Args:
        n: Number of disks
    
    Returns:
        A list of moves, where each move is formatted according to the problem statement
    """
    # Initialize pegs with disks on the first peg
    pegs = [[] for _ in range(3)]
    for i in range(n, 0, -1):
        pegs[0].append(i)
    
    result = []
    move_id = 1
    
    def move_disk(from_peg, to_peg):
        nonlocal move_id
        
        disk = pegs[from_peg].pop()
        pegs[to_peg].append(disk)
        
        # Format the peg states as strings
        peg0_str = " ".join(map(str, pegs[0]))
        peg1_str = " ".join(map(str, pegs[1]))
        peg2_str = " ".join(map(str, pegs[2]))
        
        result.append(f"{move_id},{from_peg},{to_peg},{peg0_str},{peg1_str},{peg2_str}")
        move_id += 1
    
    def hanoi(n, source, auxiliary, target):
        if n == 1:
            move_disk(source, target)
        else:
            hanoi(n - 1, source, target, auxiliary)
            move_disk(source, target)
            hanoi(n - 1, auxiliary, source, target)
    
    hanoi(n, 0, 1, 2)
    
    return result

result = solve_hanoi(11)
for r in result:
    print(r)
</think>

# Tower of Hanoi Solution for 11 Disks

```
move_id,from_peg,to_peg,peg0,peg1,peg2
1,0,2,11 10 9 8 7 6 5 4 3 2,,1
2,0,1,11 10 9 8 7 6 5 4 3,2,1
3,2,1,11 10 9 8 7 6 5 4 3,2 1,
4,0,2,11 10 9 8 7 6 5 4,,2 1 3
5,1,0,11 10 9 8 7 6 5 4 1,2,3
6,1,2,11 10 9 8 7 6 5 4 1,,3 2
7,0,2,11 10 9 8 7 6 5 4,,3 2 1
8,0,1,11 10 9 8 7 6 5,4,3 2 1
9,2,1,11 10 9 8 7 6 5,4 1,3 2
10,2,0,11 10 9 8 7 6 5 2,4 1,3
11,1,0,11 10 9 8 7 6 5 2 1,4,3
12,2,1,11 10 9 8 7 6 5 2 1,4 3,
13,0,2,11 10 9 8 7 6 5 2,,4 3 1
14,0,1,11 10 9 8 7 6 5,2,4 3 1
15,2,1,11 10 9 8 7 6 5,2 1,4 3
16,0,2,11 10 9 8 7 6,,2 1,4 3 5
17,1,0,11 10 9 8 7 6 1,2,4 3 5
18,1,2,11 10 9 8 7 6 1,,4 3 5 2
19,0,2,11 10 9 8 7 6,,4 3 5 2 1
20,0,1,11 10 9 8 7,6,4 3 5 2 1
21,2,1,11 10 9 8 7,6 1,4 3 5 2
22,2,0,11 10 9 8 7 2,6 1,4 3 5
23,1,0,11 10 9 8 7 2 1,6,4 3 5
24,2,1,11 10 9 8 7 2 1,6 5,4 3
25,0,2,11 10 9 8 7 2,,6 5,4 3 1
26,0,1,11 10 9 8 7,2,6 5,4 3 1
27,2,1,11 10 9 8 7,2 1,6 5,4 3
28,2,0,11 10 9 8 7 3,2 1,6 5,4
29,1,0,11 10 9 8 7 3 1,2,6 5,4
30,1,2,11 10 9 8 7 3 1,,6 5,4 2
31,0,2,11 10 9 8 7 3,,6 5,4 2 1
32,0,1,11 10 9 8 7,3,6 5,4 2 1
33,2,1,11 10 9 8 7,3 1,6 5,4 2
34,2,0,11 10 9 8 7 2,3 1,6 5,4
35,1,0,11 10 9 8 7 2 1,3,6 5,4
36,2,1,11 10 9 8 7 2 1,3 4,6 5
37,0,2,11 10 9 8 7 2,,3 4,6 5 1
38,0,1,11 10 9 8 7,2,3 4,6 5 1
39,2,1,11 10 9 8 7,2 1,3 4,6 5
40,0,2,11 10 9 8 7,,2 1,3 4,6 5
41,1,0,11 10 9 8 7 1,2,3 4,6 5
42,1,2,11 10 9 8 7 1,,3 4,6 5 2
43,0,2,11 10 9 8 7,,3 4,6 5 2 1
44,0,1,11 10 9 8,7,3 4,6 5 2 1
45,2,1,11 10 9 8,7 1,3 4,6 5 2
46,2,0,11 10 9 8 2,7 1,3 4,6 5
47,1,0,11 10 9 8 2 1,7,3 4,6 5
48,2,1,11 10 9 8 2 1,7 5,3 4,6
49,0,2,11 10 9 8 2,,7 5,3 4,6 1
50,0,1,11 10 9 8,2,7 5,3 4,6 1
51,2,1,11 10 9 8,2 1,7 5,3 4,6
52,2,0,11 10 9 8 6,2 1,7 5,3 4
53,1,0,11 10 9 8 6 1,2,7 5,3 4
54,1,2,11 10 9 8 6 1,,7 5,3 4 2
55,0,2,11 10 9 8 6,,7 5,3 4 2 1
56,0,1,11 10 9 8,6,7 5,3 4 2 1
57,2,1,11 10 9 8,6 1,7 5,3 4 2
58,2,0,11 10 9 8 2,6 1,7 5,3 4
59,1,0,11 10 9 8 2 1,6,7 5,3 4
60,2,1,11 10 9 8 2 1,6 4,7 5,3
61,0,2,11 10 9 8 2,,6 4,7 5,3 1
62,0,1,11 10 9 8,2,6 4,7 5,3 1
63,2,1,11 10 9 8,2 1,6 4,7 5,3
64,2,0,11 10 9 8 3,2 1,6 4,7 5
65,1,0,11 10 9 8 3 1,2,6 4,7 5
66,1,2,11 10 9 8 3 1,,6 4,7 5 2
67,0,2,11 10 9 8 3,,6 4,7 5 2 1
68,0,1,11 10 9 8,3,6 4,7 5 2 1
69,2,1,11 10 9 8,3 1,6 4,7 5 2
70,2,0,11 10 9 8 2,3 1,6 4,7 5
71,1,0,11 10 9 8 2 1,3,6 4,7 5
72,2,1,11 10 9 8 2 1,3 5,6 4,7
73,0,2,11 10 9 8 2,,3 5,6 4,7 1
74,0,1,11 10 9 8,2,3 5,6 4,7 1
75,2,1,11 10 9 8,2 1,3 5,6 4,7
76,0,2,11 10 9 8,,2 1,3 5,6 4,7
77,1,0,11 10 9 8 1,2,3 5,6 4,7
78,1,2,11 10 9 8 1,,3 5,6 4,7 2
79,0,2,11 10 9 8,,3 5,6 4,7 2 1
80,0,1,11 10 9,8,3 5,6 4,7 2 1
81,2,1,11 10 9,8 1,3 5,6 4,7 2
82,2,0,11 10 9 2,8 1,3 5,6 4,7
83,1,0,11 10 9 2 1,8,3 5,6 4,7
84,2,1,11 10 9 2 1,8 7,3 5,6 4
85,0,2,11 10 9 2,,8 7,3 5,6 4 1
86,0,1,11 10 9,2,8 7,3 5,6 4 1
87,2,1,11 10 9,2 1,8 7,3 5,6 4
88,2,0,11 10 9 4,2 1,8 7,3 5,6
89,1,0,11 10 9 4 1,2,8 7,3 5,6
90,1,2,11 10 9 4 1,,8 7,3 5,6 2
91,0,2,11 10 9 4,,8 7,3 5,6 2 1
92,0,1,11 10 9,4,8 7,3 5,6 2 1
93,2,1,11 10 9,4 1,8 7,3 5,6 2
94,2,0,11 10 9 2,4 1,8 7,3 5,6
95,1,0,11 10 9 2 1,4,8 7,3 5,6
96,2,1,11 10 9 2 1,4 6,8 7,3 5
97,0,2,11 10 9 2,,4 6,8 7,3 5 1
98,0,1,11 10 9,2,4 6,8 7,3 5 1
99,2,1,11 10 9,2 1,4 6,8 7,3 5
100,2,0,11 10 9 5,2 1,4 6,8 7,3
101,1,0,11 10 9 5 1,2,4 6,8 7,3
102,1,2,11 10 9 5 1,,4 6,8 7,3 2
103,0,2,11 10 9 5,,4 6,8 7,3 2 1
104,0,1,11 10 9,5,4 6,8 7,3 2 1
105,2,1,11 10 9,5 1,4 6,8 7,3 2
106,2,0,11 10 9 2,5 1,4 6,8 7,3
107,1,0,11 10 9 2 1,5,4 6,8 7,3
108,2,1,11 10 9 2 1,5 3,4 6,8 7
109,0,2,11 10 9 2,,5 3,4 6,8 7 1
110,0,1,11 10 9,2,5 3,4 6,8 7 1
111,2,1,11 10 9,2 1,5 3,4 6,8 7
112,2,0,11 10 9 7,2 1,5 3,4 6,8
113,1,0,11 10 9 7 1,2,5 3,4 6,8
114,1,2,11 10 9 7 1,,5 3,4 6,8 2
115,0,2,11 10 9 7,,5 3,4 6,8 2 1
116,0,1,11 10 9,7,5 3,4 6,8 2 1
117,2,1,11 10 9,7 1,5 3,4 6,8 2
118,2,0,11 10 9 2,7 1,5 3,4 6,8
119,1,0,11 10 9 2 1,7,5 3,4 6,8
120,2,1,11 10 9 2 1,7 8,5 3,4 6
121,0,2,11 10 9 2,,7 8,5 3,4 6 1
122,0,1,11 10 9,2,7 8,5 3,4 6 1
123,2,1,11 10 9,2 1,7 8,5 3,4 6
124,0,2,11 10 9,,2 1,7 8,5 3,4 6
125,1,0,11 10 9 1,2,7 8,5 3,4 6
126,1,2,11 10 9 1,,7 8,5 3,4 6 2
127,0,2,11 10 9,,7 8,5 3,4 6 2 1
128,0,1,11 10,9,7 8,5 3,4 6 2 1
129,2,1,11 10,9 1,7 8,5 3,4 6 2
130,2,0,11 10 2,9 1,7 8,5 3,4 6
131,1,0,11 10 2 1,9,7 8,5 3,4 6
132,2,1,11 10 2 1,9 6,7 8,5 3,4
133,0,2,11 10 2,,9 6,7 8,5 3,4 1
134,0,1,11 10,2,9 6,7 8,5 3,4 1
135,2,1,11 10,2 1,9 6,7 8,5 3,4
136,2,0,11 10 4,2 1,9 6,7 8,5 3
137,1,0,11 10 4 1,2,9 6,7 8,5 3
138,1,2,11 10 4 1,,9 6,7 8,5 3 2
139,0,2,11 10 4,,9 6,7 8,5 3 2 1
140,0,1,11 10,4,9 6,7 8,5 3 2 1
141,2,1,11 10,4 1,9 6,7 8,5 3 2
142,2,0,11 10 2,4 1,9 6,7 8,5 3
143,1,0,11 10 2 1,4,9 6,7 8,5 3
144,2,1,11 10 2 1,4 3,9 6,7 8,5
145,0,2,11 10 2,,4 3,9 6,7 8,5 1
146,0,1,11 10,2,4 3,9 6,7 8,5 1
147,2,1,11 10,2 1,4 3,9 6,7 8,5
148,2,0,11 10 5,2 1,4 3,9 6,7 8
149,1,0,11 10 5 1,2,4 3,9 6,7 8
150,1,2,11 10 5 1,,4 3,9 6,7 8 2
151,0,2,11 10 5,,4 3,9 6,7 8 2 1
152,0,1,11 10,5,4 3,9 6,7 8 2 1
153,2,1,11 10,5 1,4 3,9 6,7 8 2
154,2,0,11 10 2,5 1,4 3,9 6,7 8
155,1,0,11 10 2 1,5,4 3,9 6,7 8
156,2,1,11 10 2 1,5 8,4 3,9 6,7
157,0,2,11 10 2,,5 8,4 3,9 6,7 1
158,0,1,11 10,2,5 8,4 3,9 6,7 1
159,2,1,11 10,2 1,5 8,4 3,9 6,7
160,2,0,11 10 7,2 1,5 8,4 3,9 6
161,1,0,11 10 7 1,2,5 8,4 3,9 6
162,1,2,11 10 7 1,,5 8,4 3,9 6 2
163,0,2,11 10 7,,5 8,4 3,9 6 2 1
164,0,1,11 10,7,5 8,4 3,9 6 2 1
165,2,1,11 10,7 1,5 8,4 3,9 6 2
166,2,0,11 10 2,7 1,5 8,4 3,9 6
167,1,0,11 10 2 1,7,5 8,4 3,9 6
168,2,1,11 10 2 1,7 6,5 8,4 3,9
169,0,2,11 10 2,,7 6,5 8,4 3,9 1
170,0,1,11 10,2,7 6,5 8,4 3,9 1
171,2,1,11 10,2 1,7 6,5 8,4 3,9
172,0,2,11 10,,2 1,7 6,5 8,4 3,9
173,1,0,11 10 1,2,7 6,5 8,4 3,9
174,1,2,11 10 1,,7 6,5 8,4 3,9 2
175,0,2,11 10,,7 6,5 8,4 3,9 2 1
176,0,1,11,10,7 6,5 8,4 3,9 2 1
177,2,1,11,10 1,7 6,5 8,4 3,9 2
178,2,0,11 2,10 1,7 6,5 8,4 3,9
179,1,0,11 2 1,10,7 6,5 8,4 3,9
180,2,1,11 2 1,10 9,7 6,5 8,4 3
181,0,2,11 2,,10 9,7 6,5 8,4 3 1
182,0,1,11,2,10 9,7 6,5 8,4 3 1
183,2,1,11,2 1,10 9,7 6,5 8,4 3
184,2,0,11 3,2 1,10 9,7 6,5 8,4
185,1,0,11 3 1,2,10 9,7 6,5 8,4
186,1,2,11 3 1,,10 9,7 6,5 8,4 2
187,0,2,11 3,,10 9,7 6,5 8,4 2 1
188,0,1,11,3,10 9,7 6,5 8,4 2 1
189,2,1,11,3 1,10 9,7 6,5 8,4 2
190,2,0,11 2,3 1,10 9,7 6,5 8,4
191,1,0,11 2 1,3,10 9,7 6,5 8,4
192,2,1,11 2 1,3 4,10 9,7 6,5 8
193,0,2,11 2,,3 4,10 9,7 6,5 8 1
194,0,1,11,2,3 4,10 9,7 6,5 8 1
195,2,1,11,2 1,3 4,10 9,7 6,5 8
196,2,0,11 8,2 1,3 4,10 9,7 6,5
197,1,0,11 8 1,2,3 4,10 9,7 6,5
198,1,2,11 8 1,,3 4,10 9,7 6,5 2
199,0,2,11 8,,3 4,10 9,7 6,5 2 1
200,0,1,11,8,3 4,10 9,7 6,5 2 1
201,2,1,11,8 1,3 4,10 9,7 6,5 2
202,2,0,11 2,8 1,3 4,10 9,7 6,5
203,1,0,11 2 1,8,3 4,10 9,7 6,5
204,2,1,11 2 1,8 5,3 4,10 9,7 6
205,0,2,11 2,,8 5,3 4,10 9,7 6 1
206,0,1,11,2,8 5,3 4,10 9,7 6 1
207,2,1,11,2 1,8 5,3 4,10 9,7 6
208,2,0,11 6,2 1,8 5,3 4,10 9,7
209,1,0,11 6 1,2,8 5,3 4,10 9,7
210,1,2,11 6 1,,8 5,3 4,10 9,7 2
211,0,2,11 6,,8 5,3 4,10 9,7 2 1
212,0,1,11,6,8 5,3 4,10 9,7 2 1
213,2,1,11,6 1,8 5,3 4,10 9,7 2
214,2,0,11 2,6 1,8 5,3 4,10 9,7
215,1,0,11 2 1,6,8 5,3 4,10 9,7
216,2,1,11 2 1,6 7,8 5,3 4,10 9
217,0,2,11 2,,6 7,8 5,3 4,10 9 1
218,0,1,11,2,6 7,8 5,3 4,10 9 1
219,2,1,11,2 1,6 7,8 5,3 4,10 9
220,2,0,11 9,2 1,6 7,8 5,3 4,10
221,1,0,11 9 1,2,6 7,8 5,3 4,10
222,1,2,11 9 1,,6 7,8 5,3 4,10 2
223,0,2,11 9,,6 7,8 5,3 4,10 2 1
224,0,1,11,9,6 7,8 5,3 4,10 2 1
225,2,1,11,9 1,6 7,8 5,3 4,10 2
226,2,0,11 2,9 1,6 7,8 5,3 4,10
227,1,0,11 2 1,9,6 7,8 5,3 4,10
228,2,1,11 2 1,9 10,6 7,8 5,3 4
229,0,2,11 2,,9 10,6 7,8 5,3 4 1
230,0,1,11,2,9 10,6 7,8 5,3 4 1
231,2,1,11,2 1,9 10,6 7,8 5,3 4
232,0,2,11,,2 1,9 10,6 7,8 5,3 4
233,1,0,11 1,2,9 10,6 7,8 5,3 4
234,1,2,11 1,,9 10,6 7,8 5,3 4 2
235,0,2,11,,9 10,6 7,8 5,3 4 2 1
236,0,1,,11,9 10,6 7,8 5,3 4 2 1
237,2,1,,11 1,9 10,6 7,8 5,3 4 2
238,2,0,2,11 1,9 10,6 7,8 5,3 4
239,1,0,2 1,11,9 10,6 7,8 5,3 4
240,2,1,2 1,11 4,9 10,6 7,8 5,3
241,0,2,2,,11 4,9 10,6 7,8 5,3 1
242,0,1,,2,11 4,9 10,6 7,8 5,3 1
243,2,1,,2 1,11 4,9 10,6 7,8 5,3
244,2,0,3,2 1,11 4,9 10,6 7,8 5
245,1,0,3 1,2,11 4,9 10,6 7,8 5
246,1,2,3 1,,11 4,9 10,6 7,8 5 2
247,0,2,3,,11 4,9 10,6 7,8 5 2 1
248,0,1,,3,11 4,9 10,6 7,8 5 2 1
249,2,1,,3 1,11 4,9 10,6 7,8 5 2
250,2,0,2,3 1,11 4,9 10,6 7,8 5
251,1,0,2 1,3,11 4,9 10,6 7,8 5
252,2,1,2 1,3 5,11 4,9 10,6 7,8
253,0,2,2,,3 5,11 4,9 10,6 7,8 1
254,0,1,,2,3 5,11 4,9 10,6 7,8 1
255,2,1,,2 1,3 5,11 4,9 10,6 7,8
256,2,0,8,2 1,3 5,11 4,9 10,6 7
257,1,0,8 1,2,3 5,11 4,9 10,6 7
258,1,2,8 1,,3 5,11 4,9 10,6 7 2
259,0,2,8,,3 5,11 4,9 10,6 7 2 1
260,0,1,,8,3 5,11 4,9 10,6 7 2 1
261,2,1,,8 1,3 5,11 4,9 10,6 7 2
262,2,0,2,8 1,3 5,11 4,9 10,6 7
263,1,0,2 1,8,3 5,11 4,9 10,6 7
264,2,1,2 1,8 7,3 5,11 4,9 10,6
265,0,2,2,,8 7,3 5,11 4,9 10,6 1
266,0,1,,2,8 7,3 5,11 4,9 10,6 1
267,2,1,,2 1,8 7,3 5,11 4,9 10,6
268,2,0,6,2 1,8 7,3 5,11 4,9 10
269,1,0,6 1,2,8 7,3 5,11 4,9 10
270,1,2,6 1,,8 7,3 5,11 4,9 10 2
271,0,2,6,,8 7,3 5,11 4,9 10 2 1
272,0,1,,6,8 7,3 5,11 4,9 10 2 1
273,2,1,,6 1,8 7,3 5,11 4,9 10 2
274,2,0,2,6 1,8 7,3 5,11 4,9 10
275,1,0,2 1,6,8 7,3 5,11 4,9 10
276,2,1,2 1,6 10,8 7,3 5,11 4,9
277,0,2,2,,6 10,8 7,3 5,11 4,9 1
278,0,1,,2,6 10,8 7,3 5,11 4,9 1
279,2,1,,2 1,6 10,8 7,3 5,11 4,9
280,2,0,9,2 1,6 10,8 7,3 5,11 4
281,1,0,9 1,2,6 10,8 7,3 5,11 4
282,1,2,9 1,,6 10,8 7,3 5,11 4 2
283,0,2,9,,6 10,8 7,3 5,11 4 2 1
284,0,1,,9,6 10,8 7,3 5,11 4 2 1
285,2,1,,9 1,6 10,8 7,3 5,11 4 2
286,2,0,2,9 1,6 10,8 7,3 5,11 4
287,1,0,2 1,9,6 10,8 7,3 5,11 4
288,2,1,2 1,9 4,6 10,8 7,3 5,11
289,0,2,2,,9 4,6 10,8 7,3 5,11 1
290,0,1,,2,9 4,6 10,8 7,3 5,11 1
291,2,1,,2 1,9 4,6 10,8 7,3 5,11
292,2,0,11,2 1,9 4,6 10,8 7,3 5
293,1,0,11 1,2,9 4,6 10,8 7,3 5
294,1,2,11 1,,9 4,6 10,8 7,3 5 2
295,0,2,11,,9 4,6 10,8 7,3 5 2 1
296,0,1,,11,9 4,6 10,8 7,3 5 2 1
297,2,1,,11 1,9 4,6 10,8 7,3 5 2
298,2,0,2,11 1,9 4,6 10,8 7,3 5
299,1,0,2 1,11,9 4,6 10,8 7,3 5
300,2,1,2 1,11 5,9 4,6 10,8 7,3
301,0,2,2,,11 5,9 4,6 10,8 7,3 1
302,0,1,,2,11 5,9 4,6 10,8 7,3 1
303,2,1,,2 1,11 5,9 4,6 10,8 7,3
304,0,2,,,2 1,11 5,9 4,6 10,8 7,3
305,1,0,1,2,11 5,9 4,6 10,8 7,3
306,1,2,1,,11 5,9 4,6 10,8 7,3 2
307,0,2,,,11 5,9 4,6 10,8 7,3 2 1
308,0,1,1,,11 5,9 4,6 10,8 7,3 2
309,2,1,1,2,11 5,9 4,6 10,8 7,3
310,2,0,1,2 3,11 5,9 4,6 10,8 7
311,1,0,1 3,2,11 5,9 4,6 10,8 7
312,1,2,1 3,,11 5,9 4,6 10,8 7 2
313,0,2,1,,11 5,9 4,6 10,8 7 2 3
314,0,1,,1,11 5,9 4,6 10,8 7 2 3
315,2,1,,1 3,11 5,9 4,6 10,8 7 2
316,2,0,2,1 3,11 5,9 4,6 10,8 7
317,1,0,2 3,1,11 5,9 4,6 10,8 7
318,1,2,2 3,,11 5,9 4,6 10,8 7 1
319,0,2,2,,11 5,9 4,6 10,8 7 1 3
320,0,1,,2,11 5,9 4,6 10,8 7 1 3
321,2,1,,2 3,11 5,9 4,6 10,8 7 1
322,2,0,7,2 3,11 5,9 4,6 10,8 1
323,1,0,7 3,2,11 5,9 4,6 10,8 1
324,1,2,7 3,,11 5,9 4,6 10,8 1 2
325,0,2,7,,11 5,9 4,6 10,8 1 2 3
326,0,1,,7,11 5,9 4,6 10,8 1 2 3
327,2,1,,7 3,11 5,9 4,6 10,8 1 2
328,2,0,2,7 3,11 5,9 4,6 10,8 1
329,1,0,2 3,7,11 5,9 4,6 10,8 1
330,1,2,2 3,,11 5,9 4,6 10,8 1 7
331,0,2,2,,11 5,9 4,6 10,8 1 7 3
332,0,1,,2,11 5,9 4,6 10,8 1 7 3
333,2,1,,2 3,11 5,9 4,6 10,8 1 7
334,2,0,8,2 3,11 5,9 4,6 10,1 7
335,1,0,8 3,2,11 5,9 4,6 10,1 7
336,1,2,8 3,,11 5,9 4,6 10,1 7 2
337,0,2,8,,11 5,9 4,6 10,1 7 2 3
338,0,1,,8,11 5,9 4,6 10,1 7 2 3
339,2,1,,8 3,11 5,9 4,6 10,1 7 2
340,2,0,2,8 3,11 5,9 4,6 10,1 7
341,1,0,2 3,8,11 5,9 4,6 10,1 7
342,1,2,2 3,,11 5,9 4,6 10,1 7 8
343,0,2,2,,11 5,9 4,6 10,1 7 8 3
344,0,1,,2,11 5,9 4,6 10,1 7 8 3
345,2,1,,2 3,11 5,9 4,6 10,1 7 8
346,0,2,,,2 3,11 5,9 4,6 10,1 7 8
347,1,0,3,2,11 5,9 4,6 10,1 7 8
348,1,2,3,,11 5,9 4,6 10,1 7 8 2
349,0,2,,,11 5,9 4,6 10,1 7 8 2 3
350,0,1,3,,11 5,9 4,6 10,1 7 8 2
351,2,1,3,2,11 5,9 4,6 10,1 7 8
352,2,0,3,2 1,11 5,9 4,6 10,7 8
353,1,0,3 1,2,11 5,9 4,6 10,7 8
354,1,2,3 1,,11 5,9 4,6 10,7 8 2
355,0,2,3,,11 5,9 4,6 10,7 8 2 1
356,0,1,,3,11 5,9 4,6 10,7 8 2 1
357,2,1,,3 1,11 5,9 4,6 10,7 8 2
358,2,0,2,3 1,11 5,9 4,6 10,7 8
359,1,0,2 1,3,11 5,9 4,6 10,7 8
360,2,1,2 1,3 8,11 5,9 4,6 10,7
361,0,2,2,,3 8,11 5,9 4,6 10,7 1
362,0,1,,2,3 8,11 5,9 4,6 10,7 1
363,2,1,,2 1,3 8,11 5,9 4,6 10,7
364,2,0,7,2 1,3 8,11 5,9 4,6 10
365,1,0,7 1,2,3 8,11 5,9 4,6 10
366,1,2,7 1,,3 8,11 5,9 4,6 10 2
367,0,2,7,,3 8,11 5,9 4,6 10 2 1
368,0,1,,7,3 8,11 5,9 4,6 10 2 1
369,2,1,,7 1,3 8,11 5,9 4,6 10 2
370,2,0,2,7 1,3 8,11 5,9 4,6 10
371,1,0,2 1,7,3 8,11 5,9 4,6 10
372,2,1,2 1,7 10,3 8,11 5,9 4,6
373,0,2,2,,7 10,3 8,11 5,9 4,6 1
374,0,1,,2,7 10,3 8,11 5,9 4,6 1
375,2,1,,2 1,7 10,3 8,11 5,9 4,6
376,2,0,6,2 1,7 10,3 8,11 5,9 4
377,1,0,6 1,2,7 10,3 8,11 5,9 4
378,1,2,6 1,,7 10,3 8,11 5,9 4 2
379,0,2,6,,7 10,3 8,11 5,9 4 2 1
380,0,1,,6,7 10,3 8,11 5,9 4 2 1
381,2,1,,6 1,7 10,3 8,11 5,9 4 2
382,2,0,2,6 1,7 10,3 8,11 5,9 4
383,1,0,2 1,6,7 10,3 8,11 5,9 4
384,2,1,2 1,6 4,7 10,3 8,11 5,9
385,0,2,2,,6 4,7 10,3 8,11 5,9 1
386,0,1,,2,6 4,7 10,3 8,11 5,9 1
387,2,1,,2 1,6 4,7 10,3 8,11 5,9
388,2,0,9,2 1,6 4,7 10,3 8,11 5
389,1,0,9 1,2,6 4,7 10,3 8,11 5
390,1,2,9 1,,6 4,7 10,3 8,11 5 2
391,0,2,9,,6 4,7 10,3 8,11 5 2 1
392,0,1,,9,6 4,7 10,3 8,11 5 2 1
393,2,1,,9 1,6 4,7 10,3 8,11 5 2
394,2,0,2,9 1,6 4,7 10,3 8,11 5
395,1,0,2 1,9,6 4,7 10,3 8,11 5
396,2,1,2 1,9 5,6 4,7 10,3 8,11
397,0,2,2,,9 5,6 4,7 10,3 8,11 1
398,0,1,,2,9 5,6 4,7 10,3 8,11 1
399,2,1,,2 1,9 5,6 4,7 10,3 8,11
400,0,2,,,2 1,9 5,6 4,7 10,3 8,11
401,1,0,1,2,9 5,6 4,7 10,3 8,11
402,1,2,1,,9 5,6 4,7 10,3 8,11 2
403,0,2,,,9 5,6 4,7 10,3 8,11 2 1
404,0,1,1,,9 5,6 4,7 10,3 8,11 2
405,2,1,1,2,9 5,6 4,7 10,3 8,11
406,2,0,1,2 11,9 5,6 4,7 10,3 8
407,1,0,1 11,2,9 5,6 4,7 10,3 8
408,1,2,1 11,,9 5,6 4,7 10,3 8 2
409,0,2,1,,9 5,6 4,7 10,3 8 2 11
410,0,1,,1,9 5,6 4,7 10,3 8 2 11
411,2,1,,1 11,9 5,6 4,7 10,3 8 2
412,2,0,2,1 11,9 5,6 4,7 10,3 8
413,1,0,2 11,1,9 5,6 4,7 10,3 8
414,1,2,2 11,,9 5,6 4,7 10,3 8 1
415,0,2,2,,9 5,6 4,7 10,3 8 1 11
416,0,1,,2,9 5,6 4,7 10,3 8 1 11
417,2,1,,2 11,9 5,6 4,7 10,3 8 1
418,2,0,8,2 11,9 5,6 4,7 10,3 1
419,1,0,8 11,2,9 5,6 4,7 10,3 1
420,1,2,8 11,,9 5,6 4,7 10,3 1 2
421,0,2,8,,9 5,6 4,7 10,3 1 2 11
422,0,1,,8,9 5,6 4,7 10,3 1 2 11
423,2,1,,8 11,9 5,6 4,7 10,3 1 2
424,2,0,2,8 11,9 5,6 4,7 10,3 1
425,1,0,2 11,8,9 5,6 4,7 10,3 1
426,1,2,2 11,,9 5,6 4,7 10,3 1 8
427,0,2,2,,9 5,6 4,7 10,3 1 8 11
428,0,1,,2,9 5,6 4,7 10,3 1 8 11
429,2,1,,2 11,9 5,6 4,7 10,3 1 8
430,2,0,3,2 11,9 5,6 4,7 10,1 8
431,1,0,3 11,2,9 5,6 4,7 10,1 8
432,1,2,3 11,,9 5,6 4,7 10,1 8 2
433,0,2,3,,9 5,6 4,7 10,1 8 2 11
434,0,1,,3,9 5,6 4,7 10,1 8 2 11
435,2,1,,3 11,9 5,6 4,7 10,1 8 2
436,2,0,2,3 11,9 5,6 4,7 10,1 8
437,1,0,2 11,3,9 5,6 4,7 10,1 8
438,1,2,2 11,,9 5,6 4,7 10,1 8 3
439,0,2,2,,9 5,6 4,7 10,1 8 3 11
440,0,1,,2,9 5,6 4,7 10,1 8 3 11
441,2,1,,2 11,9 5,6 4,7 10,1 8 3
442,0,2,,,2 11,9 5,6 4,7 10,1 8 3
443,1,0,11,2,9 5,6 4,7 10,1 8 3
444,1,2,11,,9 5,6 4,7 10,1 8 3 2
445,0,2,,,9 5,6 4,7 10,1 8 3 2 11
446,0,1,11,,9 5,6 4,7 10,1 8 3 2
447,2,1,11,2,9 5,6 4,7 10,1 8 3
448,2,0,11,2 8,9 5,6 4,7 10,1 3
449,1,0,11 8,2,9 5,6 4,7 10,1 3
450,1,2,11 8,,9 5,6 4,7 10,1 3 2
451,0,2,11,,9 5,6 4,7 10,1 3 2 8
452,0,1,,11,9 5,6 4,7 10,1 3 2 8
453,2,1,,11 8,9 5,6 4,7 10,1 3 2
454,2,0,2,11 8,9 5,6 4,7 10,1 3
455,1,0,2 8,11,9 5,6 4,7 10,1 3
456,2,1,2 8,11 3,9 5,6 4,7 10,1
457,0,2,2,,11 3,9 5,6 4,7 10,1 8
458,0,1,,2,11 3,9 5,6 4,7 10,1 8
459,2,1,,2 8,11 3,9 5,6 4,7 10,1
460,2,0,1,2 8,11 3,9 5,6 4,7 10
461,1,0,1 8,2,11 3,9 5,6 4,7 10
462,1,2,1 8,,11 3,9 5,6 4,7 10 2
463,0,2,1,,11 3,9 5,6 4,7 10 2 8
464,0,1,,1,11 3,9 5,6 4,7 10 2 8
465,2,1,,1 8,11 3,9 5,6 4,7 10 2
466,2,0,2,1 8,11 3,9 5,6 4,7 10
467,1,0,2 8,1,11 3,9 5,6 4,7 10
468,2,1,2 8,1 10,11 3,9 5,6 4,7
469,0,2,2,,1 10,11 3,9 5,6 4,7 8
470,0,1,,2,1 10,11 3,9 5,6 4,7 8
471,2,1,,2 8,1 10,11 3,9 5,6 4,7
472,2,0,7,2 8,1 10,11 3,9 5,6 4
473,1,0,7 8,2,1 10,11 3,9 5,6 4
474,1,2,7 8,,1 10,11 3,9 5,6 4 2
475,0,2,7,,1 10,11 3,9 5,6 4 2 8
476,0,1,,7,1 10,11 3,9 5,6 4 2 8
477,2,1,,7 8,1 10,11 3,9 5,6 4 2
478,2,0,2,7 8,1 10,11 3,9 5,6 4
479,1,0,2 8,7,1 10,11 3,9 5,6 4
480,2,1,2 8,7 4,1 10,11 3,9 5,6
481,0,2,2,,7 4,1 10,11 3,9 5,6 8
482,0,1,,2,7 4,1 10,11 3,9 5,6 8
483,2,1,,2 8,7 4,1 10,11 3,9 5,6
484,2,0,6,2 8,7 4,1 10,11 3,9 5
485,1,0,6 8,2,7 4,1 10,11 3,9 5
486,1,2,6 8,,7 4,1 10,11 3,9 5 2
487,0,2,6,,7 4,1 10,11 3,9 5 2 8
488,0,1,,6,7 4,1 10,11 3,9 5 2 8
489,2,1,,6 8,7 4,1 10,11 3,9 5 2
490,2,0,2,6 8,7 4,1 10,11 3,9 5
491,1,0,2 8,6,7 4,1 10,11 3,9 5
492,2,1,2 8,6 5,7 4,1 10,11 3,9
493,0,2,2,,6 5,7 4,1 10,11 3,9 8
494,0,1,,2,6 5,7 4,1 10,11 3,9 8
495,2,1,,2 8,6 5,7 4,1 10,11 3,9
496,0,2,,,2 8,6 5,7 4,1 10,11 3,9
497,1,0,8,2,6 5,7 4,1 10,11 3,9
498,1,2,8,,6 5,7 4,1 10,11 3,9 2
499,0,2,,,6 5,7 4,1 10,11 3,9 2 8
500,0,1,8,,6 5,7 4,1 10,11 3,9 2
501,2,1,8,2,6 5,7 4,1 10,11 3,9
502,2,0,8,2 9,6 5,7 4,1 10,11 3
503,1,0,8 9,2,6 5,7 4,1 10,11 3
504,1,2,8 9,,6 5,7 4,1 10,11 3 2
505,0,2,8,,6 5,7 4,1 10,11 3 2 9
506,0,1,,8,6 5,7 4,1 10,11 3 2 9
507,2,1,,8 9,6 5,7 4,1 10,11 3 2
508,2,0,2,8 9,6 5,7 4,1 10,11 3
509,1,0,2 9,8,6 5,7 4,1 10,11 3
510,2,1,2 9,8 3,6 5,7 4,1 10,11
511,0,2,2,,8 3,6 5,7 4,1 10,11 9
512,0,1,,2,8 3,6 5,7 4,1 10,11 9
513,2,1,,2 9,8 3,6 5,7 4,1 10,11
514,2,0,11,2 9,8 3,6 5,7 4,1 10
515,1,0,11 9,2,8 3,6 5,7 4,1 10
516,1,2,11 9,,8 3,6 5,7 4,1 10 2
517,0,2,11,,8 3,6 5,7 4,1 10 2 9
518,0,1,,11,8 3,6 5,7 4,1 10 2 9
519,2,1,,11 9,8 3,6 5,7 4,1 10 2
520,2,0,2,11 9,8 3,6 5,7 4,1 10
521,1,0,2 9,11,8 3,6 5,7 4,1 10
522,2,1,2 9,11 10,8 3,6 5,7 4,1
523,0,2,2,,11 10,8 3,6 5,7 4,1 9
524,0,1,,2,11 10,8 3,6 5,7 4,1 9
525,2,1,,2 9,11 10,8 3,6 5,7 4,1
526,2,0,1,2 9,11 10,8 3,6 5,7 4
527,1,0,1 9,2,11 10,8 3,6 5,7 4
528,1,2,1 9,,11 10,8 3,6 5,7 4 2
529,0,2,1,,11 10,8 3,6 5,7 4 2 9
530,0,1,,1,11 10,8 3,6 5,7 4 2 9
531,2,1,,1 9,11 10,8 3,6 5,7 4 2
532,2,0,2,1 9,11 10,8 3,6 5,7 4
533,1,0,2 9,1,11 10,8 3,6 5,7 4
534,2,1,2 9,1 4,11 10,8 3,6 5,7
535,0,2,2,,1 4,11 10,8 3,6 5,7 9
536,0,1,,2,1 4,11 10,8 3,6 5,7 9
537,2,1,,2 9,1 4,11 10,8 3,6 5,7
538,2,0,7,2 9,1 4,11 10,8 3,6 5
539,1,0,7 9,2,1 4,11 10,8 3,6 5
540,1,2,7 9,,1 4,11 10,8 3,6 5 2
541,0,2,7,,1 4,11 10,8 3,6 5 2 9
542,0,1,,7,1 4,11 10,8 3,6 5 2 9
543,2,1,,7 9,1 4,11 10,8 3,6 5 2
544,2,0,2,7 9,1 4,11 10,8 3,6 5
545,1,0,2 9,7,1 4,11 10,8 3,6 5
546,2,1,2 9,7 5,1 4,11 10,8 3,6
547,0,2,2,,7 5,1 4,11 10,8 3,6 9
548,0,1,,2,7 5,1 4,11 10,8 3,6 9
549,2,1,,2 9,7 5,1 4,11 10,8 3,6
550,2,0,6,2 9,7 5,1 4,11 10,8 3
551,1,0,6 9,2,7 5,1 4,11 10,8 3
552,1,2,6 9,,7 5,1 4,11 10,8 3 2
553,0,2,6,,7 5,1 4,11 10,8 3 2 9
554,0,1,,6,7 5,1 4,11 10,8 3 2 9
555,2,1,,6 9,7 5,1 4,11 10,8 3 2
556,2,0,2,6 9,7 5,1 4,11 10,8 3
557,1,0,2 9,6,7 5,1 4,11 10,8 3
558,2,1,2 9,6 3,7 5,1 4,11 10,8
559,0,2,2,,6 3,7 5,1 4,11 10,8 9
560,0,1,,2,6 3,7 5,1 4,11 10,8 9
561,2,1,,2 9,6 3,7 5,1 4,11 10,8
562,0,2,,,2 9,6 3,7 5,1 4,11 10,8
563,1,0,9,2,6 3,7 5,1 4,11 10,8
564,1,2,9,,6 3,7 5,1 4,11 10,8 2
565,0,2,,,6 3,7 5,1 4,11 10,8 2 9
566,0,1,9,,6 3,7 5,1 4,11 10,8 2
567,2,1,9,2,6 3,7 5,1 4,11 10,8
568,2,0,9,2 8,6 3,7 5,1 4,11 10
569,1,0,9 8,2,6 3,7 5,1 4,11 10
570,1,2,9 8,,6 3,7 5,1 4,11 10 2
571,0,2,9,,6 3,7 5,1 4,11 10 2 8
572,0,1,,9,6 3,7 5,1 4,11 10 2 8
573,2,1,,9 8,6 3,7 5,1 4,11 10 2
574,2,0,2,9 8,6 3,7 5,1 4,11 10
575,1,0,2 8,9,6 3,7 5,1 4,11 10
576,2,1,2 8,9 10,6 3,7 5,1 4,11
577,0,2,2,,9 10,6 3,7 5,1 4,11 8
578,0,1,,2,9 10,6 3,7 5,1 4,11 8
579,2,1,,2 8,9 10,6 3,7 5,1 4,11
580,2,0,11,2 8,9 10,6 3,7 5,1 4
581,1,0,11 8,2,9 10,6 3,7 5,1 4
582,1,2,11 8,,9 10,6 3,7 5,1 4 2
583,0,2,11,,9 10,6 3,7 5,1 4 2 8
584,0,1,,11,9 10,6 3,7 5,1 4 2 8
585,2,1,,11 8,9 10,6 3,7 5,1 4 2
586,2,0,2,11 8,9 10,6 3,7 5,1 4
587,1,0,2 8,11,9 10,6 3,7 5,1 4
588,2,1,2 8,11 4,9 10,6 3,7 5,1
589,0,2,2,,11 4,9 10,6 3,7 5,1 8
590,0,1,,2,11 4,9 10,6 3,7 5,1 8
591,2,1,,2 8,11 4,9 10,6 3,7 5,1
592,2,0,1,2 8,11 4,9 10,6 3,7 5
593,1,0,1 8,2,11 4,9 10,6 3,7 5
594,1,2,1 8,,11 4,9 10,6 3,7 5 2
595,0,2,1,,11 4,9 10,6 3,7 5 2 8
596,0,1,,1,11 4,9 10,6 3,7 5 2 8
597,2,1,,1 8,11 4,9 10,6 3,7 5 2
598,2,0,2,1 8,11 4,9 10,6 3,7 5
599,1,0,2 8,1,11 4,9 10,6 3,7 5
600,2,1,2 8,1 5,11 4,9 10,6 3,7
601,0,2,2,,1 5,11 4,9 10,6 3,7 8
602,0,1,,2,1 5,11 4,9 10,6 3,7 8
603,2,1,,2 8,1 5,11 4,9 10,6 3,7
604,0,2,,,2 8,1 5,11 4,9 10,6 3,7
605,1,0,8,2,1 5,11 4,9 10,6 3,7
606,1,2,8,,1 5,11 4,9 10,6 3,7 2
607,0,2,,,1 5,11 4,9 10,6 3,7 2 8
608,0,1,8,,1 5,11 4,9 10,6 3,7 2
609,2,1,8,2,1 5,11 4,9 10,6 3,7
610,2,0,8,2 7,1 5,11 4,9 10,6 3
611,1,0,8 7,2,1 5,11 4,9 10,6 3
612,1,2,8 7,,1 5,11 4,9 10,6 3 2
613,0,2,8,,1 5,11 4,9 10,6 3 2 7
614,0,1,,8,1 5,11 4,9 10,6 3 2 7
615,2,1,,8 7,1 5,11 4,9 10,6 3 2
616,2,0,2,8 7,1 5,11 4,9 10,6 3
617,1,0,2 7,8,1 5,11 4,9 10,6 3
618,2,1,2 7,8 3,1 5,11 4,9 10,6
619,0,2,2,,8 3,1 5,11 4,9 10,6 7
620,0,1,,2,8 3,1 5,11 4,9 10,6 7
621,2,1,,2 7,8 3,1 5,11 4,9 10,6
622,2,0,6,2 7,8 3,1 5,11 4,9 10
623,1,0,6 7,2,8 3,1 5,11 4,9 10
624,1,2,6 7,,8 3,1 5,11 4,9 10 2
625,0,2,6,,8 3,1 5,11 4,9 10 2 7
626,0,1,,6,8 3,1 5,11 4,9 10 2 7
627,2,1,,6 7,8 3,1 5,11 4,9 10 2
628,2,0,2,6 7,8 3,1 5,11 4,9 10
629,1,0,2 7,6,8 3,1 5,11 4,9 10
630,2,1,2 7,6 10,8 3,1 5,11 4,9
631,0,2,2,,6 10,8 3,1 5,11 4,9 7
632,0,1,,2,6 10,8 3,1 5,11 4,9 7
633,2,1,,2 7,6 10,8 3,1 5,11 4,9
634,2,0,9,2 7,6 10,8 3,1 5,11 4
635,1,0,9 7,2,6 10,8 3,1 5,11 4
636,1,2,9 7,,6 10,8 3,1 5,11 4 2
637,0,2,9,,6 10,8 3,1 5,11 4 2 7
638,0,1,,9,6 10,8 3,1 5,11 4 2 7
639,2,1,,9 7,6 10,8 3,1 5,11 4 2
640,2,0,2,9 7,6 10,8 3,1 5,11 4
641,1,0,2 7,9,6 10,8 3,1 5,11 4
642,2,1,2 7,9 4,6 10,8 3,1 5,11
643,0,2,2,,9 4,6 10,8 3,1 5,11 7
644,0,1,,2,9 4,6 10,8 3,1 5,11 7
645,2,1,,2 7,9 4,6 10,8 3,1 5,11
646,2,0,11,2 7,9 4,6 10,8 3,1 5
647,1,0,11 7,2,9 4,6 10,8 3,1 5
648,1,2,11 7,,9 4,6 10,8 3,1 5 2
649,0,2,11,,9 4,6 10,8 3,1 5 2 7
650,0,1,,11,9 4,6 10,8 3,1 5 2 7
651,2,1,,11 7,9 4,6 10,8 3,1 5 2
652,2,0,2,11 7,9 4,6 10,8 3,1 5
653,1,0,2 7,11,9 4,6 10,8 3,1 5
654,2,1,2 7,11 5,9 4,6 10,8 3,1
655,0,2,2,,11 5,9 4,6 10,8 3,1 7
656,0,1,,2,11 5,9 4,6 10,8 3,1 7
657,2,1,,2 7,11 5,9 4,6 10,8 3,1
658,0,2,,,2 7,11 5,9 4,6 10,8 3,1
659,1,0,7,2,11 5,9 4,6 10,8 3,1
660,1,2,7,,11 5,9 4,6 10,8 3,1 2
661,0,2,,,11 5,9 4,6 10,8 3,1 2 7
662,0,1,7,,11 5,9 4,6 10,8 3,1 2
663,2,1,7,2,11 5,9 4,6 10,8 3,1
664,2,0,7,2 1,11 5,9 4,6 10,8 3
665,1,0,7 1,2,11 5,9 4,6 10,8 3
666,1,2,7 1,,11 5,9 4,6 10,8 3 2
667,0,2,7,,11 5,9 4,6 10,8 3 2 1
668,0,1,,7,11 5,9 4,6 10,8 3 2 1
669,2,1,,7 1,11 5,9 4,6 10,8 3 2
670,2,0,2,7 1,11 5,9 4,6 10,8 3
671,1,0,2 1,7,11 5,9 4,6 10,8 3
672,2,1,2 1,7 3,11 5,9 4,6 10,8
673,0,2,2,,7 3,11 5,9 4,6 10,8 1
674,0,1,,2,7 3,11 5,9 4,6 10,8 1
675,2,1,,2 1,7 3,11 5,9 4,6 10,8
676,2,0,8,2 1,7 3,11 5,9 4,6 10
677,1,0,8 1,2,7 3,11 5,9 4,6 10
678,1,2,8 1,,7 3,11 5,9 4,6 10 2
679,0,2,8,,7 3,11 5,9 4,6 10 2 1
680,0,1,,8,7 3,11 5,9 4,6 10 2 1
681,2,1,,8 1,7 3,11 5,9 4,6 10 2
682,2,0,2,8 1,7 3,11 5,9 4,6 10
683,1,0,2 1,8,7 3,11 5,9 4,6 10
684,2,1,2 1,8 10,7 3,11 5,9 4,6
685,0,2,2,,8 10,7 3,11 5,9 4,6 1
686,0,1,,2,8 10,7 3,11 5,9 4,6 1
687,2,1,,2 1,8 10,7 3,11 5,9 4,6
688,2,0,6,2 1,8 10,7 3,11 5,9 4
689,1,0,6 1,2,8 10,7 3,11 5,9 4
690,1,2,6 1,,8 10,7 3,11 5,9 4 2
691,0,2,6,,8 10,7 3,11 5,9 4 2 1
692,0,1,,6,8 10,7 3,11 5,9 4 2 1
693,2,1,,6 1,8 10,7 3,11 5,9 4 2
694,2,0,2,6 1,8 10,7 3,11 5,9 4
695,1,0,2 1,6,8 10,7 3,11 5,9 4
696,2,1,2 1,6 4,8 10,7 3,11 5,9
697,0,2,2,,6 4,8 10,7 3,11 5,9 1
698,0,1,,2,6 4,8 10,7 3,11 5,9 1
699,2,1,,2 1,6 4,8 10,7 3,11 5,9
700,0,2,,,2 1,6 4,8 10,7 3,11 5,9
701,1,0,1,2,6 4,8 10,7 3,11 5,9
702,1,2,1,,6 4,8 10,7 3,11 5,9 2
703,0,2,,,6 4,8 10,7 3,11 5,9 2 1
704,0,1,1,,6 4,8 10,7 3,11 5,9 2
705,2,1,1,2,6 4,8 10,7 3,11 5,9
706,2,0,1,2 9,6 4,8 10,7 3,11 5
707,1,0,1 9,2,6 4,8 10,7 3,11 5
708,1,2,1 9,,6 4,8 10,7 3,11 5 2
709,0,2,1,,6 4,8 10,7 3,11 5 2 9
710,0,1,,1,6 4,8 10,7 3,11 5 2 9
711,2,1,,1 9,6 4,8 10,7 3,11 5 2
712,2,0,2,1 9,6 4,8 10,7 3,11 5
713,1,0,2 9,1,6 4,8 10,7 3,11 5
714,2,1,2 9,1 5,6 4,8 10,7 3,11
715,0,2,2,,1 5,6 4,8 10,7 3,11 9
716,0,1,,2,1 5,6 4,8 10,7 3,11 9
717,2,1,,2 9,1 5,6 4,8 10,7 3,11
718,2,0,11,2 9,1 5,6 4,8 10,7 3
719,1,0,11 9,2,1 5,6 4,8 10,7 3
720,1,2,11 9,,1 5,6 4,8 10,7 3 2
721,0,2,11,,1 5,6 4,8 10,7 3 2 9
722,0,1,,11,1 5,6 4,8 10,7 3 2 9
723,2,1,,11 9,1 5,6 4,8 10,7 3 2
724,2,0,2,11 9,1 5,6 4,8 10,7 3
725,1,0,2 9,11,1 5,6 4,8 10,7 3
726,2,1,2 9,11 3,1 5,6 4,8 10,7
727,0,2,2,,11 3,1 5,6 4,8 10,7 9
728,0,1,,2,11 3,1 5,6 4,8 10,7 9
729,2,1,,2 9,11 3,1 5,6 4,8 10,7
730,2,0,7,2 9,11 3,1 5,6 4,8 10
731,1,0,7 9,2,11 3,1 5,6 4,8 10
732,1,2,7 9,,11 3,1 5,6 4,8 10 2
733,0,2,7,,11 3,1 5,6 4,8 10 2 9
734,0,1,,7,11 3,1 5,6 4,8 10 2 9
735,2,1,,7 9,11 3,1 5,6 4,8 10 2
736,2,0,2,7 9,11 3,1 5,6 4,8 10
737,1,0,2 9,7,11 3,1 5,6 4,8 10
738,2,1,2 9,7 10,11 3,1 5,6 4,8
739,0,2,2,,7 10,11 3,1 5,6 4,8 9
740,0,1,,2,7 10,11 3,1 5,6 4,8 9
741,2,1,,2 9,7 10,11 3,1 5,6 4,8
742,2,0,8,2 9,7 10,11 3,1 5,6 4
743,1,0,8 9,2,7 10,11 3,1 5,6 4
744,1,2,8 9,,7 10,11 3,1 5,6 4 2
745,0,2,8,,7 10,11 3,1 5,6 4 2 9
746,0,1,,8,7 10,11 3,1 5,6 4 2 9
747,2,1,,8 9,7 10,11 3,1 5,6 4 2
748,2,0,2,8 9,7 10,11 3,1 5,6 4
749,1,0,2 9,8,7 10,11 3,1 5,6 4
750,2,1,2 9,8 4,7 10,11 3,1 5,6
751,0,2,2,,8 4,7 10,11 3,1 5,6 9
752,0,1,,2,8 4,7 10,11 3,1 5,6 9
753,2,1,,2 9,8 4,7 10,11 3,1 5,6
754,0,2,,,2 9,8 4,7 10,11 3,1 5,6
755,1,0,9,2,8 4,7 10,11 3,1 5,6
756,1,2,9,,8 4,7 10,11 3,1 5,6 2
757,0,2,,,8 4,7 10,11 3,1 5,6 2 9
758,0,1,9,,8 4,7 10,11 3,1 5,6 2
759,2,1,9,2,8 4,7 10,11 3,1 5,6
760,2,0,9,2 6,8 4,7 10,11 3,1 5
761,1,0,9 6,2,8 4,7 10,11 3,1 5
762,1,2,9 6,,8 4,7 10,11 3,1 5 2
763,0,2,9,,8 4,7 10,11 3,1 5 2 6
764,0,1,,9,8 4,7 10,11 3,1 5 2 6
765,2,1,,9 6,8 4,7 10,11 3,1 5 2
766,2,0,2,9 6,8 4,7 10,11 3,1 5
767,1,0,2 6,9,8 4,7 10,11 3,1 5
768,2,1,2 6,9 5,8 4,7 10,11 3,1
769,0,2,2,,9 5,8 4,7 10,11 3,1 6
770,0,1,,2,9 5,8 4,7 10,11 3,1 6
771,2,1,,2 6,9 5,8 4,7 10,11 3,1
772,2,0,1,2 6,9 5,8 4,7 10,11 3
773,1,0,1 6,2,9 5,8 4,7 10,11 3
774,1,2,1 6,,9 5,8 4,7 10,11 3 2
775,0,2,1,,9 5,8 4,7 10,11 3 2 6
776,0,1,,1,9 5,8 4,7 10,11 3 2 6
777,2,1,,1 6,9 5,8 4,7 10,11 3 2
778,2,0,2,1 6,9 5,8 4,7 10,11 3
779,1,0,2 6,1,9 5,8 4,7 10,11 3
780,2,1,2 6,1 3,9 5,8 4,7 10,11
781,0,2,2,,1 3,9 5,8 4,7 10,11 6
782,0,1,,2,1 3,9 5,8 4,7 10,11 6
783,2,1,,2 6,1 3,9 5,8 4,7 10,11
784,2,0,11,2 6,1 3,9 5,8 4,7 10
785,1,0,11 6,2,1 3,9 5,8 4,7 10
786,1,2,11 6,,1 3,9 5,8 4,7 10 2
787,0,2,11,,1 3,9 5,8 4,7 10 2 6
788,0,1,,11,1 3,9 5,8 4,7 10 2 6
789,2,1,,11 6,1 3,9 5,8 4,7 10 2
790,2,0,2,11 6,1 3,9 5,8 4,7 10
791,1,0,2 6,11,1 3,9 5,8 4,7 10
792,2,1,2 6,11 10,1 3,9 5,8 4,7
793,0,2,2,,11 10,1 3,9 5,8 4,7 6
794,0,1,,2,11 10,1 3,9 5,8 4,7 6
795,2,1,,2 6,11 10,1 3,9 5,8 4,7
796,2,0,7,2 6,11 10,1 3,9 5,8 4
797,1,0,7 6,2,11 10,1 3,9 5,8 4
798,1,2,7 6,,11 10,1 3,9 5,8 4 2
799,0,2,7,,11 10,1 3,9 5,8 4 2 6
800,0,1,,7,11 10,1 3,9 5,8 4 2 6
801,2,1,,7 6,11 10,1 3,9 5,8 4 2
802,2,0,2,7 6,11 10,1 3,9 5,8 4
803,1,0,2 6,7,11 10,1 3,9 5,8 4
804,2,1,2 6,7 4,11 10,1 3,9 5,8
805,0,2,2,,7 4,11 10,1 3,9 5,8 6
806,0,1,,2,7 4,11 10,1 3,9 5,8 6
807,2,1,,2 6,7 4,11 10,1 3,9 5,8
808,0,2,,,2 6,7 4,11 10,1 3,9 5,8
809,1,0,6,2,7 4,11 10,1 3,9 5,8
810,1,2,6,,7 4,11 10,1 3,9 5,8 2
811,0,2,,,7 4,11 10,1 3,9 5,8 2 6
812,0,1,6,,7 4,11 10,1 3,9 5,8 2
813,2,1,6,2,7 4,11 10,1 3,9 5,8
814,2,0,6,2 8,7 4,11 10,1 3,9 5
815,1,0,6 8,2,7 4,11 10,1 3,9 5
816,1,2,6 8,,7 4,11 10,1 3,9 5 2
817,0,2,6,,7 4,11 10,1 3,9 5 2 8
818,0,1,,6,7 4,11 10,1 3,9 5 2 8
819,2,1,,6 8,7 4,11 10,1 3,9 5 2
820,2,0,2,6 8,7 4,11 10,1 3,9 5
821,1,0,2 8,6,7 4,11 10,1 3,9 5
822,2,1,2 8,6 5,7 4,11 10,1 3,9
823,0,2,2,,6 5,7 4,11 10,1 3,9 8
824,0,1,,2,6 5,7 4,11 10,1 3,9 8
825,2,1,,2 8,6 5,7 4,11 10,1 3,9
826,2,0,9,2 8,6 5,7 4,11 10,1 3
827,1,0,9 8,2,6 5,7 4,11 10,1 3
828,1,2,9 8,,6 5,7 4,11 10,1 3 2
829,0,2,9,,6 5,7 4,11 10,1 3 2 8
830,0,1,,9,6 5,7 4,11 10,1 3 2 8
831,2,1,,9 8,6 5,7 4,11 10,1 3 2
832,2,0,2,9 8,6 5,7 4,11 10,1 3
833,1,0,2 8,9,6 5,7 4,11 10,1 3
834,2,1,2 8,9 3,6 5,7 4,11 10,1
835,0,2,2,,9 3,6 5,7 4,11 10,1 8
836,0,1,,2,9 3,6 5,7 4,11 10,1 8
837,2,1,,2 8,9 3,6 5,7 4,11 10,1
838,2,0,1,2 8,9 3,6 5,7 4,11 10
839,1,0,1 8,2,9 3,6 5,7 4,11 10
840,1,2,1 8,,9 3,6 5,7 4,11 10 2
841,0,2,1,,9 3,6 5,7 4,11 10 2 8
842,0,1,,1,9 3,6 5,7 4,11 10 2 8
843,2,1,,1 8,9 3,6 5,7 4,11 10 2
844,2,0,2,1 8,9 3,6 5,7 4,11 10
845,1,0,2 8,1,9 3,6 5,7 4,11 10
846,2,1,2 8,1 10,9 3,6 5,7 4,11
847,0,2,2,,1 10,9 3,6 5,7 4,11 8
848,0,1,,2,1 10,9 3,6 5,7 4,11 8
849,2,1,,2 8,1 10,9 3,6 5,7 4,11
850,0,2,,,2 8,1 10,9 3,6 5,7 4,11
851,1,0,8,2,1 10,9 3,6 5,7 4,11
852,1,2,8,,1 10,9 3,6 5,7 4,11 2
853,0,2,,,1 10,9 3,6 5,7 4,11 2 8
854,0,1,8,,1 10,9 3,6 5,7 4,11 2
855,2,1,8,2,1 10,9 3,6 5,7 4,11
856,2,0,8,2 11,1 10,9 3,6 5,7 4
857,1,0,8 11,2,1 10,9 3,6 5,7 4
858,1,2,8 11,,1 10,9 3,6 5,7 4 2
859,0,2,8,,1 10,9 3,6 5,7 4 2 11
860,0,1,,8,1 10,9 3,6 5,7 4 2 11
861,2,1,,8 11,1 10,9 3,6 5,7 4 2
862,2,0,2,8 11,1 10,9 3,6 5,7 4
863,1,0,2 11,8,1 10,9 3,6 5,7 4
864,2,1,2 11,8 4,1 10,9 3,6 5,7
865,0,2,2,,8 4,1 10,9 3,6 5,7 11
866,0,1,,2,8 4,1 10,9 3,6 5,7 11
867,2,1,,2 11,8 4,1 10,9 3,6 5,7
868,2,0,7,2 11,8 4,1 10,9 3,6 5
869,1,0,7 11,2,8 4,1 10,9 3,6 5
870,1,2,7 11,,8 4,1 10,9 3,6 5 2
871,0,2,7,,8 4,1 10,9 3,6 5 2 11
872,0,1,,7,8 4,1 10,9 3,6 5 2 11
873,2,1,,7 11,8 4,1 10,9 3,6 5 2
874,2,0,2,7 11,8 4,1 10,9 3,6 5
875,1,0,2 11,7,8 4,1 10,9 3,6 5
876,2,1,2 11,7 5,8 4,1 10,9 3,6
877,0,2,2,,7 5,8 4,1 10,9 3,6 11
878,0,1,,2,7 5,8 4,1 10,9 3,6 11
879,2,1,,2 11,7 5,8 4,1 10,9 3,6
880,2,0,6,2 11,7 5,8 4,1 10,9 3
881,1,0,6 11,2,7 5,8 4,1 10,9 3
882,1,2,6 11,,7 5,8 4,1 10,9 3 2
883,0,2,6,,7 5,8 4,1 10,9 3 2 11
884,0,1,,6,7 5,8 4,1 10,9 3 2 11
885,2,1,,6 11,7 5,8 4,1 10,9 3 2
886,2,0,2,6 11,7 5,8 4,1 10,9 3
887,1,0,2 11,6,7 5,8 4,1 10,9 3
888,2,1,2 11,6 3,7 5,8 4,1 10,9
889,0,2,2,,6 3,7 5,8 4,1 10,9 11
890,0,1,,2,6 3,7 5,8 4,1 10,9 11
891,2,1,,2 11,6 3,7 5,8 4,1 10,9
892,0,2,,,2 11,6 3,7 5,8 4,1 10,9
893,1,0,11,2,6 3,7 5,8 4,1 10,9
894,1,2,11,,6 3,7 5,8 4,1 10,9 2
895,0,2,,,6 3,7 5,8 4,1 10,9 2 11
896,0,1,11,,6 3,7 5,8 4,1 10,9 2
897,2,1,11,2,6 3,7 5,8 4,1 10,9
898,2,0,11,2 9,6 3,7 5,8 4,1 10
899,1,0,11 9,2,6 3,7 5,8 4,1 10
900,1,2,11 9,,6 3,7 5,8 4,1 10 2
901,0,2,11,,6 3,7 5,8 4,1 10 2 9
902,0,1,,11,6 3,7 5,8 4,1 10 2 9
903,2,1,,11 9,6 3,7 5,8 4,1 10 2
904,2,0,2,11 9,6 3,7 5,8 4,1 10
905,1,0,2 9,11,6 3,7 5,8 4,1 10
906,2,1,2 9,11 10,6 3,7 5,8 4,1
907,0,2,2,,11 10,6 3,7 5,8 4,1 9
908,0,1,,2,11 10,6 3,7 5,8 4,1 9
909,2,1,,2 9,11 10,6 3,7 5,8 4,1
910,2,0,1,2 9,11 10,6 3,7 5,8 4
911,1,0,1 9,2,11 10,6 3,7 5,8 4
912,1,2,1 9,,11 10,6 3,7 5,8 4 2
913,0,2,1,,11 10,6 3,7 5,8 4 2 9
914,0,1,,1,11 10,6 3,7 5,8 4 2 9
915,2,1,,1 9,11 10,6 3,7 5,8 4 2
916,2,0,2,1 9,11 10,6 3,7 5,8 4
917,1,0,2 9,1,11 10,6 3,7 5,8 4
918,2,1,2 9,1 4,11 10,6 3,7 5,8
919,0,2,2,,1 4,11 10,6 3,7 5,8 9
920,0,1,,2,1 4,11 10,6 3,7 5,8 9
921,2,1,,2 9,1 4,11 10,6 3,7 5,8
922,0,2,,,2 9,1 4,11 10,6 3,7 5,8
923,1,0,9,2,1 4,11 10,6 3,7 5,8
924,1,2,9,,1 4,11 10,6 3,7 5,8 2
925,0,2,,,1 4,11 10,6 3,7 5,8 2 9
926,0,1,9,,1 4,11 10,6 3,7 5,8 2
927,2,1,9,2,1 4,11 10,6 3,7 5,8
928,2,0,9,2 8,1 4,11 10,6 3,7 5
929,1,0,9 8,2,1 4,11 10,6 3,7 5
930,1,2,9 8,,1 4,11 10,6 3,7 5 2
931,0,2,9,,1 4,11 10,6 3,7 5 2 8
932,0,1,,9,1 4,11 10,6 3,7 5 2 8
933,2,1,,9 8,1 4,11 10,6 3,7 5 2
934,2,0,2,9 8,1 4,11 10,6 3,7 5
935,1,0,2 8,9,1 4,11 10,6 3,7 5
936,2,1,2 8,9 5,1 4,11 10,6 3,7
937,0,2,2,,9 5,1 4,11 10,6 3,7 8
938,0,1,,2,9 5,1 4,11 10,6 3,7 8
939,2,1,,2 8,9 5,1 4,11 10,6 3,7
940,2,0,7,2 8,9 5,1 4,11 10,6 3
941,1,0,7 8,2,9 5,1 4,11 10,6 3
942,1,2,7 8,,9 5,1 4,11 10,6 3 2
943,0,2,7,,9 5,1 4,11 10,6 3 2 8
944,0,1,,7,9 5,1 4,11 10,6 3 2 8
945,2,1,,7 8,9 5,1 4,11 10,6 3 2
946,2,0,2,7 8,9 5,1 4,11 10,6 3
947,1,0,2 8,7,9 5,1 4,11 10,6 3
948,2,1,2 8,7 3,9 5,1 4,11 10,6
949,0,2,2,,7 3,9 5,1 4,11 10,6 8
950,0,1,,2,7 3,9 5,1 4,11 10,6 8
951,2,1,,2 8,7 3,9 5,1 4,11 10,6
952,2,0,6,2 8,7 3,9 5,1 4,11 10
953,1,0,6 8,2,7 3,9 5,1 4,11 10
954,1,2,6 8,,7 3,9 5,1 4,11 10 2
955,0,2,6,,7 3,9 5,1 4,11 10 2 8
956,0,1,,6,7 3,9 5,1 4,11 10 2 8
957,2,1,,6 8,7 3,9 5,1 4,11 10 2
958,2,0,2,6 8,7 3,9 5,1 4,11 10
959,1,0,2 8,6,7 3,9 5,1 4,11 10
960,2,1,2 8,6 10,7 3,9 5,1 4,11
961,0,2,2,,6 10,7 3,9 5,1 4,11 8
962,0,1,,2,6 10,7 3,9 5,1 4,11 8
963,2,1,,2 8,6 10,7 3,9 5,1 4,11
964,0,2,,,2 8,6 10,7 3,9 5,1 4,11
965,1,0,8,2,6 10,7 3,9 5,1 4,11
966,1,2,8,,6 10,7 3,9 5,1 4,11 2
967,0,2,,,6 10,7 3,9 5,1 4,11 2 8
968,0,1,8,,6 10,7 3,9 5,1 4,11 2
969,2,1,8,2,6 10,7 3,9 5,1 4,11
970,2,0,8,2 11,6 10,7 3,9 5,1 4
971,1,0,8 11,2,6 10,7 3,9 5,1 4
972,1,2,8 11,,6 10,7 3,9 5,1 4 2
973,0,2,8,,6 10,7 3,9 5,1 4 2 11
974,0,1,,8,6 10,7 3,9 5,1 4 2 11
975,2,1,,8 11,6 10,7 3,9 5,1 4 2
976,2,0,2,8 11,6 10,7 3,9 5,1 4
977,1,0,2 11,8,6 10,7 3,9 5,1 4
978,2,1,2 11,8 4,6 10,7 3,9 5,1
979,0,2,2,,8 4,6 10,7 3,9 5,1 11
980,0,1,,2,8 4,6 10,7 3,9 5,1 11
981,2,1,,2 11,8 4,6 10,7 3,9 5,1
982,2,0,1,2 11,8 4,6 10,7 3,9 5
983,1,0,1 11,2,8 4,6 10,7 3,9 5
984,1,2,1 11,,8 4,6 10,7 3,9 5 2
985,0,2,1,,8 4,6 10,7 3,9 5 2 11
986,0,1,,1,8 4,6 10,7 3,9 5 2 11
987,2,1,,1 11,8 4,6 10,7 3,9 5 2
988,2,0,2,1 11,8 4,6 10,7 3,9 5
989,1,0,2 11,1,8 4,6 10,7 3,9 5
990,2,1,2 11,1 5,8 4,6 10,7 3,9
991,0,2,2,,1 5,8 4,6 10,7 3,9 11
992,0,1,,2,1 5,8 4,6 10,7 3,9 11
993,2,1,,2 11,1 5,8 4,6 10,7 3,9
994,2,0,9,2 11,1 5,8 4,6 10,7 3
995,1,0,9 11,2,1 5,8 4,6 10,7 3
996,1,2,9 11,,1 5,8 4,6 10,7 3 2
997,0,2,9,,1 5,8 4,6 10,7 3 2 11
998,0,1,,9,1 5,8 4,6 10,7 3 2 11
999,2,1,,9 11,1 5,8 4,6 10,7 3 2
1000,2,0,2,9 11,1 5,8 4,6 10,7 3
1001,1,0,2 11,9,1 5,8 4,6 10,7 3
1002,2,1,2 11,9 3,1 5,8 4,6 10,7
1003,0,2,2,,9 3,1 5,8 4,6 10,7 11
1004,0,1,,2,9 3,1 5,8 4,6 10,7 11
1005,2,1,,2 11,9 3,1 5,8 4,6 10,7
1006,0,2,,,2 11,9 3,1 5,8 4,6 10,7
1007,1,0,11,2,9 3,1 5,8 4,6 10,7
1008,1,2,11,,9 3,1 5,8 4,6 10,7 2
1009,0,2,,,9 3,1 5,8 4,6 10,7 2 11
1010,0,1,11,,9 3,1 5,8 4,6 10,7 2
1011,2,1,11,2,9 3,1 5,8 4,6 10,7
1012,2,0,11,2 7,9 3,1 5,8 4,6 10
1013,1,0,11 7,2,9 3,1 5,8 4,6 10
1014,1,2,11 7,,9 3,1 5,8 4,6 10 2
1015,0,2,11,,9 3,1 5,8 4,6 10 2 7
1016,0,1,,11,9 3,1 5,8 4,6 10 2 7
1017,2,1,,11 7,9 3,1 5,8 4,6 10 2
1018,2,0,2,11 7,9 3,1 5,8 4,6 10
1019,1,0,2 7,11,9 3,1 5,8 4,6 10
1020,2,1,2 7,11 10,9 3,1 5,8 4,6
1021,0,2,2,,11 10,9 3,1 5,8 4,6 7
1022,0,1,,2,11 10,9 3,1 5,8 4,6 7
1023,2,1,,2 7,11 10,9 3,1 5,8 4,6
1024,2,0,6,2 7,11 10,9 3,1 5,8 4
1025,1,0,6 7,2,11 10,9 3,1 5,8 4
1026,1,2,6 7,,11 10,9 3,1 5,8 4 2
1027,0,2,6,,11 10,9 3,1 5,8 4 2 7
1028,0,1,,6,11 10,9 3,1 5,8 4 2 7
1029,2,1,,6 7,11 10,9 3,1 5,8 4 2
1030,2,0,2,6 7,11 10,9 3,1 5,8 4
1031,1,0,2 7,6,11 10,9 3,1 5,8 4
1032,2,1,2 7,6 4,11 10,9 3,1 5,8
1033,0,2,2,,6 4,11 10,9 3,1 5,8 7
1034,0,1,,2,6 4,11 10,9 3,1 5,8 7
1035,2,1,,2 7,6 4,11 10,9 3,1 5,8
1036,0,2,,,2 7,6 4,11 10,9 3,1 5,8
1037,1,0,7,2,6 4,11 10,9 3,1 5,8
1038,1,2,7,,6 4,11 10,9 3,1 5,8 2
1039,0,2,,,6 4,11 10,9 3,1 5,8 2 7
1040,0,1,7,,6 4,11 10,9 3,1 5,8 2
1041,2,1,7,2,6 4,11 10,9 3,1 5,8
1042,2,0,7,2 8,6 4,11 10,9 3,1 5
1043,1,0,7 8,2,6 4,11 10,9 3,1 5
1044,1,2,7 8,,6 4,11 10,9 3,1 5 2
1045,0,2,7,,6 4,11 10,9 3,1 5 2 8
1046,0,1,,7,6 4,11 10,9 3,1 5 2 8
1047,2,1,,7 8,6 4,11 10,9 3,1 5 2
1048,2,0,2,7 8,6 4,11 10,9 3,1 5
1049,1,0,2 8,7,6 4,11 10,9 3,1 5
1050,2,1,2 8,7 5,6 4,11 10,9 3,1
1051,0,2,2,,7 5,6 4,11 10,9 3,1 8
1052,0,1,,2,7 5,6 4,11 10,9 3,1 8
1053,2,1,,2 8,7 5,6 4,11 10,9 3,1
1054,2,0,1,2 8,7 5,6 4,11 10,9 3
1055,1,0,1 8,2,7 5,6 4,11 10,9 3
1056,1,2,1 8,,7 5,6 4,11 10,9 3 2
1057,0,2,1,,7 5,6 4,11 10,9 3 2 8
1058,0,1,,1,7 5,6 4,11 10,9 3 2 8
1059,2,1,,1 8,7 5,6 4,11 10,9 3 2
1060,2,0,2,1 8,7 5,6 4,11 10,9 3
1061,1,0,2 8,1,7 5,6 4,11 10,9 3
1062,2,1,2 8,1 3,7 5,6 4,11 10,9
1063,0,2,2,,1 3,7 5,6 4,11 10,9 8
1064,0,1,,2,1 3,7 5,6 4,11 10,9 8
1065,2,1,,2 8,1 3,7 5,6 4,11 10,9
1066,0,2,,,2 8,1 3,7 5,6 4,11 10,9
1067,1,0,8,2,1 3,7 5,6 4,11 10,9
1068,1,2,8,,1 3,7 5,6 4,11 10,9 2
1069,0,2,,,1 3,7 5,6 4,11 10,9 2 8
1070,0,1,8,,1 3,7 5,6 4,11 10,9 2
1071,2,1,8,2,1 3,7 5,6 4,11 10,9
1072,2,0,8,2 9,1 3,7 5,6 4,11 10
1073,1,0,8 9,2,1 3,7 5,6 4,11 10
1074,1,2,8 9,,1 3,7 5,6 4,11 10 2
1075,0,2,8,,1 3,7 5,6 4,11 10 2 9
1076,0,1,,8,1 3,7 5,6 4,11 10 2 9
1077,2,1,,8 9,1 3,7 5,6 4,11 10 2
1078,2,0,2,8 9,1 3,7 5,6 4,11 10
1079,1,0,2 9,8,1 3,7 5,6 4,11 10
1080,2,1,2 9,8 10,1 3,7 5,6 4,11
1081,0,2,2,,8 10,1 3,7 5,6 4,11 9
1082,0,1,,2,8 10,1 3,7 5,6 4,11 9
1083,2,1,,2 9,8 10,1 3,7 5,6 4,11
1084,2,0,11,2 9,8 10,1 3,7 5,6 4
1085,1,0,11 9,2,8 10,1 3,7 5,6 4
1086,1,2,11 9,,8 10,1 3,7 5,6 4 2
1087,0,2,11,,8 10,1 3,7 5,6 4 2 9
1088,0,1,,11,8 10,1 3,7 5,6 4 2 9
1089,2,1,,11 9,8 10,1 3,7 5,6 4 2
1090,2,0,2,11 9,8 10,1 3,7 5,6 4
1091,1,0,2 9,11,8 10,1 3,7 5,6 4
1092,2,1,2 9,11 4,8 10,1 3,7 5,6
1093,0,2,2,,11 4,8 10,1 3,7 5,6 9
1094,0,1,,2,11 4,8 10,1 3,7 5,6 9
1095,2,1,,2 9,11 4,8 10,1 3,7 5,6
1096,0,2,,,2 9,11 4,8 10,1 3,7 5,6
1097,1,0,9,2,11 4,8 10,1 3,7 5,6
1098,1,2,9,,11 4,8 10,1 3,7 5,6 2
1099,0,2,,,11 4,8 10,1 3,7 5,6 2 9
1100,0,1,9,,11 4,8 10,1 3,7 5,6 2
1101,2,1,9,2,11 4,8 10,1 3,7 5,6
1102,2,0,9,2 6,11 4,8 10,1 3,7 5
1103,1,0,9 6,2,11 4,8 10,1 3,7 5
1104,1,2,9 6,,11 4,8 10,1 3,7 5 2
1105,0,2,9,,11 4,8 10,1 3,7 5 2 6
1106,0,1,,9,11 4,8 10,1 3,7 5 2 6
1107,2,1,,9 6,11 4,8 10,1 3,7 5 2
1108,2,0,2,9 6,11 4,8 10,1 3,7 5
1109,1,0,2 6,9,11 4,8 10,1 3,7 5
1110,2,1,2 6,9 5,11 4,8 10,1 3,7
1111,0,2,2,,9 5,11 4,8 10,1 3,7 6
1112,0,1,,2,9 5,11 4,8 10,1 3,7 6
1113,2,1,,2 6,9 5,11 4,8 10,1 3,7
1114,2,0,7,2 6,9 5,11 4,8 10,1 3
1115,1,0,7 6,2,9 5,11 4,8 10,1 3
1116,1,2,7 6,,9 5,11 4,8 10,1 3 2
1117,0,2,7,,9 5,11 4,8 10,1 3 2 6
1118,0,1,,7,9 5,11 4,8 10,1 3 2 6
1119,2,1,,7 6,9 5,11 4,8 10,1 3 2
1120,2,0,2,7 6,9 5,11 4,8 10,1 3
1121,1,0,2 6,7,9 5,11 4,8 10,1 3
1122,2,1,2 6,7 3,9 5,11 4,8 10,1
1123,0,2,2,,7 3,9 5,11 4,8 10,1 6
1124,0,1,,2,7 3,9 5,11 4,8 10,1 6
1125,2,1,,2 6,7 3,9 5,11 4,8 10,1
1126,0,2,,,2 6,7 3,9 5,11 4,8 10,1
1127,1,0,6,2,7 3,9 5,11 4,8 10,1
1128,1,2,6,,7 3,9 5,11 4,8 10,1 2
1129,0,2,,,7 3,9 5,11 4,8 10,1 2 6
1130,0,1,6,,7 3,9 5,11 4,8 10,1 2
1131,2,1,6,2,7 3,9 5,11 4,8 10,1
1132,2,0,6,2 1,7 3,9 5,11 4,8 10
1133,1,0,6 1,2,7 3,9 5,11 4,8 10
1134,1,2,6 1,,7 3,9 5,11 4,8 10 2
1135,0,2,6,,7 3,9 5,11 4,8 10 2 1
1136,0,1,,6,7 3,9 5,11 4,8 10 2 1
1137,2,1,,6 1,7 3,9 5,11 4,8 10 2
1138,2,0,2,6 1,7 3,9 5,11 4,8 10
1139,1,0,2 1,6,7 3,9 5,11 4,8 10
1140,2,1,2 1,6 10,7 3,9 5,11 4,8
1141,0,2,2,,6 10,7 3,9 5,11 4,8 1
1142,0,1,,2,6 10,7 3,9 5,11 4,8 1
1143,2,1,,2 1,6 10,7 3,9 5,11 4,8
1144,2,0,8,2 1,6 10,7 3,9 5,11 4
1145,1,0,8 1,2,6 10,7 3,9 5,11 4
1146,1,2,8 1,,6 10,7 3,9 5,11 4 2
1147,0,2,8,,6 10,7 3,9 5,11 4 2 1
1148,0,1,,8,6 10,7 3,9 5,11 4 2 1
1149,2,1,,8 1,6 10,7 3,9 5,11 4 2
1150,2,0,2,8 1,6 10,7 3,9 5,11 4
1151,1,0,2 1,8,6 10,7 3,9 5,11 4
1152,2,1,2 1,8 4,6 10,7 3,9 5,11
1153,0,2,2,,8 4,6 10,7 3,9 5,11 1
1154,0,1,,2,8 4,6 10,7 3,9 5,11 1
1155,2,1,,2 1,8 4,6 10,7 3,9 5,11
1156,0,2,,,2 1,8 4,6 10,7 3,9 5,11
1157,1,0,1,2,8 4,6 10,7 3,9 5,11
1158,1,2,1,,8 4,6 10,7 3,9 5,11 2
1159,0,2,,,8 4,6 10,7 3,9 5,11 2 1
1160,0,1,1,,8 4,6 10,7 3,9 5,11 2
1161,2,1,1,2,8 4,6 10,7 3,9 5,11
1162,2,0,1,2 11,8 4,6 10,7 3,9 5
1163,1,0,1 11,2,8 4,6 10,7 3,9 5
1164,1,2,1 11,,8 4,6 10,7 3,9 5 2
1165,0,2,1,,8 4,6 10,7 3,9 5 2 11
1166,0,1,,1,8 4,6 10,7 3,9 5 2 11
1167,2,1,,1 11,8 4,6 10,7 3,9 5 2
1168,2,0,2,1 11,8 4,6 10,7 3,9 5
1169,1,0,2 11,1,8 4,6 10,7 3,9 5
1170,2,1,2 11,1 5,8 4,6 10,7 3,9
1171,0,2,2,,1 5,8 4,6 10,7 3,9 11
1172,0,1,,2,1 5,8 4,6 10,7 3,9 11
1173,2,1,,2 11,1 5,8 4,6 10,7 3,9
1174,2,0,9,2 11,1 5,8 4,6 10,7 3
1175,1,0,9 11,2,1 5,8 4,6 10,7 3
1176,1,2,9 11,,1 5,8 4,6 10,7 3 2
1177,0,2,9,,1 5,8 4,6 10,7 3 2 11
1178,0,1,,9,1 5,8 4,6 10,7 3 2 11
1179,2,1,,9 11,1 5,8 4,6 10,7 3 2
1180,2,0,2,9 11,1 5,8 4,6 10,7 3
1181,1,0,2 11,9,1 5,8 4,6 10,7 3
1182,2,1,2 11,9 3,1 5,8 4,6 10,7
1183,0,2,2,,9 3,1 5,8 4,6 10,7 11
1184,0,1,,2,9 3,1 5,8 4,6 10,7 11
1185,2,1,,2 11,9 3,1 5,8 4,6 10,7
1186,0,2,,,2 11,9 3,1 5,8 4,6 10,7
1187,1,0,11,2,9 3,1 5,8 4,6 10,7
1188,1,2,11,,9 3,1 5,8 4,6 10,7 2
1189,0,2,,,9 3,1 5,8 4,6 10,7 2 11
1190,0,1,11,,9 3,1 5,8 4,6 10,7 2
1191,2,1,11,2,9 3,1 5,8 4,6 10,7
1192,2,0,11,2 7,9 3,1 5,8 4,6 10
1193,1,0,11 7,2,9 3,1 5,8 4,6 10
1194,1,2,11 7,,9 3,1 5,8 4,6 10 2
1195,0,2,11,,9 3,1 5,8 4,6 10 2 7
1196,0,1,,11,9 3,1 5,8 4,6 10 2 7
1197,2,1,,11 7,9 3,1 5,8 4,6 10 2
1198,2,0,2,11 7,9 3,1 5,8 4,6 10
1199,1,0,2 7,11,9 3,1 5,8 4,6 10
1200,2,1,2 7,11 10,9 3,1 5,8 4,6
1201,0,2,2,,11 10,9 3,1 5,8 4,6 7
1202,0,1,,2,11 10,9 3,1 5,8 4,6 7
1203,2,1,,2 7,11 10,9 3,1 5,8 4,6
1204,0,2,,,2 7,11 10,9 3,1 5,8 4,6
1205,1,0,7,2,11 10,9 3,1 5,8 4,6
1206,1,2,7,,11 10,9 3,1 5,8 4,6 2
1207,0,2,,,11 10,9 3,1 5,8 4,6 2 7
1208,0,1,7,,11 10,9 3,1 5,8 4,6 2
1209,2,1,7,2,11 10,9 3,1 5,8 4,6
1210,2,0,7,2 6,11 10,9 3,1 5,8 4
1211,1,0,7 6,2,11 10,9 3,1 5,8 4
1212,1,2,7 6,,11 10,9 3,1 5,8 4 2
1213,0,2,7,,11 10,9 3,1 5,8 4 2 6
1214,0,1,,7,11 10,9 3,1 5,8 4 2 6
1215,2,1,,7 6,11 10,9 3,1 5,8 4 2
1216,2,0,2,7 6,11 10,9 3,1 5,8 4
1217,1,0,2 6,7,11 10,9 3,1 5,8 4
1218,2,1,2 6,7 4,11 10,9 3,1 5,8
1219,0,2,2,,7 4,11 10,9 3,1 5,8 6
1220,0,1,,2,7 4,11 10,9 3,1 5,8 6
1221,2,1,,2 6,7 4,11 10,9 3,1 5,8
1222,2,0,8,2 6,7 4,11 10,9 3,1 5
1223,1,0,8 6,2,7 4,11 10,9 3,1 5
1224,1,2,8 6,,7 4,11 10,9 3,1 5 2
1225,0,2,8,,7 4,11 10,9 3,1 5 2 6
1226,0,1,,8,7 4,11 10,9 3,1 5 2 6
1227,2,1,,8 6,7 4,11 10,9 3,1 5 2
1228,2,0,2,8 6,7 4,11 10,9 3,1 5
1229,1,0,2 6,8,7 4,11 10,9 3,1 5
1230,2,1,2 6,8 5,7 4,11 10,9 3,1
1231,0,2,2,,8 5,7 4,11 10,9 3,1 6
1232,0,1,,2,8 5,7 4,11 10,9 3,1 6
1233,2,1,,2 6,8 5,7 4,11 10,9 3,1
1234,2,0,1,2 6,8 5,7 4,11 10,9 3
1235,1,0,1 6,2,8 5,7 4,11 10,9 3
1236,1,2,1 6,,8 5,7 4,11 10,9 3 2
1237,0,2,1,,8 5,7 4,11 10,9 3 2 6
1238,0,1,,1,8 5,7 4,11 10,9 3 2 6
1239,2,1,,1 6,8 5,7 4,11 10,9 3 2
1240,2,0,2,1 6,8 5,7 4,11 10,9 3
1241,1,0,2 6,1,8 5,7 4,11 10,9 3
1242,2,1,2 6,1 3,8 5,7 4,11 10,9
1243,0,2,2,,1 3,8 5,7 4,11 10,9 6
1244,0,1,,2,1 3,8 5,7 4,11 10,9 6
1245,2,1,,2 6,1 3,8 5,7 4,11 10,9
1246,0,2,,,2 6,1 3,8 5,7 4,11 10,9
1247,1,0,6,2,1 3,8 5,7 4,11 10,9
1248,1,2,6,,1 3,8 5,7 4,11 10,9 2
1249,0,2,,,1 3,8 5,7 4,11 10,9 2 6
1250,0,1,6,,1 3,8 5,7 4,11 10,9 2
1251,2,1,6,2,1 3,8 5,7 4,11 10,9
1252,2,0,6,2 9,1 3,8 5,7 4,11 10
1253,1,0,6 9,2,1 3,8 5,7 4,11 10
1254,1,2,6 9,,1 3,8 5,7 4,11 10 2
1255,0,2,6,,1 3,8 5,7 4,11 10 2 9
1256,0,1,,6,1 3,8 5,7 4,11 10 2 9
1257,2,1,,6 9,1 3,8 5,7 4,11 10 2
1258,2,0,2,6 9,1 3,8 5,7 4,11 10
1259,1,0,2 9,6,1 3,8 5,7 4,11 10
1260,2,1,2 9,6 10,1 3,8 5,7 4,11
1261,0,2,2,,6 10,1 3,8 5,7 4,11 9
1262,0,1,,2,6 10,1 3,8 5,7 4,11 9
1263,2,1,,2 9,6 10,1 3,8 5,7 4,11
1264,2,0,11,2 9,6 10,1 3,8 5,7 4
1265,1,0,11 9,2,6 10,1 3,8 5,7 4
1266,1,2,11 9,,6 10,1 3,8 5,7 4 2
1267,0,2,11,,6 10,1 3,8 5,7 4 2 9
1268,0,1,,11,6 10,1 3,8 5,7 4 2 9
1269,2,1,,11 9,6 10,1 3,8 5,7 4 2
1270,2,0,2,11 9,6 10,1 3,8 5,7 4
1271,1,0,2 9,11,6 10,1 3,8 5,7 4
1272,2,1,2 9,11 4,6 10,1 3,8 5,7
1273,0,2,2,,11 4,6 10,1 3,8 5,7 9
1274,0,1,,2,11 4,6 10,1 3,8 5,7 9
1275,2,1,,2 9,11 4,6 10,1 3,8 5,7
1276,0,2,,,2 9,11 4,6 10,1 3,8 5,7
1277,1,0,9,2,11 4,6 10,1 3,8 5,7
1278,1,2,9,,11 4,6 10,1 3,8 5,7 2
1279,0,2,,,11 4,6 10,1 3,8 5,7 2 9
1280,0,1,9,,11 4,6 10,1 3,8 5,7 2
1281,2,1,9,2,11 4,6 10,1 3,8 5,7
1282,2,0,9,2 7,11 4,6 10,1 3,8 5
1283,1,0,9 7,2,11 4,6 10,1 3,8 5
1284,1,2,9 7,,11 4,6 10,1 3,8 5 2
1285,0,2,9,,11 4,6 10,1 3,8 5 2 7
1286,0,1,,9,11 4,6 10,1 3,8 5 2 7
1287,2,1,,9 7,11 4,6 10,1 3,8 5 2
1288,2,0,2,9 7,11 4,6 10,1 3,8 5
1289,1,0,2 7,9,11 4,6 10,1 3,8 5
1290,2,1,2 7,9 5,11 4,6 10,1 3,8
1291,0,2,2,,9 5,11 4,6 10,1 3,8 7
1292,0,1,,2,9 5,11 4,6 10,1 3,8 7
1293,2,1,,2 7,9 5,11 4,6 10,1 3,8
1294,2,0,8,2 7,9 5,11 4,6 10,1 3
1295,1,0,8 7,2,9 5,11 4,6 10,1 3
1296,1,2,8 7,,9 5,11 4,6 10,1 3 2
1297,0,2,8,,9 5,11 4,6 10,1 3 2 7
1298,0,1,,8,9 5,11 4,6 10,1 3 2 7
1299,2,1,,8 7,9 5,11 4,6 10,1 3 2
1300,2,0,2,8 7,9 5,11 4,6 10,1 3
1301,1,0,2 7,8,9 5,11 4,6 10,1 3
1302,2,1,2 7,8 3,9 5,11 4,6 10,1
1303,0,2,2,,8 3,9 5,11 4,6 10,1 7
1304,0,1,,2,8 3,9 5,11 4,6 10,1 7
1305,2,1,,2 7,8 3,9 5,11 4,6 10,1
1306,0,2,,,2 7,8 3,9 5,11 4,6 10,1
1307,1,0,7,2,8 3,9 5,11 4,6 10,1
1308,1,2,7,,8 3,9 5,11 4,6 10,1 2
1309,0,2,,,8 3,9 5,11 4,6 10,1 2 7
1310,0,1,7,,8 3,9 5,11 4,6 10,1 2
1311,2,1,7,2,8 3,9 5,11 4,6 10,1
1312,2,0,7,2 1,8 3,9 5,11 4,6 10
1313,1,0,7 1,2,8 3,9 5,11 4,6 10
1314,1,2,7 1,,8 3,9 5,11 4,6 10 2
1315,0,2,7,,8 3,9 5,11 4,6 10 2 1
1316,0,1,,7,8 3,9 5,11 4,6 10 2 1
1317,2,1,,7 1,8 3,9 5,11 4,6 10 2
1318,2,0,2,7 1,8 3,9 5,11 4,6 10
1319,1,0,2 1,7,8 3,9 5,11 4,6 10
1320,2,1,2 1,7 10,8 3,9 5,11 4,6
1321,0,2,2,,7 10,8 3,9 5,11 4,6 1
1322,0,1,,2,7 10,8 3,9 5,11 4,6 1
1323,2,1,,2 1,7 10,8 3,9 5,11 4,6
1324,2,0,6,2 1,7 10,8 3,9 5,11 4
1325,1,0,6 1,2,7 10,8 3,9 5,11 4
1326,1,2,6 1,,7 10,8 3,9 5,11 4 2
1327,0,2,6,,7 10,8 3,9 5,11 4 2 1
1328,0,1,,6,7 10,8 3,9 5,11 4 2 1
1329,2,1,,6 1,7 10,8 3,9 5,11 4 2
1330,2,0,2,6 1,7 10,8 3,9 5,11 4
1331,1,0,2 1,6,7 10,8 3,9 5,11 4
1332,2,1,2 1,6 4,7 10,8 3,9 5,11
1333,0,2,2,,6 4,7 10,8 3,9 5,11 1
1334,0,1,,2,6 4,7 10,8 3,9 5,11 1
1335,2,1,,2 1,6 4,7 10,8 3,9 5,11
1336,0,2,,,2 1,6 4,7 10,8 3,9 5,11
1337,1,0,1,2,6 4,7 10,8 3,9 5,11
1338,1,2,1,,6 4,7 10,8 3,9 5,11 2
1339,0,2,,,6 4,7 10,8 3,9 5,11 2 1
1340,0,1,1,,6 4,7 10,8 3,9 5,11 2
1341,2,1,1,2,6 4,7 10,8 3,9 5,11
1342,2,0,1,2 11,6 4,7 10,8 3,9 5
1343,1,0,1 11,2,6 4,7 10,8 3,9 5
1344,1,2,1 11,,6 4,7 10,8 3,9 5 2
1345,0,2,1,,6 4,7 10,8 3,9 5 2 11
1346,0,1,,1,6 4,7 10,8 3,9 5 2 11
1347,2,1,,1 11,6 4,7 10,8 3,9 5 2
1348,2,0,2,1 11,6 4,7 10,8 3,9 5
1349,1,0,2 11,1,6 4,7 10,8 3,9 5
1350,2,1,2 11,1 5,6 4,7 10,8 3,9
1351,0,2,2,,1 5,6 4,7 10,8 3,9 11
1352,0,1,,2,1 5,6 4,7 10,8 3,9 11
1353,2,1,,2 11,1 5,6 4,7 10,8 3,9
1354,2,0,9,2 11,1 5,6 4,7 10,8 3
1355,1,0,9 11,2,1 5,6 4,7 10,8 3
1356,1,2,9 11,,1 5,6 4,7 10,8 3 2
1357,0,2,9,,1 5,6 4,7 10,8 3 2 11
1358,0,1,,9,1 5,6 4,7 10,8 3 2 11
1359,2,1,,9 11,1 5,6 4,7 10,8 3 2
1360,2,0,2,9 11,1 5,6 4,7 10,8 3
1361,1,0,2 11,9,1 5,6 4,7 10,8 3
1362,2,1,2 11,9 3,1 5,6 4,7 10,8
1363,0,2,2,,9 3,1 5,6 4,7 10,8 11
1364,0,1,,2,9 3,1 5,6 4,7 10,8 11
1365,2,1,,2 11,9 3,1 5,6 4,7 10,8
1366,0,2,,,2 11,9 3,1 5,6 4,7 10,8
1367,1,0,11,2,9 3,1 5,6 4,7 10,8
1368,1,2,11,,9 3,1 5,6 4,7 10,8 2
1369,0,2,,,9 3,1 5,6 4,7 10,8 2 11
1370,0,1,11,,9 3,1 5,6 4,7 10,8 2
1371,2,1,11,2,9 3,1 5,6 4,7 10,8
1372,2,0,11,2 8,9 3,1 5,6 4,7 10
1373,1,0,11 8,2,9 3,1 5,6 4,7 10
1374,1,2,11 8,,9 3,1 5,6 4,7 10 2
1375,0,2,11,,9 3,1 5,6 4,7 10 2 8
1376,0,1,,11,9 3,1 5,6 4,7 10 2 8
1377,2,1,,11 8,9 3,1 5,6 4,7 10 2
1378,2,0,2,11 8,9 3,1 5,6 4,7 10
1379,1,0,2 8,11,9 3,1 5,6 4,7 10
1380,2,1,2 8,11 10,9 3,1 5,6 4,7
1381,0,2,2,,11 10,9 3,1 5,6 4,7 8
1382,0,1,,2,11 10,9 3,1 5,6 4,7 8
1383,2,1,,2 8,11 10,9 3,1 5,6 4,7
1384,2,0,7,2 8,11 10,9 3,1 5,6 4
1385,1,0,7 8,2,11 10,9 3,1 5,6 4
1386,1,2,7 8,,11 10,9 3,1 5,6 4 2
1387,0,2,7,,11 10,9 3,1 5,6 4 2 8
1388,0,1,,7,11 10,9 3,1 5,6 4 2 8
1389,2,1,,7 8,11 10,9 3,1 5,6 4 2
1390,2,0,2,7 8,11 10,9 3,1 5,6 4
1391,1,0,2 8,7,11 10,9 3,1 5,6 4
1392,2,1,2 8,7 4,11 10,9 3,1 5,6
1393,0,2,2,,7 4,11 10,9 3,1 5,6 8
1394,0,1,,2,7 4,11 10,9 3,1 5,6 8
1395,2,1,,2 8,7 4,11 10,9 3,1 5,6
1396,0,2,,,2 8,7 4,11 10,9 3,1 5,6
1397,1,0,8,2,7 4,11 10,9 3,1 5,6
1398,1,2,8,,7 4,11 10,9 3,1 5,6 2
1399,0,2,,,7 4,11 10,9 3,1 5,6 2 8
1400,0,1,8,,7 4,11 10,9 3,1 5,6 2
1401,2,1,8,2,7 4,11 10,9 3,1 5,6
1402,2,0,8,2 6,7 4,11 10,9 3,1 5
1403,1,0,8 6,2,7 4,11 10,9 3,1 5
1404,1,2,8 6,,7 4,11 10,9 3,1 5 2
1405,0,2,8,,7 4,11 10,9 3,1 5 2 6
1406,0,1,,8,7 4,11 10,9 3,1 5 2 6
1407,2,1,,8 6,7 4,11 10,9 3,1 5 2
1408,2,0,2,8 6,7 4,11 10,9 3,1 5
1409,1,0,2 6,8,7 4,11 10,9 3,1 5
1410,2,1,2 6,8 5,7 4,11 10,9 3,1
1411,0,2,2,,8 5,7 4,11 10,9 3,1 6
1412,0,1,,2,8 5,7 4,11 10,9 3,1 6
1413,2,1,,2 6,8 5,7 4,11 10,9 3,1
1414,2,0,1,2 6,8 5,7 4,11 10,9 3
1415,1,0,1 6,2,8 5,7 4,11 10,9 3
1416,1,2,1 6,,8 5,7 4,11 10,9 3 2
1417,0,2,1,,8 5,7 4,11 10,9 3 2 6
1418,0,1,,1,8 5,7 4,11 10,9 3 2 6
1419,2,1,,1 6,8 5,7 4,11 10,9 3 2
1420,2,0,2,1 6,8 5,7 4,11 10,9 3
1421,1,0,2 6,1,8 5,7 4,11 10,9 3
1422,2,1,2 6,1 3,8 5,7 4,11 10,9
1423,0,2,2,,1 3,8 5,7 4,11 10,9 6
1424,0,1,,2,1 3,8 5,7 4,11 10,9 6
1425,2,1,,2 6,1 3,8 5,7 4,11 10,9
1426,0,2,,,2 6,1 3,8 5,7 4,11 10,9
1427,1,0,6,2,1 3,8 5,7 4,11 10,9
1428,1,2,6,,1 3,8 5,7 4,11 10,9 2
1429,0,2,,,1 3,8 5,7 4,11 10,9 2 6
1430,0,1,6,,1 3,8 5,7 4,11 10,9 2
1431,2,1,6,2,1 3,8 5,7 4,11 10,9
1432,2,0,6,2 9,1 3,8 5,7 4,11 10
1433,1,0,6 9,2,1 3,8 5,7 4,11 10
1434,1,2,6 9,,1 3,8 5,7 4,11 10 2
1435,0,2,6,,1 3,8 5,7 4,11 10 2 9
1436,0,1,,6,1 3,8 5,7 4,11 10 2 9
1437,2,1,,6 9,1 3,8 5,7 4,11 10 2
1438,2,0,2,6 9,1 3,8 5,7 4,11 10
1439,1,0,2 9,6,1 3,8 5,7 4,11 10
1440,2,1,2 9,6 10,1 3,8 5,7 4,11
1441,0,2,2,,6 10,1 3,8 5,7 4,11 9
1442,0,1,,2,6 10,1 3,8 5,7 4,11 9
1443,2,1,,2 9,6 10,1 3,8 5,7 4,11
1444,0,2,,,2 9,6 10,1 3,8 5,7 4,11
1445,1,0,9,2,6 10,1 3,8 5,7 4,11
1446,1,2,9,,6 10,1 3,8 5,7 4,11 2
1447,0,2,,,6 10,1 3,8 5,7 4,11 2 9
1448,0,1,9,,6 10,1 3,8 5,7 4,11 2
1449,2,1,9,2,6 10,1 3,8 5,7 4,11
1450,2,0,9,2 11,6 10,1 3,8 5,7 4
1451,1,0,9 11,2,6 10,1 3,8 5,7 4
1452,1,2,9 11,,6 10,1 3,8 5,7 4 2
1453,0,2,9,,6 10,1 3,8 5,7 4 2 11
1454,0,1,,9,6 10,1 3,8 5,7 4 2 11
1455,2,1,,9 11,6 10,1 3,8 5,7 4 2
1456,2,0,2,9 11,6 10,1 3,8 5,7 4
1457,1,0,2 11,9,6 10,1 3,8 5,7 4
1458,2,1,2 11,9 4,6 10,1 3,8 5,7
1459,0,2,2,,9 4,6 10,1 3,8 5,7 11
1460,0,1,,2,9 4,6 10,1 3,8 5,7 11
1461,2,1,,2 11,9 4,6 10,1 3,8 5,7
1462,2,0,7,2 11,9 4,6 10,1 3,8 5
1463,1,0,7 11,2,9 4,6 10,1 3,8 5
1464,1,2,7 11,,9 4,6 10,1 3,8 5 2
1465,0,2,7,,9 4,6 10,1 3,8 5 2 11
1466,0,1,,7,9 4,6 10,1 3,8 5 2 11
1467,2,1,,7 11,9 4,6 10,1 3,8 5 2
1468,2,0,2,7 11,9 4,6 10,1 3,8 5
1469,1,0,2 11,7,9 4,6 10,1 3,8 5
1470,2,1,2 11,7 5,9 4,6 10,1 3,8
1471,0,2,2,,7 5,9 4,6 10,1 3,8 11
1472,0,1,,2,7 5,9 4,6 10,1 3,8 11
1473,2,1,,2 11,7 5,9 4,6 10,1 3,8
1474,0,2,,,2 11,7 5,9 4,6 10,1 3,8
1475,1,0,11,2,7 5,9 4,6 10,1 3,8
1476,1,2,11,,7 5,9 4,6 10,1 3,8 2
1477,0,2,,,7 5,9 4,6 10,1 3,8 2 11
1478,0,1,11,,7 5,9 4,6 10,1 3,8 2
1479,2,1,11,2,7 5,9 4,6 10,1 3,8
1480,2,0,11,2 8,7 5,9 4,6 10,1 3
1481,1,0,11 8,2,7 5,9 4,6 10,1 3
1482,1,2,11 8,,7 5,9 4,6 10,1 3 2
1483,0,2,11,,7 5,9 4,6 10,1 3 2 8
1484,0,1,,11,7 5,9 4,6 10,1 3 2 8
1485,2,1,,11 8,7 5,9 4,6 10,1 3 2
1486,2,0,2,11 8,7 5,9 4,6 10,1 3
1487,1,0,2 8,11,7 5,9 4,6 10,1 3
1488,2,1,2 8,11 3,7 5,9 4,6 10,1
1489,0,2,2,,11 3,7 5,9 4,6 10,1 8
1490,0,1,,2,11 3,7 5,9 4,6 10,1 8
1491,2,1,,2 8,11 3,7 5,9 4,6 10,1
1492,2,0,1,2 8,11 3,7 5,9 4,6 10
1493,1,0,1 8,2,11 3,7 5,9 4,6 10
1494,1,2,1 8,,11 3,7 5,9 4,6 10 2
1495,0,2,1,,11 3,7 5,9 4,6 10 2 8
1496,0,1,,1,11 3,7 5,9 4,6 10 2 8
1497,2,1,,1 8,11 3,7 5,9 4,6 10 2
1498,2,0,2,1 8,11 3,7 5,9 4,6 10
1499,1,0,2 8,1,11 3,7 5,9 4,6 10
1500,2,1,2 8,1 10,11 3,7 5,9 4,6
1501,0,2,2,,1 10,11 3,7 5,9 4,6 8
1502,0,1,,2,1 10,11 3,7 5,9 4,6 8
1503,2,1,,2 8,1 10,11 3,7 5,9 4,6
1504,0,2,,,2 8,1 10,11 3,7 5,9 4,6
1505,1,0,8,2,1 10,11 3,7 5,9 4,6
1506,1,2,8,,1 10,11 3,7 5,9 4,6 2
1507,0,2,,,1 10,11 3,7 5,9 4,6 2 8
1508,0,1,8,,1 10,11 3,7 5,9 4,6 2
1509,2,1,8,2,1 10,11 3,7 5,9 4,6
1510,2,0,8,2 6,1 10,11 3,7 5,9 4
1511,1,0,8 6,2,1 10,11 3,7 5,9 4
1512,1,2,8 6,,1 10,11 3,7 5,9 4 2
1513,0,2,8,,1 10,11 3,7 5,9 4 2 6
1514,0,1,,8,1 10,11 3,7 5,9 4 2 6
1515,2,1,,8 6,1 10,11 3,7 5,9 4 2
1516,2,0,2,8 6,1 10,11 3,7 5,9 4
1517,1,0,2 6,8,1 10,11 3,7 5,9 4
1518,2,1,2 6,8 4,1 10,11 3,7 5,9
1519,0,2,2,,8 4,1 10,11 3,7 5,9 6
1520,0,1,,2,8 4,1 10,11 3,7 5,9 6
1521,2,1,,2 6,8 4,1 10,11 3,7 5,9
1522,2,0,9,2 6,8 4,1 10,11 3,7 5
1523,1,0,9 6,2,8 4,1 10,11 3,7 5
1524,1,2,9 6,,8 4,1 10,11 3,7 5 2
1525,0,2,9,,8 4,1 10,11 3,7 5 2 6
1526,0,1,,9,8 4,1 10,11 3,7 5 2 6
1527,2,1,,9 6,8 4,1 10,11 3,7 5 2
1528,2,0,2,9 6,8 4,1 10,11 3,7 5
1529,1,0,2 6,9,8 4,1 10,11 3,7 5
1530,2,1,2 6,9 5,8 4,1 10,11 3,7
1531,0,2,2,,9 5,8 4,1 10,11 3,7 6
1532,0,1,,2,9 5,8 4,1 10,11 3,7 6
1533,2,1,,2 6,9 5,8 4,1 10,11 3,7
1534,2,0,7,2 6,9 5,8 4,1 10,11 3
1535,1,0,7 6,2,9 5,8 4,1 10,11 3
1536,1,2,7 6,,9 5,8 4,1 10,11 3 2
1537,0,2,7,,9 5,8 4,1 10,11 3 2 6
1538,0,1,,7,9 5,8 4,1 10,11 3 2 6
1539,2,1,,7 6,9 5,8 4,1 10,11 3 2
1540,2,0,2,7 6,9 5,8 4,1 10,11 3
1541,1,0,2 6,7,9 5,8 4,1 10,11 3
1542,2,1,2 6,7 3,9 5,8 4,1 10,11
1543,0,2,2,,7 3,9 5,8 4,1 10,11 6
1544,0,1,,2,7 3,9 5,8 4,1 10,11 6
1545,2,1,,2 6,7 3,9 5,8 4,1 10,11
1546,0,2,,,2 6,7 3,9 5,8 4,1 10,11
1547,1,0,6,2,7 3,9 5,8 4,1 10,11
1548,1,2,6,,7 3,9 5,8 4,1 10,11 2
1549,0,2,,,7 3,9 5,8 4,1 10,11 2 6
1550,0,1,6,,7 3,9 5,8 4,1 10,11 2
1551,2,1,6,2,7 3,9 5,8 4,1 10,11
1552,2,0,6,2 11,7 3,9 5,8 4,1 10
1553,1,0,6 11,2,7 3,9 5,8 4,1 10
1554,1,2,6 11,,7 3,9 5,8 4,1 10 2
1555,0,2,6,,7 3,9 5,8 4,1 10 2 11
1556,0,1,,6,7 3,9 5,8 4,1 10 2 11
1557,2,1,,6 11,7 3,9 5,8 4,1 10 2
1558,2,0,2,6 11,7 3,9 5,8 4,1 10
1559,1,0,2 11,6,7 3,9 5,8 4,1 10
1560,2,1,2 11,6 10,7 3,9 5,8 4,1
1561,0,2,2,,6 10,7 3,9 5,8 4,1 11
1562,0,1,,2,6 10,7 3,9 5,8 4,1 11
1563,2,1,,2 11,6 10,7 3,9 5,8 4,1
1564,2,0,1,2 11,6 10,7 3,9 5,8 4
1565,1,0,1 11,2,6 10,7 3,9 5,8 4
1566,1,2,1 11,,6 10,7 3,9 5,8 4 2
1567,0,2,1,,6 10,7 3,9 5,8 4 2 11
1568,0,1,,1,6 10,7 3,9 5,8 4 2 11
1569,2,1,,1 11,6 10,7 3,9 5,8 4 2
1570,2,0,2,1 11,6 10,7 3,9 5,8 4
1571,1,0,2 11,1,6 10,7 3,9 5,8 4
1572,2,1,2 11,1 4,6 10,7 3,9 5,8
1573,0,2,2,,1 4,6 10,7 3,9 5,8 11
1574,0,1,,2,1 4,6 10,7 3,9 5,8 11
1575,2,1,,2 11,1 4,6 10,7 3,9 5,8
1576,0,2,,,2 11,1 4,6 10,7 3,9 5,8
1577,1,0,11,2,1 4,6 10,7 3,9 5,8
1578,1,2,11,,1 4,6 10,7 3,9 5,8 2
1579,0,2,,,1 4,6 10,7 3,9 5,8 2 11
1580,0,1,11,,1 4,6 10,7 3,9 5,8 2
1581,2,1,11,2,1 4,6 10,7 3,9 5,8
1582,2,0,11,2 8,1 4,6 10,7 3,9 5
1583,1,0,11 8,2,1 4,6 10,7 3,9 5
1584,1,2,11 8,,1 4,6 10,7 3,9 5 2
1585,0,2,11,,1 4,6 10,7 3,9 5 2 8
1586,0,1,,11,1 4,6 10,7 3,9 5 2 8
1587,2,1,,11 8,1 4,6 10,7 3,9 5 2
1588,2,0,2,11 8,1 4,6 10,7 3,9 5
1589,1,0,2 8,11,1 4,6 10,7 3,9 5
1590,2,1,2 8,11 5,1 4,6 10,7 3,9
1591,0,2,2,,11 5,1 4,6 10,7 3,9 8
1592,0,1,,2,11 5,1 4,6 10,7 3,9 8
1593,2,1,,2 8,11 5,1 4,6 10,7 3,9
1594,2,0,9,2 8,11 5,1 4,6 10,7 3
1595,1,0,9 8,2,11 5,1 4,6 10,7 3
1596,1,2,9 8,,11 5,1 4,6 10,7 3 2
1597,0,2,9,,11 5,1 4,6 10,7 3 2 8
1598,0,1,,9,11 5,1 4,6 10,7 3 2 8
1599,2,1,,9 8,11 5,1 4,6 10,7 3 2
1600,2,0,2,9 8,11 5,1 4,6 10,7 3
1601,1,0,2 8,9,11 5,1 4,6 10,7 3
1602,2,1,2 8,9 3,11 5,1 4,6 10,7
1603,0,2,2,,9 3,11 5,1 4,6 10,7 8
1604,0,1,,2,9 3,11 5,1 4,6 10,7 8
1605,2,1,,2 8,9 3,11 5,1 4,6 10,7
1606,0,2,,,2 8,9 3,11 5,1 4,6 10,7
1607,1,0,8,2,9 3,11 5,1 4,6 10,7
1608,1,2,8,,9 3,11 5,1 4,6 10,7 2
1609,0,2,,,9 3,11 5,1 4,6 10,7 2 8
1610,0,1,8,,9 3,11 5,1 4,6 10,7 2
1611,2,1,8,2,9 3,11 5,1 4,6 10,7
1612,2,0,8,2 7,9 3,11 5,1 4,6 10
1613,1,0,8 7,2,9 3,11 5,1 4,6 10
1614,1,2,8 7,,9 3,11 5,1 4,6 10 2
1615,0,2,8,,9 3,11 5,1 4,6 10 2 7
1616,0,1,,8,9 3,11 5,1 4,6 10 2 7
1617,2,1,,8 7,9 3,11 5,1 4,6 10 2
1618,2,0,2,8 7,9 3,11 5,1 4,6 10
1619,1,0,2 7,8,9 3,11 5,1 4,6 10
1620,2,1,2 7,8 10,9 3,11 5,1 4,6
1621,0,2,2,,8 10,9 3,11 5,1 4,6 7
1622,0,1,,2,8 10,9 3,11 5,1 4,6 7
1623,2,1,,2 7,8 10,9 3,11 5,1 4,6
1624,2,0,6,2 7,8 10,9 3,11 5,1 4
1625,1,0,6 7,2,8 10,9 3,11 5,1 4
1626,1,2,6 7,,8 10,9 3,11 5,1 4 2
1627,0,2,6,,8 10,9 3,11 5,1 4 2 7
1628,0,1,,6,8 10,9 3,11 5,1 4 2 7
1629,2,1,,6 7,8 10,9 3,11 5,1 4 2
1630,2,0,2,6 7,8 10,9 3,11 5,1 4
1631,1,0,2 7,6,8 10,9 3,11 5,1 4
1632,2,1,2 7,6 4,8 10,9 3,11 5,1
1633,0,2,2,,6 4,8 10,9 3,11 5,1 7
1634,0,1,,2,6 4,8 10,9 3,11 5,1 7
1635,2,1,,2 7,6 4,8 10,9 3,11 5,1
1636,0,2,,,2 7,6 4,8 10,9 3,11 5,1
1637,1,0,7,2,6 4,8 10,9 3,11 5,1
1638,1,2,7,,6 4,8 10,9 3,11 5,1 2
1639,0,2,,,6 4,8 10,9 3,11 5,1 2 7
1640,0,1,7,,6 4,8 10,9 3,11 5,1 2
1641,2,1,7,2,6 4,8 10,9 3,11 5,1
1642,2,0,7,2 1,6 4,8 10,9 3,11 5
1643,1,0,7 1,2,6 4,8 10,9 3,11 5
1644,1,2,7 1,,6 4,8 10,9 3,11 5 2
1645,0,2,7,,6 4,8 10,9 3,11 5 2 1
1646,0,1,,7,6 4,8 10,9 3,11 5 2 1
1647,2,1,,7 1,6 4,8 10,9 3,11 5 2
1648,2,0,2,7 1,6 4,8 10,9 3,11 5
1649,1,0,2 1,7,6 4,8 10,9 3,11 5
1650,2,1,2 1,7 5,6 4,8 10,9 3,11
1651,0,2,2,,7 5,6 4,8 10,9 3,11 1
1652,0,1,,2,7 5,6 4,8 10,9 3,11 1
1653,2,1,,2 1,7 5,6 4,8 10,9 3,11
1654,2,0,11,2 1,7 5,6 4,8 10,9 3
1655,1,0,11 1,2,7 5,6 4,8 10,9 3
1656,1,2,11 1,,7 5,6 4,8 10,9 3 2
1657,0,2,11,,7 5,6 4,8 10,9 3 2 1
1658,0,1,,11,7 5,6 4,8 10,9 3 2 1
1659,2,1,,11 1,7 5,6 4,8 10,9 3 2
1660,2,0,2,11 1,7 5,6 4,8 10,9 3
1661,1,0,2 1,11,7 5,6 4,8 10,9 3
1662,2,1,2 1,11 3,7 5,6 4,8 10,9
1663,0,2,2,,11 3,7 5,6 4,8 10,9 1
1664,0,1,,2,11 3,7 5,6 4,8 10,9 1
1665,2,1,,2 1,11 3,7 5,6 4,8 10,9
1666,0,2,,,2 1,11 3,7 5,6 4,8 10,9
1667,1,0,1,2,11 3,7 5,6 4,8 10,9
1668,1,2,1,,11 3,7 5,6 4,8 10,9 2
1669,0,2,,,11 3,7 5,6 4,8 10,9 2 1
1670,0,1,1,,11 3,7 5,6 4,8 10,9 2
1671,2,1,1,2,11 3,7 5,6 4,8 10,9
1672,2,0,1,2 9,11 3,7 5,6 4,8 10
1673,1,0,1 9,2,11 3,7 5,6 4,8 10
1674,1,2,1 9,,11 3,7 5,6 4,8 10 2
1675,0,2,1,,11 3,7 5,6 4,8 10 2 9
1676,0,1,,1,11 3,7 5,6 4,8 10 2 9
1677,2,1,,1 9,11 3,7 5,6 4,8 10 2
1678,2,0,2,1 9,11 3,7 5,6 4,8 10
1679,1,0,2 9,1,11 3,7 5,6 4,8 10
1680,2,1,2 9,1 10,11 3,7 5,6 4,8
1681,0,2,2,,1 10,11 3,7 5,6 4,8 9
1682,0,1,,2,1 10,11 3,7 5,6 4,8 9
1683,2,1,,2 9,1 10,11 3,7 5,6 4,8
1684,2,0,8,2 9,1 10,11 3,7 5,6 4
1685,1,0,8 9,2,1 10,11 3,7 5,6 4
1686,1,2,8 9,,1 10,11 3,7 5,6 4 2
1687,0,2,8,,1 10,11 3,7 5,6 4 2 9
1688,0,1,,8,1 10,11 3,7 5,6 4 2 9
1689,2,1,,8 9,1 10,11 3,7 5,6 4 2
1690,2,0,2,8 9,1 10,11 3,7 5,6 4
1691,1,0,2 9,8,1 10,11 3,7 5,6 4
1692,2,1,2 9,8 4,1 10,11 3,7 5,6
1693,0,2,2,,8 4,1 10,11 3,7 5,6 9
1694,0,1,,2,8 4,1 10,11 3,7 5,6 9
1695,2,1,,2 9,8 4,1 10,11 3,7 5,6
1696,0,2,,,2 9,8 4,1 10,11 3,7 5,6
1697,1,0,9,2,8 4,1 10,11 3,7 5,6
1698,1,2,9,,8 4,1 10,11 3,7 5,6 2
1699,0,2,,,8 4,1 10,11 3,7 5,6 2 9
1700,0,1,9,,8 4,1 10,11 3,7 5,6 2
1701,2,1,9,2,8 4,1 10,11 3,7 5,6
1702,2,0,9,2 6,8 4,1 10,11 3,7 5
1703,1,0,9 6,2,8 4,1 10,11 3,7 5
1704,1,2,9 6,,8 4,1 10,11 3,7 5 2
1705,0,2,9,,8 4,1 10,11 3,7 5 2 6
1706,0,1,,9,8 4,1 10,11 3,7 5 2 6
1707,2,1,,9 6,8 4,1 10,11 3,7 5 2
1708,2,0,2,9 6,8 4,1 10,11 3,7 5
1709,1,0,2 6,9,8 4,1 10,11 3,7 5
1710,2,1,2 6,9 5,8 4,1 10,11 3,7
1711,0,2,2,,9 5,8 4,1 10,11 3,7 6
1712,0,1,,2,9 5,8 4,1 10,11 3,7 6
1713,2,1,,2 6,9 5,8 4,1 10,11 3,7
1714,2,0,7,2 6,9 5,8 4,1 10,11 3
1715,1,0,7 6,2,9 5,8 4,1 10,11 3
1716,1,2,7 6,,9 5,8 4,1 10,11 3 2
1717,0,2,7,,9 5,8 4,1 10,11 3 2 6
1718,0,1,,7,9 5,8 4,1 10,11 3 2 6
1719,2,1,,7 6,9 5,8 4,1 10,11 3 2
1720,2,0,2,7 6,9 5,8 4,1 10,11 3
1721,1,0,2 6,7,9 5,8 4,1 10,11 3
1722,2,1,2 6,7 3,9 5,8 4,1 10,11
1723,0,2,2,,7 3,9 5,8 4,1 10,11 6
1724,0,1,,2,7 3,9 5,8 4,1 10,11 6
1725,2,1,,2 6,7 3,9 5,8 4,1 10,11
1726,0,2,,,2 6,7 3,9 5,8 4,1 10,11
1727,1,0,6,2,7 3,9 5,8 4,1 10,11
1728,1,2,6,,7 3,9 5,8 4,1 10,11 2
1729,0,2,,,7 3,9 5,8 4,1 10,11 2 6
1730,0,1,6,,7 3,9 5,8 4,1 10,11 2
1731,2,1,6,2,7 3,9 5,8 4,1 10,11
1732,2,0,6,2 11,7 3,9 5,8 4,1 10
1733,1,0,6 11,2,7 3,9 5,8 4,1 10
1734,1,2,6 11,,7 3,9 5,8 4,1 10 2
1735,0,2,6,,7 3,9 5,8 4,1 10 2 11
1736,0,1,,6,7 3,9 5,8 4,1 10 2 11
1737,2,1,,6 11,7 3,9 5,8 4,1 10 2
1738,2,0,2,6 11,7 3,9 5,8 4,1 10
1739,1,0,2 11,6,7 3,9 5,8 4,1 10
1740,2,1,2 11,6 10,7 3,9 5,8 4,1
1741,0,2,2,,6 10,7 3,9 5,8 4,1 11
1742,0,1,,2,6 10,7 3,9 5,8 4,1 11
1743,2,1,,2 11,6 10,7 3,9 5,8 4,1
1744,0,2,,,2 11,6 10,7 3,9 5,8 4,1
1745,1,0,11,2,6 10,7 3,9 5,8 4,1
1746,1,2,11,,6 10,7 3,9 5,8 4,1 2
1747,0,2,,,6 10,7 3,9 5,8 4,1 2 11
1748,0,1,11,,6 10,7 3,9 5,8 4,1 2
1749,2,1,11,2,6 10,7 3,9 5,8 4,1
1750,2,0,11,2 1,6 10,7 3,9 5,8 4
1751,1,0,11 1,2,6 10,7 3,9 5,8 4
1752,1,2,11 1,,6 10,7 3,9 5,8 4 2
1753,0,2,11,,6 10,7 3,9 5,8 4 2 1
1754,0,1,,11,6 10,7 3,9 5,8 4 2 1
1755,2,1,,11 1,6 10,7 3,9 5,8 4 2
1756,2,0,2,11 1,6 10,7 3,9 5,8 4
1757,1,0,2 1,11,6 10,7 3,9 5,8 4
1758,2,1,2 1,11 4,6 10,7 3,9 5,8
1759,0,2,2,,11 4,6 10,7 3,9 5,8 1
1760,0,1,,2,11 4,6 10,7 3,9 5,8 1
1761,2,1,,2 1,11 4,6 10,7 3,9 5,8
1762,0,2,,,2 1,11 4,6 10,7 3,9 5,8
1763,1,0,1,2,11 4,6 10,7 3,9 5,8
1764,1,2,1,,11 4,6 10,7 3,9 5,8 2
1765,0,2,,,11 4,6 10,7 3,9 5,8 2 1
1766,0,1,1,,11 4,6 10,7 3,9 5,8 2
1767,2,1,1,2,11 4,6 10,7 3,9 5,8
1768,2,0,1,2 8,11 4,6 10,7 3,9 5
1769,1,0,1 8,2,11 4,6 10,7 3,9 5
1770,1,2,1 8,,11 4,6 10,7 3,9 5 2
1771,0,2,1,,11 4,6 10,7 3,9 5 2 8
1772,0,1,,1,11 4,6 10,7 3,9 5 2 8
1773,2,1,,1 8,11 4,6 10,7 3,9 5 2
1774,2,0,2,1 8,11 4,6 10,7 3,9 5
1775,1,0,2 8,1,11 4,6 10,7 3,9 5
1776,2,1,2 8,1 5,11 4,6 10,7 3,9
1777,0,2,2,,1 5,11 4,6 10,7 3,9 8
1778,0,1,,2,1 5,11 4,6 10,7 3,9 8
1779,2,1,,2 8,1 5,11 4,6 10,7 3,9
1780,2,0,9,2 8,1 5,11 4,6 10,7 3
1781,1,0,9 8,2,1 5,11 4,6 10,7 3
1782,1,2,9 8,,1 5,11 4,6 10,7 3 2
1783,0,2,9,,1 5,11 4,6 10,7 3 2 8
1784,0,1,,9,1 5,11 4,6 10,7 3 2 8
1785,2,1,,9 8,1 5,11 4,6 10,7 3 2
1786,2,0,2,9 8,1 5,11 4,6 10,7 3
1787,1,0,2 8,9,1 5,11 4,6 10,7 3
1788,2,1,2 8,9 3,1 5,11 4,6 10,7
1789,0,2,2,,9 3,1 5,11 4,6 10,7 8
1790,0,1,,2,9 3,1 5,11 4,6 10,7 8
1791,2,1,,2 8,9 3,1 5,11 4,6 10,7
1792,0,2,,,2 8,9 3,1 5,11 4,6 10,7
1793,1,0,8,2,9 3,1 5,11 4,6 10,7
1794,1,2,8,,9 3,1 5,11 4,6 10,7 2
1795,0,2,,,9 3,1 5,11 4,6 10,7 2 8
1796,0,1,8,,9 3,1 5,11 4,6 10,7 2
1797,2,1,8,2,9 3,1 5,11 4,6 10,7
1798,2,0,8,2 7,9 3,1 5,11 4,6 10
1799,1,0,8 7,2,9 3,1 5,11 4,6 10
1800,1,2,8 7,,9 3,1 5,11 4,6 10 2
1801,0,2,8,,9 3,1 5,11 4,6 10 2 7
1802,0,1,,8,9 3,1 5,11 4,6 10 2 7
1803,2,1,,8 7,9 3,1 5,11 4,6 10 2
1804,2,0,2,8 7,9 3,1 5,11 4,6 10
1805,1,0,2 7,8,9 3,1 5,11 4,6 10
1806,2,1,2 7,8 10,9 3,1 5,11 4,6
1807,0,2,2,,8 10,9 3,1 5,11 4,6 7
1808,0,1,,2,8 10,9 3,1 5,11 4,6 7
1809,2,1,,2 7,8 10,9 3,1 5,11 4,6
1810,2,0,6,2 7,8 10,9 3,1 5,11 4
1811,1,0,6 7,2,8 10,9 3,1 5,11 4
1812,1,2,6 7,,8 10,9 3,1 5,11 4 2
1813,0,2,6,,8 10,9 3,1 5,11 4 2 7
1814,0,1,,6,8 10,9 3,1 5,11 4 2 7
1815,2,1,,6 7,8 10,9 3,1 5,11 4 2
1816,2,0,2,6 7,8 10,9 3,1 5,11 4
1817,1,0,2 7,6,8 10,9 3,1 5,11 4
1818,2,1,2 7,6 4,8 10,9 3,1 5,11
1819,0,2,2,,6 4,8 10,9 

