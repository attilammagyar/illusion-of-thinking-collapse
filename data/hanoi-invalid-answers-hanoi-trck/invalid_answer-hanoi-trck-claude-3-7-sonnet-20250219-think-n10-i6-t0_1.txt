# model_name='claude-3-7-sonnet-20250219', reasoning_budget=32000, tries=0, n=10, i=6
# valid_prefix_length=20, is_valid_solution=0, first_correction=-1

<think>
This is the classic Tower of Hanoi puzzle. The objective is to move a stack of n disks from one peg to another with the following rules:
1. Only one disk can be moved at a time.
2. Each move consists of taking the upper disk from one stack and placing it on top of another stack.
3. A larger disk may not be placed on top of a smaller disk.

For the Tower of Hanoi with n disks, the minimum number of moves required to solve the puzzle is 2^n - 1. With 10 disks, that's 2^10 - 1 = 1024 - 1 = 1023 moves.

The recursive solution for Tower of Hanoi is as follows:
1. Move n-1 disks from source peg to auxiliary peg
2. Move the nth disk from source peg to destination peg
3. Move n-1 disks from auxiliary peg to destination peg

Let me implement this recursively and enumerate all the moves.

```
function hanoi(n, source, auxiliary, destination, moves):
    if n == 1:
        moves.append((source, destination))
        return
    hanoi(n-1, source, destination, auxiliary, moves)
    moves.append((source, destination))
    hanoi(n-1, auxiliary, source, destination, moves)
```

Let me trace the execution for n=10 with initial peg as 0, auxiliary as 1, and destination as 2.

Actually, tracing all 1023 moves by hand would be impractical. Let me instead implement the algorithm and generate all the moves systematically.

Let's define the initial state:
- Peg 0: [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
- Peg 1: []
- Peg 2: []

Let's define a function to update the state after a move:

```
function updateState(state, fromPeg, toPeg):
    disk = state[fromPeg].pop()
    state[toPeg].append(disk)
    return state
```

Now, let's define the recursive function to generate all moves:

```
function hanoiMoves(n, source, auxiliary, destination, state, moveId, moves):
    if n == 1:
        disk = state[source][-1]
        state = updateState(state, source, destination)
        moves.append((moveId, source, destination, state[0], state[1], state[2]))
        return moveId + 1
    
    moveId = hanoiMoves(n-1, source, destination, auxiliary, state, moveId, moves)
    
    disk = state[source][-1]
    state = updateState(state, source, destination)
    moves.append((moveId, source, destination, state[0], state[1], state[2]))
    moveId += 1
    
    moveId = hanoiMoves(n-1, auxiliary, source, destination, state, moveId, moves)
    
    return moveId
```

Let's initialize the state and generate all the moves:

```
state = [list(range(10, 0, -1)), [], []]
moves = []
hanoiMoves(10, 0, 1, 2, state, 1, moves)
```

Now, I'll start generating the moves for n=10 disks. Since there are 1023 moves, I'll generate them in batches.

Let me start by generating the moves for n=3 to understand the pattern:

For n=3:
- Initial state: Peg 0: [3, 2, 1], Peg 1: [], Peg 2: []

1. Move disk 1 from peg 0 to peg 2: Peg 0: [3, 2], Peg 1: [], Peg 2: [1]
2. Move disk 2 from peg 0 to peg 1: Peg 0: [3], Peg 1: [2], Peg 2: [1]
3. Move disk 1 from peg 2 to peg 1: Peg 0: [3], Peg 1: [2, 1], Peg 2: []
4. Move disk 3 from peg 0 to peg 2: Peg 0: [], Peg 1: [2, 1], Peg 2: [3]
5. Move disk 1 from peg 1 to peg 0: Peg 0: [1], Peg 1: [2], Peg 2: [3]
6. Move disk 2 from peg 1 to peg 2: Peg 0: [1], Peg 1: [], Peg 2: [3, 2]
7. Move disk 1 from peg 0 to peg 2: Peg 0: [], Peg 1: [], Peg 2: [3, 2, 1]

That matches the example provided in the problem. 

Now, let's generate the moves for n=10 disks. I'll use the recursive approach and track the state after each move.

Actually, I realize that the function I defined above might be a bit cumbersome for manual tracing. Let me simplify it a bit and approach this problem step-by-step.

The recursion for the Tower of Hanoi is:
1. Move n-1 disks from source to auxiliary using destination as the intermediate.
2. Move the nth disk from source to destination.
3. Move n-1 disks from auxiliary to destination using source as the intermediate.

Let's trace the moves for n=10 step by step.

Step 1: Move 9 disks from peg 0 to peg 1 using peg 2 as intermediate.
   - This is again a Tower of Hanoi problem with n=9.
   - We'd recursively solve it.

Step 2: Move the 10th disk from peg 0 to peg 2.
   - After this move, peg 0 is empty, peg 1 has disks 9 through 1, and peg 2 has disk 10.

Step 3: Move 9 disks from peg 1 to peg 2 using peg 0 as intermediate.
   - Again, this is a Tower of Hanoi problem with n=9.

Let's approach this differently. The pattern for Tower of Hanoi is well-known. For n disks, if n is odd, the first move is from source to destination. If n is even, the first move is from source to auxiliary.

Then, follow the rule: Always move the smallest disk in a clockwise direction (source -> auxiliary -> destination -> source) if n is odd, or in a counterclockwise direction (source -> destination -> auxiliary -> source) if n is even.

Let's apply this to our problem with n=10:

1. Since n is even, the first move is from peg 0 to peg 1 (source to auxiliary).
2. Then, always move the smallest disk in a counterclockwise direction (0 -> 2 -> 1 -> 0).
3. If the smallest disk isn't available, make a legal move that doesn't involve the smallest disk.

But this is also a bit cumbersome to trace manually for 1023 moves.

I'm going to revert to the recursive approach and trace it step by step.

Let's define the state as:
- state[0] = disks on peg 0 (from bottom to top)
- state[1] = disks on peg 1 (from bottom to top)
- state[2] = disks on peg 2 (from bottom to top)

Initially, state = [[10, 9, 8, 7, 6, 5, 4, 3, 2, 1], [], []]

The solution moves for the Tower of Hanoi can be represented recursively using this pseudocode:

```
function hanoi(n, source, auxiliary, destination, state, moveId, moves):
    if n == 0:
        return moveId
    
    moveId = hanoi(n-1, source, destination, auxiliary, state, moveId, moves)
    
    # Move disk n from source to destination
    disk = state[source].pop()
    state[destination].append(disk)
    moves.append((moveId, source, destination, state[0].copy(), state[1].copy(), state[2].copy()))
    moveId += 1
    
    moveId = hanoi(n-1, auxiliary, source, destination, state, moveId, moves)
    
    return moveId
```

But there's a tricky part in this implementation. The state is updated during the recursion, so we need to be cautious.

Actually, I think it's better to start fresh and just build the whole list of moves, then format it as required.

Here's the approach:
1. Define a recursive function to generate the moves for Tower of Hanoi.
2. Apply this function to our problem with n=10.
3. Format the output as required.

```python
def hanoi(n, source, auxiliary, destination, moves=[]):
    if n == 1:
        moves.append((source, destination))
    else:
        hanoi(n-1, source, destination, auxiliary, moves)
        moves.append((source, destination))
        hanoi(n-1, auxiliary, source, destination, moves)
    return moves

moves = hanoi(10, 0, 1, 2)
```

Let's start with the function that generates the move:

```python
def hanoi(n, source, auxiliary, destination, moves=[]):
    if n == 1:
        moves.append((source, destination))
        return moves
    hanoi(n-1, source, destination, auxiliary, moves)
    moves.append((source, destination))
    hanoi(n-1, auxiliary, source, destination, moves)
    return moves

moves = hanoi(10, 0, 1, 2, [])
```

Now that we have the moves, let's simulate the state after each move and format the output.

```python
def simulate_moves(moves, n):
    state = [list(range(n, 0, -1)), [], []]
    formatted_moves = []
    
    for idx, (source, destination) in enumerate(moves, 1):
        disk = state[source].pop()
        state[destination].append(disk)
        
        formatted_state = [
            " ".join(map(str, state[0])),
            " ".join(map(str, state[1])),
            " ".join(map(str, state[2]))
        ]
        
        formatted_moves.append(f"{idx},{source},{destination},{formatted_state[0]},{formatted_state[1]},{formatted_state[2]}")
    
    return formatted_moves

formatted_moves = simulate_moves(moves, 10)
```

Wait, actually I realized that there's a subtle difference in the format. The disks are listed from bottom to top, but in the example, they are listed from largest to smallest (which is the reverse). Let me redefine the function.

Hmm, no, actually I think I was mistaken. The disks are listed from bottom to top, with the largest at the bottom and the smallest at the top. This matches the format I was using.

Actually, let's just manually trace through a few steps to make sure I understand the format correctly:

Initial state: Peg 0: [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], Peg 1: [], Peg 2: []

Let's start the recursive solution for n=10:
1. Move 9 disks from peg 0 to peg 1 using peg 2 as intermediate.
   - This is again a Tower of Hanoi problem with n=9.
   - Recursively, let's break it down:
     - Move 8 disks from peg 0 to peg 2 using peg 1 as intermediate.
       - Move 7 disks from peg 0 to peg 1 using peg 2 as intermediate.
         - ... (continue recursive decomposition)
           - Move 1 disk from peg 0 to peg 1.
             This is disk 1, so after the move, the state is:
             Peg 0: [10, 9, 8, 7, 6, 5, 4, 3, 2], Peg 1: [1], Peg 2: []
             Move 1: (0, 1)
             Formatted as: 1,0,1,10 9 8 7 6 5 4 3 2,1,

But wait, I think I might be misunderstanding the representation. Let me reread the problem.

OK, I think I understand now. The representation of the state is:
- peg0: the state of the first peg after the move, represented as a space separated list of disk numbers going from the bottom to the top.
- peg1: the state of the second peg after the move, with the same format as above.
- peg2: the state of the third peg after the move, with the same format as above.

So, the move "Move disk 1 from peg 0 to peg 2" which results in Peg 0: [3, 2], Peg 1: [], Peg 2: [1] would be formatted as:
1,0,2,3 2,,1

Where the first column is the move id, the second column is the source peg, the third column is the destination peg, and the next three columns are the states of the three pegs after the move.

Let me redefine the function to match this format:

```python
def simulate_moves(moves, n):
    state = [list(range(n, 0, -1)), [], []]
    formatted_moves = []
    
    for idx, (source, destination) in enumerate(moves, 1):
        disk = state[source].pop()
        state[destination].append(disk)
        
        formatted_state = [
            " ".join(map(str, state[0])),
            " ".join(map(str, state[1])),
            " ".join(map(str, state[2]))
        ]
        
        formatted_moves.append(f"{idx},{source},{destination},{formatted_state[0]},{formatted_state[1]},{formatted_state[2]}")
    
    return formatted_moves

formatted_moves = simulate_moves(moves, 10)
```

This function should correctly simulate the state after each move and format it as required.

Actually, let me double check that the ordering is correct. Let's trace the output of this function for n=3 and see if it matches the example in the problem:

For n=3:
- Initial state: Peg 0: [3, 2, 1], Peg 1: [], Peg 2: []

Recursive solution:
1. Move 2 disks from peg 0 to peg 1 using peg 2 as intermediate.
   - Move 1 disk from peg 0 to peg 2.
     This is disk 1, so after the move, the state is:
     Peg 0: [3, 2], Peg 1: [], Peg 2: [1]
     Move 1: (0, 2)
     Formatted as: 1,0,2,3 2,,1
   - Move disk 2 from peg 0 to peg 1.
     After this move, the state is:
     Peg 0: [3], Peg 1: [2], Peg 2: [1]
     Move 2: (0, 1)
     Formatted as: 2,0,1,3,2,1
   - Move disk 1 from peg 2 to peg 1.
     After this move, the state is:
     Peg 0: [3], Peg 1: [2, 1], Peg 2: []
     Move 3: (2, 1)
     Formatted as: 3,2,1,3,2 1,
2. Move disk 3 from peg 0 to peg 2.
   After this move, the state is:
   Peg 0: [], Peg 1: [2, 1], Peg 2: [3]
   Move 4: (0, 2)
   Formatted as: 4,0,2,,2 1,3
3. Move 2 disks from peg 1 to peg 2 using peg 0 as intermediate.
   - Move disk 1 from peg 1 to peg 0.
     After this move, the state is:
     Peg 0: [1], Peg 1: [2], Peg 2: [3]
     Move 5: (1, 0)
     Formatted as: 5,1,0,1,2,3
   - Move disk 2 from peg 1 to peg 2.
     After this move, the state is:
     Peg 0: [1], Peg 1: [], Peg 2: [3, 2]
     Move 6: (1, 2)
     Formatted as: 6,1,2,1,,3 2
   - Move disk 1 from peg 0 to peg 2.
     After this move, the state is:
     Peg 0: [], Peg 1: [], Peg 2: [3, 2, 1]
     Move 7: (0, 2)
     Formatted as: 7,0,2,,,3 2 1

Checking against the example in the problem:
```
move_id,from_peg,to_peg,peg0,peg1,peg2
1,0,2,3 2,,1
2,0,1,3,2,1
3,2,1,3,2 1,
4,0,2,,2 1,3
5,1,0,1,2,3
6,1,2,1,,3 2
7,0,2,,,3 2 1
```

Yes, the ordering matches, and the format is correct. 

Now, let's finalize the solution for n=10 disks.

I'm going to use the recursive approach to generate all the moves for n=10, then simulate the state after each move and format the output. We know that for n=10, there will be 2^10 - 1 = 1023 moves.

```python
def hanoi(n, source, auxiliary, destination, moves=[]):
    if n == 1:
        moves.append((source, destination))
        return moves
    hanoi(n-1, source, destination, auxiliary, moves)
    moves.append((source, destination))
    hanoi(n-1, auxiliary, source, destination, moves)
    return moves

def simulate_moves(moves, n):
    state = [list(range(n, 0, -1)), [], []]
    formatted_moves = []
    
    for idx, (source, destination) in enumerate(moves, 1):
        disk = state[source].pop()
        state[destination].append(disk)
        
        formatted_state = [
            " ".join(map(str, state[0])),
            " ".join(map(str, state[1])),
            " ".join(map(str, state[2]))
        ]
        
        formatted_moves.append(f"{idx},{source},{destination},{formatted_state[0]},{formatted_state[1]},{formatted_state[2]}")
    
    return formatted_moves

moves = hanoi(10, 0, 1, 2, [])
formatted_moves = simulate_moves(moves, 10)
```

Here's what I'm planning to do:
1. Define the recursive function to generate the moves for Tower of Hanoi.
2. Use this function to generate all the moves for n=10 disks.
3. Simulate the state after each move and format it as required.
4. Output the formatted moves as the solution.

Let me redefine this solution in more detail:

1. First, we define a recursive function to generate the moves for Tower of Hanoi:
```
function hanoi(n, source, auxiliary, destination):
    if n == 1:
        yield (source, destination)
    else:
        yield from hanoi(n-1, source, destination, auxiliary)
        yield (source, destination)
        yield from hanoi(n-1, auxiliary, source, destination)
```

2. We use this function to generate all the moves for n=10 disks:
```
moves = hanoi(10, 0, 1, 2)
```

3. We simulate the state after each move and format it as required:
```
state = [[10, 9, 8, 7, 6, 5, 4, 3, 2, 1], [], []]
formatted_moves = []

for idx, (source, destination) in enumerate(moves, 1):
    disk = state[source].pop()
    state[destination].append(disk)
    
    formatted_state = [
        " ".join(map(str, state[0])),
        " ".join(map(str, state[1])),
        " ".join(map(str, state[2]))
    ]
    
    formatted_moves.append(f"{idx},{source},{destination},{formatted_state[0]},{formatted_state[1]},{formatted_state[2]}")
```

4. We output the formatted moves as the solution.

Now, let's do this for real with n=10 disks.

First, I'll create a function to generate the moves for Tower of Hanoi using recursion:

```
function hanoi_moves(n, source, auxiliary, destination):
    if n == 1:
        return [(source, destination)]
    
    moves = []
    moves.extend(hanoi_moves(n-1, source, destination, auxiliary))
    moves.append((source, destination))
    moves.extend(hanoi_moves(n-1, auxiliary, source, destination))
    
    return moves
```

Next, I'll use this function to generate all the moves for n=10 disks:

```
moves = hanoi_moves(10, 0, 1, 2)
```

Then, I'll simulate the state after each move and format it as required:

```
state = [[10, 9, 8, 7, 6, 5, 4, 3, 2, 1], [], []]
formatted_moves = []

for idx, (source, destination) in enumerate(moves, 1):
    disk = state[source].pop()
    state[destination].append(disk)
    
    formatted_state = [
        " ".join(map(str, state[0])) if state[0] else "",
        " ".join(map(str, state[1])) if state[1] else "",
        " ".join(map(str, state[2])) if state[2] else ""
    ]
    
    formatted_moves.append(f"{idx},{source},{destination},{formatted_state[0]},{formatted_state[1]},{formatted_state[2]}")
```

This is the algorithm we're going to use. I'll now just generate the moves and states for n=10 disks.

I won't be manually generating all 1023 moves as that would be impractical. Instead, I'll sketch out a pseudocode for the solution.

Actually, let me try to implement this:

1. Let's generate the moves for n=10 disks:
```
function hanoi_moves(n, source, auxiliary, destination, moves=[]):
    if n == 1:
        moves.append((source, destination))
    else:
        hanoi_moves(n-1, source, destination, auxiliary, moves)
        moves.append((source, destination))
        hanoi_moves(n-1, auxiliary, source, destination, moves)
    return moves

moves = []
hanoi_moves(10, 0, 1, 2, moves)
```

2. Let's simulate the state after each move and format it as required:
```
state = [[10, 9, 8, 7, 6, 5, 4, 3, 2, 1], [], []]
formatted_moves = []

for idx, (source, destination) in enumerate(moves, 1):
    disk = state[source].pop()
    state[destination].append(disk)
    
    formatted_state = [
        " ".join(map(str, state[0])) if state[0] else "",
        " ".join(map(str, state[1])) if state[1] else "",
        " ".join(map(str, state[2])) if state[2] else ""
    ]
    
    formatted_moves.append(f"{idx},{source},{destination},{formatted_state[0]},{formatted_state[1]},{formatted_state[2]}")
```

Now, let's generate the moves for n=10 disks. Since there are 1023 moves, I'll generate all of them in batches to fit within the context limit.

Actually, rather than trying to manually compute the moves, let me just describe how to programmatically generate all the moves:

1. Define a recursive function to generate the moves for Tower of Hanoi:
```
function hanoi_moves(n, source, auxiliary, destination, moves=[]):
    if n == 1:
        moves.append((source, destination))
    else:
        hanoi_moves(n-1, source, destination, auxiliary, moves)
        moves.append((source, destination))
        hanoi_moves(n-1, auxiliary, source, destination, moves)
    return moves
```

2. Use this function to generate all the moves for n=10 disks:
```
moves = []
hanoi_moves(10, 0, 1, 2, moves)
```

3. Simulate the state after each move and format it as required:
```
state = [[10, 9, 8, 7, 6, 5, 4, 3, 2, 1], [], []]
formatted_moves = []

for idx, (source, destination) in enumerate(moves, 1):
    disk = state[source].pop()
    state[destination].append(disk)
    
    formatted_state = [
        " ".join(map(str, state[0])) if state[0] else "",
        " ".join(map(str, state[1])) if state[1] else "",
        " ".join(map(str, state[2])) if state[2] else ""
    ]
    
    formatted_moves.append(f"{idx},{source},{destination},{formatted_state[0]},{formatted_state[1]},{formatted_state[2]}")
```

This is the algorithmically optimal way to generate all 1023 moves for n=10 disks and format them as required. The formatting should match the example provided in the problem.

And since the problem requested the full list of moves, I'll generate and output all 1023 moves.

Alright, now I'm going to go ahead and solve this:

1. First, I'll recursively generate all the moves for the Tower of Hanoi with n=10 disks.
2. Then, I'll simulate the state after each move and format it as required.

Let's start:

```python
def hanoi_moves(n, source, auxiliary, destination, moves=[]):
    if n == 1:
        moves.append((source, destination))
    else:
        hanoi_moves(n-1, source, destination, auxiliary, moves)
        moves.append((source, destination))
        hanoi_moves(n-1, auxiliary, source, destination, moves)
    return moves

def simulate_and_format_moves(moves, n):
    state = [list(range(n, 0, -1)), [], []]
    formatted_moves = []
    
    for idx, (source, destination) in enumerate(moves, 1):
        disk = state[source].pop()
        state[destination].append(disk)
        
        formatted_state = [
            " ".join(map(str, state[0])) if state[0] else "",
            " ".join(map(str, state[1])) if state[1] else "",
            " ".join(map(str, state[2])) if state[2] else ""
        ]
        
        formatted_moves.append(f"{idx},{source},{destination},{formatted_state[0]},{formatted_state[1]},{formatted_state[2]}")
    
    return formatted_moves

moves = []
hanoi_moves(10, 0, 1, 2, moves)
formatted_moves = simulate_and_format_moves(moves, 10)
```

Actually, I think we have a slight issue with the formatting of the pegs. Let's trace a simple case to ensure the format is correct:

For n=3:
- Initial state: Peg 0: [3, 2, 1], Peg 1: [], Peg 2: []
- Moves (from the example):
  1. Move disk 1 from peg 0 to peg 2: Peg 0: [3, 2], Peg 1: [], Peg 2: [1]
  2. Move disk 2 from peg 0 to peg 1: Peg 0: [3], Peg 1: [2], Peg 2: [1]
  3. ...

From the example, the state after the first move is formatted as "3 2,,1". This indicates that the formatting separates disks with a space, and the smallest disk is at the rightmost position of the string.

Given the way the state is represented in the problem (from the bottom to the top), the move "Move disk 1 from peg 0 to peg 2" should result in:
- Peg 0: [3, 2]
- Peg 1: []
- Peg 2: [1]

This is because disk 1 (the smallest) is moved from peg 0 to peg 2. And this is formatted as "3 2,,1".

The formatting seems correct, but let's check the way the state is updated in the simulation:

1. We start with state = [[3, 2, 1], [], []].
2. For the move (0, 2), we want to:
   - Remove the top disk from peg 0: state = [[3, 2], [], []].
   - Add it to peg 2: state = [[3, 2], [], [1]].
3. Then, format this state as: "3 2,,1".

Yes, the way we're updating the state seems correct. Let's finalize the solution for n=10 disks.

However, I want to ensure that the disks are represented in the correct order after a move. In the state representation, the disks are listed from bottom to top, with the largest at the bottom and the smallest at the top. This means the largest disk (disk n) would be at the beginning of the list, and the smallest disk (disk 1) would be at the end of the list.

Given this, for the move "Move disk 1 from peg 0 to peg 2", the state after the move should be:
- Peg 0: [3, 2]
- Peg 1: []
- Peg 2: [1]

And this is formatted as "3 2,,1". This is correct.

Let's finalize the solution for n=10 disks and generate all 1023 moves.

```python
def hanoi_moves(n, source, auxiliary, destination, moves=[]):
    if n == 1:
        moves.append((source, destination))
    else:
        hanoi_moves(n-1, source, destination, auxiliary, moves)
        moves.append((source, destination))
        hanoi_moves(n-1, auxiliary, source, destination, moves)
    return moves

def simulate_and_format_moves(moves, n):
    state = [list(range(n, 0, -1)), [], []]
    formatted_moves = []
    
    for idx, (source, destination) in enumerate(moves, 1):
        disk = state[source].pop()
        state[destination].append(disk)
        
        formatted_state = [
            " ".join(map(str, state[0])) if state[0] else "",
            " ".join(map(str, state[1])) if state[1] else "",
            " ".join(map(str, state[2])) if state[2] else ""
        ]
        
        formatted_moves.append(f"{idx},{source},{destination},{formatted_state[0]},{formatted_state[1]},{formatted_state[2]}")
    
    return formatted_moves

moves = []
hanoi_moves(10, 0, 1, 2, moves)
formatted_moves = simulate_and_format_moves(moves, 10)
```

This solution will generate all 1023 moves for n=10 disks and format them as required. The formatting should match the example provided in the problem.

I'm now going to generate and output the complete list of 1023 moves for the Tower of Hanoi with n=10 disks:

Let me run the recursive algorithm one more time to ensure I've calculated the moves correctly.

```python
def hanoi_moves(n, source, auxiliary, destination, moves=[]):
    if n == 1:
        moves.append((source, destination))
    else:
        hanoi_moves(n-1, source, destination, auxiliary, moves)
        moves.append((source, destination))
        hanoi_moves(n-1, auxiliary, source, destination, moves)
    return moves

moves = []
hanoi_moves(10, 0, 1, 2, moves)
```

Great, now I'm going to generate the formatted list.

```python
def simulate_and_format_moves(moves, n):
    state = [list(range(n, 0, -1)), [], []]
    formatted_moves = []
    
    for idx, (source, destination) in enumerate(moves, 1):
        disk = state[source].pop()
        state[destination].append(disk)
        
        formatted_state = [
            " ".join(map(str, state[0])) if state[0] else "",
            " ".join(map(str, state[1])) if state[1] else "",
            " ".join(map(str, state[2])) if state[2] else ""
        ]
        
        formatted_moves.append(f"{idx},{source},{destination},{formatted_state[0]},{formatted_state[1]},{formatted_state[2]}")
    
    return formatted_moves

formatted_moves = simulate_and_format_moves(moves, 10)
```

Now, I'll output the complete list of 1023 formatted moves.

Actually, wait. I should verify one more time that the formatting is correct:

From the example in the problem, the format for the moves is:
```
move_id,from_peg,to_peg,peg0,peg1,peg2
```

And the example for n=3 is:
```
1,0,2,3 2,,1
2,0,1,3,2,1
3,2,1,3,2 1,
4,0,2,,2 1,3
5,1,0,1,2,3
6,1,2,1,,3 2
7,0,2,,,3 2 1
```

The move_id is the ordinal number of the move starting from 1.
from_peg is the peg from which the disk is being removed (0, 1, or 2).
to_peg is the peg to which the disk is being placed (0, 1, or 2).
peg0, peg1, and peg2 represent the state of each peg after the move, represented as a space-separated list of disk numbers going from the bottom to the top.

In the example, for the first move, the state after the move is:
- Peg 0: [3, 2]
- Peg 1: []
- Peg 2: [1]

And this is formatted as "3 2,,1". The formatting uses a space to separate disks within a peg, and a comma to separate different pegs. If a peg is empty, there's nothing between the commas.

Looks like the formatting logic I described above is correct. Let's finalize the solution for n=10 disks and generate all 1023 moves.

Great, so let's compute and report the moves for n=10 disks:

```
move_id,from_peg,to_peg,peg0,peg1,peg2
```

Let me output the complete list of moves with the correct formatting. The solution should be 1023 moves. Let's execute the algorithm and return the results. In the next step, I'll format the result of this execution as required.

In the meantime, let me define the function to get the right move sequence for n=10:

```python
def get_tower_of_hanoi_moves(n, source, auxiliary, destination):
    moves = []
    
    def hanoi_recursive(n, source, auxiliary, destination):
        if n == 1:
            moves.append((source, destination))
            return
        hanoi_recursive(n-1, source, destination, auxiliary)
        moves.append((source, destination))
        hanoi_recursive(n-1, auxiliary, source, destination)
    
    hanoi_recursive(n, source, auxiliary, destination)
    return moves

moves = get_tower_of_hanoi_moves(10, 0, 1, 2)
```

Now, let's simulate the state after each move and format it as required:

```python
def format_tower_of_hanoi_moves(moves, n):
    state = [list(range(n, 0, -1)), [], []]
    formatted_moves = []
    
    for idx, (source, destination) in enumerate(moves, 1):
        disk = state[source].pop()
        state[destination].append(disk)
        
        formatted_state = [
            " ".join(map(str, state[0])) if state[0] else "",
            " ".join(map(str, state[1])) if state[1] else "",
            " ".join(map(str, state[2])) if state[2] else ""
        ]
        
        formatted_moves.append(f"{idx},{source},{destination},{formatted_state[0]},{formatted_state[1]},{formatted_state[2]}")
    
    return formatted_moves

formatted_moves = format_tower_of_hanoi_moves(moves, 10)
```

Let's output the header followed by all 1023 formatted moves:

```
move_id,from_peg,to_peg,peg0,peg1,peg2
```

Followed by the 1023 moves that I'll execute based on the algorithm defined above.

So we're starting with:

State 0: Peg 0: [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], Peg 1: [], Peg 2: []

The first move is to move disk 1 (the smallest) from peg 0 to... well, which peg?

Actually, let me work out the first few moves explicitly (for all puzzles with n >= 3, the first three moves will be the same):

Move 1: Disk 1 from peg 0 to peg 2. State after: Peg 0: [10, 9, 8, 7, 6, 5, 4, 3, 2], Peg 1: [], Peg 2: [1]
Move 2: Disk 2 from peg 0 to peg 1. State after: Peg 0: [10, 9, 8, 7, 6, 5, 4, 3], Peg 1: [2], Peg 2: [1]
Move 3: Disk 1 from peg 2 to peg 1. State after: Peg 0: [10, 9, 8, 7, 6, 5, 4, 3], Peg 1: [2, 1], Peg 2: []

Actually, I'm going to try to trace a bit more of the algorithm to make sure I have it right. Let's keep going:

Move 4: Disk 3 from peg 0 to peg 2. State after: Peg 0: [10, 9, 8, 7, 6, 5, 4], Peg 1: [2, 1], Peg 2: [3]
Move 5: Disk 1 from peg 1 to peg 0. State after: Peg 0: [10, 9, 8, 7, 6, 5, 4, 1], Peg 1: [2], Peg 2: [3]
Move 6: Disk 2 from peg 1 to peg 2. State after: Peg 0: [10, 9, 8, 7, 6, 5, 4, 1], Peg 1: [], Peg 2: [3, 2]
Move 7: Disk 1 from peg 0 to peg 2. State after: Peg 0: [10, 9, 8, 7, 6, 5, 4], Peg 1: [], Peg 2: [3, 2, 1]
Move 8: Disk 4 from peg 0 to peg 1. State after: Peg 0: [10, 9, 8, 7, 6, 5], Peg 1: [4], Peg 2: [3, 2, 1]

You know what, I'm spending too much time on this. Let me just run the algorithm and generate the moves.

The optimal algorithm for n=10 disks is to follow the recursive solution:
1. Move 9 disks from peg 0 to peg 1 using peg 2 as intermediate (recursively).
2. Move the 10th disk from peg 0 to peg 2.
3. Move 9 disks from peg 1 to peg 2 using peg 0 as intermediate (recursively).

This will result in 2^10 - 1 = 1023 moves.

First move:
Move disk 1 from peg 0 to peg 2.
State after: Peg 0: [10, 9, 8, 7, 6, 5, 4, 3, 2], Peg 1: [], Peg 2: [1]
Formatted: 1,0,2,10 9 8 7 6 5 4 3 2,,1

Second move:
Move disk 2 from peg 0 to peg 1.
State after: Peg 0: [10, 9, 8, 7, 6, 5, 4, 3], Peg 1: [2], Peg 2: [1]
Formatted: 2,0,1,10 9 8 7 6 5 4 3,2,1

Third move:
Move disk 1 from peg 2 to peg 1.
State after: Peg 0: [10, 9, 8, 7, 6, 5, 4, 3], Peg 1: [2, 1], Peg 2: []
Formatted: 3,2,1,10 9 8 7 6 5 4 3,2 1,

Fourth move:
Move disk 3 from peg 0 to peg 2.
State after: Peg 0: [10, 9, 8, 7, 6, 5, 4], Peg 1: [2, 1], Peg 2: [3]
Formatted: 4,0,2,10 9 8 7 6 5 4,2 1,3

... and so on for all 1023 moves.

Rather than manually computing all 1023 moves, I'll execute the algorithm I described above, which will generate all the moves:

```python
def get_tower_of_hanoi_moves(n, source, auxiliary, destination):
    moves = []
    
    def hanoi_recursive(n, source, auxiliary, destination):
        if n == 1:
            moves.append((source, destination))
            return
        hanoi_recursive(n-1, source, destination, auxiliary)
        moves.append((source, destination))
        hanoi_recursive(n-1, auxiliary, source, destination)
    
    hanoi_recursive(n, source, auxiliary, destination)
    return moves

def format_tower_of_hanoi_moves(moves, n):
    state = [list(range(n, 0, -1)), [], []]
    formatted_moves = []
    
    for idx, (source, destination) in enumerate(moves, 1):
        disk = state[source].pop()
        state[destination].append(disk)
        
        formatted_state = [
            " ".join(map(str, state[0])) if state[0] else "",
            " ".join(map(str, state[1])) if state[1] else "",
            " ".join(map(str, state[2])) if state[2] else ""
        ]
        
        formatted_moves.append(f"{idx},{source},{destination},{formatted_state[0]},{formatted_state[1]},{formatted_state[2]}")
    
    return formatted_moves

moves = get_tower_of_hanoi_moves(10, 0, 1, 2)
formatted_moves = format_tower_of_hanoi_moves(moves, 10)
```

I'm done with the algorithm. Let me now generate and output the formatted moves.

OK, I can see that I'm being asked to generate 1023 moves. Let me hand off the generation of the solution to the format function:

First, I'll generate the tower of hanoi moves for n=10 disks.
Then, I'll simulate the state after each move and format it as required.
Finally, I'll output all 1023 formatted moves.

The header for the moves is:
```
move_id,from_peg,to_peg,peg0,peg1,peg2
```

Now, I'll execute the algorithm and report all 1023 formatted moves:

1,0,2,10 9 8 7 6 5 4 3 2,,1
2,0,1,10 9 8 7 6 5 4 3,2,1
3,2,1,10 9 8 7 6 5 4 3,2 1,
4,0,2,10 9 8 7 6 5 4,2 1,3
5,1,0,10 9 8 7 6 5 4 1,2,3
6,1,2,10 9 8 7 6 5 4 1,,3 2
7,0,2,10 9 8 7 6 5 4,,3 2 1
8,0,1,10 9 8 7 6 5,4,3 2 1
9,2,1,10 9 8 7 6 5,4 1,3 2
10,2,0,10 9 8 7 6 5 2,4 1,3
11,1,0,10 9 8 7 6 5 2 1,4,3
12,2,1,10 9 8 7 6 5 2 1,4 3,
13,0,2,10 9 8 7 6 5 2,4 3,1
14,0,1,10 9 8 7 6 5,4 3 2,1
15,2,1,10 9 8 7 6 5,4 3 2 1,
16,0,2,10 9 8 7 6,4 3 2 1,5
17,1,0,10 9 8 7 6 1,4 3 2,5
18,1,2,10 9 8 7 6 1,4 3,5 2
19,0,2,10 9 8 7 6,4 3,5 2 1
20,1,0,10 9 8 7 6 3,4,5 2 1
21,2,0,10 9 8 7 6 3 2,4,5 1
22,2,1,10 9 8 7 6 3 2,4 5,1
23,0,2,10 9 8 7 6 3,4 5,1 2
24,0,1,10 9 8 7 6,4 5 3,1 2
25,2,1,10 9 8 7 6,4 5 3 1,2
26,2,0,10 9 8 7 6 2,4 5 3 1,
27,1,0,10 9 8 7 6 2 1,4 5 3,
28,1,2,10 9 8 7 6 2 1,4 5,3
29,0,2,10 9 8 7 6 2,4 5,3 1
30,1,0,10 9 8 7 6 2 5,4,3 1
31,1,2,10 9 8 7 6 2 5,,4 3 1
32,0,2,10 9 8 7 6,2 5,4 3 1
33,0,1,10 9 8 7,6,4 3 1 2 5
34,2,1,10 9 8 7,6 1,4 3 2 5
35,2,0,10 9 8 7 5,6 1,4 3 2
36,1,0,10 9 8 7 5 1,6,4 3 2
37,2,1,10 9 8 7 5 1,6 4,3 2
38,0,2,10 9 8 7 5,6 4,3 2 1
39,0,1,10 9 8 7,6 4 5,3 2 1
40,2,1,10 9 8 7,6 4 5 1,3 2
41,0,2,10 9 8,6 4 5 1,7 3 2
42,1,0,10 9 8 1,6 4 5,7 3 2
43,1,2,10 9 8 1,6 4,7 3 2 5
44,0,2,10 9 8,6 4,7 3 2 5 1
45,1,0,10 9 8 4,6,7 3 2 5 1
46,2,0,10 9 8 4 2,6,7 3 5 1
47,2,1,10 9 8 4 2,6 7,3 5 1
48,0,2,10 9 8 4,6 7,3 5 1 2
49,1,0,10 9 8 4 7,6,3 5 1 2
50,1,2,10 9 8 4 7,,6 3 5 1 2
51,0,2,10 9 8,4 7,6 3 5 1 2
52,0,1,10 9,8,6 3 5 1 2 4 7
53,2,1,10 9,8 2,6 3 5 1 4 7
54,2,0,10 9 2,8,6 3 5 1 4 7
55,1,0,10 9 2 1,8,6 3 5 4 7
56,2,1,10 9 2 1,8 6,3 5 4 7
57,0,2,10 9 2,8 6,3 5 4 7 1
58,0,1,10 9,8 6 2,3 5 4 7 1
59,2,1,10 9,8 6 2 1,3 5 4 7
60,0,2,10,8 6 2 1,9 3 5 4 7
61,1,0,10 1,8 6 2,9 3 5 4 7
62,1,2,10 1,8 6,9 3 5 4 7 2
63,0,2,10,8 6,9 3 5 4 7 2 1
64,1,0,10 6,8,9 3 5 4 7 2 1
65,2,0,10 6 3,8,9 5 4 7 2 1
66,2,1,10 6 3,8 9,5 4 7 2 1
67,0,2,10 6,8 9,5 4 7 2 1 3
68,1,0,10 6 9,8,5 4 7 2 1 3
69,1,2,10 6 9,,8 5 4 7 2 1 3
70,0,2,10,6 9,8 5 4 7 2 1 3
71,0,1,10,6,8 5 4 7 2 1 3 9
72,2,1,10,6 1,8 5 4 7 2 3 9
73,2,0,10 1,6,8 5 4 7 2 3 9
74,1,0,10 1 6,8,5 4 7 2 3 9
75,2,1,10 1 6,8 5,4 7 2 3 9
76,0,2,10 1,8 5,4 7 2 3 9 6
77,0,1,10,8 5 1,4 7 2 3 9 6
78,2,1,10,8 5 1 4,7 2 3 9 6
79,0,2,10,8 5 1,7 2 3 9 6 4
80,1,0,10 5,8 1,7 2 3 9 6 4
81,2,0,10 5 2,8 1,7 3 9 6 4
82,2,1,10 5 2,8 1 7,3 9 6 4
83,0,2,10 5,8 1 7,3 9 6 4 2
84,1,0,10 5 1,8 7,3 9 6 4 2
85,1,2,10 5 1,8,3 9 6 4 2 7
86,0,2,10,8 5 1,3 9 6 4 2 7
87,1,0,10 8,5 1,3 9 6 4 2 7
88,2,0,10 8 3,5 1,9 6 4 2 7
89,2,1,10 8 3,5 1 9,6 4 2 7
90,0,2,10 8,5 1 9,6 4 2 7 3
91,0,1,10,5 1 9 8,6 4 2 7 3
92,2,1,10,5 1 9 8 6,4 2 7 3
93,2,0,10 6,5 1 9 8,4 2 7 3
94,1,0,10 6 1,5 9 8,4 2 7 3
95,1,2,10 6 1,5 9,4 2 7 3 8
96,0,2,10,5 9 6 1,4 2 7 3 8
97,1,0,10 9,5 6 1,4 2 7 3 8
98,2,0,10 9 4,5 6 1,2 7 3 8
99,2,1,10 9 4,5 6 1 2,7 3 8
100,0,2,10 9,5 6 1 2,7 3 8 4
101,0,1,10,5 6 1 2 9,7 3 8 4
102,2,1,10,5 6 1 2 9 7,3 8 4
103,0,2,10,5 6 1 2 9,3 8 4 7
104,1,0,10 6,5 1 2 9,3 8 4 7
105,2,0,10 6 3,5 1 2 9,8 4 7
106,2,1,10 6 3,5 1 2 9 8,4 7
107,0,2,10 6,5 1 2 9 8,4 7 3
108,1,0,10 6 1,5 2 9 8,4 7 3
109,1,2,10 6 1,5 2,4 7 3 9 8
110,0,2,10,5 2 6 1,4 7 3 9 8
111,1,0,10 2,5 6 1,4 7 3 9 8
112,2,0,10 2 4,5 6 1,7 3 9 8
113,2,1,10 2 4,5 6 1 7,3 9 8
114,0,2,10 2,5 6 1 7,3 9 8 4
115,0,1,10,5 6 1 7 2,3 9 8 4
116,2,1,10,5 6 1 7 2 3,9 8 4
117,2,0,10 3,5 6 1 7 2,9 8 4
118,1,0,10 3 1,5 6 7 2,9 8 4
119,1,2,10 3 1,5 6,9 8 4 7 2
120,0,2,10,5 6 3 1,9 8 4 7 2
121,1,0,10 6,5 3 1,9 8 4 7 2
122,2,0,10 6 9,5 3 1,8 4 7 2
123,2,1,10 6 9,5 3 1 8,4 7 2
124,0,2,10 6,5 3 1 8,4 7 2 9
125,0,1,10,5 3 1 8 6,4 7 2 9
126,2,1,10,5 3 1 8 6 4,7 2 9
127,0,2,10,5 3 1 8 6,7 2 9 4
128,1,0,10 3,5 1 8 6,7 2 9 4
129,1,2,10 3,5 1,7 2 9 4 8 6
130,0,2,10,5 1 3,7 2 9 4 8 6
131,1,0,10 1,5 3,7 2 9 4 8 6
132,1,2,10 1,5,7 2 9 4 8 6 3
133,0,2,10,5 1,7 2 9 4 8 6 3
134,0,1,10,5,7 2 9 4 8 6 3 1
135,2,1,10,5 7,2 9 4 8 6 3 1
136,0,2,,5 7,10 2 9 4 8 6 3 1
137,1,0,7,5,10 2 9 4 8 6 3 1
138,1,2,7,,10 2 9 4 8 6 3 1 5
139,0,2,,,10 2 9 4 8 6 3 1 5 7
140,0,1,1,,10 2 9 4 8 6 3 5 7
141,2,1,1,5,10 2 9 4 8 6 3 7
142,2,0,1 5,10,2 9 4 8 6 3 7
143,1,0,1 5 10,2,9 4 8 6 3 7
144,1,2,1 5 10,,2 9 4 8 6 3 7
145,0,2,1 5,,2 9 4 8 6 3 7 10
146,0,1,1,5,2 9 4 8 6 3 7 10
147,2,1,1,5 2,9 4 8 6 3 7 10
148,0,2,,5 2,1 9 4 8 6 3 7 10
149,1,0,2,5,1 9 4 8 6 3 7 10
150,1,2,2,,1 9 4 8 6 3 7 10 5
151,0,2,,,1 9 4 8 6 3 7 10 5 2
152,0,1,3,,1 9 4 8 6 7 10 5 2
153,2,1,3,1,9 4 8 6 7 10 5 2
154,2,0,3 1,9,4 8 6 7 10 5 2
155,1,0,3 1 9,4,8 6 7 10 5 2
156,1,2,3 1 9,,4 8 6 7 10 5 2
157,0,2,3 1,,4 8 6 7 10 5 2 9
158,0,1,3,1,4 8 6 7 10 5 2 9
159,2,1,3,1 4,8 6 7 10 5 2 9
160,0,2,,1 4,3 8 6 7 10 5 2 9
161,1,0,4,1,3 8 6 7 10 5 2 9
162,1,2,4,,3 8 6 7 10 5 2 9 1
163,0,2,,,3 8 6 7 10 5 2 9 1 4
164,0,1,5,,3 8 6 7 10 2 9 1 4
165,2,1,5,3,8 6 7 10 2 9 1 4
166,2,0,5 3,8,6 7 10 2 9 1 4
167,1,0,5 3 8,6,7 10 2 9 1 4
168,1,2,5 3 8,,6 7 10 2 9 1 4
169,0,2,5 3,,6 7 10 2 9 1 4 8
170,0,1,5,3,6 7 10 2 9 1 4 8
171,2,1,5,3 6,7 10 2 9 1 4 8
172,0,2,,3 6,5 7 10 2 9 1 4 8
173,1,0,6,3,5 7 10 2 9 1 4 8
174,2,0,6 5,3,7 10 2 9 1 4 8
175,1,2,6 5,,3 7 10 2 9 1 4 8
176,0,2,6,,3 7 10 2 9 1 4 8 5
177,1,0,6 3,7,10 2 9 1 4 8 5
178,2,0,6 3 7,10,2 9 1 4 8 5
179,1,2,6 3 7,,10 2 9 1 4 8 5
180,0,2,6 3,,10 2 9 1 4 8 5 7
181,0,1,6,3,10 2 9 1 4 8 5 7
182,2,1,6,3 10,2 9 1 4 8 5 7
183,0,2,,3 10,6 2 9 1 4 8 5 7
184,1,0,10,3,6 2 9 1 4 8 5 7
185,2,0,10 2,3,6 9 1 4 8 5 7
186,1,2,10 2,,3 6 9 1 4 8 5 7
187,0,2,10,,3 6 9 1 4 8 5 7 2
188,1,0,10 3,6,9 1 4 8 5 7 2
189,2,0,10 3 9,6,1 4 8 5 7 2
190,1,2,10 3 9,,6 1 4 8 5 7 2
191,0,2,10 3,,6 1 4 8 5 7 2 9
192,0,1,10,3,6 1 4 8 5 7 2 9
193,2,1,10,3 6,1 4 8 5 7 2 9
194,0,2,,3 6,10 1 4 8 5 7 2 9
195,1,0,6,3,10 1 4 8 5 7 2 9
196,1,2,6,,10 1 4 8 5 7 2 9 3
197,0,2,,,10 1 4 8 5 7 2 9 3 6
198,0,1,1,,10 4 8 5 7 2 9 3 6
199,2,1,1,10,4 8 5 7 2 9 3 6
200,2,0,1 10,4,8 5 7 2 9 3 6
201,1,0,1 10 4,8,5 7 2 9 3 6
202,1,2,1 10 4,,8 5 7 2 9 3 6
203,0,2,1 10,,8 5 7 2 9 3 6 4
204,0,1,1,10,8 5 7 2 9 3 6 4
205,2,1,1,10 8,5 7 2 9 3 6 4
206,0,2,,10 8,1 5 7 2 9 3 6 4
207,1,0,8,10,1 5 7 2 9 3 6 4
208,1,2,8,,1 5 7 2 9 3 6 4 10
209,0,2,,,1 5 7 2 9 3 6 4 10 8
210,0,1,5,,1 7 2 9 3 6 4 10 8
211,2,1,5,1,7 2 9 3 6 4 10 8
212,2,0,5 1,7,2 9 3 6 4 10 8
213,1,0,5 1 7,2,9 3 6 4 10 8
214,1,2,5 1 7,,2 9 3 6 4 10 8
215,0,2,5 1,,2 9 3 6 4 10 8 7
216,0,1,5,1,2 9 3 6 4 10 8 7
217,2,1,5,1 2,9 3 6 4 10 8 7
218,0,2,,1 2,5 9 3 6 4 10 8 7
219,1,0,2,1,5 9 3 6 4 10 8 7
220,1,2,2,,5 9 3 6 4 10 8 7 1
221,0,2,,,5 9 3 6 4 10 8 7 1 2
222,0,1,9,,5 3 6 4 10 8 7 1 2
223,2,1,9,5,3 6 4 10 8 7 1 2
224,2,0,9 5,3,6 4 10 8 7 1 2
225,1,0,9 5 3,6,4 10 8 7 1 2
226,1,2,9 5 3,,6 4 10 8 7 1 2
227,0,2,9 5,,6 4 10 8 7 1 2 3
228,0,1,9,5,6 4 10 8 7 1 2 3
229,2,1,9,5 6,4 10 8 7 1 2 3
230,0,2,,5 6,9 4 10 8 7 1 2 3
231,1,0,6,5,9 4 10 8 7 1 2 3
232,2,0,6 9,5,4 10 8 7 1 2 3
233,1,2,6 9,,5 4 10 8 7 1 2 3
234,0,2,6,,5 4 10 8 7 1 2 3 9
235,1,0,6 5,4,10 8 7 1 2 3 9
236,2,0,6 5 10,4,8 7 1 2 3 9
237,1,2,6 5 10,,4 8 7 1 2 3 9
238,0,2,6 5,,4 8 7 1 2 3 9 10
239,0,1,6,5,4 8 7 1 2 3 9 10
240,2,1,6,5 4,8 7 1 2 3 9 10
241,0,2,,5 4,6 8 7 1 2 3 9 10
242,1,0,4,5,6 8 7 1 2 3 9 10
243,2,0,4 6,5,8 7 1 2 3 9 10
244,1,2,4 6,,5 8 7 1 2 3 9 10
245,0,2,4,,5 8 7 1 2 3 9 10 6
246,1,0,4 5,8,7 1 2 3 9 10 6
247,1,2,4 5,,8 7 1 2 3 9 10 6
248,0,2,4,,8 7 1 2 3 9 10 6 5
249,0,1,4,8,7 1 2 3 9 10 6 5
250,2,1,4,8 7,1 2 3 9 10 6 5
251,0,2,,8 7,4 1 2 3 9 10 6 5
252,1,0,7,8,4 1 2 3 9 10 6 5
253,1,2,7,,4 1 2 3 9 10 6 5 8
254,0,2,,,4 1 2 3 9 10 6 5 8 7
255,0,1,1,,4 2 3 9 10 6 5 8 7
256,2,1,1,4,2 3 9 10 6 5 8 7
257,2,0,1 4,2,3 9 10 6 5 8 7
258,1,0,1 4 2,3,9 10 6 5 8 7
259,1,2,1 4 2,,3 9 10 6 5 8 7
260,0,2,1 4,,3 9 10 6 5 8 7 2
261,0,1,1,4,3 9 10 6 5 8 7 2
262,2,1,1,4 3,9 10 6 5 8 7 2
263,0,2,,4 3,1 9 10 6 5 8 7 2
264,1,0,3,4,1 9 10 6 5 8 7 2
265,1,2,3,,1 9 10 6 5 8 7 2 4
266,0,2,,,1 9 10 6 5 8 7 2 4 3
267,0,1,9,,1 10 6 5 8 7 2 4 3
268,2,1,9,1,10 6 5 8 7 2 4 3
269,2,0,9 1,10,6 5 8 7 2 4 3
270,1,0,9 1 10,6,5 8 7 2 4 3
271,1,2,9 1 10,,6 5 8 7 2 4 3
272,0,2,9 1,,6 5 8 7 2 4 3 10
273,0,1,9,1,6 5 8 7 2 4 3 10
274,2,1,9,1 6,5 8 7 2 4 3 10
275,0,2,,1 6,9 5 8 7 2 4 3 10
276,1,0,6,1,9 5 8 7 2 4 3 10
277,2,0,6 9,1,5 8 7 2 4 3 10
278,1,2,6 9,,1 5 8 7 2 4 3 10
279,0,2,6,,1 5 8 7 2 4 3 10 9
280,1,0,6 1,5,8 7 2 4 3 10 9
281,1,2,6 1,,5 8 7 2 4 3 10 9
282,0,2,6,,5 8 7 2 4 3 10 9 1
283,0,1,6,5,8 7 2 4 3 10 9 1
284,2,1,6,5 8,7 2 4 3 10 9 1
285,0,2,,5 8,6 7 2 4 3 10 9 1
286,1,0,8,5,6 7 2 4 3 10 9 1
287,2,0,8 6,5,7 2 4 3 10 9 1
288,1,2,8 6,,5 7 2 4 3 10 9 1
289,0,2,8,,5 7 2 4 3 10 9 1 6
290,1,0,8 5,7,2 4 3 10 9 1 6
291,1,2,8 5,,7 2 4 3 10 9 1 6
292,0,2,8,,7 2 4 3 10 9 1 6 5
293,0,1,8,7,2 4 3 10 9 1 6 5
294,2,1,8,7 2,4 3 10 9 1 6 5
295,0,2,,7 2,8 4 3 10 9 1 6 5
296,1,0,2,7,8 4 3 10 9 1 6 5
297,1,2,2,,8 4 3 10 9 1 6 5 7
298,0,2,,,8 4 3 10 9 1 6 5 7 2
299,0,1,4,,8 3 10 9 1 6 5 7 2
300,2,1,4,8,3 10 9 1 6 5 7 2
301,2,0,4 8,3,10 9 1 6 5 7 2
302,1,0,4 8 3,10,9 1 6 5 7 2
303,1,2,4 8 3,,10 9 1 6 5 7 2
304,0,2,4 8,,10 9 1 6 5 7 2 3
305,0,1,4,8,10 9 1 6 5 7 2 3
306,2,1,4,8 10,9 1 6 5 7 2 3
307,0,2,,8 10,4 9 1 6 5 7 2 3
308,1,0,10,8,4 9 1 6 5 7 2 3
309,2,0,10 4,8,9 1 6 5 7 2 3
310,1,2,10 4,,8 9 1 6 5 7 2 3
311,0,2,10,,8 9 1 6 5 7 2 3 4
312,1,0,10 8,9,1 6 5 7 2 3 4
313,1,2,10 8,,9 1 6 5 7 2 3 4
314,0,2,10,,9 1 6 5 7 2 3 4 8
315,0,1,10,9,1 6 5 7 2 3 4 8
316,2,1,10,9 1,6 5 7 2 3 4 8
317,0,2,,9 1,10 6 5 7 2 3 4 8
318,1,0,1,9,10 6 5 7 2 3 4 8
319,1,2,1,,10 6 5 7 2 3 4 8 9
320,0,2,,,10 6 5 7 2 3 4 8 9 1
321,0,1,6,,10 5 7 2 3 4 8 9 1
322,2,1,6,10,5 7 2 3 4 8 9 1
323,2,0,6 10,5,7 2 3 4 8 9 1
324,1,0,6 10 5,7,2 3 4 8 9 1
325,1,2,6 10 5,,7 2 3 4 8 9 1
326,0,2,6 10,,7 2 3 4 8 9 1 5
327,0,1,6,10,7 2 3 4 8 9 1 5
328,2,1,6,10 7,2 3 4 8 9 1 5
329,0,2,,10 7,6 2 3 4 8 9 1 5
330,1,0,7,10,6 2 3 4 8 9 1 5
331,1,2,7,,6 2 3 4 8 9 1 5 10
332,0,2,,,6 2 3 4 8 9 1 5 10 7
333,0,1,2,,6 3 4 8 9 1 5 10 7
334,2,1,2,6,3 4 8 9 1 5 10 7
335,2,0,2 6,3,4 8 9 1 5 10 7
336,1,0,2 6 3,4,8 9 1 5 10 7
337,1,2,2 6 3,,4 8 9 1 5 10 7
338,0,2,2 6,,4 8 9 1 5 10 7 3
339,0,1,2,6,4 8 9 1 5 10 7 3
340,2,1,2,6 4,8 9 1 5 10 7 3
341,0,2,,6 4,2 8 9 1 5 10 7 3
342,1,0,4,6,2 8 9 1 5 10 7 3
343,1,2,4,,2 8 9 1 5 10 7 3 6
344,0,2,,,2 8 9 1 5 10 7 3 6 4
345,0,1,8,,2 9 1 5 10 7 3 6 4
346,2,1,8,2,9 1 5 10 7 3 6 4
347,2,0,8 2,9,1 5 10 7 3 6 4
348,1,0,8 2 9,1,5 10 7 3 6 4
349,1,2,8 2 9,,1 5 10 7 3 6 4
350,0,2,8 2,,1 5 10 7 3 6 4 9
351,0,1,8,2,1 5 10 7 3 6 4 9
352,2,1,8,2 1,5 10 7 3 6 4 9
353,0,2,,2 1,8 5 10 7 3 6 4 9
354,1,0,1,2,8 5 10 7 3 6 4 9
355,1,2,1,,8 5 10 7 3 6 4 9 2
356,0,2,,,8 5 10 7 3 6 4 9 2 1
357,0,1,5,,8 10 7 3 6 4 9 2 1
358,2,1,5,8,10 7 3 6 4 9 2 1
359,2,0,5 8,10,7 3 6 4 9 2 1
360,1,0,5 8 10,7,3 6 4 9 2 1
361,1,2,5 8 10,,7 3 6 4 9 2 1
362,0,2,5 8,,7 3 6 4 9 2 1 10
363,0,1,5,8,7 3 6 4 9 2 1 10
364,2,1,5,8 7,3 6 4 9 2 1 10
365,0,2,,8 7,5 3 6 4 9 2 1 10
366,1,0,7,8,5 3 6 4 9 2 1 10
367,1,2,7,,5 3 6 4 9 2 1 10 8
368,0,2,,,5 3 6 4 9 2 1 10 8 7
369,0,1,3,,5 6 4 9 2 1 10 8 7
370,2,1,3,5,6 4 9 2 1 10 8 7
371,2,0,3 5,6,4 9 2 1 10 8 7
372,1,0,3 5 6,4,9 2 1 10 8 7
373,1,2,3 5 6,,4 9 2 1 10 8 7
374,0,2,3 5,,4 9 2 1 10 8 7 6
375,0,1,3,5,4 9 2 1 10 8 7 6
376,2,1,3,5 4,9 2 1 10 8 7 6
377,0,2,,5 4,3 9 2 1 10 8 7 6
378,1,0,4,5,3 9 2 1 10 8 7 6
379,1,2,4,,3 9 2 1 10 8 7 6 5
380,0,2,,,3 9 2 1 10 8 7 6 5 4
381,0,1,9,,3 2 1 10 8 7 6 5 4
382,2,1,9,3,2 1 10 8 7 6 5 4
383,2,0,9 3,2,1 10 8 7 6 5 4
384,1,0,9 3 2,1,10 8 7 6 5 4
385,1,2,9 3 2,,1 10 8 7 6 5 4
386,0,2,9 3,,1 10 8 7 6 5 4 2
387,0,1,9,3,1 10 8 7 6 5 4 2
388,2,1,9,3 1,10 8 7 6 5 4 2
389,0,2,,3 1,9 10 8 7 6 5 4 2
390,1,0,1,3,9 10 8 7 6 5 4 2
391,1,2,1,,9 10 8 7 6 5 4 2 3
392,0,2,,,9 10 8 7 6 5 4 2 3 1
393,0,1,10,,9 8 7 6 5 4 2 3 1
394,2,1,10,9,8 7 6 5 4 2 3 1
395,2,0,10 9,8,7 6 5 4 2 3 1
396,1,0,10 9 8,7,6 5 4 2 3 1
397,1,2,10 9 8,,7 6 5 4 2 3 1
398,0,2,10 9,,7 6 5 4 2 3 1 8
399,0,1,10,9,7 6 5 4 2 3 1 8
400,2,1,10,9 7,6 5 4 2 3 1 8
401,0,2,,9 7,10 6 5 4 2 3 1 8
402,1,0,7,9,10 6 5 4 2 3 1 8
403,1,2,7,,10 6 5 4 2 3 1 8 9
404,0,2,,,10 6 5 4 2 3 1 8 9 7
405,0,1,6,,10 5 4 2 3 1 8 9 7
406,2,1,6,10,5 4 2 3 1 8 9 7
407,2,0,6 10,5,4 2 3 1 8 9 7
408,1,0,6 10 5,4,2 3 1 8 9 7
409,1,2,6 10 5,,4 2 3 1 8 9 7
410,0,2,6 10,,4 2 3 1 8 9 7 5
411,0,1,6,10,4 2 3 1 8 9 7 5
412,2,1,6,10 4,2 3 1 8 9 7 5
413,0,2,,10 4,6 2 3 1 8 9 7 5
414,1,0,4,10,6 2 3 1 8 9 7 5
415,2,0,4 6,10,2 3 1 8 9 7 5
416,1,2,4 6,,10 2 3 1 8 9 7 5
417,0,2,4,,10 2 3 1 8 9 7 5 6
418,1,0,4 10,2,3 1 8 9 7 5 6
419,2,0,4 10 3,2,1 8 9 7 5 6
420,1,2,4 10 3,,2 1 8 9 7 5 6
421,0,2,4 10,,2 1 8 9 7 5 6 3
422,0,1,4,10,2 1 8 9 7 5 6 3
423,2,1,4,10 2,1 8 9 7 5 6 3
424,0,2,,10 2,4 1 8 9 7 5 6 3
425,1,0,2,10,4 1 8 9 7 5 6 3
426,1,2,2,,4 1 8 9 7 5 6 3 10
427,0,2,,,4 1 8 9 7 5 6 3 10 2
428,0,1,1,,4 8 9 7 5 6 3 10 2
429,2,1,1,4,8 9 7 5 6 3 10 2
430,2,0,1 4,8,9 7 5 6 3 10 2
431,1,0,1 4 8,9,7 5 6 3 10 2
432,1,2,1 4 8,,9 7 5 6 3 10 2
433,0,2,1 4,,9 7 5 6 3 10 2 8
434,0,1,1,4,9 7 5 6 3 10 2 8
435,2,1,1,4 9,7 5 6 3 10 2 8
436,0,2,,4 9,1 7 5 6 3 10 2 8
437,1,0,9,4,1 7 5 6 3 10 2 8
438,2,0,9 1,4,7 5 6 3 10 2 8
439,1,2,9 1,,4 7 5 6 3 10 2 8
440,0,2,9,,4 7 5 6 3 10 2 8 1
441,1,0,9 4,7,5 6 3 10 2 8 1
442,1,2,9 4,,7 5 6 3 10 2 8 1
443,0,2,9,,7 5 6 3 10 2 8 1 4
444,0,1,9,7,5 6 3 10 2 8 1 4
445,2,1,9,7 5,6 3 10 2 8 1 4
446,0,2,,7 5,9 6 3 10 2 8 1 4
447,1,0,5,7,9 6 3 10 2 8 1 4
448,1,2,5,,9 6 3 10 2 8 1 4 7
449,0,2,,,9 6 3 10 2 8 1 4 7 5
450,0,1,6,,9 3 10 2 8 1 4 7 5
451,2,1,6,9,3 10 2 8 1 4 7 5
452,2,0,6 9,3,10 2 8 1 4 7 5
453,1,0,6 9 3,10,2 8 1 4 7 5
454,1,2,6 9 3,,10 2 8 1 4 7 5
455,0,2,6 9,,10 2 8 1 4 7 5 3
456,0,1,6,9,10 2 8 1 4 7 5 3
457,2,1,6,9 10,2 8 1 4 7 5 3
458,0,2,,9 10,6 2 8 1 4 7 5 3
459,1,0,10,9,6 2 8 1 4 7 5 3
460,2,0,10 6,9,2 8 1 4 7 5 3
461,1,2,10 6,,9 2 8 1 4 7 5 3
462,0,2,10,,9 2 8 1 4 7 5 3 6
463,1,0,10 9,2,8 1 4 7 5 3 6
464,2,0,10 9 8,2,1 4 7 5 3 6
465,1,2,10 9 8,,2 1 4 7 5 3 6
466,0,2,10 9,,2 1 4 7 5 3 6 8
467,0,1,10,9,2 1 4 7 5 3 6 8
468,2,1,10,9 2,1 4 7 5 3 6 8
469,0,2,,9 2,10 1 4 7 5 3 6 8
470,1,0,2,9,10 1 4 7 5 3 6 8
471,1,2,2,,10 1 4 7 5 3 6 8 9
472,0,2,,,10 1 4 7 5 3 6 8 9 2
473,0,1,1,,10 4 7 5 3 6 8 9 2
474,2,1,1,10,4 7 5 3 6 8 9 2
475,2,0,1 10,4,7 5 3 6 8 9 2
476,1,0,1 10 4,7,5 3 6 8 9 2
477,1,2,1 10 4,,7 5 3 6 8 9 2
478,0,2,1 10,,7 5 3 6 8 9 2 4
479,0,1,1,10,7 5 3 6 8 9 2 4
480,2,1,1,10 7,5 3 6 8 9 2 4
481,0,2,,10 7,1 5 3 6 8 9 2 4
482,1,0,7,10,1 5 3 6 8 9 2 4
483,1,2,7,,1 5 3 6 8 9 2 4 10
484,0,2,,,1 5 3 6 8 9 2 4 10 7
485,0,1,5,,1 3 6 8 9 2 4 10 7
486,2,1,5,1,3 6 8 9 2 4 10 7
487,2,0,5 1,3,6 8 9 2 4 10 7
488,1,0,5 1 3,6,8 9 2 4 10 7
489,1,2,5 1 3,,6 8 9 2 4 10 7
490,0,2,5 1,,6 8 9 2 4 10 7 3
491,0,1,5,1,6 8 9 2 4 10 7 3
492,2,1,5,1 6,8 9 2 4 10 7 3
493,0,2,,1 6,5 8 9 2 4 10 7 3
494,1,0,6,1,5 8 9 2 4 10 7 3
495,2,0,6 5,1,8 9 2 4 10 7 3
496,1,2,6 5,,1 8 9 2 4 10 7 3
497,0,2,6,,1 8 9 2 4 10 7 3 5
498,1,0,6 1,8,9 2 4 10 7 3 5
499,1,2,6 1,,8 9 2 4 10 7 3 5
500,0,2,6,,8 9 2 4 10 7 3 5 1
501,0,1,6,8,9 2 4 10 7 3 5 1
502,2,1,6,8 9,2 4 10 7 3 5 1
503,0,2,,8 9,6 2 4 10 7 3 5 1
504,1,0,9,8,6 2 4 10 7 3 5 1
505,2,0,9 6,8,2 4 10 7 3 5 1
506,1,2,9 6,,8 2 4 10 7 3 5 1
507,0,2,9,,8 2 4 10 7 3 5 1 6
508,1,0,9 8,2,4 10 7 3 5 1 6
509,1,2,9 8,,2 4 10 7 3 5 1 6
510,0,2,9,,2 4 10 7 3 5 1 6 8
511,0,1,9,2,4 10 7 3 5 1 6 8
512,2,1,9,2 4,10 7 3 5 1 6 8
513,0,2,,2 4,9 10 7 3 5 1 6 8
514,1,0,4,2,9 10 7 3 5 1 6 8
515,1,2,4,,9 10 7 3 5 1 6 8 2
516,0,2,,,9 10 7 3 5 1 6 8 2 4
517,0,1,10,,9 7 3 5 1 6 8 2 4
518,2,1,10,9,7 3 5 1 6 8 2 4
519,2,0,10 9,7,3 5 1 6 8 2 4
520,1,0,10 9 7,3,5 1 6 8 2 4
521,1,2,10 9 7,,3 5 1 6 8 2 4
522,0,2,10 9,,3 5 1 6 8 2 4 7
523,0,1,10,9,3 5 1 6 8 2 4 7
524,2,1,10,9 3,5 1 6 8 2 4 7
525,0,2,,9 3,10 5 1 6 8 2 4 7
526,1,0,3,9,10 5 1 6 8 2 4 7
527,1,2,3,,10 5 1 6 8 2 4 7 9
528,0,2,,,10 5 1 6 8 2 4 7 9 3
529,0,1,5,,10 1 6 8 2 4 7 9 3
530,2,1,5,10,1 6 8 2 4 7 9 3
531,2,0,5 10,1,6 8 2 4 7 9 3
532,1,0,5 10 1,6,8 2 4 7 9 3
533,1,2,5 10 1,,6 8 2 4 7 9 3
534,0,2,5 10,,6 8 2 4 7 9 3 1
535,0,1,5,10,6 8 2 4 7 9 3 1
536,2,1,5,10 6,8 2 4 7 9 3 1
537,0,2,,10 6,5 8 2 4 7 9 3 1
538,1,0,6,10,5 8 2 4 7 9 3 1
539,2,0,6 5,10,8 2 4 7 9 3 1
540,1,2,6 5,,10 8 2 4 7 9 3 1
541,0,2,6,,10 8 2 4 7 9 3 1 5
542,1,0,6 10,8,2 4 7 9 3 1 5
543,2,0,6 10 2,8,4 7 9 3 1 5
544,1,2,6 10 2,,8 4 7 9 3 1 5
545,0,2,6 10,,8 4 7 9 3 1 5 2
546,0,1,6,10,8 4 7 9 3 1 5 2
547,2,1,6,10 8,4 7 9 3 1 5 2
548,0,2,,10 8,6 4 7 9 3 1 5 2
549,1,0,8,10,6 4 7 9 3 1 5 2
550,2,0,8 6,10,4 7 9 3 1 5 2
551,1,2,8 6,,10 4 7 9 3 1 5 2
552,0,2,8,,10 4 7 9 3 1 5 2 6
553,1,0,8 10,4,7 9 3 1 5 2 6
554,2,0,8 10 7,4,9 3 1 5 2 6
555,1,2,8 10 7,,4 9 3 1 5 2 6
556,0,2,8 10,,4 9 3 1 5 2 6 7
557,0,1,8,10,4 9 3 1 5 2 6 7
558,2,1,8,10 4,9 3 1 5 2 6 7
559,0,2,,10 4,8 9 3 1 5 2 6 7
560,1,0,4,10,8 9 3 1 5 2 6 7
561,1,2,4,,8 9 3 1 5 2 6 7 10
562,0,2,,,8 9 3 1 5 2 6 7 10 4
563,0,1,9,,8 3 1 5 2 6 7 10 4
564,2,1,9,8,3 1 5 2 6 7 10 4
565,2,0,9 8,3,1 5 2 6 7 10 4
566,1,0,9 8 3,1,5 2 6 7 10 4
567,1,2,9 8 3,,1 5 2 6 7 10 4
568,0,2,9 8,,1 5 2 6 7 10 4 3
569,0,1,9,8,1 5 2 6 7 10 4 3
570,2,1,9,8 1,5 2 6 7 10 4 3
571,0,2,,8 1,9 5 2 6 7 10 4 3
572,1,0,1,8,9 5 2 6 7 10 4 3
573,1,2,1,,9 5 2 6 7 10 4 3 8
574,0,2,,,9 5 2 6 7 10 4 3 8 1
575,0,1,5,,9 2 6 7 10 4 3 8 1
576,2,1,5,9,2 6 7 10 4 3 8 1
577,2,0,5 9,2,6 7 10 4 3 8 1
578,1,0,5 9 2,6,7 10 4 3 8 1
579,1,2,5 9 2,,6 7 10 4 3 8 1
580,0,2,5 9,,6 7 10 4 3 8 1 2
581,0,1,5,9,6 7 10 4 3 8 1 2
582,2,1,5,9 6,7 10 4 3 8 1 2
583,0,2,,9 6,5 7 10 4 3 8 1 2
584,1,0,6,9,5 7 10 4 3 8 1 2
585,2,0,6 5,9,7 10 4 3 8 1 2
586,1,2,6 5,,9 7 10 4 3 8 1 2
587,0,2,6,,9 7 10 4 3 8 1 2 5
588,1,0,6 9,7,10 4 3 8 1 2 5
589,1,2,6 9,,7 10 4 3 8 1 2 5
590,0,2,6,,7 10 4 3 8 1 2 5 9
591,0,1,6,7,10 4 3 8 1 2 5 9
592,2,1,6,7 10,4 3 8 1 2 5 9
593,0,2,,7 10,6 4 3 8 1 2 5 9
594,1,0,10,7,6 4 3 8 1 2 5 9
595,2,0,10 6,7,4 3 8 1 2 5 9
596,1,2,10 6,,7 4 3 8 1 2 5 9
597,0,2,10,,7 4 3 8 1 2 5 9 6
598,1,0,10 7,4,3 8 1 2 5 9 6
599,2,0,10 7 3,4,8 1 2 5 9 6
600,1,2,10 7 3,,4 8 1 2 5 9 6
601,0,2,10 7,,4 8 1 2 5 9 6 3
602,0,1,10,7,4 8 1 2 5 9 6 3
603,2,1,10,7 4,8 1 2 5 9 6 3
604,0,2,,7 4,10 8 1 2 5 9 6 3
605,1,0,4,7,10 8 1 2 5 9 6 3
606,1,2,4,,10 8 1 2 5 9 6 3 7
607,0,2,,,10 8 1 2 5 9 6 3 7 4
608,0,1,8,,10 1 2 5 9 6 3 7 4
609,2,1,8,10,1 2 5 9 6 3 7 4
610,2,0,8 10,1,2 5 9 6 3 7 4
611,1,0,8 10 1,2,5 9 6 3 7 4
612,1,2,8 10 1,,2 5 9 6 3 7 4
613,0,2,8 10,,2 5 9 6 3 7 4 1
614,0,1,8,10,2 5 9 6 3 7 4 1
615,2,1,8,10 2,5 9 6 3 7 4 1
616,0,2,,10 2,8 5 9 6 3 7 4 1
617,1,0,2,10,8 5 9 6 3 7 4 1
618,1,2,2,,8 5 9 6 3 7 4 1 10
619,0,2,,,8 5 9 6 3 7 4 1 10 2
620,0,1,5,,8 9 6 3 7 4 1 10 2
621,2,1,5,8,9 6 3 7 4 1 10 2
622,2,0,5 8,9,6 3 7 4 1 10 2
623,1,0,5 8 9,6,3 7 4 1 10 2
624,1,2,5 8 9,,6 3 7 4 1 10 2
625,0,2,5 8,,6 3 7 4 1 10 2 9
626,0,1,5,8,6 3 7 4 1 10 2 9
627,2,1,5,8 6,3 7 4 1 10 2 9
628,0,2,,8 6,5 3 7 4 1 10 2 9
629,1,0,6,8,5 3 7 4 1 10 2 9
630,1,2,6,,5 3 7 4 1 10 2 9 8
631,0,2,,,5 3 7 4 1 10 2 9 8 6
632,0,1,3,,5 7 4 1 10 2 9 8 6
633,2,1,3,5,7 4 1 10 2 9 8 6
634,2,0,3 5,7,4 1 10 2 9 8 6
635,1,0,3 5 7,4,1 10 2 9 8 6
636,1,2,3 5 7,,4 1 10 2 9 8 6
637,0,2,3 5,,4 1 10 2 9 8 6 7
638,0,1,3,5,4 1 10 2 9 8 6 7
639,2,1,3,5 4,1 10 2 9 8 6 7
640,0,2,,5 4,3 1 10 2 9 8 6 7
641,1,0,4,5,3 1 10 2 9 8 6 7
642,1,2,4,,3 1 10 2 9 8 6 7 5
643,0,2,,,3 1 10 2 9 8 6 7 5 4
644,0,1,1,,3 10 2 9 8 6 7 5 4
645,2,1,1,3,10 2 9 8 6 7 5 4
646,2,0,1 3,10,2 9 8 6 7 5 4
647,1,0,1 3 10,2,9 8 6 7 5 4
648,1,2,1 3 10,,2 9 8 6 7 5 4
649,0,2,1 3,,2 9 8 6 7 5 4 10
650,0,1,1,3,2 9 8 6 7 5 4 10
651,2,1,1,3 2,9 8 6 7 5 4 10
652,0,2,,3 2,1 9 8 6 7 5 4 10
653,1,0,2,3,1 9 8 6 7 5 4 10
654,1,2,2,,1 9 8 6 7 5 4 10 3
655,0,2,,,1 9 8 6 7 5 4 10 3 2
656,0,1,9,,1 8 6 7 5 4 10 3 2
657,2,1,9,1,8 6 7 5 4 10 3 2
658,2,0,9 1,8,6 7 5 4 10 3 2
659,1,0,9 1 8,6,7 5 4 10 3 2
660,1,2,9 1 8,,6 7 5 4 10 3 2
661,0,2,9 1,,6 7 5 4 10 3 2 8
662,0,1,9,1,6 7 5 4 10 3 2 8
663,2,1,9,1 6,7 5 4 10 3 2 8
664,0,2,,1 6,9 7 5 4 10 3 2 8
665,1,0,6,1,9 7 5 4 10 3 2 8
666,1,2,6,,9 7 5 4 10 3 2 8 1
667,0,2,,,9 7 5 4 10 3 2 8 1 6
668,0,1,7,,9 5 4 10 3 2 8 1 6
669,2,1,7,9,5 4 10 3 2 8 1 6
670,2,0,7 9,5,4 10 3 2 8 1 6
671,1,0,7 9 5,4,10 3 2 8 1 6
672,1,2,7 9 5,,4 10 3 2 8 1 6
673,0,2,7 9,,4 10 3 2 8 1 6 5
674,0,1,7,9,4 10 3 2 8 1 6 5
675,2,1,7,9 4,10 3 2 8 1 6 5
676,0,2,,9 4,7 10 3 2 8 1 6 5
677,1,0,4,9,7 10 3 2 8 1 6 5
678,1,2,4,,7 10 3 2 8 1 6 5 9
679,0,2,,,7 10 3 2 8 1 6 5 9 4
680,0,1,10,,7 3 2 8 1 6 5 9 4
681,2,1,10,7,3 2 8 1 6 5 9 4
682,2,0,10 7,3,2 8 1 6 5 9 4
683,1,0,10 7 3,2,8 1 6 5 9 4
684,1,2,10 7 3,,2 8 1 6 5 9 4
685,0,2,10 7,,2 8 1 6 5 9 4 3
686,0,1,10,7,2 8 1 6 5 9 4 3
687,2,1,10,7 2,8 1 6 5 9 4 3
688,0,2,,7 2,10 8 1 6 5 9 4 3
689,1,0,2,7,10 8 1 6 5 9 4 3
690,1,2,2,,10 8 1 6 5 9 4 3 7
691,0,2,,,10 8 1 6 5 9 4 3 7 2
692,0,1,8,,10 1 6 5 9 4 3 7 2
693,2,1,8,10,1 6 5 9 4 3 7 2
694,2,0,8 10,1,6 5 9 4 3 7 2
695,1,0,8 10 1,6,5 9 4 3 7 2
696,1,2,8 10 1,,6 5 9 4 3 7 2
697,0,2,8 10,,6 5 9 4 3 7 2 1
698,0,1,8,10,6 5 9 4 3 7 2 1
699,2,1,8,10 6,5 9 4 3 7 2 1
700,0,2,,10 6,8 5 9 4 3 7 2 1
701,1,0,6,10,8 5 9 4 3 7 2 1
702,1,2,6,,8 5 9 4 3 7 2 1 10
703,0,2,,,8 5 9 4 3 7 2 1 10 6
704,0,1,5,,8 9 4 3 7 2 1 10 6
705,2,1,5,8,9 4 3 7 2 1 10 6
706,2,0,5 8,9,4 3 7 2 1 10 6
707,1,0,5 8 9,4,3 7 2 1 10 6
708,1,2,5 8 9,,4 3 7 2 1 10 6
709,0,2,5 8,,4 3 7 2 1 10 6 9
710,0,1,5,8,4 3 7 2 1 10 6 9
711,2,1,5,8 4,3 7 2 1 10 6 9
712,0,2,,8 4,5 3 7 2 1 10 6 9
713,1,0,4,8,5 3 7 2 1 10 6 9
714,1,2,4,,5 3 7 2 1 10 6 9 8
715,0,2,,,5 3 7 2 1 10 6 9 8 4
716,0,1,3,,5 7 2 1 10 6 9 8 4
717,2,1,3,5,7 2 1 10 6 9 8 4
718,2,0,3 5,7,2 1 10 6 9 8 4
719,1,0,3 5 7,2,1 10 6 9 8 4
720,1,2,3 5 7,,2 1 10 6 9 8 4
721,0,2,3 5,,2 1 10 6 9 8 4 7
722,0,1,3,5,2 1 10 6 9 8 4 7
723,2,1,3,5 2,1 10 6 9 8 4 7
724,0,2,,5 2,3 1 10 6 9 8 4 7
725,1,0,2,5,3 1 10 6 9 8 4 7
726,1,2,2,,3 1 10 6 9 8 4 7 5
727,0,2,,,3 1 10 6 9 8 4 7 5 2
728,0,1,1,,3 10 6 9 8 4 7 5 2
729,2,1,1,3,10 6 9 8 4 7 5 2
730,2,0,1 3,10,6 9 8 4 7 5 2
731,1,0,1 3 10,6,9 8 4 7 5 2
732,1,2,1 3 10,,6 9 8 4 7 5 2
733,0,2,1 3,,6 9 8 4 7 5 2 10
734,0,1,1,3,6 9 8 4 7 5 2 10
735,2,1,1,3 6,9 8 4 7 5 2 10
736,0,2,,3 6,1 9 8 4 7 5 2 10
737,1,0,6,3,1 9 8 4 7 5 2 10
738,2,0,6 1,3,9 8 4 7 5 2 10
739,1,2,6 1,,3 9 8 4 7 5 2 10
740,0,2,6,,3 9 8 4 7 5 2 10 1
741,1,0,6 3,9,8 4 7 5 2 10 1
742,1,2,6 3,,9 8 4 7 5 2 10 1
743,0,2,6,,9 8 4 7 5 2 10 1 3
744,0,1,6,9,8 4 7 5 2 10 1 3
745,2,1,6,9 8,4 7 5 2 10 1 3
746,0,2,,9 8,6 4 7 5 2 10 1 3
747,1,0,8,9,6 4 7 5 2 10 1 3
748,2,0,8 6,9,4 7 5 2 10 1 3
749,1,2,8 6,,9 4 7 5 2 10 1 3
750,0,2,8,,9 4 7 5 2 10 1 3 6
751,1,0,8 9,4,7 5 2 10 1 3 6
752,2,0,8 9 7,4,5 2 10 1 3 6
753,1,2,8 9 7,,4 5 2 10 1 3 6
754,0,2,8 9,,4 5 2 10 1 3 6 7
755,0,1,8,9,4 5 2 10 1 3 6 7
756,2,1,8,9 4,5 2 10 1 3 6 7
757,0,2,,9 4,8 5 2 10 1 3 6 7
758,1,0,4,9,8 5 2 10 1 3 6 7
759,1,2,4,,8 5 2 10 1 3 6 7 9
760,0,2,,,8 5 2 10 1 3 6 7 9 4
761,0,1,5,,8 2 10 1 3 6 7 9 4
762,2,1,5,8,2 10 1 3 6 7 9 4
763,2,0,5 8,2,10 1 3 6 7 9 4
764,1,0,5 8 2,10,1 3 6 7 9 4
765,1,2,5 8 2,,10 1 3 6 7 9 4
766,0,2,5 8,,10 1 3 6 7 9 4 2
767,0,1,5,8,10 1 3 6 7 9 4 2
768,2,1,5,8 10,1 3 6 7 9 4 2
769,0,2,,8 10,5 1 3 6 7 9 4 2
770,1,0,10,8,5 1 3 6 7 9 4 2
771,2,0,10 5,8,1 3 6 7 9 4 2
772,1,2,10 5,,8 1 3 6 7 9 4 2
773,0,2,10,,8 1 3 6 7 9 4 2 5
774,1,0,10 8,1,3 6 7 9 4 2 5
775,2,0,10 8 3,1,6 7 9 4 2 5
776,1,2,10 8 3,,1 6 7 9 4 2 5
777,0,2,10 8,,1 6 7 9 4 2 5 3
778,0,1,10,8,1 6 7 9 4 2 5 3
779,2,1,10,8 1,6 7 9 4 2 5 3
780,0,2,,8 1,10 6 7 9 4 2 5 3
781,1,0,1,8,10 6 7 9 4 2 5 3
782,1,2,1,,10 6 7 9 4 2 5 3 8
783,0,2,,,10 6 7 9 4 2 5 3 8 1
784,0,1,6,,10 7 9 4 2 5 3 8 1
785,2,1,6,10,7 9 4 2 5 3 8 1
786,2,0,6 10,7,9 4 2 5 3 8 1
787,1,0,6 10 7,9,4 2 5 3 8 1
788,1,2,6 10 7,,9 4 2 5 3 8 1
789,0,2,6 10,,9 4 2 5 3 8 1 7
790,0,1,6,10,9 4 2 5 3 8 1 7
791,2,1,6,10 9,4 2 5 3 8 1 7
792,0,2,,10 9,6 4 2 5 3 8 1 7
793,1,0,9,10,6 4 2 5 3 8 1 7
794,2,0,9 6,10,4 2 5 3 8 1 7
795,1,2,9 6,,10 4 2 5 3 8 1 7
796,0,2,9,,10 4 2 5 3 8 1 7 6
797,1,0,9 10,4,2 5 3 8 1 7 6
798,2,0,9 10 2,4,5 3 8 1 7 6
799,1,2,9 10 2,,4 5 3 8 1 7 6
800,0,2,9 10,,4 5 3 8 1 7 6 2
801,0,1,9,10,4 5 3 8 1 7 6 2
802,2,1,9,10 4,5 3 8 1 7 6 2
803,0,2,,10 4,9 5 3 8 1 7 6 2
804,1,0,4,10,9 5 3 8 1 7 6 2
805,1,2,4,,9 5 3 8 1 7 6 2 10
806,0,2,,,9 5 3 8 1 7 6 2 10 4
807,0,1,5,,9 3 8 1 7 6 2 10 4
808,2,1,5,9,3 8 1 7 6 2 10 4
809,2,0,5 9,3,8 1 7 6 2 10 4
810,1,0,5 9 3,8,1 7 6 2 10 4
811,1,2,5 9 3,,8 1 7 6 2 10 4
812,0,2,5 9,,8 1 7 6 2 10 4 3
813,0,1,5,9,8 1 7 6 2 10 4 3
814,2,1,5,9 8,1 7 6 2 10 4 3
815,0,2,,9 8,5 1 7 6 2 10 4 3
816,1,0,8,9,5 1 7 6 2 10 4 3
817,2,0,8 5,9,1 7 6 2 10 4 3
818,1,2,8 5,,9 1 7 6 2 10 4 3
819,0,2,8,,9 1 7 6 2 10 4 3 5
820,1,0,8 9,1,7 6 2 10 4 3 5
821,2,0,8 9 7,1,6 2 10 4 3 5
822,1,2,8 9 7,,1 6 2 10 4 3 5
823,0,2,8 9,,1 6 2 10 4 3 5 7
824,0,1,8,9,1 6 2 10 4 3 5 7
825,2,1,8,9 1,6 2 10 4 3 5 7
826,0,2,,9 1,8 6 2 10 4 3 5 7
827,1,0,1,9,8 6 2 10 4 3 5 7
828,1,2,1,,8 6 2 10 4 3 5 7 9
829,0,2,,,8 6 2 10 4 3 5 7 9 1
830,0,1,6,,8 2 10 4 3 5 7 9 1
831,2,1,6,8,2 10 4 3 5 7 9 1
832,2,0,6 8,2,10 4 3 5 7 9 1
833,1,0,6 8 2,10,4 3 5 7 9 1
834,1,2,6 8 2,,10 4 3 5 7 9 1
835,0,2,6 8,,10 4 3 5 7 9 1 2
836,0,1,6,8,10 4 3 5 7 9 1 2
837,2,1,6,8 10,4 3 5 7 9 1 2
838,0,2,,8 10,6 4 3 5 7 9 1 2
839,1,0,10,8,6 4 3 5 7 9 1 2
840,2,0,10 6,8,4 3 5 7 9 1 2
841,1,2,10 6,,8 4 3 5 7 9 1 2
842,0,2,10,,8 4 3 5 7 9 1 2 6
843,1,0,10 8,4,3 5 7 9 1 2 6
844,2,0,10 8 3,4,5 7 9 1 2 6
845,1,2,10 8 3,,4 5 7 9 1 2 6
846,0,2,10 8,,4 5 7 9 1 2 6 3
847,0,1,10,8,4 5 7 9 1 2 6 3
848,2,1,10,8 4,5 7 9 1 2 6 3
849,0,2,,8 4,10 5 7 9 1 2 6 3
850,1,0,4,8,10 5 7 9 1 2 6 3
851,1,2,4,,10 5 7 9 1 2 6 3 8
852,0,2,,,10 5 7 9 1 2 6 3 8 4
853,0,1,5,,10 7 9 1 2 6 3 8 4
854,2,1,5,10,7 9 1 2 6 3 8 4
855,2,0,5 10,7,9 1 2 6 3 8 4
856,1,0,5 10 7,9,1 2 6 3 8 4
857,1,2,5 10 7,,9 1 2 6 3 8 4
858,0,2,5 10,,9 1 2 6 3 8 4 7
859,0,1,5,10,9 1 2 6 3 8 4 7
860,2,1,5,10 9,1 2 6 3 8 4 7
861,0,2,,10 9,5 1 2 6 3 8 4 7
862,1,0,9,10,5 1 2 6 3 8 4 7
863,2,0,9 5,10,1 2 6 3 8 4 7
864,1,2,9 5,,10 1 2 6 3 8 4 7
865,0,2,9,,10 1 2 6 3 8 4 7 5
866,1,0,9 10,1,2 6 3 8 4 7 5
867,2,0,9 10 2,1,6 3 8 4 7 5
868,1,2,9 10 2,,1 6 3 8 4 7 5
869,0,2,9 10,,1 6 3 8 4 7 5 2
870,0,1,9,10,1 6 3 8 4 7 5 2
871,2,1,9,10 1,6 3 8 4 7 5 2
872,0,2,,10 1,9 6 3 8 4 7 5 2
873,1,0,1,10,9 6 3 8 4 7 5 2
874,1,2,1,,9 6 3 8 4 7 5 2 10
875,0,2,,,9 6 3 8 4 7 5 2 10 1
876,0,1,6,,9 3 8 4 7 5 2 10 1
877,2,1,6,9,3 8 4 7 5 2 10 1
878,2,0,6 9,3,8 4 7 5 2 10 1
879,1,0,6 9 3,8,4 7 5 2 10 1
880,1,2,6 9 3,,8 4 7 5 2 10 1
881,0,2,6 9,,8 4 7 5 2 10 1 3
882,0,1,6,9,8 4 7 5 2 10 1 3
883,2,1,6,9 8,4 7 5 2 10 1 3
884,0,2,,9 8,6 4 7 5 2 10 1 3
885,1,0,8,9,6 4 7 5 2 10 1 3
886,2,0,8 6,9,4 7 5 2 10 1 3
887,1,2,8 6,,9 4 7 5 2 10 1 3
888,0,2,8,,9 4 7 5 2 10 1 3 6
889,1,0,8 9,4,7 5 2 10 1 3 6
890,2,0,8 9 7,4,5 2 10 1 3 6
891,1,2,8 9 7,,4 5 2 10 1 3 6
892,0,2,8 9,,4 5 2 10 1 3 6 7
893,0,1,8,9,4 5 2 10 1 3 6 7
894,2,1,8,9 4,5 2 10 1 3 6 7
895,0,2,,9 4,8 5 2 10 1 3 6 7
896,1,0,4,9,8 5 2 10 1 3 6 7
897,1,2,4,,8 5 2 10 1 3 6 7 9
898,0,2,,,8 5 2 10 1 3 6 7 9 4
899,0,1,5,,8 2 10 1 3 6 7 9 4
900,2,1,5,8,2 10 1 3 6 7 9 4
901,2,0,5 8,2,10 1 3 6 7 9 4
902,1,0,5 8 2,10,1 3 6 7 9 4
903,1,2,5 8 2,,10 1 3 6 7 9 4
904,0,2,5 8,,10 1 3 6 7 9 4 2
905,0,1,5,8,10 1 3 6 7 9 4 2
906,2,1,5,8 10,1 3 6 7 9 4 2
907,0,2,,8 10,5 1 3 6 7 9 4 2
908,1,0,10,8,5 1 3 6 7 9 4 2
909,2,0,10 5,8,1 3 6 7 9 4 2
910,1,2,10 5,,8 1 3 6 7 9 4 2
911,0,2,10,,8 1 3 6 7 9 4 2 5
912,1,0,10 8,1,3 6 7 9 4 2 5
913,2,0,10 8 3,1,6 7 9 4 2 5
914,1,2,10 8 3,,1 6 7 9 4 2 5
915,0,2,10 8,,1 6 7 9 4 2 5 3
916,0,1,10,8,1 6 7 9 4 2 5 3
917,2,1,10,8 1,6 7 9 4 2 5 3
918,0,2,,8 1,10 6 7 9 4 2 5 3
919,1,0,1,8,10 6 7 9 4 2 5 3
920,1,2,1,,10 6 7 9 4 2 5 3 8
921,0,2,,,10 6 7 9 4 2 5 3 8 1
922,0,1,6,,10 7 9 4 2 5 3 8 1
923,2,1,6,10,7 9 4 2 5 3 8 1
924,2,0,6 10,7,9 4 2 5 3 8 1
925,1,0,6 10 7,9,4 2 5 3 8 1
926,1,2,6 10 7,,9 4 2 5 3 8 1
927,0,2,6 10,,9 4 2 5 3 8 1 7
928,0,1,6,10,9 4 2 5 3 8 1 7
929,2,1,6,10 9,4 2 5 3 8 1 7
930,0,2,,10 9,6 4 2 5 3 8 1 7
931,1,0,9,10,6 4 2 5 3 8 1 7
932,2,0,9 6,10,4 2 5 3 8 1 7
933,1,2,9 6,,10 4 2 5 3 8 1 7
934,0,2,9,,10 4 2 5 3 8 1 7 6
935,1,0,9 10,4,2 5 3 8 1 7 6
936,2,0,9 10 2,4,5 3 8 1 7 6
937,1,2,9 10 2,,4 5 3 8 1 7 6
938,0,2,9 10,,4 5 3 8 1 7 6 2
939,0,1,9,10,4 5 3 8 1 7 6 2
940,2,1,9,10 4,5 3 8 1 7 6 2
941,0,2,,10 4,9 5 3 8 1 7 6 2
942,1,0,4,10,9 5 3 8 1 7 6 2
943,1,2,4,,9 5 3 8 1 7 6 2 10
944,0,2,,,9 5 3 8 1 7 6 2 10 4
945,0,1,5,,9 3 8 1 7 6 2 10 4
946,2,1,5,9,3 8 1 7 6 2 10 4
947,2,0,5 9,3,8 1 7 6 2 10 4
948,1,0,5 9 3,8,1 7 6 2 10 4
949,1,2,5 9 3,,8 1 7 6 2 10 4
950,0,2,5 9,,8 1 7 6 2 10 4 3
951,0,1,5,9,8 1 7 6 2 10 4 3
952,2,1,5,9 8,1 7 6 2 10 4 3
953,0,2,,9 8,5 1 7 6 2 10 4 3
954,1,0,8,9,5 1 7 6 2 10 4 3
955,2,0,8 5,9,1 7 6 2 10 4 3
956,1,2,8 5,,9 1 7 6 2 10 4 3
957,0,2,8,,9 1 7 6 2 10 4 3 5
958,1,0,8 9,1,7 6 2 10 4 3 5
959,2,0,8 9 7,1,6 2 10 4 3 5
960,1,2,8 9 7,,1 6 2 10 4 3 5
961,0,2,8 9,,1 6 2 10 4 3 5 7
962,0,1,8,9,1 6 2 10 4 3 5 7
963,2,1,8,9 1,6 2 10 4 3 5 7
964,0,2,,9 1,8 6 2 10 4 3 5 7
965,1,0,1,9,8 6 2 10 4 3 5 7
966,1,2,1,,8 6 2 10 4 3 5 7 9
967,0,2,,,8 6 2 10 4 3 5 7 9 1
968,0,1,6,,8 2 10 4 3 5 7 9 1
969,2,1,6,8,2 10 4 3 5 7 9 1
970,2,0,6 8,2,10 4 3 5 7 9 1
971,1,0,6 8 2,10,4 3 5 7 9 1
972,1,2,6 8 2,,10 4 3 5 7 9 1
973,0,2,6 8,,10 4 3 5 7 9 1 2
974,0,1,6,8,10 4 3 5 7 9 1 2
975,2,1,6,8 10,4 3 5 7 9 1 2
976,0,2,,8 10,6 4 3 5 7 9 1 2
977,1,0,10,8,6 4 3 5 7 9 1 2
978,2,0,10 6,8,4 3 5 7 9 1 2
979,1,2,10 6,,8 4 3 5 7 9 1 2
980,0,2,10,,8 4 3 5 7 9 1 2 6
981,1,0,10 8,4,3 5 7 9 1 2 6
982,2,0,10 8 3,4,5 7 9 1 2 6
983,1,2,10 8 3,,4 5 7 9 1 2 6
984,0,2,10 8,,4 5 7 9 1 2 6 3
985,0,1,10,8,4 5 7 9 1 2 6 3
986,2,1,10,8 4,5 7 9 1 2 6 3
987,0,2,,8 4,10 5 7 9 1 2 6 3
988,1,0,4,8,10 5 7 9 1 2 6 3
989,1,2,4,,10 5 7 9 1 2 6 3 8
990,0,2,,,10 5 7 9 1 2 6 3 8 4
991,0,1,5,,10 7 9 1 2 6 3 8 4
992,2,1,5,10,7 9 1 2 6 3 8 4
993,2,0,5 10,7,9 1 2 6 3 8 4
994,1,0,5 10 7,9,1 2 6 3 8 4
995,1,2,5 10 7,,9 1 2 6 3 8 4
996,0,2,5 10,,9 1 2 6 3 8 4 7
997,0,1,5,10,9 1 2 6 3 8 4 7
998,2,1,5,10 9,1 2 6 3 8 4 7
999,0,2,,10 9,5 1 2 6 3 8 4 7
1000,1,0,9,10,5 1 2 6 3 8 4 7
1001,2,0,9 5,10,1 2 6 3 8 4 7
1002,1,2,9 5,,10 1 2 6 3 8 4 7
1003,0,2,9,,10 1 2 6 3 8 4 7 5
1004,1,0,9 10,1,2 6 3 8 4 7 5
1005,2,0,9 10 2,1,6 3 8 4 7 5
1006,1,2,9 10 2,,1 6 3 8 4 7 5
1007,0,2,9 10,,1 6 3 8 4 7 5 2
1008,0,1,9,10,1 6 3 8 4 7 5 2
1009,2,1,9,10 1,6 3 8 4 7 5 2
1010,0,2,,10 1,9 6 3 8 4 7 5 2
1011,1,0,1,10,9 6 3 8 4 7 5 2
1012,1,2,1,,9 6 3 8 4 7 5 2 10
1013,0,2,,,9 6 3 8 4 7 5 2 10 1
1014,0,1,6,,9 3 8 4 7 5 2 10 1
1015,2,1,6,9,3 8 4 7 5 2 10 1
1016,2,0,6 9,3,8 4 7 5 2 10 1
1017,1,0,6 9 3,8,4 7 5 2 10 1
1018,1,2,6 9 3,,8 4 7 5 2 10 1
1019,0,2,6 9,,8 4 7 5 2 10 1 3
1020,0,1,6,9,8 4 7 5 2 10 1 3
1021,2,1,6,9 8,4 7 5 2 10 1 3
1022,0,2,,9 8,6 4 7 5 2 10 1 3
1023,1,0,8,9,6 4 7 5 2 10 1 3
</think>

# Tower of Hanoi Solution for 10 Disks

```
move_id,from_peg,to_peg,peg0,peg1,peg2
1,0,2,10 9 8 7 6 5 4 3 2,,1
2,0,1,10 9 8 7 6 5 4 3,2,1
3,2,1,10 9 8 7 6 5 4 3,2 1,
4,0,2,10 9 8 7 6 5 4,2 1,3
5,1,0,10 9 8 7 6 5 4 1,2,3
6,1,2,10 9 8 7 6 5 4 1,,3 2
7,0,2,10 9 8 7 6 5 4,,3 2 1
8,0,1,10 9 8 7 6 5,4,3 2 1
9,2,1,10 9 8 7 6 5,4 1,3 2
10,2,0,10 9 8 7 6 5 2,4 1,3
11,1,0,10 9 8 7 6 5 2 1,4,3
12,2,1,10 9 8 7 6 5 2 1,4 3,
13,0,2,10 9 8 7 6 5 2,4 3,1
14,0,1,10 9 8 7 6 5,4 3 2,1
15,2,1,10 9 8 7 6 5,4 3 2 1,
16,0,2,10 9 8 7 6,4 3 2 1,5
17,1,0,10 9 8 7 6 1,4 3 2,5
18,1,2,10 9 8 7 6 1,4 3,5 2
19,0,2,10 9 8 7 6,4 3,5 2 1
20,1,0,10 9 8 7 6 3,4,5 2 1
21,2,0,10 9 8 7 6 3 2,4,5 1
22,2,1,10 9 8 7 6 3 2,4 5,1
23,0,2,10 9 8 7 6 3,4 5,1 2
24,0,1,10 9 8 7 6,4 5 3,1 2
25,2,1,10 9 8 7 6,4 5 3 1,2
26,2,0,10 9 8 7 6 2,4 5 3 1,
27,1,0,10 9 8 7 6 2 1,4 5 3,
28,1,2,10 9 8 7 6 2 1,4 5,3
29,0,2,10 9 8 7 6 2,4 5,3 1
30,1,0,10 9 8 7 6 2 5,4,3 1
31,1,2,10 9 8 7 6 2 5,,4 3 1
32,0,2,10 9 8 7 6,2 5,4 3 1
33,0,1,10 9 8 7,6,4 3 1 2 5
34,2,1,10 9 8 7,6 1,4 3 2 5
35,2,0,10 9 8 7 5,6 1,4 3 2
36,1,0,10 9 8 7 5 1,6,4 3 2
37,2,1,10 9 8 7 5 1,6 4,3 2
38,0,2,10 9 8 7 5,6 4,3 2 1
39,0,1,10 9 8 7,6 4 5,3 2 1
40,2,1,10 9 8 7,6 4 5 1,3 2
41,0,2,10 9 8,6 4 5 1,7 3 2
42,1,0,10 9 8 1,6 4 5,7 3 2
43,1,2,10 9 8 1,6 4,7 3 2 5
44,0,2,10 9 8,6 4,7 3 2 5 1
45,1,0,10 9 8 4,6,7 3 2 5 1
46,2,0,10 9 8 4 2,6,7 3 5 1
47,2,1,10 9 8 4 2,6 7,3 5 1
48,0,2,10 9 8 4,6 7,3 5 1 2
49,1,0,10 9 8 4 7,6,3 5 1 2
50,1,2,10 9 8 4 7,,6 3 5 1 2
51,0,2,10 9 8,4 7,6 3 5 1 2
52,0,1,10 9,8,6 3 5 1 2 4 7
53,2,1,10 9,8 2,6 3 5 1 4 7
54,2,0,10 9 2,8,6 3 5 1 4 7
55,1,0,10 9 2 1,8,6 3 5 4 7
56,2,1,10 9 2 1,8 6,3 5 4 7
57,0,2,10 9 2,8 6,3 5 4 7 1
58,0,1,10 9,8 6 2,3 5 4 7 1
59,2,1,10 9,8 6 2 1,3 5 4 7
60,0,2,10,8 6 2 1,9 3 5 4 7
61,1,0,10 1,8 6 2,9 3 5 4 7
62,1,2,10 1,8 6,9 3 5 4 7 2
63,0,2,10,8 6,9 3 5 4 7 2 1
64,1,0,10 6,8,9 3 5 4 7 2 1
65,2,0,10 6 3,8,9 5 4 7 2 1
66,2,1,10 6 3,8 9,5 4 7 2 1
67,0,2,10 6,8 9,5 4 7 2 1 3
68,1,0,10 6 9,8,5 4 7 2 1 3
69,1,2,10 6 9,,8 5 4 7 2 1 3
70,0,2,10,6 9,8 5 4 7 2 1 3
71,0,1,10,6,8 5 4 7 2 1 3 9
72,2,1,10,6 1,8 5 4 7 2 3 9
73,2,0,10 1,6,8 5 4 7 2 3 9
74,1,0,10 1 6,8,5 4 7 2 3 9
75,2,1,10 1 6,8 5,4 7 2 3 9
76,0,2,10 1,8 5,4 7 2 3 9 6
77,0,1,10,8 5 1,4 7 2 3 9 6
78,2,1,10,8 5 1 4,7 2 3 9 6
79,0,2,10,8 5 1,7 2 3 9 6 4
80,1,0,10 5,8 1,7 2 3 9 6 4
81,2,0,10 5 2,8 1,7 3 9 6 4
82,2,1,10 5 2,8 1 7,3 9 6 4
83,0,2,10 5,8 1 7,3 9 6 4 2
84,1,0,10 5 1,8 7,3 9 6 4 2
85,1,2,10 5 1,8,3 9 6 4 2 7
86,0,2,10,8 5 1,3 9 6 4 2 7
87,1,0,10 8,5 1,3 9 6 4 2 7
88,2,0,10 8 3,5 1,9 6 4 2 7
89,2,1,10 8 3,5 1 9,6 4 2 7
90,0,2,10 8,5 1 9,6 4 2 7 3
91,0,1,10,5 1 9 8,6 4 2 7 3
92,2,1,10,5 1 9 8 6,4 2 7 3
93,2,0,10 6,5 1 9 8,4 2 7 3
94,1,0,10 6 1,5 9 8,4 2 7 3
95,1,2,10 6 1,5 9,4 2 7 3 8
96,0,2,10,5 9 6 1,4 2 7 3 8
97,1,0,10 9,5 6 1,4 2 7 3 8
98,2,0,10 9 4,5 6 1,2 7 3 8
99,2,1,10 9 4,5 6 1 2,7 3 8
100,0,2,10 9,5 6 1 2,7 3 8 4
101,0,1,10,5 6 1 2 9,7 3 8 4
102,2,1,10,5 6 1 2 9 7,3 8 4
103,0,2,10,5 6 1 2 9,3 8 4 7
104,1,0,10 6,5 1 2 9,3 8 4 7
105,2,0,10 6 3,5 1 2 9,8 4 7
106,2,1,10 6 3,5 1 2 9 8,4 7
107,0,2,10 6,5 1 2 9 8,4 7 3
108,1,0,10 6 1,5 2 9 8,4 7 3
109,1,2,10 6 1,5 2,4 7 3 9 8
110,0,2,10,5 2 6 1,4 7 3 9 8
111,1,0,10 2,5 6 1,4 7 3 9 8
112,2,0,10 2 4,5 6 1,7 3 9 8
113,2,1,10 2 4,5 6 1 7,3 9 8
114,0,2,10 2,5 6 1 7,3 9 8 4
115,0,1,10,5 6 1 7 2,3 9 8 4
116,2,1,10,5 6 1 7 2 3,9 8 4
117,2,0,10 3,5 6 1 7 2,9 8 4
118,1,0,10 3 1,5 6 7 2,9 8 4
119,1,2,10 3 1,5 6,9 8 4 7 2
120,0,2,10,5 6 3 1,9 8 4 7 2
121,1,0,10 6,5 3 1,9 8 4 7 2
122,2,0,10 6 9,5 3 1,8 4 7 2
123,2,1,10 6 9,5 3 1 8,4 7 2
124,0,2,10 6,5 3 1 8,4 7 2 9
125,0,1,10,5 3 1 8 6,4 7 2 9
126,2,1,10,5 3 1 8 6 4,7 2 9
127,0,2,10,5 3 1 8 6,7 2 9 4
128,1,0,10 3,5 1 8 6,7 2 9 4
129,1,2,10 3,5 1,7 2 9 4 8 6
130,0,2,10,5 1 3,7 2 9 4 8 6
131,1,0,10 1,5 3,7 2 9 4 8 6
132,1,2,10 1,5,7 2 9 4 8 6 3
133,0,2,10,5 1,7 2 9 4 8 6 3
134,0,1,10,5,7 2 9 4 8 6 3 1
135,2,1,10,5 7,2 9 4 8 6 3 1
136,0,2,,5 7,10 2 9 4 8 6 3 1
137,1,0,7,5,10 2 9 4 8 6 3 1
138,1,2,7,,10 2 9 4 8 6 3 1 5
139,0,2,,,10 2 9 4 8 6 3 1 5 7
140,0,1,1,,10 2 9 4 8 6 3 5 7
141,2,1,1,5,10 2 9 4 8 6 3 7
142,2,0,1 5,10,2 9 4 8 6 3 7
143,1,0,1 5 10,2,9 4 8 6 3 7
144,1,2,1 5 10,,2 9 4 8 6 3 7
145,0,2,1 5,,2 9 4 8 6 3 7 10
146,0,1,1,5,2 9 4 8 6 3 7 10
147,2,1,1,5 2,9 4 8 6 3 7 10
148,0,2,,5 2,1 9 4 8 6 3 7 10
149,1,0,2,5,1 9 4 8 6 3 7 10
150,1,2,2,,1 9 4 8 6 3 7 10 5
151,0,2,,,1 9 4 8 6 3 7 10 5 2
152,0,1,3,,1 9 4 8 6 7 10 5 2
153,2,1,3,1,9 4 8 6 7 10 5 2
154,2,0,3 1,9,4 8 6 7 10 5 2
155,1,0,3 1 9,4,8 6 7 10 5 2
156,1,2,3 1 9,,4 8 6 7 10 5 2
157,0,2,3 1,,4 8 6 7 10 5 2 9
158,0,1,3,1,4 8 6 7 10 5 2 9
159,2,1,3,1 4,8 6 7 10 5 2 9
160,0,2,,1 4,3 8 6 7 10 5 2 9
161,1,0,4,1,3 8 6 7 10 5 2 9
162,1,2,4,,3 8 6 7 10 5 2 9 1
163,0,2,,,3 8 6 7 10 5 2 9 1 4
164,0,1,5,,3 8 6 7 10 2 9 1 4
165,2,1,5,3,8 6 7 10 2 9 1 4
166,2,0,5 3,8,6 7 10 2 9 1 4
167,1,0,5 3 8,6,7 10 2 9 1 4
168,1,2,5 3 8,,6 7 10 2 9 1 4
169,0,2,5 3,,6 7 10 2 9 1 4 8
170,0,1,5,3,6 7 10 2 9 1 4 8
171,2,1,5,3 6,7 10 2 9 1 4 8
172,0,2,,3 6,5 7 10 2 9 1 4 8
173,1,0,6,3,5 7 10 2 9 1 4 8
174,2,0,6 5,3,7 10 2 9 1 4 8
175,1,2,6 5,,3 7 10 2 9 1 4 8
176,0,2,6,,3 7 10 2 9 1 4 8 5
177,1,0,6 3,7,10 2 9 1 4 8 5
178,2,0,6 3 7,10,2 9 1 4 8 5
179,1,2,6 3 7,,10 2 9 1 4 8 5
180,0,2,6 3,,10 2 9 1 4 8 5 7
181,0,1,6,3,10 2 9 1 4 8 5 7
182,2,1,6,3 10,2 9 1 4 8 5 7
183,0,2,,3 10,6 2 9 1 4 8 5 7
184,1,0,10,3,6 2 9 1 4 8 5 7
185,2,0,10 2,3,6 9 1 4 8 5 7
186,1,2,10 2,,3 6 9 1 4 8 5 7
187,0,2,10,,3 6 9 1 4 8 5 7 2
188,1,0,10 3,6,9 1 4 8 5 7 2
189,2,0,10 3 9,6,1 4 8 5 7 2
190,1,2,10 3 9,,6 1 4 8 5 7 2
191,0,2,10 3,,6 1 4 8 5 7 2 9
192,0,1,10,3,6 1 4 8 5 7 2 9
193,2,1,10,3 6,1 4 8 5 7 2 9
194,0,2,,3 6,10 1 4 8 5 7 2 9
195,1,0,6,3,10 1 4 8 5 7 2 9
196,1,2,6,,10 1 4 8 5 7 2 9 3
197,0,2,,,10 1 4 8 5 7 2 9 3 6
198,0,1,1,,10 4 8 5 7 2 9 3 6
199,2,1,1,10,4 8 5 7 2 9 3 6
200,2,0,1 10,4,8 5 7 2 9 3 6
201,1,0,1 10 4,8,5 7 2 9 3 6
202,1,2,1 10 4,,8 5 7 2 9 3 6
203,0,2,1 10,,8 5 7 2 9 3 6 4
204,0,1,1,10,8 5 7 2 9 3 6 4
205,2,1,1,10 8,5 7 2 9 3 6 4
206,0,2,,10 8,1 5 7 2 9 3 6 4
207,1,0,8,10,1 5 7 2 9 3 6 4
208,1,2,8,,1 5 7 2 9 3 6 4 10
209,0,2,,,1 5 7 2 9 3 6 4 10 8
210,0,1,5,,1 7 2 9 3 6 4 10 8
211,2,1,5,1,7 2 9 3 6 4 10 8
212,2,0,5 1,7,2 9 3 6 4 10 8
213,1,0,5 1 7,2,9 3 6 4 10 8
214,1,2,5 1 7,,2 9 3 6 4 10 8
215,0,2,5 1,,2 9 3 6 4 10 8 7
216,0,1,5,1,2 9 3 6 4 10 8 7
217,2,1,5,1 2,9 3 6 4 10 8 7
218,0,2,,1 2,5 9 3 6 4 10 8 7
219,1,0,2,1,5 9 3 6 4 10 8 7
220,1,2,2,,5 9 3 6 4 10 8 7 1
221,0,2,,,5 9 3 6 4 10 8 7 1 2
222,0,1,9,,5 3 6 4 10 8 7 1 2
223,2,1,9,5,3 6 4 10 8 7 1 2
224,2,0,9 5,3,6 4 10 8 7 1 2
225,1,0,9 5 3,6,4 10 8 7 1 2
226,1,2,9 5 3,,6 4 10 8 7 1 2
227,0,2,9 5,,6 4 10 8 7 1 2 3
228,0,1,9,5,6 4 10 8 7 1 2 3
229,2,1,9,5 6,4 10 8 7 1 2 3
230,0,2,,5 6,9 4 10 8 7 1 2 3
231,1,0,6,5,9 4 10 8 7 1 2 3
232,2,0,6 9,5,4 10 8 7 1 2 3
233,1,2,6 9,,5 4 10 8 7 1 2 3
234,0,2,6,,5 4 10 8 7 1 2 3 9
235,1,0,6 5,4,10 8 7 1 2 3 9
236,2,0,6 5 10,4,8 7 1 2 3 9
237,1,2,6 5 10,,4 8 7 1 2 3 9
238,0,2,6 5,,4 8 7 1 2 3 9 10
239,0,1,6,5,4 8 7 1 2 3 9 10
240,2,1,6,5 4,8 7 1 2 3 9 10
241,0,2,,5 4,6 8 7 1 2 3 9 10
242,1,0,4,5,6 8 7 1 2 3 9 10
243,2,0,4 6,5,8 7 1 2 3 9 10
244,1,2,4 6,,5 8 7 1 2 3 9 10
245,0,2,4,,5 8 7 1 2 3 9 10 6
246,1,0,4 5,8,7 1 2 3 9 10 6
247,1,2,4 5,,8 7 1 2 3 9 10 6
248,0,2,4,,8 7 1 2 3 9 10 6 5
249,0,1,4,8,7 1 2 3 9 10 6 5
250,2,1,4,8 7,1 2 3 9 10 6 5
251,0,2,,8 7,4 1 2 3 9 10 6 5
252,1,0,7,8,4 1 2 3 9 10 6 5
253,1,2,7,,4 1 2 3 9 10 6 5 8
254,0,2,,,4 1 2 3 9 10 6 5 8 7
255,0,1,1,,4 2 3 9 10 6 5 8 7
256,2,1,1,4,2 3 9 10 6 5 8 7
257,2,0,1 4,2,3 9 10 6 5 8 7
258,1,0,1 4 2,3,9 10 6 5 8 7
259,1,2,1 4 2,,3 9 10 6 5 8 7
260,0,2,1 4,,3 9 10 6 5 8 7 2
261,0,1,1,4,3 9 10 6 5 8 7 2
262,2,1,1,4 3,9 10 6 5 8 7 2
263,0,2,,4 3,1 9 10 6 5 8 7 2
264,1,0,3,4,1 9 10 6 5 8 7 2
265,1,2,3,,1 9 10 6 5 8 7 2 4
266,0,2,,,1 9 10 6 5 8 7 2 4 3
267,0,1,9,,1 10 6 5 8 7 2 4 3
268,2,1,9,1,10 6 5 8 7 2 4 3
269,2,0,9 1,10,6 5 8 7 2 4 3
270,1,0,9 1 10,6,5 8 7 2 4 3
271,1,2,9 1 10,,6 5 8 7 2 4 3
272,0,2,9 1,,6 5 8 7 2 4 3 10
273,0,1,9,1,6 5 8 7 2 4 3 10
274,2,1,9,1 6,5 8 7 2 4 3 10
275,0,2,,1 6,9 5 8 7 2 4 3 10
276,1,0,6,1,9 5 8 7 2 4 3 10
277,2,0,6 9,1,5 8 7 2 4 3 10
278,1,2,6 9,,1 5 8 7 2 4 3 10
279,0,2,6,,1 5 8 7 2 4 3 10 9
280,1,0,6 1,5,8 7 2 4 3 10 9
281,1,2,6 1,,5 8 7 2 4 3 10 9
282,0,2,6,,5 8 7 2 4 3 10 9 1
283,0,1,6,5,8 7 2 4 3 10 9 1
284,2,1,6,5 8,7 2 4 3 10 9 1
285,0,2,,5 8,6 7 2 4 3 10 9 1
286,1,0,8,5,6 7 2 4 3 10 9 1
287,2,0,8 6,5,7 2 4 3 10 9 1
288,1,2,8 6,,5 7 2 4 3 10 9 1
289,0,2,8,,5 7 2 4 3 10 9 1 6
290,1,0,8 5,7,2 4 3 10 9 1 6
291,1,2,8 5,,7 2 4 3 10 9 1 6
292,0,2,8,,7 2 4 3 10 9 1 6 5
293,0,1,8,7,2 4 3 10 9 1 6 5
294,2,1,8,7 2,4 3 10 9 1 6 5
295,0,2,,7 2,8 4 3 10 9 1 6 5
296,1,0,2,7,8 4 3 10 9 1 6 5
297,1,2,2,,8 4 3 10 9 1 6 5 7
298,0,2,,,8 4 3 10 9 1 6 5 7 2
299,0,1,4,,8 3 10 9 1 6 5 7 2
300,2,1,4,8,3 10 9 1 6 5 7 2
301,2,0,4 8,3,10 9 1 6 5 7 2
302,1,0,4 8 3,10,9 1 6 5 7 2
303,1,2,4 8 3,,10 9 1 6 5 7 2
304,0,2,4 8,,10 9 1 6 5 7 2 3
305,0,1,4,8,10 9 1 6 5 7 2 3
306,2,1,4,8 10,9 1 6 5 7 2 3
307,0,2,,8 10,4 9 1 6 5 7 2 3
308,1,0,10,8,4 9 1 6 5 7 2 3
309,2,0,10 4,8,9 1 6 5 7 2 3
310,1,2,10 4,,8 9 1 6 5 7 2 3
311,0,2,10,,8 9 1 6 5 7 2 3 4
312,1,0,10 8,9,1 6 5 7 2 3 4
313,1,2,10 8,,9 1 6 5 7 2 3 4
314,0,2,10,,9 1 6 5 7 2 3 4 8
315,0,1,10,9,1 6 5 7 2 3 4 8
316,2,1,10,9 1,6 5 7 2 3 4 8
317,0,2,,9 1,10 6 5 7 2 3 4 8
318,1,0,1,9,10 6 5 7 2 3 4 8
319,1,2,1,,10 6 5 7 2 3 4 8 9
320,0,2,,,10 6 5 7 2 3 4 8 9 1
321,0,1,6,,10 5 7 2 3 4 8 9 1
322,2,1,6,10,5 7 2 3 4 8 9 1
323,2,0,6 10,5,7 2 3 4 8 9 1
324,1,0,6 10 5,7,2 3 4 8 9 1
325,1,2,6 10 5,,7 2 3 4 8 9 1
326,0,2,6 10,,7 2 3 4 8 9 1 5
327,0,1,6,10,7 2 3 4 8 9 1 5
328,2,1,6,10 7,2 3 4 8 9 1 5
329,0,2,,10 7,6 2 3 4 8 9 1 5
330,1,0,7,10,6 2 3 4 8 9 1 5
331,1,2,7,,6 2 3 4 8 9 1 5 10
332,0,2,,,6 2 3 4 8 9 1 5 10 7
333,0,1,2,,6 3 4 8 9 1 5 10 7
334,2,1,2,6,3 4 8 9 1 5 10 7
335,2,0,2 6,3,4 8 9 1 5 10 7
336,1,0,2 6 3,4,8 9 1 5 10 7
337,1,2,2 6 3,,4 8 9 1 5 10 7
338,0,2,2 6,,4 8 9 1 5 10 7 3
339,0,1,2,6,4 8 9 1 5 10 7 3
340,2,1,2,6 4,8 9 1 5 10 7 3
341,0,2,,6 4,2 8 9 1 5 10 7 3
342,1,0,4,6,2 8 9 1 5 10 7 3
343,1,2,4,,2 8 9 1 5 10 7 3 6
344,0,2,,,2 8 9 1 5 10 7 3 6 4
345,0,1,8,,2 9 1 5 10 7 3 6 4
346,2,1,8,2,9 1 5 10 7 3 6 4
347,2,0,8 2,9,1 5 10 7 3 6 4
348,1,0,8 2 9,1,5 10 7 3 6 4
349,1,2,8 2 9,,1 5 10 7 3 6 4
350,0,2,8 2,,1 5 10 7 3 6 4 9
351,0,1,8,2,1 5 10 7 3 6 4 9
352,2,1,8,2 1,5 10 7 3 6 4 9
353,0,2,,2 1,8 5 10 7 3 6 4 9
354,1,0,1,2,8 5 10 7 3 6 4 9
355,1,2,1,,8 5 10 7 3 6 4 9 2
356,0,2,,,8 5 10 7 3 6 4 9 2 1
357,0,1,5,,8 10 7 3 6 4 9 2 1
358,2,1,5,8,10 7 3 6 4 9 2 1
359,2,0,5 8,10,7 3 6 4 9 2 1
360,1,0,5 8 10,7,3 6 4 9 2 1
361,1,2,5 8 10,,7 3 6 4 9 2 1
362,0,2,5 8,,7 3 6 4 9 2 1 10
363,0,1,5,8,7 3 6 4 9 2 1 10
364,2,1,5,8 7,3 6 4 9 2 1 10
365,0,2,,8 7,5 3 6 4 9 2 1 10
366,1,0,7,8,5 3 6 4 9 2 1 10
367,1,2,7,,5 3 6 4 9 2 1 10 8
368,0,2,,,5 3 6 4 9 2 1 10 8 7
369,0,1,3,,5 6 4 9 2 1 10 8 7
370,2,1,3,5,6 4 9 2 1 10 8 7
371,2,0,3 5,6,4 9 2 1 10 8 7
372,1,0,3 5 6,4,9 2 1 10 8 7
373,1,2,3 5 6,,4 9 2 1 10 8 7
374,0,2,3 5,,4 9 2 1 10 8 7 6
375,0,1,3,5,4 9 2 1 10 8 7 6
376,2,1,3,5 4,9 2 1 10 8 7 6
377,0,2,,5 4,3 9 2 1 10 8 7 6
378,1,0,4,5,3 9 2 1 10 8 7 6
379,1,2,4,,3 9 2 1 10 8 7 6 5
380,0,2,,,3 9 2 1 10 8 7 6 5 4
381,0,1,9,,3 2 1 10 8 7 6 5 4
382,2,1,9,3,2 1 10 8 7 6 5 4
383,2,0,9 3,2,1 10 8 7 6 5 4
384,1,0,9 3 2,1,10 8 7 6 5 4
385,1,2,9 3 2,,1 10 8 7 6 5 4
386,0,2,9 3,,1 10 8 7 6 5 4 2
387,0,1,9,3,1 10 8 7 6 5 4 2
388,2,1,9,3 1,10 8 7 6 5 4 2
389,0,2,,3 1,9 10 8 7 6 5 4 2
390,1,0,1,3,9 10 8 7 6 5 4 2
391,1,2,1,,9 10 8 7 6 5 4 2 3
392,0,2,,,9 10 8 7 6 5 4 2 3 1
393,0,1,10,,9 8 7 6 5 4 2 3 1
394,2,1,10,9,8 7 6 5 4 2 3 1
395,2,0,10 9,8,7 6 5 4 2 3 1
396,1,0,10 9 8,7,6 5 4 2 3 1
397,1,2,10 9 8,,7 6 5 4 2 3 1
398,0,2,10 9,,7 6 5 4 2 3 1 8
399,0,1,10,9,7 6 5 4 2 3 1 8
400,2,1,10,9 7,6 5 4 2 3 1 8
401,0,2,,9 7,10 6 5 4 2 3 1 8
402,1,0,7,9,10 6 5 4 2 3 1 8
403,1,2,7,,10 6 5 4 2 3 1 8 9
404,0,2,,,10 6 5 4 2 3 1 8 9 7
405,0,1,6,,10 5 4 2 3 1 8 9 7
406,2,1,6,10,5 4 2 3 1 8 9 7
407,2,0,6 10,5,4 2 3 1 8 9 7
408,1,0,6 10 5,4,2 3 1 8 9 7
409,1,2,6 10 5,,4 2 3 1 8 9 7
410,0,2,6 10,,4 2 3 1 8 9 7 5
411,0,1,6,10,4 2 3 1 8 9 7 5
412,2,1,6,10 4,2 3 1 8 9 7 5
413,0,2,,10 4,6 2 3 1 8 9 7 5
414,1,0,4,10,6 2 3 1 8 9 7 5
415,2,0,4 6,10,2 3 1 8 9 7 5
416,1,2,4 6,,10 2 3 1 8 9 7 5
417,0,2,4,,10 2 3 1 8 9 7 5 6
418,1,0,4 10,2,3 1 8 9 7 5 6
419,2,0,4 10 3,2,1 8 9 7 5 6
420,1,2,4 10 3,,2 1 8 9 7 5 6
421,0,2,4 10,,2 1 8 9 7 5 6 3
422,0,1,4,10,2 1 8 9 7 5 6 3
423,2,1,4,10 2,1 8 9 7 5 6 3
424,0,2,,10 2,4 1 8 9 7 5 6 3
425,1,0,2,10,4 1 8 9 7 5 6 3
426,1,2,2,,4 1 8 9 7 5 6 3 10
427,0,2,,,4 1 8 9 7 5 6 3 10 2
428,0,1,1,,4 8 9 7 5 6 3 10 2
429,2,1,1,4,8 9 7 5 6 3 10 2
430,2,0,1 4,8,9 7 5 6 3 10 2
431,1,0,1 4 8,9,7 5 6 3 10 2
432,1,2,1 4 8,,9 7 5 6 3 10 2
433,0,2,1 4,,9 7 5 6 3 10 2 8
434,0,1,1,4,9 7 5 6 3 10 2 8
435,2,1,1,4 9,7 5 6 3 10 2 8
436,0,2,,4 9,1 7 5 6 3 10 2 8
437,1,0,9,4,1 7 5 6 3 10 2 8
438,2,0,9 1,4,7 5 6 3 10 2 8
439,1,2,9 1,,4 7 5 6 3 10 2 8
440,0,2,9,,4 7 5 6 3 10 2 8 1
441,1,0,9 4,7,5 6 3 10 2 8 1
442,1,2,9 4,,7 5 6 3 10 2 8 1
443,0,2,9,,7 5 6 3 10 2 8 1 4
444,0,1,9,7,5 6 3 10 2 8 1 4
445,2,1,9,7 5,6 3 10 2 8 1 4
446,0,2,,7 5,9 6 3 10 2 8 1 4
447,1,0,5,7,9 6 3 10 2 8 1 4
448,1,2,5,,9 6 3 10 2 8 1 4 7
449,0,2,,,9 6 3 10 2 8 1 4 7 5
450,0,1,6,,9 3 10 2 8 1 4 7 5
451,2,1,6,9,3 10 2 8 1 4 7 5
452,2,0,6 9,3,10 2 8 1 4 7 5
453,1,0,6 9 3,10,2 8 1 4 7 5
454,1,2,6 9 3,,10 2 8 1 4 7 5
455,0,2,6 9,,10 2 8 1 4 7 5 3
456,0,1,6,9,10 2 8 1 4 7 5 3
457,2,1,6,9 10,2 8 1 4 7 5 3
458,0,2,,9 10,6 2 8 1 4 7 5 3
459,1,0,10,9,6 2 8 1 4 7 5 3
460,2,0,10 6,9,2 8 1 4 7 5 3
461,1,2,10 6,,9 2 8 1 4 7 5 3
462,0,2,10,,9 2 8 1 4 7 5 3 6
463,1,0,10 9,2,8 1 4 7 5 3 6
464,2,0,10 9 8,2,1 4 7 5 3 6
465,1,2,10 9 8,,2 1 4 7 5 3 6
466,0,2,10 9,,2 1 4 7 5 3 6 8
467,0,1,10,9,2 1 4 7 5 3 6 8
468,2,1,10,9 2,1 4 7 5 3 6 8
469,0,2,,9 2,10 1 4 7 5 3 6 8
470,1,0,2,9,10 1 4 7 5 3 6 8
471,1,2,2,,10 1 4 7 5 3 6 8 9
472,0,2,,,10 1 4 7 5 3 6 8 9 2
473,0,1,1,,10 4 7 5 3 6 8 9 2
474,2,1,1,10,4 7 5 3 6 8 9 2
475,2,0,1 10,4,7 5 3 6 8 9 2
476,1,0,1 10 4,7,5 3 6 8 9 2
477,1,2,1 10 4,,7 5 3 6 8 9 2
478,0,2,1 10,,7 5 3 6 8 9 2 4
479,0,1,1,10,7 5 3 6 8 9 2 4
480,2,1,1,10 7,5 3 6 8 9 2 4
481,0,2,,10 7,1 5 3 6 8 9 2 4
482,1,0,7,10,1 5 3 6 8 9 2 4
483,1,2,7,,1 5 3 6 8 9 2 4 10
484,0,2,,,1 5 3 6 8 9 2 4 10 7
485,0,1,5,,1 3 6 8 9 2 4 10 7
486,2,1,5,1,3 6 8 9 2 4 10 7
487,2,0,5 1,3,6 8 9 2 4 10 7
488,1,0,5 1 3,6,8 9 2 4 10 7
489,1,2,5 1 3,,6 8 9 2 4 10 7
490,0,2,5 1,,6 8 9 2 4 10 7 3
491,0,1,5,1,6 8 9 2 4 10 7 3
492,2,1,5,1 6,8 9 2 4 10 7 3
493,0,2,,1 6,5 8 9 2 4 10 7 3
494,1,0,6,1,5 8 9 2 4 10 7 3
495,2,0,6 5,1,8 9 2 4 10 7 3
496,1,2,6 5,,1 8 9 2 4 10 7 3
497,0,2,6,,1 8 9 2 4 10 7 3 5
498,1,0,6 1,8,9 2 4 10 7 3 5
499,1,2,6 1,,8 9 2 4 10 7 3 5
500,0,2,6,,8 9 2 4 10 7 3 5 1
501,0,1,6,8,9 2 4 10 7 3 5 1
502,2,1,6,8 9,2 4 10 7 3 5 1
503,0,2,,8 9,6 2 4 10 7 3 5 1
504,1,0,9,8,6 2 4 10 7 3 5 1
505,2,0,9 6,8,2 4 10 7 3 5 1
506,1,2,9 6,,8 2 4 10 7 3 5 1
507,0,2,9,,8 2 4 10 7 3 5 1 6
508,1,0,9 8,2,4 10 7 3 5 1 6
509,1,2,9 8,,2 4 10 7 3 5 1 6
510,0,2,9,,2 4 10 7 3 5 1 6 8
511,0,1,9,2,4 10 7 3 5 1 6 8
512,2,1,9,2 4,10 7 3 5 1 6 8
513,0,2,,2 4,9 10 7 3 5 1 6 8
514,1,0,4,2,9 10 7 3 5 1 6 8
515,1,2,4,,9 10 7 3 5 1 6 8 2
516,0,2,,,9 10 7 3 5 1 6 8 2 4
517,0,1,10,,9 7 3 5 1 6 8 2 4
518,2,1,10,9,7 3 5 1 6 8 2 4
519,2,0,10 9,7,3 5 1 6 8 2 4
520,1,0,10 9 7,3,5 1 6 8 2 4
521,1,2,10 9 7,,3 5 1 6 8 2 4
522,0,2,10 9,,3 5 1 6 8 2 4 7
523,0,1,10,9,3 5 1 6 8 2 4 7
524,2,1,10,9 3,5 1 6 8 2 4 7
525,0,2,,9 3,10 5 1 6 8 2 4 7
526,1,0,3,9,10 5 1 6 8 2 4 7
527,1,2,3,,10 5 1 6 8 2 4 7 9
528,0,2,,,10 5 1 6 8 2 4 7 9 3
529,0,1,5,,10 1 6 8 2 4 7 9 3
530,2,1,5,10,1 6 8 2 4 7 9 3
531,2,0,5 10,1,6 8 2 4 7 9 3
532,1,0,5 10 1,6,8 2 4 7 9 3
533,1,2,5 10 1,,6 8 2 4 7 9 3
534,0,2,5 10,,6 8 2 4 7 9 3 1
535,0,1,5,10,6 8 2 4 7 9 3 1
536,2,1,5,10 6,8 2 4 7 9 3 1
537,0,2,,10 6,5 8 2 4 7 9 3 1
538,1,0,6,10,5 8 2 4 7 9 3 1
539,2,0,6 5,10,8 2 4 7 9 3 1
540,1,2,6 5,,10 8 2 4 7 9 3 1
541,0,2,6,,10 8 2 4 7 9 3 1 5
542,1,0,6 10,8,2 4 7 9 3 1 5
543,2,0,6 10 2,8,4 7 9 3 1 5
544,1,2,6 10 2,,8 4 7 9 3 1 5
545,0,2,6 10,,8 4 7 9 3 1 5 2
546,0,1,6,10,8 4 7 9 3 1 5 2
547,2,1,6,10 8,4 7 9 3 1 5 2
548,0,2,,10 8,6 4 7 9 3 1 5 2
549,1,0,8,10,6 4 7 9 3 1 5 2
550,2,0,8 6,10,4 7 9 3 1 5 2
551,1,2,8 6,,10 4 7 9 3 1 5 2
552,0,2,8,,10 4 7 9 3 1 5 2 6
553,1,0,8 10,4,7 9 3 1 5 2 6
554,2,0,8 10 7,4,9 3 1 5 2 6
555,1,2,8 10 7,,4 9 3 1 5 2 6
556,0,2,8 10,,4 9 3 1 5 2 6 7
557,0,1,8,10,4 9 3 1 5 2 6 7
558,2,1,8,10 4,9 3 1 5 2 6 7
559,0,2,,10 4,8 9 3 1 5 2 6 7
560,1,0,4,10,8 9 3 1 5 2 6 7
561,1,2,4,,8 9 3 1 5 2 6 7 10
562,0,2,,,8 9 3 1 5 2 6 7 10 4
563,0,1,9,,8 3 1 5 2 6 7 10 4
564,2,1,9,8,3 1 5 2 6 7 10 4
565,2,0,9 8,3,1 5 2 6 7 10 4
566,1,0,9 8 3,1,5 2 6 7 10 4
567,1,2,9 8 3,,1 5 2 6 7 10 4
568,0,2,9 8,,1 5 2 6 7 10 4 3
569,0,1,9,8,1 5 2 6 7 10 4 3
570,2,1,9,8 1,5 2 6 7 10 4 3
571,0,2,,8 1,9 5 2 6 7 10 4 3
572,1,0,1,8,9 5 2 6 7 10 4 3
573,1,2,1,,9 5 2 6 7 10 4 3 8
574,0,2,,,9 5 2 6 7 10 4 3 8 1
575,0,1,5,,9 2 6 7 10 4 3 8 1
576,2,1,5,9,2 6 7 10 4 3 8 1
577,2,0,5 9,2,6 7 10 4 3 8 1
578,1,0,5 9 2,6,7 10 4 3 8 1
579,1,2,5 9 2,,6 7 10 4 3 8 1
580,0,2,5 9,,6 7 10 4 3 8 1 2
581,0,1,5,9,6 7 10 4 3 8 1 2
582,2,1,5,9 6,7 10 4 3 8 1 2
583,0,2,,9 6,5 7 10 4 3 8 1 2
584,1,0,6,9,5 7 10 4 3 8 1 2
585,2,0,6 5,9,7 10 4 3 8 1 2
586,1,2,6 5,,9 7 10 4 3 8 1 2
587,0,2,6,,9 7 10 4 3 8 1 2 5
588,1,0,6 9,7,10 4 3 8 1 2 5
589,1,2,6 9,,7 10 4 3 8 1 2 5
590,0,2,6,,7 10 4 3 8 1 2 5 9
591,0,1,6,7,10 4 3 8 1 2 5 9
592,2,1,6,7 10,4 3 8 1 2 5 9
593,0,2,,7 10,6 4 3 8 1 2 5 9
594,1,0,10,7,6 4 3 8 1 2 5 9
595,2,0,10 6,7,4 3 8 1 2 5 9
596,1,2,10 6,,7 4 3 8 1 2 5 9
597,0,2,10,,7 4 3 8 1 2 5 9 6
598,1,0,10 7,4,3 8 1 2 5 9 6
599,2,0,10 7 3,4,8 1 2 5 9 6
600,1,2,10 7 3,,4 8 1 2 5 9 6
601,0,2,10 7,,4 8 1 2 5 9 6 3
602,0,1,10,7,4 8 1 2 5 9 6 3
603,2,1,10,7 4,8 1 2 5 9 6 3
604,0,2,,7 4,10 8 1 2 5 9 6 3
605,1,0,4,7,10 8 1 2 5 9 6 3
606,1,2,4,,10 8 1 2 5 9 6 3 7
607,0,2,,,10 8 1 2 5 9 6 3 7 4
608,0,1,8,,10 1 2 5 9 6 3 7 4
609,2,1,8,10,1 2 5 9 6 3 7 4
610,2,0,8 10,1,2 5 9 6 3 7 4
611,1,0,8 10 1,2,5 9 6 3 7 4
612,1,2,8 10 1,,2 5 9 6 3 7 4
613,0,2,8 10,,2 5 9 6 3 7 4 1
614,0,1,8,10,2 5 9 6 3 7 4 1
615,2,1,8,10 2,5 9 6 3 7 4 1
616,0,2,,10 2,8 5 9 6 3 7 4 1
617,1,0,2,10,8 5 9 6 3 7 4 1
618,1,2,2,,8 5 9 6 3 7 4 1 10
619,0,2,,,8 5 9 6 3 7 4 1 10 2
620,0,1,5,,8 9 6 3 7 4 1 10 2
621,2,1,5,8,9 6 3 7 4 1 10 2
622,2,0,5 8,9,6 3 7 4 1 10 2
623,1,0,5 8 9,6,3 7 4 1 10 2
624,1,2,5 8 9,,6 3 7 4 1 10 2
625,0,2,5 8,,6 3 7 4 1 10 2 9
626,0,1,5,8,6 3 7 4 1 10 2 9
627,2,1,5,8 6,3 7 4 1 10 2 9
628,0,2,,8 6,5 3 7 4 1 10 2 9
629,1,0,6,8,5 3 7 4 1 10 2 9
630,1,2,6,,5 3 7 4 1 10 2 9 8
631,0,2,,,5 3 7 4 1 10 2 9 8 6
632,0,1,3,,5 7 4 1 10 2 9 8 6
633,2,1,3,5,7 4 1 10 2 9 8 6
634,2,0,3 5,7,4 1 10 2 9 8 6
635,1,0,3 5 7,4,1 10 2 9 8 6
636,1,2,3 5 7,,4 1 10 2 9 8 6
637,0,2,3 5,,4 1 10 2 9 8 6 7
638,0,1,3,5,4 1 10 2 9 8 6 7
639,2,1,3,5 4,1 10 2 9 8 6 7
640,0,2,,5 4,3 1 10 2 9 8 6 7
641,1,0,4,5,3 1 10 2 9 8 6 7
642,1,2,4,,3 1 10 2 9 8 6 7 5
643,0,2,,,3 1 10 2 9 8 6 7 5 4
644,0,1,1,,3 10 2 9 8 6 7 5 4
645,2,1,1,3,10 2 9 8 6 7 5 4
646,2,0,1 3,10,2 9 8 6 7 5 4
647,1,0,1 3 10,2,9 8 6 7 5 4
648,1,2,1 3 10,,2 9 8 6 7 5 4
649,0,2,1 3,,2 9 8 6 7 5 4 10
650,0,1,1,3,2 9 8 6 7 5 4 10
651,2,1,1,3 2,9 8 6 7 5 4 10
652,0,2,,3 2,1 9 8 6 7 5 4 10
653,1,0,2,3,1 9 8 6 7 5 4 10
654,1,2,2,,1 9 8 6 7 5 4 10 3
655,0,2,,,1 9 8 6 7 5 4 10 3 2
656,0,1,9,,1 8 6 7 5 4 10 3 2
657,2,1,9,1,8 6 7 5 4 10 3 2
658,2,0,9 1,8,6 7 5 4 10 3 2
659,1,0,9 1 8,6,7 5 4 10 3 2
660,1,2,9 1 8,,6 7 5 4 10 3 2
661,0,2,9 1,,6 7 5 4 10 3 2 8
662,0,1,9,1,6 7 5 4 10 3 2 8
663,2,1,9,1 6,7 5 4 10 3 2 8
664,0,2,,1 6,9 7 5 4 10 3 2 8
665,1,0,6,1,9 7 5 4 10 3 2 8
666,1,2,6,,9 7 5 4 10 3 2 8 1
667,0,2,,,9 7 5 4 10 3 2 8 1 6
668,0,1,7,,9 5 4 10 3 2 8 1 6
669,2,1,7,9,5 4 10 3 2 8 1 6
670,2,0,7 9,5,4 10 3 2 8 1 6
671,1,0,7 9 5,4,10 3 2 8 1 6
672,1,2,7 9 5,,4 10 3 2 8 1 6
673,0,2,7 9,,4 10 3 2 8 1 6 5
674,0,1,7,9,4 10 3 2 8 1 6 5
675,2,1,7,9 4,10 3 2 8 1 6 5
676,0,2,,9 4,7 10 3 2 8 1 6 5
677,1,0,4,9,7 10 3 2 8 1 6 5
678,1,2,4,,7 10 3 2 8 1 6 5 9
679,0,2,,,7 10 3 2 8 1 6 5 9 4
680,0,1,10,,7 3 2 8 1 6 5 9 4
681,2,1,10,7,3 2 8 1 6 5 9 4
682,2,0,10 7,3,2 8 1 6 5 9 4
683,1,0,10 7 3,2,8 1 6 5 9 4
684,1,2,10 7 3,,2 8 1 6 5 9 4
685,0,2,10 7,,2 8 1 6 5 9 4 3
686,0,1,10,7,2 8 1 6 5 9 4 3
687,2,1,10,7 2,8 1 6 5 9 4 3
688,0,2,,7 2,10 8 1 6 5 9 4 3
689,1,0,2,7,10 8 1 6 5 9 4 3
690,1,2,2,,10 8 1 6 5 9 4 3 7
691,0,2,,,10 8 1 6 5 9 4 3 7 2
692,0,1,8,,10 1 6 5 9 4 3 7 2
693,2,1,8,10,1 6 5 9 4 3 7 2
694,2,0,8 10,1,6 5 9 4 3 7 2
695,1,0,8 10 1,6,5 9 4 3 7 2
696,1,2,8 10 1,,6 5 9 4 3 7 2
697,0,2,8 10,,6 5 9 4 3 7 2 1
698,0,1,8,10,6 5 9 4 3 7 2 1
699,2,1,8,10 6,5 9 4 3 7 2 1
700,0,2,,10 6,8 5 9 4 3 7 2 1
701,1,0,6,10,8 5 9 4 3 7 2 1
702,1,2,6,,8 5 9 4 3 7 2 1 10
703,0,2,,,8 5 9 4 3 7 2 1 10 6
704,0,1,5,,8 9 4 3 7 2 1 10 6
705,2,1,5,8,9 4 3 7 2 1 10 6
706,2,0,5 8,9,4 3 7 2 1 10 6
707,1,0,5 8 9,4,3 7 2 1 10 6
708,1,2,5 8 9,,4 3 7 2 1 10 6
709,0,2,5 8,,4 3 7 2 1 10 6 9
710,0,1,5,8,4 3 7 2 1 10 6 9
711,2,1,5,8 4,3 7 2 1 10 6 9
712,0,2,,8 4,5 3 7 2 1 10 6 9
713,1,0,4,8,5 3 7 2 1 10 6 9
714,1,2,4,,5 3 7 2 1 10 6 9 8
715,0,2,,,5 3 7 2 1 10 6 9 8 4
716,0,1,3,,5 7 2 1 10 6 9 8 4
717,2,1,3,5,7 2 1 10 6 9 8 4
718,2,0,3 5,7,2 1 10 6 9 8 4
719,1,0,3 5 7,2,1 10 6 9 8 4
720,1,2,3 5 7,,2 1 10 6 9 8 4
721,0,2,3 5,,2 1 10 6 9 8 4 7
722,0,1,3,5,2 1 10 6 9 8 4 7
723,2,1,3,5 2,1 10 6 9 8 4 7
724,0,2,,5 2,3 1 10 6 9 8 4 7
725,1,0,2,5,3 1 10 6 9 8 4 7
726,1,2,2,,3 1 10 6 9 8 4 7 5
727,0,2,,,3 1 10 6 9 8 4 7 5 2
728,0,1,1,,3 10 6 9 8 4 7 5 2
729,2,1,1,3,10 6 9 8 4 7 5 2
730,2,0,1 3,10,6 9 8 4 7 5 2
731,1,0,1 3 10,6,9 8 4 7 5 2
732,1,2,1 3 10,,6 9 8 4 7 5 2
733,0,2,1 3,,6 9 8 4 7 5 2 10
734,0,1,1,3,6 9 8 4 7 5 2 10
735,2,1,1,3 6,9 8 4 7 5 2 10
736,0,2,,3 6,1 9 8 4 7 5 2 10
737,1,0,6,3,1 9 8 4 7 5 2 10
738,2,0,6 1,3,9 8 4 7 5 2 10
739,1,2,6 1,,3 9 8 4 7 5 2 10
740,0,2,6,,3 9 8 4 7 5 2 10 1
741,1,0,6 3,9,8 4 7 5 2 10 1
742,1,2,6 3,,9 8 4 7 5 2 10 1
743,0,2,6,,9 8 4 7 5 2 10 1 3
744,0,1,6,9,8 4 7 5 2 10 1 3
745,2,1,6,9 8,4 7 5 2 10 1 3
746,0,2,,9 8,6 4 7 5 2 10 1 3
747,1,0,8,9,6 4 7 5 2 10 1 3
748,2,0,8 6,9,4 7 5 2 10 1 3
749,1,2,8 6,,9 4 7 5 2 10 1 3
750,0,2,8,,9 4 7 5 2 10 1 3 6
751,1,0,8 9,4,7 5 2 10 1 3 6
752,2,0,8 9 7,4,5 2 10 1 3 6
753,1,2,8 9 7,,4 5 2 10 1 3 6
754,0,2,8 9,,4 5 2 10 1 3 6 7
755,0,1,8,9,4 5 2 10 1 3 6 7
756,2,1,8,9 4,5 2 10 1 3 6 7
757,0,2,,9 4,8 5 2 10 1 3 6 7
758,1,0,4,9,8 5 2 10 1 3 6 7
759,1,2,4,,8 5 2 10 1 3 6 7 9
760,0,2,,,8 5 2 10 1 3 6 7 9 4
761,0,1,5,,8 2 10 1 3 6 7 9 4
762,2,1,5,8,2 10 1 3 6 7 9 4
763,2,0,5 8,2,10 1 3 6 7 9 4
764,1,0,5 8 2,10,1 3 6 7 9 4
765,1,2,5 8 2,,10 1 3 6 7 9 4
766,0,2,5 8,,10 1 3 6 7 9 4 2
767,0,1,5,8,10 1 3 6 7 9 4 2
768,2,1,5,8 10,1 3 6 7 9 4 2
769,0,2,,8 10,5 1 3 6 7 9 4 2
770,1,0,10,8,5 1 3 6 7 9 4 2
771,2,0,10 5,8,1 3 6 7 9 4 2
772,1,2,10 5,,8 1 3 6 7 9 4 2
773,0,2,10,,8 1 3 6 7 9 4 2 5
774,1,0,10 8,1,3 6 7 9 4 2 5
775,2,0,10 8 3,1,6 7 9 4 2 5
776,1,2,10 8 3,,1 6 7 9 4 2 5
777,0,2,10 8,,1 6 7 9 4 2 5 3
778,0,1,10,8,1 6 7 9 4 2 5 3
779,2,1,10,8 1,6 7 9 4 2 5 3
780,0,2,,8 1,10 6 7 9 4 2 5 3
781,1,0,1,8,10 6 7 9 4 2 5 3
782,1,2,1,,10 6 7 9 4 2 5 3 8
783,0,2,,,10 6 7 9 4 2 5 3 8 1
784,0,1,6,,10 7 9 4 2 5 3 8 1
785,2,1,6,10,7 9 4 2 5 3 8 1
786,2,0,6 10,7,9 4 2 5 3 8 1
787,1,0,6 10 7,9,4 2 5 3 8 1
788,1,2,6 10 7,,9 4 2 5 3 8 1
789,0,2,6 10,,9 4 2 5 3 8 1 7
790,0,1,6,10,9 4 2 5 3 8 1 7
791,2,1,6,10 9,4 2 5 3 8 1 7
792,0,2,,10 9,6 4 2 5 3 8 1 7
793,1,0,9,10,6 4 2 5 3 8 1 7
794,2,0,9 6,10,4 2 5 3 8 1 7
795,1,2,9 6,,10 4 2 5 3 8 1 7
796,0,2,9,,10 4 2 5 3 8 1 7 6
797,1,0,9 10,4,2 5 3 8 1 7 6
798,2,0,9 10 2,4,5 3 8 1 7 6
799,1,2,9 10 2,,4 5 3 8 1 7 6
800,0,2,9 10,,4 5 3 8 1 7 6 2
801,0,1,9,10,4 5 3 8 1 7 6 2
802,2,1,9,10 4,5 3 8 1 7 6 2
803,0,2,,10 4,9 5 3 8 1 7 6 2
804,1,0,4,10,9 5 3 8 1 7 6 2
805,1,2,4,,9 5 3 8 1 7 6 2 10
806,0,2,,,9 5 3 8 1 7 6 2 10 4
807,0,1,5,,9 3 8 1 7 6 2 10 4
808,2,1,5,9,3 8 1 7 6 2 10 4
809,2,0,5 9,3,8 1 7 6 2 10 4
810,1,0,5 9 3,8,1 7 6 2 10 4
811,1,2,5 9 3,,8 1 7 6 2 10 4
812,0,2,5 9,,8 1 7 6 2 10 4 3
813,0,1,5,9,8 1 7 6 2 10 4 3
814,2,1,5,9 8,1 7 6 2 10 4 3
815,0,2,,9 8,5 1 7 6 2 10 4 3
816,1,0,8,9,5 1 7 6 2 10 4 3
817,2,0,8 5,9,1 7 6 2 10 4 3
818,1,2,8 5,,9 1 7 6 2 10 4 3
819,0,2,8,,9 1 7 6 2 10 4 3 5
820,1,0,8 9,1,7 6 2 10 4 3 5
821,2,0,8 9 7,1,6 2 10 4 3 5
822,1,2,8 9 7,,1 6 2 10 4 3 5
823,0,2,8 9,,1 6 2 10 4 3 5 7
824,0,1,8,9,1 6 2 10 4 3 5 7
825,2,1,8,9 1,6 2 10 4 3 5 7
826,0,2,,9 1,8 6 2 10 4 3 5 7
827,1,0,1,9,8 6 2 10 4 3 5 7
828,1,2,1,,8 6 2 10 4 3 5 7 9
829,0,2,,,8 6 2 10 4 3 5 7 9 1
830,0,1,6,,8 2 10 4 3 5 7 9 1
831,2,1,6,8,2 10 4 3 5 7 9 1
832,2,0,6 8,2,10 4 3 5 7 9 1
833,1,0,6 8 2,10,4 3 5 7 9 1
834,1,2,6 8 2,,10 4 3 5 7 9 1
835,0,2,6 8,,10 4 3 5 7 9 1 2
836,0,1,6,8,10 4 3 5 7 9 1 2
837,2,1,6,8 10,4 3 5 7 9 1 2
838,0,2,,8 10,6 4 3 5 7 9 1 2
839,1,0,10,8,6 4 3 5 7 9 1 2
840,2,0,10 6,8,4 3 5 7 9 1 2
841,1,2,10 6,,8 4 3 5 7 9 1 2
842,0,2,10,,8 4 3 5 7 9 1 2 6
843,1,0,10 8,4,3 5 7 9 1 2 6
844,2,0,10 8 3,4,5 7 9 1 2 6
845,1,2,10 8 3,,4 5 7 9 1 2 6
846,0,2,10 8,,4 5 7 9 1 2 6 3
847,0,1,10,8,4 5 7 9 1 2 6 3
848,2,1,10,8 4,5 7 9 1 2 6 3
849,0,2,,8 4,10 5 7 9 1 2 6 3
850,1,0,4,8,10 5 7 9 1 2 6 3
851,1,2,4,,10 5 7 9 1 2 6 3 8
852,0,2,,,10 5 7 9 1 2 6 3 8 4
853,0,1,5,,10 7 9 1 2 6 3 8 4
854,2,1,5,10,7 9 1 2 6 3 8 4
855,2,0,5 10,7,9 1 2 6 3 8 4
856,1,0,5 10 7,9,1 2 6 3 8 4
857,1,2,5 10 7,,9 1 2 6 3 8 4
858,0,2,5 10,,9 1 2 6 3 8 4 7
859,0,1,5,10,9 1 2 6 3 8 4 7
860,2,1,5,10 9,1 2 6 3 8 4 7
861,0,2,,10 9,5 1 2 6 3 8 4 7
862,1,0,9,10,5 1 2 6 3 8 4 7
863,2,0,9 5,10,1 2 6 3 8 4 7
864,1,2,9 5,,10 1 2 6 3 8 4 7
865,0,2,9,,10 1 2 6 3 8 4 7 5
866,1,0,9 10,1,2 6 3 8 4 7 5
867,2,0,9 10 2,1,6 3 8 4 7 5
868,1,2,9 10 2,,1 6 3 8 4 7 5
869,0,2,9 10,,1 6 3 8 4 7 5 2
870,0,1,9,10,1 6 3 8 4 7 5 2
871,2,1,9,10 1,6 3 8 4 7 5 2
872,0,2,,10 1,9 6 3 8 4 7 5 2
873,1,0,1,10,9 6 3 8 4 7 5 2
874,1,2,1,,9 6 3 8 4 7 5 2 10
875,0,2,,,9 6 3 8 4 7 5 2 10 1
876,0,1,6,,9 3 8 4 7 5 2 10 1
877,2,1,6,9,3 8 4 7 5 2 10 1
878,2,0,6 9,3,8 4 7 5 2 10 1
879,1,0,6 9 3,8,4 7 5 2 10 1
880,1,2,6 9 3,,8 4 7 5 2 10 1
881,0,2,6 9,,8 4 7 5 2 10 1 3
882,0,1,6,9,8 4 7 5 2 10 1 3
883,2,1,6,9 8,4 7 5 2 10 1 3
884,0,2,,9 8,6 4 7 5 2 10 1 3
885,1,0,8,9,6 4 7 5 2 10 1 3
886,2,0,8 6,9,4 7 5 2 10 1 3
887,1,2,8 6,,9 4 7 5 2 10 1 3
888,0,2,8,,9 4 7 5 2 10 1 3 6
889,1,0,8 9,4,7 5 2 10 1 3 6
890,2,0,8 9 7,4,5 2 10 1 3 6
891,1,2,8 9 7,,4 5 2 10 1 3 6
892,0,2,8 9,,4 5 2 10 1 3 6 7
893,0,1,8,9,4 5 2 10 1 3 6 7
894,2,1,8,9 4,5 2 10 1 3 6 7
895,0,2,,9 4,8 5 2 10 1 3 6 7
896,1,0,4,9,8 5 2 10 1 3 6 7
897,1,2,4,,8 5 2 10 1 3 6 7 9
898,0,2,,,8 5 2 10 1 3 6 7 9 4
899,0,1,5,,8 2 10 1 3 6 7 9 4
900,2,1,5,8,2 10 1 3 6 7 9 4
901,2,0,5 8,2,10 1 3 6 7 9 4
902,1,0,5 8 2,10,1 3 6 7 9 4
903,1,2,5 8 2,,10 1 3 6 7 9 4
904,0,2,5 8,,10 1 3 6 7 9 4 2
905,0,1,5,8,10 1 3 6 7 9 4 2
906,2,1,5,8 10,1 3 6 7 9 4 2
907,0,2,,8 10,5 1 3 6 7 9 4 2
908,1,0,10,8,5 1 3 6 7 9 4 2
909,2,0,10 5,8,1 3 6 7 9 4 2
910,1,2,10 5,,8 1 3 6 7 9 4 2
911,0,2,10,,8 1 3 6 7 9 4 2 5
912,1,0,10 8,1,3 6 7 9 4 2 5
913,2,0,10 8 3,1,6 7 9 4 2 5
914,1,2,10 8 3,,1 6 7 9 4 2 5
915,0,2,10 8,,1 6 7 9 4 2 5 3
916,0,1,10,8,1 6 7 9 4 2 5 3
917,2,1,10,8 1,6 7 9 4 2 5 3
918,0,2,,8 1,10 6 7 9 4 2 5 3
919,1,0,1,8,10 6 7 9 4 2 5 3
920,1,2,1,,10 6 7 9 4 2 5 3 8
921,0,2,,,10 6 7 9 4 2 5 3 8 1
922,0,1,6,,10 7 9 4 2 5 3 8 1
923,2,1,6,10,7 9 4 2 5 3 8 1
924,2,0,6 10,7,9 4 2 5 3 8 1
925,1,0,6 10 7,9,4 2 5 3 8 1
926,1,2,6 10 7,,9 4 2 5 3 8 1
927,0,2,6 10,,9 4 2 5 3 8 1 7
928,0,1,6,10,9 4 2 5 3 8 1 7
929,2,1,6,10 9,4 2 5 3 8 1 7
930,0,2,,10 9,6 4 2 5 3 8 1 7
931,1,0,9,10,6 4 2 5 3 8 1 7
932,2,0,9 6,10,4 2 5 3 8 1 7
933,1,2,9 6,,10 4 2 5 3 8 1 7
934,0,2,9,,10 4 2 5 3 8 1 7 6
935,1,0,9 10,4,2 5 3 8 1 7 6
936,2,0,9 10 2,4,5 3 8 1 7 6
937,1,2,9 10 2,,4 5 3 8 1 7 6
938,0,2,9 10,,4 5 3 8 1 7 6 2
939,0,1,9,10,4 5 3 8 1 7 6 2
940,2,1,9,10 4,5 3 8 1 7 6 2
941,0,2,,10 4,9 5 3 8 1 7 6 2
942,1,0,4,10,9 5 3 8 1 7 6 2
943,1,2,4,,9 5 3 8 1 7 6 2 10
944,0,2,,,9 5 3 8 1 7 6 2 10 4
945,0,1,5,,9 3 8 1 7 6 2 10 4
946,2,1,5,9,3 8 1 7 6 2 10 4
947,2,0,5 9,3,8 1 7 6 2 10 4
948,1,0,5 9 3,8,1 7 6 2 10 4
949,1,2,5 9 3,,8 1 7 6 2 10 4
950,0,2,5 9,,8 1 7 6 2 10 4 3
951,0,1,5,9,8 1 7 6 2 10 4 3
952,2,1,5,9 8,1 7 6 2 10 4 3
953,0,2,,9 8,5 1 7 6 2 10 4 3
954,1,0,8,9,5 1 7 6 2 10 4 3
955,2,0,8 5,9,1 7 6 2 10 4 3
956,1,2,8 5,,9 1 7 6 2 10 4 3
957,0,2,8,,9 1 7 6 2 10 4 3 5
958,1,0,8 9,1,7 6 2 10 4 3 5
959,2,0,8 9 7,1,6 2 10 4 3 5
960,1,2,8 9 7,,1 6 2 10 4 3 5
961,0,2,8 9,,1 6 2 10 4 3 5 7
962,0,1,8,9,1 6 2 10 4 3 5 7
963,2,1,8,9 1,6 2 10 4 3 5 7
964,0,2,,9 1,8 6 2 10 4 3 5 7
965,1,0,1,9,8 6 2 10 4 3 5 7
966,1,2,1,,8 6 2 10 4 3 5 7 9
967,0,2,,,8 6 2 10 4 3 5 7 9 1
968,0,1,6,,8 2 10 4 3 5 7 9 1
969,2,1,6,8,2 10 4 3 5 7 9 1
970,2,0,6 8,2,10 4 3 5 7 9 1
971,1,0,6 8 2,10,4 3 5 7 9 1
972,1,2,6 8 2,,10 4 3 5 7 9 1
973,0,2,6 8,,10 4 3 5 7 9 1 2
974,0,1,6,8,10 4 3 5 7 9 1 2
975,2,1,6,8 10,4 3 5 7 9 1 2
976,0,2,,8 10,6 4 3 5 7 9 1 2
977,1,0,10,8,6 4 3 5 7 9 1 2
978,2,0,10 6,8,4 3 5 7 9 1 2
979,1,2,10 6,,8 4 3 5 7 9 1 2
980,0,2,10,,8 4 3 5 7 9 1 2 6
981,1,0,10 8,4,3 5 7 9 1 2 6
982,2,0,10 8 3,4,5 7 9 1 2 6
983,1,2,10 8 3,,4 5 7 9 1 2 6
984,0,2,10 8,,4 5 7 9 1 2 6 3
985,0,1,10,8,4 5 7 9 1 2 6 3
986,2,1,10,8 4,5 7 9 1 2 6 3
987,0,2,,8 4,10 5 7 9 1 2 6 3
988,1,0,4,8,10 5 7 9 1 2 6 3
989,1,2,4,,10 5 7 9 1 2 6 3 8
990,0,2,,,10 5 7 9 1 2 6 3 8 4
991,0,1,5,,10 7 9 1 2 6 3 8 4
992,2,1

