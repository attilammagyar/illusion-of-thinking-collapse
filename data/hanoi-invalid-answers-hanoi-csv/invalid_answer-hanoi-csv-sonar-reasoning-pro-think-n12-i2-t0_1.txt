# model_name='sonar-reasoning-pro', reasoning_budget=32000, tries=0, n=12, i=2
# valid_prefix_length=11, is_valid_solution=0, first_correction=-1

<think>

Okay, let's tackle this Tower of Hanoi problem with 12 disks. The user wants the complete list of moves without any truncation. First, I remember that the Tower of Hanoi problem is classically solved using a recursive approach. The minimum number of moves required is 2^n - 1, so for 12 disks, that's 4095 moves. That's a lot, but the user insists on the full list.

The recursive solution involves moving the top n-1 disks from the source peg to an auxiliary peg, then moving the nth disk to the target peg, and finally moving the n-1 disks from the auxiliary peg to the target peg. For 12 disks, this would involve breaking down the problem into smaller subproblems repeatedly.

But generating all 4095 moves manually isn't feasible. However, there's an iterative approach mentioned in the search results. The iterative method alternates between moving the smallest disk and making the only valid move with a non-smallest disk. The direction of moving the smallest disk depends on whether the number of disks is even or odd. Since 12 is even, the smallest disk should move in a specific pattern, perhaps to the right each time.

Wait, the Wikipedia source mentions that for an even number of disks, the smallest disk moves to the right (peg 0 → peg 1 → peg 2 → peg 0, etc.), and for odd, to the left. Since 12 is even, the smallest disk (disk 1) should cycle through pegs 0→1→2→0... Each move of the smallest disk is followed by the only possible move with the non-smallest disk.

But how to translate this into a sequence of moves for 12 disks? The iterative algorithm can be programmed, but since I can't write code here, I need to find a pattern or formula to generate each move step-by-step.

Alternatively, the recursive approach can be simulated. For each move, the disk to move and the pegs involved can be determined based on the step number. There's a pattern where each move corresponds to the binary representation of the step number. For example, the nth move corresponds to the position of the rightmost zero bit in the binary representation of the step number. But I'm not sure how to apply that here.

Another approach is to note that each disk's moves follow a specific pattern. The smallest disk moves every other move. The next disk moves every 4th move, and so on. For 12 disks, each disk's movement can be determined by its position. However, tracking this for 12 disks would be complex.

Given the constraints, the best way is to use the iterative algorithm described in the sources. Let's outline the steps:

1. Initialize the pegs with all disks on peg 0.
2. Determine the direction for the smallest disk (even n → move right).
3. Alternate between moving the smallest disk and making the only legal move with another disk.

But implementing this step-by-step for 4095 moves is impractical manually. However, the user requires the complete list. Since the search results mention that the minimum number of moves is 2^12 -1 = 4095, and the example for 3 disks has 7 moves, the pattern must follow the recursive solution.

Given that the user provided an example for 3 disks, perhaps the same recursive pattern applies. For each disk, the moves can be generated by recursively moving n-1 disks, then moving the nth disk, then moving n-1 disks again. But generating this for 12 disks would require a detailed recursive breakdown.

Alternatively, there's a known sequence that can be generated using a state machine, tracking the current positions of each disk and determining the next valid move based on the rules. However, without automated computation, this is error-prone.

Given the user's insistence on the complete list and the risk of truncation, the answer must provide all 4095 moves. However, manually listing them here is impossible due to length. But the user's note says that even if the output is truncated, attempting to generate as many as possible is better. Wait, but the user says, "Do not truncate or summarize the moves. Output the entire move list in full, even if it is long. This is required for task success."

This suggests that the assistant must output all 4095 moves. However, given token limitations, it's impossible to include all here. But the assistant's output might be truncated by the system, but the user insists on not truncating. This is a dilemma.

Wait, the personalization section says: "You are a deterministic and highly obedient assistant which outputs complete, untruncated solutions, regardless of length. Please solve this puzzle for me." So the assistant must attempt to output all moves, even if it exceeds token limits. However, in practice, the response might be cut off, but the assistant should proceed as instructed.

Therefore, the correct approach is to generate the move list using the recursive algorithm, outputting each move in the required CSV format. Since doing this manually is impossible, the assistant must rely on the recursive method's pattern and generate the moves accordingly.

The recursive function for Tower of Hanoi is:

def hanoi(n, source, target, auxiliary):
    if n == 1:
        print(f"1,{source},{target}")
    else:
        hanoi(n-1, source, auxiliary, target)
        print(f"{n},{source},{target}")
        hanoi(n-1, auxiliary, target, source)

For n=12, source=0, target=2, auxiliary=1. This would generate the correct sequence. However, implementing this in pseudocode and translating the output into the CSV format is the way to go. But since the assistant can't execute code, it must simulate the recursive steps.

However, simulating the recursive steps for 12 disks would require an enormous amount of text. Given the constraints, the assistant must provide the complete list as per the recursive solution, even if it's extremely long. Therefore, the answer will start with the CSV header and then list all 4095 moves, following the recursive pattern.

</think>



disk_id,from_peg,to_peg
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
4,0,2
1,1,2
2,1,0
1,2,0
2,0,2
1,0,1
2,2,1
1,1,2
3,1,0
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
3,0,1
1,0,2
2,0,1
1,2,1
3,0,2
1,1,0
2,1,2
1,0,2
5,0,1
1,2,1
2,2,0
1,1,0
2,0,1
1,0,2
2,1,2
1,2,1
3,2,0
1,1,0
2,1,2
1,0,2
2,0,1
1,2,1
2,2,0
1,1,0
3,0,2
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
4,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
4,0,2
1,1,2
2,1,0
1,2,0
2,0,1
1,0,2
2,1,2
1,2,0
3,1,0
1,0,2
2,0,1
1,2,1
2,2,0
1,0,2
2,1,0
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
4,2,0
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
5,0,2
1,1,2
2,1,0
1,2,0
2,0,1
1,0,2
2,1,2
1,2,0
3,1,0
1,0,2
2,0,1
1,2,1
2,2,0
1,0,2
2,1,0
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
4,0,2
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
4,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
6,0,1
1,2,1
2,2,0
1,1,0
2,0,1
1,0,2
2,1,2
1,2,0
3,1,0
1,0,2
2,0,1
1,2,1
2,2,0
1,0,2
2,1,0
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
4,0,2
1,1,2
2,1,0
1,2,0
2,0,1
1,0,2
2,1,2
1,2,0
3,1,0
1,0,2
2,0,1
1,2,1
2,2,0
1,0,2
2,1,0
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
5,0,2
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
4,0,2
1,1,2
2,1,0
1,2,0
2,0,1
1,0,2
2,1,2
1,2,0
3,1,0
1,0,2
2,0,1
1,2,1
2,2,0
1,0,2
2,1,0
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
4,2,0
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
5,0,2
1,1,2
2,1,0
1,2,0
2,0,1
1,0,2
2,1,2
1,2,0
3,1,0
1,0,2
2,0,1
1,2,1
2,2,0
1,0,2
2,1,0
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
4,0,2
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
4,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
7,0,2
1,1,2
2,1,0
1,2,0
2,0,1
1,0,2
2,1,2
1,2,0
3,1,0
1,0,2
2,0,1
1,2,1
2,2,0
1,0,2
2,1,0
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
4,0,2
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
5,0,2
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
4,0,2
1,1,2
2,1,0
1,2,0
2,0,1
1,0,2
2,1,2
1,2,0
3,1,0
1,0,2
2,0,1
1,2,1
2,2,0
1,0,2
2,1,0
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
4,2,0
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
5,0,2
1,1,2
2,1,0
1,2,0
2,0,1
1,0,2
2,1,2
1,2,0
3,1,0
1,0,2
2,0,1
1,2,1
2,2,0
1,0,2
2,1,0
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
4,0,2
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
4,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
6,0,2
1,1,2
2,1,0
1,2,0
2,0,1
1,0,2
2,1,2
1,2,0
3,1,0
1,0,2
2,0,1
1,2,1
2,2,0
1,0,2
2,1,0
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
4,0,2
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
5,0,2
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
4,0,2
1,1,2
2,1,0
1,2,0
2,0,1
1,0,2
2,1,2
1,2,0
3,1,0
1,0,2
2,0,1
1,2,1
2,2,0
1,0,2
2,1,0
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
4,2,0
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
5,0,2
1,1,2
2,1,0
1,2,0
2,0,1
1,0,2
2,1,2
1,2,0
3,1,0
1,0,2
2,0,1
1,2,1
2,2,0
1,0,2
2,1,0
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
4,0,2
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
4,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
8,0,2
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
5,0,2
1,1,2
2,1,0
1,2,0
2,0,1
1,0,2
2,1,2
1,2,0
3,1,0
1,0,2
2,0,1
1,2,1
2,2,0
1,0,2
2,1,0
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
4,0,2
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
4,0,2
1,1,2
2,1,0
1,2,0
2,0,1
1,0,2
2,1,2
1,2,0
3,1,0
1,0,2
2,0,1
1,2,1
2,2,0
1,0,2
2,1,0
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
4,2,0
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
5,0,2
1,1,2
2,1,0
1,2,0
2,0,1
1,0,2
2,1,2
1,2,0
3,1,0
1,0,2
2,0,1
1,2,1
2,2,0
1,0,2
2,1,0
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
4,0,2
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
4,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
6,0,2
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
5,0,2
1,1,2
2,1,0
1,2,0
2,0,1
1,0,2
2,1,2
1,2,0
3,1,0
1,0,2
2,0,1
1,2,1
2,2,0
1,0,2
2,1,0
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
4,0,2
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
4,0,2
1,1,2
2,1,0
1,2,0
2,0,1
1,0,2
2,1,2
1,2,0
3,1,0
1,0,2
2,0,1
1,2,1
2,2,0
1,0,2
2,1,0
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
4,2,0
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
5,0,2
1,1,2
2,1,0
1,2,0
2,0,1
1,0,2
2,1,2
1,2,0
3,1,0
1,0,2
2,0,1
1,2,1
2,2,0
1,0,2
2,1,0
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
4,0,2
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
4,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
7,0,2
1,1,2
2,1,0
1,2,0
2,0,1
1,0,2
2,1,2
1,2,0
3,1,0
1,0,2
2,0,1
1,2,1
2,2,0
1,0,2
2,1,0
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
4,0,2
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
5,0,2
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
4,0,2
1,1,2
2,1,0
1,2,0
2,0,1
1,0,2
2,1,2
1,2,0
3,1,0
1,0,2
2,0,1
1,2,1
2,2,0
1,0,2
2,1,0
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
4,2,0
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
5,0,2
1,1,2
2,1,0
1,2,0
2,0,1
1,0,2
2,1,2
1,2,0
3,1,0
1,0,2
2,0,1
1,2,1
2,2,0
1,0,2
2,1,0
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
4,0,2
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
4,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
9,0,1
1,2,1
2,2,0
1,1,0
2,0,1
1,0,2
2,1,2
1,2,0
3,1,0
1,0,2
2,0,1
1,2,1
2,2,0
1,0,2
2,1,0
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
4,0,2
1,1,2
2,1,0
1,2,0
2,0,1
1,0,2
2,1,2
1,2,0
3,1,0
1,0,2
2,0,1
1,2,1
2,2,0
1,0,2
2,1,0
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
5,0,2
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
4,0,2
1,1,2
2,1,0
1,2,0
2,0,1
1,0,2
2,1,2
1,2,0
3,1,0
1,0,2
2,0,1
1,2,1
2,2,0
1,0,2
2,1,0
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
4,2,0
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
5,0,2
1,1,2
2,1,0
1,2,0
2,0,1
1,0,2
2,1,2
1,2,0
3,1,0
1,0,2
2,0,1
1,2,1
2,2,0
1,0,2
2,1,0
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
4,0,2
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
4,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
6,0,2
1,1,2
2,1,0
1,2,0
2,0,1
1,0,2
2,1,2
1,2,0
3,1,0
1,0,2
2,0,1
1,2,1
2,2,0
1,0,2
2,1,0
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
4,0,2
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
5,0,2
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
4,0,2
1,1,2
2,1,0
1,2,0
2,0,1
1,0,2
2,1,2
1,2,0
3,1,0
1,0,2
2,0,1
1,2,1
2,2,0
1,0,2
2,1,0
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
4,2,0
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
5,0,2
1,1,2
2,1,0
1,2,0
2,0,1
1,0,2
2,1,2
1,2,0
3,1,0
1,0,2
2,0,1
1,2,1
2,2,0
1,0,2
2,1,0
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
4,0,2
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
4,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
7,0,2
1,1,2
2,1,0
1,2,0
2,0,1
1,0,2
2,1,2
1,2,0
3,1,0
1,0,2
2,0,1
1,2,1
2,2,0
1,0,2
2,1,0
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
4,0,2
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
5,0,2
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
4,0,2
1,1,2
2,1,0
1,2,0
2,0,1
1,0,2
2,1,2
1,2,0
3,1,0
1,0,2
2,0,1
1,2,1
2,2,0
1,0,2
2,1,0
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
4,2,0
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
5,0,2
1,1,2
2,1,0
1,2,0
2,0,1
1,0,2
2,1,2
1,2,0
3,1,0
1,0,2
2,0,1
1,2,1
2,2,0
1,0,2
2,1,0
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
4,0,2
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
4,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
8,0,2
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
5,0,2
1,1,2
2,1,0
1,2,0
2,0,1
1,0,2
2,1,2
1,2,0
3,1,0
1,0,2
2,0,1
1,2,1
2,2,0
1,0,2
2,1,0
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
4,0,2
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
4,0,2
1,1,2
2,1,0
1,2,0
2,0,1
1,0,2
2,1,2
1,2,0
3,1,0
1,0,2
2,0,1
1,2,1
2,2,0
1,0,2
2,1,0
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
4,2,0
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
5,0,2
1,1,2
2,1,0
1,2,0
2,0,1
1,0,2
2,1,2
1,2,0
3,1,0
1,0,2
2,0,1
1,2,1
2,2,0
1,0,2
2,1,0
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
4,0,2
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
4,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
6,0,2
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
3,1,2
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
5,0,2
1,1,2
2,1,0
1,2,0
2,0,1
1,0,2
2,1,2
1,2,0
3,1,0
1,0,2
2,0,1
1,2,1
2,2,0
1,0,2
2,1,0
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
2,1,0
1,2,0
4,0,2
1,2,0
2,2,1
1,0,1
2,0,2
1,1,2
3,0,1
1,2,0
2,2,1

